--- /dev/null
+++ b/.github/helper/documentation.py
@@ -0,0 +1,40 @@
+import requests
+import sys
+from urllib.parse import urlparse
+
+def uri_validator(x):
+	result = urlparse(x)
+	return all([result.scheme, result.netloc, result.path])
+
+def docs_link_exists(body):
+	for line in body.splitlines():
+		for word in line.split():
+			if word.startswith("http") and uri_validator(word):
+				parsed_url = urlparse(word)
+				if parsed_url.netloc == "frappehealth.com" and parsed_url.path.startswith("/docs"):
+					return True
+
+if __name__ == "__main__":
+	pr = sys.argv[1]
+	response = requests.get("https://api.github.com/repos/frappe/health/pulls/{}".format(pr))
+
+	if response.ok:
+		payload = response.json()
+		title = (payload.get("title") or "").lower().strip()
+		head_sha = (payload.get("head") or {}).get("sha")
+		body = (payload.get("body") or "").lower()
+
+		if (title.startswith("feat")
+			and head_sha
+			and "no-docs" not in body
+			and "backport" not in body
+		):
+			if docs_link_exists(body):
+				print("Documentation Link Found. You're Awesome! üéâ")
+
+			else:
+				print("Documentation Link Not Found! ‚ö†Ô∏è")
+				sys.exit(1)
+
+		else:
+			print("Skipping documentation checks... üèÉ")
--- /dev/null
+++ b/.github/helper/site_config.json
@@ -0,0 +1,16 @@
+{
+ "db_host": "127.0.0.1",
+ "db_port": 3306,
+ "db_name": "test_frappe",
+ "db_password": "test_frappe",
+ "auto_email_id": "test@example.com",
+ "mail_server": "smtp.example.com",
+ "mail_login": "test@example.com",
+ "mail_password": "test",
+ "admin_password": "admin",
+ "root_login": "root",
+ "root_password": "root",
+ "host_name": "http://test_site:8000",
+ "install_apps": ["payments", "erpnext"],
+ "throttle_user_limit": 100
+}
--- /dev/null
+++ b/commitlint.config.js
@@ -0,0 +1,25 @@
+module.exports = {
+	parserPreset: 'conventional-changelog-conventionalcommits',
+	rules: {
+		'subject-empty': [2, 'never'],
+		'type-case': [2, 'always', 'lower-case'],
+		'type-empty': [2, 'never'],
+		'type-enum': [
+			2,
+			'always',
+			[
+				'build',
+				'chore',
+				'ci',
+				'docs',
+				'feat',
+				'fix',
+				'perf',
+				'refactor',
+				'revert',
+				'style',
+				'test',
+			],
+		],
+	},
+};
index e69de29..d5793af
--- a/healthcare/__init__.py
+++ b/healthcare/__init__.py
@@ -0,0 +1 @@
+__version__ = "15.0.0"
similarity index 100%
rename from www/__init__.py
rename to healthcare/config/__init__.py
--- /dev/null
+++ b/healthcare/config/desktop.py
@@ -0,0 +1,13 @@
+from frappe import _
+
+
+def get_data():
+	return [
+		{
+			"module_name": "Healthcare",
+			"color": "grey",
+			"icon": "octicon octicon-file-directory",
+			"type": "module",
+			"label": _("Healthcare"),
+		}
+	]
--- /dev/null
+++ b/healthcare/config/docs.py
@@ -0,0 +1,11 @@
+"""
+Configuration for docs
+"""
+
+# source_link = "https://github.com/[org_name]/healthcare"
+# headline = "App that does everything"
+# sub_heading = "Yes, you got that right the first time, everything"
+
+
+def get_context(context):
+	context.brand_html = "Healthcare"
--- /dev/null
+++ b/healthcare/controllers/queries.py
@@ -0,0 +1,35 @@
+import frappe
+
+
+@frappe.whitelist()
+@frappe.validate_and_sanitize_search_inputs
+def get_healthcare_service_units(doctype, txt, searchfield, start, page_len, filters):
+	table = frappe.qb.DocType("Healthcare Service Unit")
+	query = (
+		frappe.qb.from_(table)
+		.where(table.is_group == 0)
+		.where(table.company == filters.get("company"))
+		.where(table.name.like("%{0}%".format(txt)))
+		.select("name")
+		.get_sql()
+	)
+
+	if filters and filters.get("inpatient_record"):
+		from healthcare.healthcare.doctype.inpatient_medication_entry.inpatient_medication_entry import (
+			get_current_healthcare_service_unit,
+		)
+
+		service_unit = get_current_healthcare_service_unit(filters.get("inpatient_record"))
+
+		# if the patient is admitted, then appointments should be allowed against the admission service unit,
+		# inspite of it being an Inpatient Occupancy service unit
+		if service_unit:
+			query += " and (allow_appointments = 1 or name = {service_unit})".format(
+				service_unit=frappe.db.escape(service_unit)
+			)
+		else:
+			query += " and allow_appointments = 1"
+	else:
+		query += " and allow_appointments = 1"
+
+	return frappe.db.sql(query, filters)
--- /dev/null
+++ b/healthcare/controllers/service_request_controller.py
@@ -0,0 +1,57 @@
+from __future__ import unicode_literals
+
+import dateutil
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import getdate
+
+
+class ServiceRequestController(Document):
+	def validate(self):
+		self.set_patient_age()
+		self.set_order_details()
+		self.set_title()
+
+	def before_submit(self):
+		if self.doctype == "Service Request":
+			if self.status not in [
+				"active-Request Status",
+				"on-hold-Request Status",
+				"unknown-Request Status",
+			]:
+				self.status = "active-Request Status"
+		elif self.doctype == "Medication Request":
+			if self.status not in [
+				"active-Medication Request Status",
+				"on-hold-Medication Request Status",
+				"unknown-Medication Request Status",
+			]:
+				self.status = "active-Medication Request Status"
+
+	def before_cancel(self):
+		not_allowed = ["completed-Medication Request Status", "on-hold-Medication Request Status"]
+		if self.status in not_allowed:
+			frappe.throw(
+				_("You cannot Cancel Service Request in {} status").format(", ".join(not_allowed)),
+				title=_("Not Allowed"),
+			)
+
+	def on_cancel(self):
+		if self.doctype == "Service Request":
+			if self.status == "active-Request Status":
+				self.db_set("status", "revoked-Request Status")
+		elif self.doctype == "Medication Request":
+			if self.status == "active-Medication Request Status":
+				self.db_set("status", "cancelled-Medication Request Status")
+
+	def set_patient_age(self):
+		patient = frappe.get_doc("Patient", self.patient)
+		self.patient_age_data = patient.get_age()
+		self.patient_age = dateutil.relativedelta.relativedelta(getdate(), getdate(patient.dob))
+
+
+@frappe.whitelist()
+def set_request_status(doctype, request, status):
+	frappe.db.set_value(doctype, request, "status", status)
--- /dev/null
+++ b/healthcare/doctype/anti_cancer_drug__sheet/anti_cancer_drug__sheet.json
@@ -0,0 +1,92 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-07-02 05:04:59.830018",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "anti_cancer_drugs_section",
+  "drug",
+  "dose",
+  "cdose",
+  "day",
+  "date_time",
+  "column_break_gtut",
+  "route",
+  "dilute",
+  "volume",
+  "duration"
+ ],
+ "fields": [
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "fieldname": "drug",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Drug",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dose",
+   "fieldtype": "Data",
+   "label": "Dose"
+  },
+  {
+   "fieldname": "cdose",
+   "fieldtype": "Data",
+   "label": "C.Dose"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Data",
+   "label": "Route"
+  },
+  {
+   "fieldname": "dilute",
+   "fieldtype": "Data",
+   "label": "Dilute"
+  },
+  {
+   "fieldname": "volume",
+   "fieldtype": "Data",
+   "label": "Vol"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Data",
+   "hide_seconds": 1,
+   "label": "duration"
+  },
+  {
+   "fieldname": "day",
+   "fieldtype": "Data",
+   "label": "Day"
+  },
+  {
+   "fieldname": "date_time",
+   "fieldtype": "Datetime",
+   "label": "Date / Time"
+  },
+  {
+   "fieldname": "column_break_gtut",
+   "fieldtype": "Column Break"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2024-07-06 07:53:22.653563",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Anti Cancer Drug  Sheet",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/anti_cancer_drug__sheet/anti_cancer_drug__sheet.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class AntiCancerDrugSheet(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/chemo_order/chemo_order.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Order", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/chemo_order/chemo_order.json
@@ -0,0 +1,314 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{protocol_name}-{patient}-{DD}{MM}{YY}.{#####}",
+ "creation": "2024-07-02 05:15:21.509355",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "order_details",
+  "patient",
+  "healthcare_practitioner",
+  "visit_date",
+  "full_name",
+  "gender",
+  "birth_date",
+  "column_break_azjb",
+  "allergy",
+  "diagnosis",
+  "stage",
+  "column_break_cxji",
+  "weight",
+  "height",
+  "bsa",
+  "ecog_score",
+  "service_unit",
+  "order_details_section",
+  "protocol_name",
+  "column_break_aepk",
+  "cycle_no",
+  "cycle_no_written",
+  "previous_cycle_aes",
+  "column_break_ebvk",
+  "date",
+  "pre_medications_section",
+  "pre_meds",
+  "anti_cancer_drugs_section",
+  "patients_anti_cancer_drugs",
+  "section_break_taax",
+  "notes",
+  "refrence_info_section",
+  "inpatient_record",
+  "reference_name",
+  "column_break_omjt",
+  "reference_doc",
+  "section_break_2ktq",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_2ktq",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Order",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "order_details",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  },
+  {
+   "fieldname": "visit_date",
+   "fieldtype": "Datetime",
+   "label": "Visit Date"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "full_name",
+   "fieldtype": "Data",
+   "label": "Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Data",
+   "label": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "birth_date",
+   "fieldtype": "Data",
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_azjb",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.allergies",
+   "fieldname": "allergy",
+   "fieldtype": "Small Text",
+   "label": "Allergy",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_cxji",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "weight",
+   "fieldtype": "Data",
+   "label": "Weight"
+  },
+  {
+   "fieldname": "height",
+   "fieldtype": "Data",
+   "label": "Height"
+  },
+  {
+   "fieldname": "bsa",
+   "fieldtype": "Data",
+   "label": "BSA"
+  },
+  {
+   "fieldname": "ecog_score",
+   "fieldtype": "Data",
+   "label": "ECOG Score"
+  },
+  {
+   "fieldname": "order_details_section",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "fieldname": "protocol_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Protocol Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cycle_no",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Cycle No.",
+   "reqd": 1
+  },
+  {
+   "fieldname": "previous_cycle_aes",
+   "fieldtype": "Data",
+   "label": "Previous Cycle  AEs"
+  },
+  {
+   "fieldname": "column_break_aepk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "label": "Date"
+  },
+  {
+   "fieldname": "column_break_ebvk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "pre_medications_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medications"
+  },
+  {
+   "columns": 10,
+   "fieldname": "pre_meds",
+   "fieldtype": "Table",
+   "label": "Patients Pre Medications list",
+   "options": "Pre Medication Sheet"
+  },
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "columns": 10,
+   "fieldname": "patients_anti_cancer_drugs",
+   "fieldtype": "Table",
+   "label": "Patients Anti Cancer Drugs",
+   "options": "Anti Cancer Drug  Sheet"
+  },
+  {
+   "fieldname": "section_break_taax",
+   "fieldtype": "Section Break",
+   "label": "Review Notes"
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Text Editor",
+   "label": "Notes"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_info_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Refrence Info"
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record"
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Reference Name",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_omjt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "label": "Reference Doc",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "cycle_no_written",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Cycle No Written"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Vital Signs",
+   "link_fieldname": "patient",
+   "table_fieldname": "patient"
+  },
+  {
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "chemo_order"
+  }
+ ],
+ "modified": "2024-09-09 17:48:09.554736",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Chemo Order",
+ "naming_rule": "Expression (old style)",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "full_name"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/chemo_order/chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ChemoOrder(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/chemo_order/test_chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoOrder(FrappeTestCase):
+	pass
index 0408ae3..9c74039
--- a/healthcare/doctype/clinical_note/clinical_note.json
+++ b/healthcare/doctype/clinical_note/clinical_note.json
@@ -9,6 +9,7 @@
  "engine": "InnoDB",
  "field_order": [
   "patient",
+  "data_erbi",
   "gender",
   "blood_group",
   "clinical_note_type",
@@ -16,6 +17,8 @@
   "column_break_jw2e",
   "posting_date",
   "practitioner",
+  "department",
+  "d_name",
   "user",
   "note_section",
   "note",
@@ -27,7 +30,6 @@
   {
    "fieldname": "patient",
    "fieldtype": "Link",
-   "in_list_view": 1,
    "in_standard_filter": 1,
    "label": "Patient",
    "options": "Patient",
@@ -106,21 +108,48 @@
    "read_only": 1
   },
   {
+   "allow_in_quick_entry": 1,
    "fieldname": "clinical_note_type",
    "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
    "label": "Clinical Note Type",
-   "options": "Clinical Note Type"
+   "options": "Clinical Note Type",
+   "reqd": 1
   },
   {
    "fieldname": "terms_and_conditions",
    "fieldtype": "Link",
    "label": "Terms and Conditions",
    "options": "Terms and Conditions"
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "d_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Doctor",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "data_erbi",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "department",
+   "fieldtype": "Data",
+   "label": "Department",
+   "read_only": 1
   }
  ],
  "index_web_pages_for_search": 1,
  "links": [],
- "modified": "2023-05-16 18:47:54.650316",
+ "modified": "2024-06-22 16:22:56.324010",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Clinical Note",
index 9f5eb03..0e54c81
--- a/healthcare/doctype/clinical_procedure/clinical_procedure.json
+++ b/healthcare/doctype/clinical_procedure/clinical_procedure.json
@@ -12,22 +12,32 @@
   "procedure_template",
   "column_break_30",
   "company",
+  "request_note",
   "section_break_6",
   "patient",
   "patient_name",
+  "diagnosis",
+  "cancer_type",
+  "stage",
   "patient_sex",
   "patient_age",
   "inpatient_record",
   "notes",
   "column_break_7",
   "status",
+  "medical_department",
   "practitioner",
+  "by_practioner",
   "practitioner_name",
-  "medical_department",
   "service_unit",
   "start_date",
   "start_time",
   "sample",
+  "medical_report_by",
+  "phone_patient",
+  "medical_report_section",
+  "report",
+  "imaging",
   "consumables_section",
   "consume_stock",
   "warehouse",
@@ -42,6 +52,7 @@
   "codification_table",
   "sb_refs",
   "service_request",
+  "order_refrence",
   "invoiced",
   "prescription",
   "amended_from"
@@ -110,7 +121,7 @@
    "fieldname": "practitioner",
    "fieldtype": "Link",
    "in_standard_filter": 1,
-   "label": "Healthcare Practitioner",
+   "label": "Order by Healthcare Practitioner",
    "options": "Healthcare Practitioner"
   },
   {
@@ -173,8 +184,10 @@
   {
    "fieldname": "company",
    "fieldtype": "Link",
+   "hidden": 1,
    "label": "Company",
-   "options": "Company"
+   "options": "Company",
+   "read_only": 1
   },
   {
    "default": "0",
@@ -309,6 +322,75 @@
    "options": "Service Request",
    "print_hide": 1,
    "read_only": 1
+  },
+  {
+   "fieldname": "medical_report_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Report"
+  },
+  {
+   "fieldname": "report",
+   "fieldtype": "Text Editor",
+   "label": "Report"
+  },
+  {
+   "fieldname": "imaging",
+   "fieldtype": "Attach",
+   "hidden": 1,
+   "label": "imaging"
+  },
+  {
+   "fieldname": "by_practioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner (process by)",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "request_note",
+   "fieldtype": "Small Text",
+   "label": "Request Note",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.order_group",
+   "fieldname": "order_refrence",
+   "fieldtype": "Data",
+   "label": "Order Reference"
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis ",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.cancer_type",
+   "fieldname": "cancer_type",
+   "fieldtype": "Data",
+   "label": "Cancer Type",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_report_by",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Medical Report by"
+  },
+  {
+   "fetch_from": "patient.phone",
+   "fieldname": "phone_patient",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Phone",
+   "options": "patient"
   }
  ],
  "is_submittable": 1,
@@ -316,9 +398,13 @@
   {
    "link_doctype": "Nursing Task",
    "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Clinical Note",
+   "link_fieldname": "patient"
   }
  ],
- "modified": "2023-04-06 04:08:43.588359",
+ "modified": "2024-08-18 20:39:18.830815",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Clinical Procedure",
@@ -357,6 +443,6 @@
  "sort_field": "modified",
  "sort_order": "DESC",
  "states": [],
- "title_field": "title",
+ "title_field": "patient_name",
  "track_changes": 1
 }
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/diluent/diluent.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Diluent", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/diluent/diluent.json
@@ -0,0 +1,68 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "autoname": "field:title",
+ "creation": "2024-08-20 02:11:19.185728",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "acronym",
+  "volume"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Title",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "volume",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Volume",
+   "non_negative": 1,
+   "precision": "2"
+  },
+  {
+   "fieldname": "acronym",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Acronym",
+   "reqd": 1
+  }
+ ],
+ "in_create": 1,
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-20 03:01:59.363585",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diluent",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "acronym",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/diluent/diluent.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class Diluent(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/diluent/test_diluent.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestDiluent(FrappeTestCase):
+	pass
index be57b51..266b0cf
--- a/healthcare/doctype/healthcare_activity/healthcare_activity.json
+++ b/healthcare/doctype/healthcare_activity/healthcare_activity.json
@@ -55,12 +55,13 @@
    "allow_in_quick_entry": 1,
    "fieldname": "activity_duration",
    "fieldtype": "Duration",
-   "label": "Activity Duration"
+   "label": "Activity Duration",
+   "reqd": 1
   }
  ],
  "index_web_pages_for_search": 1,
  "links": [],
- "modified": "2022-07-25 19:29:15.860690",
+ "modified": "2024-06-17 16:00:09.616401",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Healthcare Activity",
--- /dev/null
+++ b/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Healthcare Practioner Speciality", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.json
@@ -0,0 +1,105 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:speciality",
+ "creation": "2024-08-13 21:08:25.062498",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_8xbn",
+  "lft",
+  "rgt",
+  "is_group",
+  "old_parent",
+  "parent_healthcare_practioner_speciality",
+  "speciality",
+  "desc"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_8xbn",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "lft",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Left",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "rgt",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Right",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_group",
+   "fieldtype": "Check",
+   "label": "Is Group"
+  },
+  {
+   "fieldname": "old_parent",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Old Parent",
+   "options": "Healthcare Practioner Speciality"
+  },
+  {
+   "fieldname": "parent_healthcare_practioner_speciality",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Parent Healthcare Practioner Speciality",
+   "options": "Healthcare Practioner Speciality"
+  },
+  {
+   "fieldname": "speciality",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Speciality",
+   "reqd": 1,
+   "search_index": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "desc",
+   "fieldtype": "Small Text",
+   "label": "Desc"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_tree": 1,
+ "links": [],
+ "modified": "2024-08-13 21:10:49.863352",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Practioner Speciality",
+ "naming_rule": "By fieldname",
+ "nsm_parent_field": "parent_healthcare_practioner_speciality",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "speciality",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "speciality"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.utils.nestedset import NestedSet
+
+
+class HealthcarePractionerSpeciality(NestedSet):
+	pass
--- /dev/null
+++ b/healthcare/doctype/healthcare_practioner_speciality/test_healthcare_practioner_speciality.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcarePractionerSpeciality(FrappeTestCase):
+	pass
index 1a19129..6d16d1b
--- a/healthcare/doctype/healthcare_practitioner/healthcare_practitioner.json
+++ b/healthcare/doctype/healthcare_practitioner/healthcare_practitioner.json
@@ -2,7 +2,7 @@
  "actions": [],
  "allow_import": 1,
  "allow_rename": 1,
- "autoname": "naming_series:",
+ "autoname": "field:first_name",
  "creation": "2016-02-23 11:20:53.565119",
  "doctype": "DocType",
  "document_type": "Setup",
@@ -16,6 +16,8 @@
   "practitioner_name",
   "gender",
   "image",
+  "prc_type",
+  "healthcare_practioner_speciality",
   "column_break_7",
   "status",
   "mobile_phone",
@@ -60,7 +62,8 @@
    "fieldtype": "Data",
    "label": "First Name",
    "no_copy": 1,
-   "reqd": 1
+   "reqd": 1,
+   "unique": 1
   },
   {
    "fieldname": "middle_name",
@@ -241,8 +244,7 @@
    "in_standard_filter": 1,
    "label": "Full Name",
    "no_copy": 1,
-   "read_only": 1,
-   "search_index": 1
+   "unique": 1
   },
   {
    "fieldname": "naming_series",
@@ -353,15 +355,28 @@
    "fieldtype": "Link",
    "label": "Supplier",
    "options": "Supplier"
+  },
+  {
+   "fieldname": "prc_type",
+   "fieldtype": "Select",
+   "label": "Practitioner Type",
+   "options": "Doctor\nNurse\nLab Tech\nPharmasisit"
+  },
+  {
+   "fieldname": "healthcare_practioner_speciality",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Healthcare Practioner Speciality",
+   "options": "Healthcare Practioner Speciality"
   }
  ],
  "image_field": "image",
  "links": [],
- "modified": "2023-03-04 18:33:25.753648",
+ "modified": "2024-09-16 18:33:38.499201",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Healthcare Practitioner",
- "naming_rule": "By \"Naming Series\" field",
+ "naming_rule": "By fieldname",
  "owner": "Administrator",
  "permissions": [
   {
index b8a00a1..38ad662
--- a/healthcare/doctype/inpatient_record/inpatient_record.json
+++ b/healthcare/doctype/inpatient_record/inpatient_record.json
@@ -31,6 +31,7 @@
   "admission_nursing_checklist_template",
   "discharge_nursing_checklist_template",
   "expected_length_of_stay",
+  "governorate",
   "cb_admission",
   "primary_practitioner",
   "secondary_practitioner",
@@ -60,9 +61,7 @@
   "discharge_instructions",
   "followup_date",
   "sb_discharge_note",
-  "discharge_note",
-  "cancellation_details_section",
-  "reason_for_cancellation"
+  "discharge_note"
  ],
  "fields": [
   {
@@ -433,61 +432,24 @@
    "fieldtype": "Link",
    "label": "Admission Nursing Checklist Template",
    "options": "Nursing Checklist Template"
+  },
+  {
+   "fetch_from": "patient.territory",
+   "fieldname": "governorate",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Governorate",
+   "print_hide": 1
   }
  ],
  "index_web_pages_for_search": 1,
  "links": [
   {
-   "group": "Appointments",
-   "link_doctype": "Patient Appointment",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "group": "Clinical",
-   "link_doctype": "Patient Encounter",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "group": "Clinical",
-   "link_doctype": "Clinical Procedure",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "group": "Laboratory",
-   "link_doctype": "Sample Collection",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "group": "Laboratory",
-   "link_doctype": "Lab Test",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "group": "Nursing",
    "link_doctype": "Nursing Task",
    "link_fieldname": "reference_name"
-  },
-  {
-   "group": "Nursing",
-   "link_doctype": "Vital Signs",
-   "link_fieldname": "inpatient_record"
-  },
-  {
-   "collapsible": 1,
-   "fieldname": "cancellation_details_section",
-   "fieldtype": "Section Break",
-   "label": "Cancellation Details"
-  },
-  {
-   "fieldname": "reason_for_cancellation",
-   "fieldtype": "Small Text",
-   "label": "Reason for Cancellation",
-   "read_only": 1
   }
  ],
- "index_web_pages_for_search": 1,
- "links": [],
- "modified": "2022-04-28 17:26:28.973945",
+ "modified": "2024-08-25 02:43:59.131380",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Inpatient Record",
@@ -574,17 +536,11 @@
    "share": 1
   }
  ],
- "links": [
-  {
-   "link_doctype": "Nursing Task",
-   "link_fieldname": "reference_name"
-  }
- ],
  "restrict_to_domain": "Healthcare",
- "search_fields": "patient",
+ "search_fields": "patient_name",
  "sort_field": "modified",
  "sort_order": "DESC",
  "states": [],
- "title_field": "patient",
+ "title_field": "patient_name",
  "track_changes": 1
-}
+}
\ No newline at end of file
index 3b3fe41..fc07b68
--- a/healthcare/doctype/lab_prescription/lab_prescription.json
+++ b/healthcare/doctype/lab_prescription/lab_prescription.json
@@ -26,6 +26,7 @@
    "fieldname": "lab_test_code",
    "fieldtype": "Link",
    "ignore_user_permissions": 1,
+   "in_list_view": 1,
    "label": "Lab Test",
    "options": "Lab Test Template"
   },
@@ -111,7 +112,7 @@
  ],
  "istable": 1,
  "links": [],
- "modified": "2023-11-07 15:48:41.681329",
+ "modified": "2024-06-23 05:28:10.752502",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Lab Prescription",
index e79542c..20307ea
--- a/healthcare/doctype/lab_test/lab_test.json
+++ b/healthcare/doctype/lab_test/lab_test.json
@@ -13,6 +13,10 @@
   "lab_test_name",
   "lab_test_group",
   "department",
+  "lab_test_flow",
+  "order_by",
+  "orderd_at",
+  "ordered_from",
   "column_break_26",
   "company",
   "status",
@@ -123,8 +127,7 @@
    "fieldtype": "Data",
    "label": "Patient Name",
    "print_hide": 1,
-   "read_only": 1,
-   "report_hide": 1
+   "read_only": 1
   },
   {
    "fieldname": "patient_age",
@@ -336,7 +339,6 @@
    "label": "Test Template",
    "options": "Lab Test Template",
    "print_hide": 1,
-   "report_hide": 1,
    "reqd": 1,
    "set_only_once": 1
   },
@@ -358,8 +360,7 @@
    "fieldname": "normal_test_items",
    "fieldtype": "Table",
    "label": "Normal Test Result",
-   "options": "Normal Test Result",
-   "print_hide": 1
+   "options": "Normal Test Result"
   },
   {
    "fieldname": "lab_test_html",
@@ -623,6 +624,34 @@
    "print_hide": 1,
    "read_only": 1,
    "search_index": 1
+  },
+  {
+   "fieldname": "lab_test_flow",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Lab Test Flow",
+   "options": "Requested\nCollected\nTrasmiting\nTransmited\nAccepted\nRejected\nCenterFusion\nProcessing\nResult Finished"
+  },
+  {
+   "fetch_from": "service_request.practitioner",
+   "fieldname": "order_by",
+   "fieldtype": "Data",
+   "label": "Order By",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.order_date",
+   "fieldname": "orderd_at",
+   "fieldtype": "Data",
+   "label": "Ordered At",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.healthcare_service_unit_type",
+   "fieldname": "ordered_from",
+   "fieldtype": "Data",
+   "label": "Ordered From",
+   "read_only": 1
   }
  ],
  "is_submittable": 1,
@@ -632,7 +661,7 @@
    "link_fieldname": "reference_name"
   }
  ],
- "modified": "2023-06-21 00:31:52.282467",
+ "modified": "2024-08-20 11:45:19.885335",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Lab Test",
--- /dev/null
+++ b/healthcare/doctype/med_route/med_route.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Med Route", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/med_route/med_route.json
@@ -0,0 +1,56 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:title",
+ "creation": "2024-08-20 03:04:14.068717",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "acrynom"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Title",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "acrynom",
+   "fieldtype": "Data",
+   "label": "Accrynom",
+   "reqd": 1
+  }
+ ],
+ "in_create": 1,
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-20 03:09:37.541687",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Med Route",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "search_fields": "acrynom",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/med_route/med_route.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class MedRoute(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/med_route/test_med_route.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestMedRoute(FrappeTestCase):
+	pass
index 2c39fb3..a167cdd
--- a/healthcare/doctype/medication/medication.json
+++ b/healthcare/doctype/medication/medication.json
@@ -39,13 +39,14 @@
   {
    "fieldname": "national_drug_code",
    "fieldtype": "Data",
+   "hidden": 1,
    "label": "National Drug Code",
    "no_copy": 1
   },
   {
    "fieldname": "generic_name",
    "fieldtype": "Data",
-   "label": "Generic Name",
+   "label": "Scientific Name",
    "no_copy": 1,
    "unique": 1
   },
@@ -213,7 +214,7 @@
   }
  ],
  "links": [],
- "modified": "2023-10-31 12:31:46.349852",
+ "modified": "2024-06-01 12:10:34.035297",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Medication",
index b359378..dd41a18
--- a/healthcare/doctype/normal_test_result/normal_test_result.json
+++ b/healthcare/doctype/normal_test_result/normal_test_result.json
@@ -1,7 +1,6 @@
 {
  "actions": [],
  "allow_copy": 1,
- "beta": 0,
  "creation": "2016-02-22 15:06:08.295224",
  "doctype": "DocType",
  "document_type": "Document",
@@ -15,6 +14,7 @@
   "secondary_uom_result",
   "secondary_uom",
   "conversion_factor",
+  "prev_result",
   "column_break_10",
   "allow_blank",
   "normal_range",
@@ -170,11 +170,17 @@
    "print_hide": 1,
    "read_only": 1,
    "report_hide": 1
+  },
+  {
+   "fieldname": "prev_result",
+   "fieldtype": "Data",
+   "label": "Previous Result",
+   "read_only": 1
   }
  ],
  "istable": 1,
  "links": [],
- "modified": "2020-07-08 16:03:17.522893",
+ "modified": "2024-09-07 18:07:32.567872",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Normal Test Result",
@@ -182,5 +188,6 @@
  "permissions": [],
  "restrict_to_domain": "Healthcare",
  "sort_field": "modified",
- "sort_order": "DESC"
+ "sort_order": "DESC",
+ "states": []
 }
\ No newline at end of file
index bb748ff..260291e
--- a/healthcare/doctype/patient/patient.json
+++ b/healthcare/doctype/patient/patient.json
@@ -10,21 +10,42 @@
  "document_type": "Document",
  "engine": "InnoDB",
  "field_order": [
+  "details_tab",
   "basic_info",
   "naming_series",
   "first_name",
   "middle_name",
   "last_name",
-  "patient_name",
+  "family_name",
+  "mother_name",
+  "country",
+  "territory",
   "sex",
   "blood_group",
   "dob",
-  "age_html",
+  "foreigner_\u0623\u062c\u0646\u0628\u064a",
+  "passport_no\u0631\u0642\u0645_\u062c\u0648\u0627\u0632_\u0627\u0644\u0633\u0641\u0631",
   "image",
+  "national",
+  "contact_person_full_name_\u0627\u0633\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+  "contact_phone_number_\u0631\u0642\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+  "column_break_yjno",
+  "\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+  "\u0627\u0633\u0645_\u0627\u0644\u0627\u0628",
+  "\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+  "fourth_name",
+  "\u0627\u0644\u0644\u0642\u0628",
+  "\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+  "patient_name",
+  "ar_name",
   "column_break_14",
   "status",
   "uid",
+  "no_id",
+  "\u0627\u0631\u0641\u0627\u0642_\u0645\u0644\u0641__attach_file",
   "inpatient_record",
+  "occupation",
+  "marital_status",
   "inpatient_status",
   "report_preference",
   "mobile",
@@ -32,10 +53,13 @@
   "email",
   "invite_user",
   "user_id",
+  "old_mrn",
+  "state",
+  "address_line",
+  "is_from_warith",
   "customer_details_section",
   "customer",
   "customer_group",
-  "territory",
   "column_break_24",
   "default_currency",
   "default_price_list",
@@ -51,10 +75,6 @@
   "sb_relation",
   "patient_relation",
   "medical_history_tab",
-  "personal_and_social_history",
-  "occupation",
-  "column_break_25",
-  "marital_status",
   "allergy_medical_and_surgical_history",
   "allergies",
   "medication",
@@ -68,7 +88,14 @@
   "alcohol_current_use",
   "column_break_32",
   "surrounding_factors",
-  "other_risk_factors"
+  "other_risk_factors",
+  "oncolgy_tab",
+  "cancer_type",
+  "symptoms_free_text",
+  "column_break_uhxw",
+  "diagnosis",
+  "diagnosis_date",
+  "stage"
  ],
  "fields": [
   {
@@ -98,16 +125,15 @@
   {
    "fieldname": "naming_series",
    "fieldtype": "Select",
-   "label": "Series",
-   "options": "HLC-PAT-.YYYY.-",
-   "print_hide": 1,
-   "report_hide": 1,
-   "set_only_once": 1
+   "hidden": 1,
+   "label": "MRN",
+   "options": "WITC.######"
   },
   {
    "bold": 1,
    "fieldname": "patient_name",
    "fieldtype": "Data",
+   "hidden": 1,
    "in_global_search": 1,
    "in_list_view": 1,
    "in_standard_filter": 1,
@@ -128,31 +154,24 @@
    "bold": 1,
    "fieldname": "blood_group",
    "fieldtype": "Select",
-   "in_preview": 1,
    "label": "Blood Group",
    "no_copy": 1,
    "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative"
   },
   {
+   "allow_in_quick_entry": 1,
    "bold": 1,
    "fieldname": "dob",
    "fieldtype": "Date",
    "in_preview": 1,
    "label": "Date of birth",
-   "no_copy": 1
-  },
-  {
-   "fieldname": "age_html",
-   "fieldtype": "HTML",
-   "label": "Age",
    "no_copy": 1,
-   "print_hide": 1,
-   "read_only": 1,
-   "report_hide": 1
+   "reqd": 1
   },
   {
    "fieldname": "status",
    "fieldtype": "Select",
+   "hidden": 1,
    "in_filter": 1,
    "in_list_view": 1,
    "label": "Status",
@@ -165,11 +184,7 @@
    "fieldname": "image",
    "fieldtype": "Attach Image",
    "hidden": 1,
-   "in_preview": 1,
-   "label": "Image",
-   "no_copy": 1,
-   "print_hide": 1,
-   "width": "50%"
+   "label": "IMAGE"
   },
   {
    "fieldname": "column_break_14",
@@ -188,6 +203,7 @@
   {
    "fieldname": "report_preference",
    "fieldtype": "Select",
+   "hidden": 1,
    "label": "Report Preference",
    "options": "\nEmail\nPrint"
   },
@@ -195,8 +211,7 @@
    "bold": 1,
    "fieldname": "mobile",
    "fieldtype": "Data",
-   "in_list_view": 1,
-   "in_standard_filter": 1,
+   "hidden": 1,
    "label": "Mobile",
    "no_copy": 1,
    "options": "Phone"
@@ -205,8 +220,6 @@
    "bold": 1,
    "fieldname": "email",
    "fieldtype": "Data",
-   "in_list_view": 1,
-   "in_standard_filter": 1,
    "label": "Email",
    "no_copy": 1,
    "options": "Email"
@@ -215,6 +228,8 @@
    "fieldname": "phone",
    "fieldtype": "Data",
    "in_filter": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
    "label": "Phone",
    "no_copy": 1,
    "options": "Phone"
@@ -267,22 +282,13 @@
    "label": "Surgical History",
    "no_copy": 1
   },
-  {
-   "fieldname": "personal_and_social_history",
-   "fieldtype": "Section Break",
-   "label": "Personal and Social History"
-  },
   {
    "fieldname": "occupation",
    "fieldtype": "Data",
    "ignore_xss_filter": 1,
-   "label": "Occupation",
+   "label": "Occupation \\ \u0627\u0644\u062a\u062e\u0635\u0635 \u0627\u0644\u0648\u0638\u064a\u0641\u064a",
    "no_copy": 1
   },
-  {
-   "fieldname": "column_break_25",
-   "fieldtype": "Column Break"
-  },
   {
    "fieldname": "marital_status",
    "fieldtype": "Select",
@@ -366,10 +372,11 @@
   {
    "fieldname": "last_name",
    "fieldtype": "Data",
-   "label": "Last Name",
+   "label": "Middle Name",
    "no_copy": 1
   },
   {
+   "allow_in_quick_entry": 1,
    "fieldname": "first_name",
    "fieldtype": "Data",
    "label": "First Name",
@@ -380,7 +387,7 @@
   {
    "fieldname": "middle_name",
    "fieldtype": "Data",
-   "label": "Middle Name (optional)",
+   "label": "Father Name",
    "no_copy": 1
   },
   {
@@ -390,6 +397,7 @@
    "label": "Customer Details"
   },
   {
+   "default": "Patients",
    "fieldname": "customer_group",
    "fieldtype": "Link",
    "label": "Customer Group",
@@ -398,7 +406,7 @@
   {
    "fieldname": "territory",
    "fieldtype": "Link",
-   "label": "Territory",
+   "label": "\u0627\u0644\u0645\u062d\u0627\u0641\u0638\u0647 / \u0627\u0644\u0642\u0636\u0627\u0621 / \u0627\u0644\u0646\u0627\u062d\u064a\u0629 / \u0627\u0644\u062d\u064a (\u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u064a\u0628\u062f\u0623 \u0645\u0646 \u0627\u0644\u062d\u064a)",
    "options": "Territory"
   },
   {
@@ -447,6 +455,7 @@
    "default": "1",
    "fieldname": "invite_user",
    "fieldtype": "Check",
+   "hidden": 1,
    "label": "Invite as User",
    "no_copy": 1,
    "read_only_depends_on": "eval: doc.user_id"
@@ -464,7 +473,8 @@
    "fieldname": "uid",
    "fieldtype": "Data",
    "in_standard_filter": 1,
-   "label": "Identification Number (UID)",
+   "label": "Identification Number (\u0627\u0644\u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0648\u0637\u0646\u064a\u0629)",
+   "length": 12,
    "unique": 1
   },
   {
@@ -483,16 +493,198 @@
    "fieldname": "medical_history_tab",
    "fieldtype": "Tab Break",
    "label": "Medical History"
+  },
+  {
+   "fieldname": "family_name",
+   "fieldtype": "Data",
+   "label": "Family Name"
+  },
+  {
+   "fieldname": "mother_name",
+   "fieldtype": "Data",
+   "label": "Mother Name"
+  },
+  {
+   "fieldname": "\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0627\u0648\u0644",
+   "reqd": 1
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u0627\u0628",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u0627\u0628"
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u062c\u062f"
+  },
+  {
+   "fieldname": "\u0627\u0644\u0644\u0642\u0628",
+   "fieldtype": "Data",
+   "label": "\u0627\u0644\u0644\u0642\u0628"
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u0627\u0645"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "country",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_preview": 1,
+   "label": "Country",
+   "options": "Country"
+  },
+  {
+   "depends_on": "eval:doc.no_id== true;",
+   "fieldname": "\u0627\u0631\u0641\u0627\u0642_\u0645\u0644\u0641__attach_file",
+   "fieldtype": "Attach",
+   "label": "\u0627\u0631\u0641\u0627\u0642 \u0645\u0644\u0641 / Attach file"
+  },
+  {
+   "default": "0",
+   "fieldname": "foreigner_\u0623\u062c\u0646\u0628\u064a",
+   "fieldtype": "Check",
+   "label": "Foreigner/ \u0623\u062c\u0646\u0628\u064a"
+  },
+  {
+   "depends_on": "foreigner_\u0623\u062c\u0646\u0628\u064a",
+   "fieldname": "passport_no\u0631\u0642\u0645_\u062c\u0648\u0627\u0632_\u0627\u0644\u0633\u0641\u0631",
+   "fieldtype": "Data",
+   "label": "Passport No/\u0631\u0642\u0645 \u062c\u0648\u0627\u0632 \u0627\u0644\u0633\u0641\u0631"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "national",
+   "fieldtype": "Select",
+   "label": "National",
+   "options": "Iraqi\nSyrian\nLebanese\nTurkish\nEgyptian",
+   "reqd": 1
+  },
+  {
+   "fieldname": "contact_person_full_name_\u0627\u0633\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+   "fieldtype": "Data",
+   "label": "Contact Person Full name/ \u0627\u0633\u0645 \u0627\u0644\u0634\u062e\u0635 \u0627\u0644\u0645\u0631\u0627\u0641\u0642"
+  },
+  {
+   "fieldname": "contact_phone_number_\u0631\u0642\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+   "fieldtype": "Phone",
+   "label": "Contact Phone number/ \u0631\u0642\u0645 \u0627\u0644\u0634\u062e\u0635 \u0627\u0644\u0645\u0631\u0627\u0641\u0642"
+  },
+  {
+   "fieldname": "column_break_yjno",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "0",
+   "fieldname": "no_id",
+   "fieldtype": "Check",
+   "label": "\u0644\u0627 \u062a\u0648\u062c\u062f \u0628\u0637\u0627\u0642\u0629 \u0648\u0637\u0646\u064a\u0629"
+  },
+  {
+   "fieldname": "old_mrn",
+   "fieldtype": "Data",
+   "label": "Old MRN (\u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0645\u0633\u0628\u0642)"
+  },
+  {
+   "fieldname": "state",
+   "fieldtype": "Data",
+   "label": "State / \u0627\u0644\u0645\u0646\u0637\u0642\u0629"
+  },
+  {
+   "fieldname": "address_line",
+   "fieldtype": "Data",
+   "label": "Address Line /\u0627\u0642\u0631\u0628 \u0646\u0642\u0637\u0629 \u062f\u0627\u0644\u0629"
+  },
+  {
+   "fieldname": "fourth_name",
+   "fieldtype": "Data",
+   "label": "\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0631\u0627\u0628\u0639"
+  },
+  {
+   "fieldname": "ar_name",
+   "fieldtype": "Data",
+   "label": "Full Arabic Name",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_from_warith",
+   "fieldtype": "Check",
+   "label": "\u0647\u0644 \u0627\u0644\u0645\u0631\u064a\u0636 \u0645\u062d\u0648\u0644 \u0645\u0646 \u0648\u0627\u0631\u062b"
+  },
+  {
+   "fieldname": "oncolgy_tab",
+   "fieldtype": "Tab Break",
+   "label": "Oncolgy"
+  },
+  {
+   "fieldname": "cancer_type",
+   "fieldtype": "Data",
+   "label": "Cancer Type"
+  },
+  {
+   "fieldname": "symptoms_free_text",
+   "fieldtype": "Small Text",
+   "label": "Symptoms (free text)"
+  },
+  {
+   "fieldname": "column_break_uhxw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis"
+  },
+  {
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage"
+  },
+  {
+   "fieldname": "diagnosis_date",
+   "fieldtype": "Date",
+   "label": "Diagnosis Date"
+  },
+  {
+   "fieldname": "details_tab",
+   "fieldtype": "Tab Break",
+   "label": "Details"
   }
  ],
  "icon": "fa fa-user",
  "image_field": "image",
- "links": [],
+ "links": [
+  {
+   "link_doctype": "Clinical Note",
+   "link_fieldname": "patient"
+  },
+  {
+   "group": "oncology",
+   "link_doctype": "Chemo Order",
+   "link_fieldname": "patient"
+  },
+  {
+   "group": "oncology",
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "patient"
+  }
+ ],
  "max_attachments": 50,
- "modified": "2023-01-13 17:48:59.069268",
+ "modified": "2024-09-16 22:10:41.940365",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Patient",
+ "naming_rule": "By \"Naming Series\" field",
  "owner": "Administrator",
  "permissions": [
   {
@@ -546,7 +738,7 @@
  ],
  "quick_entry": 1,
  "restrict_to_domain": "Healthcare",
- "search_fields": "patient_name,mobile,email,phone,uid",
+ "search_fields": "patient_name,mobile,email,phone",
  "show_name_in_global_search": 1,
  "sort_field": "modified",
  "sort_order": "ASC",
index d5507df..5e14160
--- a/healthcare/doctype/patient/patient.py
+++ b/healthcare/doctype/patient/patient.py
@@ -33,6 +33,7 @@ class Patient(Document):
 
 	def validate(self):
 		self.set_full_name()
+		self.set_ar_full_name()
 		self.flags.is_new_doc = self.is_new()
 		self.flags.existing_customer = self.is_new() and bool(self.customer)
 
@@ -69,14 +70,26 @@ class Patient(Document):
 
 	def load_dashboard_info(self):
 		if self.customer:
+
 			info = get_dashboard_info("Customer", self.customer, None)
 			self.set_onload("dashboard_info", info)
-
+# change the english name to arabic name
+#	def set_full_name(self):
+#		if self.last_name:
+#			self.patient_name = " ".join(filter(None, [self.first_name, self.last_name]))
+#		else:
+#			self.patient_name = self.first_name
+#
 	def set_full_name(self):
-		if self.last_name:
-			self.patient_name = " ".join(filter(None, [self.first_name, self.last_name]))
+		if self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ:
+			self.patient_name = " ".join(filter(None, [self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ, self.ÿßÿ≥ŸÖ_ÿßŸÑÿßÿ® ,self.ÿßÿ≥ŸÖ_ÿßŸÑÿ¨ÿØ , self.ÿßŸÑŸÑŸÇÿ®]))
 		else:
-			self.patient_name = self.first_name
+			self.patient_name = self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ
+
+	def set_ar_full_name(self):
+		if self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ:
+			self.ar_name = " ".join(filter(None, [self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ, self.ÿßÿ≥ŸÖ_ÿßŸÑÿßÿ® ,self.ÿßÿ≥ŸÖ_ÿßŸÑÿ¨ÿØ,self.fourth_name , self.ÿßŸÑŸÑŸÇÿ®]))
+
 
 	def set_missing_customer_details(self):
 		if not self.customer_group:
@@ -376,10 +389,10 @@ def get_timeline_data(doctype, name):
 	)
 
 	customer = frappe.db.get_value(doctype, name, "customer")
-	if customer:
-		from erpnext.accounts.party import get_timeline_data
+	#if customer:
+#		from erpnext.accounts.party import get_timeline_data
 
-		customer_timeline_data = get_timeline_data("Customer", customer)
-		patient_timeline_data.update(customer_timeline_data)
+#		customer_timeline_data = get_timeline_data("Customer", customer)
+#		patient_timeline_data.update(customer_timeline_data)
 
 	return patient_timeline_data
--- /dev/null
+++ b/healthcare/doctype/patient/patientOld.json
@@ -0,0 +1,556 @@
+{
+ "actions": [],
+ "allow_events_in_timeline": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2017-01-23 14:03:49.084370",
+ "description": "Patient",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "basic_info",
+  "naming_series",
+  "first_name",
+  "middle_name",
+  "last_name",
+  "patient_name",
+  "sex",
+  "blood_group",
+  "dob",
+  "age_html",
+  "image",
+  "column_break_14",
+  "status",
+  "uid",
+  "inpatient_record",
+  "inpatient_status",
+  "report_preference",
+  "mobile",
+  "phone",
+  "email",
+  "invite_user",
+  "user_id",
+  "customer_details_section",
+  "customer",
+  "customer_group",
+  "territory",
+  "column_break_24",
+  "default_currency",
+  "default_price_list",
+  "language",
+  "more_info",
+  "patient_details",
+  "dashboard_tab",
+  "address_and_contact_tab",
+  "address_contacts",
+  "address_html",
+  "column_break_22",
+  "contact_html",
+  "sb_relation",
+  "patient_relation",
+  "medical_history_tab",
+  "personal_and_social_history",
+  "occupation",
+  "column_break_25",
+  "marital_status",
+  "allergy_medical_and_surgical_history",
+  "allergies",
+  "medication",
+  "column_break_20",
+  "medical_history",
+  "surgical_history",
+  "risk_factors",
+  "tobacco_past_use",
+  "tobacco_current_use",
+  "alcohol_past_use",
+  "alcohol_current_use",
+  "column_break_32",
+  "surrounding_factors",
+  "other_risk_factors"
+ ],
+ "fields": [
+  {
+   "fieldname": "basic_info",
+   "fieldtype": "Section Break",
+   "label": "Patient Demographics",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-user"
+  },
+  {
+   "fieldname": "inpatient_status",
+   "fieldtype": "Select",
+   "in_preview": 1,
+   "label": "Inpatient Status",
+   "no_copy": 1,
+   "options": "\nAdmission Scheduled\nAdmitted\nDischarge Scheduled",
+   "read_only": 1
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "no_copy": 1,
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-PAT-.YYYY.-",
+   "print_hide": 1,
+   "report_hide": 1,
+   "set_only_once": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Full Name",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "sex",
+   "fieldtype": "Link",
+   "in_preview": 1,
+   "label": "Gender",
+   "options": "Gender",
+   "reqd": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "blood_group",
+   "fieldtype": "Select",
+   "in_preview": 1,
+   "label": "Blood Group",
+   "no_copy": 1,
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative"
+  },
+  {
+   "bold": 1,
+   "fieldname": "dob",
+   "fieldtype": "Date",
+   "in_preview": 1,
+   "label": "Date of birth",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "age_html",
+   "fieldtype": "HTML",
+   "label": "Age",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_filter": 1,
+   "in_list_view": 1,
+   "label": "Status",
+   "no_copy": 1,
+   "options": "Active\nDisabled",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "image",
+   "fieldtype": "Attach Image",
+   "hidden": 1,
+   "in_preview": 1,
+   "label": "Image",
+   "no_copy": 1,
+   "print_hide": 1,
+   "width": "50%"
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "If \"Link Customer to Patient\" is checked in Healthcare Settings and an existing Customer is not selected then, a Customer will be created for this Patient for recording transactions in Accounts module.",
+   "fieldname": "customer",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Customer",
+   "no_copy": 1,
+   "options": "Customer",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "report_preference",
+   "fieldtype": "Select",
+   "label": "Report Preference",
+   "options": "\nEmail\nPrint"
+  },
+  {
+   "bold": 1,
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Mobile",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "bold": 1,
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Email",
+   "no_copy": 1,
+   "options": "Email"
+  },
+  {
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "in_filter": 1,
+   "label": "Phone",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "fieldname": "sb_relation",
+   "fieldtype": "Section Break",
+   "label": "Patient Relation"
+  },
+  {
+   "fieldname": "patient_relation",
+   "fieldtype": "Table",
+   "label": "Patient Relation",
+   "options": "Patient Relation"
+  },
+  {
+   "fieldname": "allergy_medical_and_surgical_history",
+   "fieldtype": "Section Break",
+   "label": "Allergies, Medical and Surgical History"
+  },
+  {
+   "fieldname": "allergies",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Allergies",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medication",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_20",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "medical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "surgical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Surgical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "personal_and_social_history",
+   "fieldtype": "Section Break",
+   "label": "Personal and Social History"
+  },
+  {
+   "fieldname": "occupation",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Occupation",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_25",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "marital_status",
+   "fieldtype": "Select",
+   "label": "Marital Status",
+   "no_copy": 1,
+   "options": "\nSingle\nMarried\nDivorced\nWidow"
+  },
+  {
+   "fieldname": "risk_factors",
+   "fieldtype": "Section Break",
+   "label": "Risk Factors"
+  },
+  {
+   "fieldname": "tobacco_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "tobacco_current_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Alcohol Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_current_use",
+   "fieldtype": "Data",
+   "ignore_user_permissions": 1,
+   "label": "Alcohol Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_32",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "surrounding_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Occupational Hazards and Environmental Factors",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "other_risk_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Other Risk Factors",
+   "no_copy": 1
+  },
+  {
+   "collapsible_depends_on": "patient_details",
+   "fieldname": "more_info",
+   "fieldtype": "Section Break",
+   "label": "More Information",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-file-text"
+  },
+  {
+   "description": "Additional information regarding the patient",
+   "fieldname": "patient_details",
+   "fieldtype": "Text",
+   "ignore_xss_filter": 1,
+   "label": "Patient Details",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "default_currency",
+   "fieldtype": "Link",
+   "label": "Billing Currency",
+   "options": "Currency"
+  },
+  {
+   "fieldname": "last_name",
+   "fieldtype": "Data",
+   "label": "Last Name",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "first_name",
+   "fieldtype": "Data",
+   "label": "First Name",
+   "no_copy": 1,
+   "oldfieldtype": "Data",
+   "reqd": 1
+  },
+  {
+   "fieldname": "middle_name",
+   "fieldtype": "Data",
+   "label": "Middle Name (optional)",
+   "no_copy": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "customer_details_section",
+   "fieldtype": "Section Break",
+   "label": "Customer Details"
+  },
+  {
+   "fieldname": "customer_group",
+   "fieldtype": "Link",
+   "label": "Customer Group",
+   "options": "Customer Group"
+  },
+  {
+   "fieldname": "territory",
+   "fieldtype": "Link",
+   "label": "Territory",
+   "options": "Territory"
+  },
+  {
+   "fieldname": "column_break_24",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "default_price_list",
+   "fieldtype": "Link",
+   "label": "Default Price List",
+   "options": "Price List"
+  },
+  {
+   "fieldname": "language",
+   "fieldtype": "Link",
+   "label": "Print Language",
+   "options": "Language"
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_contacts",
+   "fieldtype": "Section Break",
+   "label": "Address and Contact",
+   "options": "fa fa-map-marker"
+  },
+  {
+   "fieldname": "address_html",
+   "fieldtype": "HTML",
+   "label": "Address HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_22",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "contact_html",
+   "fieldtype": "HTML",
+   "label": "Contact HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "1",
+   "fieldname": "invite_user",
+   "fieldtype": "Check",
+   "label": "Invite as User",
+   "no_copy": 1,
+   "read_only_depends_on": "eval: doc.user_id"
+  },
+  {
+   "fieldname": "user_id",
+   "fieldtype": "Read Only",
+   "label": "User ID",
+   "no_copy": 1,
+   "options": "User"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "uid",
+   "fieldtype": "Data",
+   "in_standard_filter": 1,
+   "label": "Identification Number (UID)",
+   "unique": 1
+  },
+  {
+   "fieldname": "dashboard_tab",
+   "fieldtype": "Tab Break",
+   "label": "Dashboard",
+   "show_dashboard": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_and_contact_tab",
+   "fieldtype": "Tab Break",
+   "label": "Address & Contact"
+  },
+  {
+   "fieldname": "medical_history_tab",
+   "fieldtype": "Tab Break",
+   "label": "Medical History"
+  }
+ ],
+ "icon": "fa fa-user",
+ "image_field": "image",
+ "links": [],
+ "max_attachments": 50,
+ "modified": "2023-01-13 17:48:59.069268",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient_name,mobile,email,phone,uid",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "ASC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
index cb13270..1f84348
--- a/healthcare/doctype/patient_encounter/patient_encounter.js
+++ b/healthcare/doctype/patient_encounter/patient_encounter.js
@@ -22,7 +22,7 @@ frappe.ui.form.on('Patient Encounter', {
 						}
 				})
 		}
-		show_clinical_notes(frm);
+		//show_clinical_notes(frm);
 		show_orders(frm);
 	},
 
@@ -47,6 +47,8 @@ frappe.ui.form.on('Patient Encounter', {
 	refresh: function(frm) {
 		refresh_field('drug_prescription');
 		refresh_field('lab_test_prescription');
+		// TODO change the order where the show clinical notes appears
+		show_clinical_notes(frm);
 
 		if (!frm.doc.__islocal) {
 			if (frm.doc.docstatus === 1) {
index a2a47db..c8e97f3
--- a/healthcare/doctype/patient_encounter/patient_encounter.json
+++ b/healthcare/doctype/patient_encounter/patient_encounter.json
@@ -15,29 +15,39 @@
   "appointment_type",
   "patient",
   "patient_name",
+  "patient_english_name",
   "patient_sex",
   "patient_age",
+  "date",
+  "practitioner_name",
+  "invoiced",
   "inpatient_record",
   "inpatient_status",
+  "patient_governorate",
+  "state",
+  "address",
+  "column_break_axxe",
+  "symptoms",
+  "symptoms_free_text",
+  "symptoms_in_print",
+  "get_applicable_treatment_plans",
+  "service_unit",
+  "physical_examination",
+  "diagnosis",
+  "dig_free",
+  "diagnosis_in_print",
+  "practitioner",
+  "codification",
   "column_break_6",
   "company",
   "status",
   "encounter_date",
   "encounter_time",
-  "practitioner",
-  "practitioner_name",
   "medical_department",
   "google_meet_link",
-  "invoiced",
   "submit_orders_on_save",
-  "sb_symptoms",
-  "symptoms",
-  "symptoms_in_print",
-  "get_applicable_treatment_plans",
-  "physical_examination",
-  "diagnosis",
-  "diagnosis_in_print",
-  "codification",
+  "phone",
+  "column_break_ejdk",
   "codification_table",
   "sb_drug_prescription",
   "drug_prescription",
@@ -116,12 +126,14 @@
   {
    "fieldname": "company",
    "fieldtype": "Link",
+   "hidden": 1,
    "label": "Company",
    "options": "Company"
   },
   {
    "fieldname": "column_break_6",
-   "fieldtype": "Column Break"
+   "fieldtype": "Column Break",
+   "hidden": 1
   },
   {
    "fieldname": "practitioner",
@@ -135,6 +147,7 @@
    "default": "Today",
    "fieldname": "encounter_date",
    "fieldtype": "Date",
+   "hidden": 1,
    "in_list_view": 1,
    "label": "Encounter Date",
    "reqd": 1
@@ -143,6 +156,7 @@
    "default": "Now",
    "fieldname": "encounter_time",
    "fieldtype": "Time",
+   "hidden": 1,
    "label": "Encounter Time",
    "reqd": 1
   },
@@ -154,16 +168,11 @@
    "no_copy": 1,
    "read_only": 1
   },
-  {
-   "fieldname": "sb_symptoms",
-   "fieldtype": "Section Break",
-   "label": "Encounter Impression"
-  },
   {
    "fieldname": "symptoms",
    "fieldtype": "Table MultiSelect",
    "ignore_xss_filter": 1,
-   "label": "Symptoms",
+   "label": "Chief complains",
    "no_copy": 1,
    "options": "Patient Encounter Symptom"
   },
@@ -172,6 +181,7 @@
    "depends_on": "eval: doc.symptoms != ''",
    "fieldname": "symptoms_in_print",
    "fieldtype": "Check",
+   "hidden": 1,
    "label": "In print",
    "no_copy": 1,
    "print_hide": 1,
@@ -194,6 +204,7 @@
    "depends_on": "eval: doc.diagnosis != ''",
    "fieldname": "diagnosis_in_print",
    "fieldtype": "Check",
+   "hidden": 1,
    "label": "In print",
    "no_copy": 1,
    "print_hide": 1,
@@ -203,6 +214,7 @@
    "collapsible": 1,
    "fieldname": "codification",
    "fieldtype": "Section Break",
+   "hidden": 1,
    "label": "Medical Coding"
   },
   {
@@ -236,7 +248,7 @@
   {
    "fieldname": "sb_procedures",
    "fieldtype": "Section Break",
-   "label": "Procedures"
+   "label": "Procedures, Imagaing"
   },
   {
    "fieldname": "procedure_prescription",
@@ -264,7 +276,7 @@
   {
    "fieldname": "rehabilitation_section",
    "fieldtype": "Section Break",
-   "label": "Rehabilitation"
+   "label": "Rehabilitation, Radiation Therapy"
   },
   {
    "fieldname": "therapies",
@@ -299,6 +311,7 @@
    "fetch_from": "practitioner.department",
    "fieldname": "medical_department",
    "fieldtype": "Link",
+   "hidden": 1,
    "ignore_user_permissions": 1,
    "in_standard_filter": 1,
    "label": "Department",
@@ -320,6 +333,7 @@
    "fetch_from": "practitioner.practitioner_name",
    "fieldname": "practitioner_name",
    "fieldtype": "Data",
+   "hidden": 1,
    "in_list_view": 1,
    "label": "Practitioner Name",
    "read_only": 1
@@ -338,12 +352,14 @@
    "depends_on": "eval:doc.patient",
    "fieldname": "get_applicable_treatment_plans",
    "fieldtype": "Button",
+   "hidden": 1,
    "label": "Get Applicable Treatment Plans"
   },
   {
    "fetch_from": "appointment.google_meet_link",
    "fieldname": "google_meet_link",
    "fieldtype": "Data",
+   "hidden": 1,
    "label": "Google Meet Link",
    "read_only": 1
   },
@@ -360,15 +376,17 @@
   {
    "fieldname": "status",
    "fieldtype": "Select",
+   "hidden": 1,
    "label": "Status",
    "options": "\nOpen\nOrdered\nCompleted\nCancelled",
    "read_only": 1
   },
   {
-   "default": "0",
+   "default": "1",
    "depends_on": "eval:!doc.__islocal;",
    "fieldname": "submit_orders_on_save",
    "fieldtype": "Check",
+   "hidden": 1,
    "label": "Submit Orders on Save"
   },
   {
@@ -387,6 +405,82 @@
    "fieldname": "order_history_html",
    "fieldtype": "HTML",
    "label": "Order History"
+  },
+  {
+   "fieldname": "symptoms_free_text",
+   "fieldtype": "Small Text",
+   "label": "Chief Complains (free text)"
+  },
+  {
+   "fieldname": "dig_free",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis ( free text)"
+  },
+  {
+   "fetch_from": "patient.first_name",
+   "fieldname": "patient_english_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "in_list_view": 1,
+   "label": "Patient English Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.territory",
+   "fieldname": "patient_governorate",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "governorate",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.state",
+   "fieldname": "state",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Region",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.phone",
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Phone",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.address_line",
+   "fieldname": "address",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Address",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_axxe",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_ejdk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "date"
   }
  ],
  "is_submittable": 1,
@@ -394,9 +488,13 @@
   {
    "link_doctype": "Clinical Note",
    "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Chemo Order",
+   "link_fieldname": "reference_name"
   }
  ],
- "modified": "2023-11-07 18:03:12.793649",
+ "modified": "2024-08-20 12:06:36.412303",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Patient Encounter",
index 32246e8..515fdae
--- a/healthcare/doctype/patient_medical_record/patient_medical_record.json
+++ b/healthcare/doctype/patient_medical_record/patient_medical_record.json
@@ -3,7 +3,6 @@
  "allow_copy": 1,
  "allow_import": 1,
  "autoname": "naming_series:",
- "beta": 0,
  "creation": "2016-06-09 11:30:44.972056",
  "doctype": "DocType",
  "document_type": "Setup",
@@ -11,6 +10,7 @@
  "field_order": [
   "naming_series",
   "patient",
+  "title",
   "status",
   "column_break_2",
   "attach",
@@ -121,14 +121,22 @@
   {
    "fieldname": "section_break_8",
    "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Record Title"
   }
  ],
  "in_create": 1,
  "links": [],
- "modified": "2020-04-29 12:26:57.679402",
+ "modified": "2024-08-19 11:09:34.130862",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Patient Medical Record",
+ "naming_rule": "By \"Naming Series\" field",
  "owner": "Administrator",
  "permissions": [
   {
@@ -142,6 +150,19 @@
    "role": "Physician",
    "share": 1,
    "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Patient Medical Record - cancel",
+   "select": 1,
+   "share": 1,
+   "write": 1
   }
  ],
  "restrict_to_domain": "Healthcare",
@@ -149,6 +170,7 @@
  "show_name_in_global_search": 1,
  "sort_field": "modified",
  "sort_order": "DESC",
+ "states": [],
  "title_field": "patient",
  "track_changes": 1,
  "track_seen": 1
--- /dev/null
+++ b/healthcare/doctype/patients_paid/patients_paid.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Patients Paid", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/patients_paid/patients_paid.json
@@ -0,0 +1,97 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-06-01 07:51:46.274998",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "info_section",
+  "patient_info",
+  "f_name",
+  "s_name",
+  "t_name",
+  "paid_status",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "info_section",
+   "fieldtype": "Section Break",
+   "label": "Info"
+  },
+  {
+   "fieldname": "patient_info",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient ",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fieldname": "paid_status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "paid\nfinal paid"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Patients Paid",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+   "fieldname": "f_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "First Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+   "fieldname": "s_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Second Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+   "fieldname": "t_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Third Name",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-06-03 07:05:38.368972",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patients Paid",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/patients_paid/patients_paid.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientsPaid(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/patients_paid/test_patients_paid.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPatientsPaid(FrappeTestCase):
+	pass
index 10b6d3b..5240885
--- a/healthcare/doctype/practitioner_schedule/practitioner_schedule.json
+++ b/healthcare/doctype/practitioner_schedule/practitioner_schedule.json
@@ -3,7 +3,6 @@
  "allow_import": 1,
  "allow_rename": 1,
  "autoname": "field:schedule_name",
- "beta": 0,
  "creation": "2017-05-03 17:28:03.926787",
  "doctype": "DocType",
  "editable_grid": 1,
@@ -56,7 +55,7 @@
   }
  ],
  "links": [],
- "modified": "2022-06-15 07:46:41.154742",
+ "modified": "2024-09-14 22:34:24.578369",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Practitioner Schedule",
--- /dev/null
+++ b/healthcare/doctype/pre_medication_sheet/pre_medication_sheet.json
@@ -0,0 +1,96 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-07-02 04:51:09.498302",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "pre_medication_section",
+  "pre_medicatuib",
+  "dose",
+  "cdose",
+  "duration",
+  "date_time",
+  "column_break_fopx",
+  "route",
+  "dilute",
+  "vol",
+  "day"
+ ],
+ "fields": [
+  {
+   "fieldname": "pre_medicatuib",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Pre Med",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dose",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Dose",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cdose",
+   "fieldtype": "Data",
+   "label": "C.Dose"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Data",
+   "label": "Route"
+  },
+  {
+   "fieldname": "dilute",
+   "fieldtype": "Data",
+   "label": "Dilute"
+  },
+  {
+   "fieldname": "vol",
+   "fieldtype": "Data",
+   "label": "vol"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Data",
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Duration",
+   "reqd": 1
+  },
+  {
+   "fieldname": "day",
+   "fieldtype": "Data",
+   "label": "Day"
+  },
+  {
+   "fieldname": "pre_medication_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medication"
+  },
+  {
+   "fieldname": "date_time",
+   "fieldtype": "Datetime",
+   "label": "Date / Time"
+  },
+  {
+   "fieldname": "column_break_fopx",
+   "fieldtype": "Column Break"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2024-07-06 07:51:28.295924",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Pre Medication Sheet",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/pre_medication_sheet/pre_medication_sheet.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PreMedicationSheet(Document):
+	pass
index 9592bc4..67923e3
--- a/healthcare/doctype/procedure_prescription/procedure_prescription.json
+++ b/healthcare/doctype/procedure_prescription/procedure_prescription.json
@@ -61,8 +61,9 @@
   },
   {
    "fieldname": "comments",
-   "fieldtype": "Data",
-   "label": "Comments"
+   "fieldtype": "Small Text",
+   "label": "Comments",
+   "reqd": 1
   },
   {
    "default": "0",
@@ -130,7 +131,7 @@
  ],
  "istable": 1,
  "links": [],
- "modified": "2023-11-01 23:09:04.600093",
+ "modified": "2024-07-30 19:20:15.592380",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Procedure Prescription",
index d56492b..d09c8d0
--- a/healthcare/doctype/specimen/specimen.json
+++ b/healthcare/doctype/specimen/specimen.json
@@ -10,8 +10,11 @@
  "field_order": [
   "specimen_type",
   "received_time",
+  "spec_status",
+  "department",
   "column_break_wyhn",
   "status",
+  "operator",
   "barcode",
   "section_break_auky",
   "patient",
@@ -19,6 +22,7 @@
   "column_break_1kvr",
   "patient_age",
   "patient_gender",
+  "patient_date_of_birth",
   "section_break_aas5",
   "note"
  ],
@@ -45,7 +49,8 @@
   {
    "fieldname": "received_time",
    "fieldtype": "Datetime",
-   "label": "Received Time"
+   "label": "Received Time",
+   "print_width": "1"
   },
   {
    "fieldname": "barcode",
@@ -55,6 +60,7 @@
   {
    "fieldname": "specimen_type",
    "fieldtype": "Link",
+   "in_list_view": 1,
    "label": "Specimen Type",
    "options": "Lab Test Sample"
   },
@@ -65,6 +71,8 @@
   {
    "fieldname": "patient",
    "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
    "label": "Patient",
    "options": "Patient"
   },
@@ -72,6 +80,7 @@
    "fetch_from": "patient.patient_name",
    "fieldname": "patient_name",
    "fieldtype": "Data",
+   "in_list_view": 1,
    "label": "Patient Name",
    "read_only": 1
   },
@@ -92,11 +101,38 @@
    "label": "Patient Gender",
    "options": "Gender",
    "read_only": 1
+  },
+  {
+   "fieldname": "spec_status",
+   "fieldtype": "Select",
+   "label": "Speciment Status",
+   "options": "Requested\nCollected\nTrasnsmiting\nTransmited\nRejected\nApproved\nCenterfusion\nProcessing\nResult"
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "operator",
+   "fieldtype": "Autocomplete",
+   "label": "\u0633\u0627\u062d\u0628 \u0627\u0644\u062f\u0645",
+   "length": 11,
+   "options": "\n\u0627\u0643\u062a\u0641\u0627\u0621 \u0645\u062d\u0645\u062f\n\u0632\u064a\u0646\u0628 \u0631\u0627\u0626\u062f\n\u0632\u0647\u0631\u0627\u0621\u0627\u0644\u0645\u0638\u0641\u0631"
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "patient_date_of_birth",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "label": "Patient date of birth"
   }
  ],
  "index_web_pages_for_search": 1,
  "links": [],
- "modified": "2023-07-20 18:18:46.964110",
+ "modified": "2024-09-11 15:49:58.397767",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Specimen",
@@ -119,5 +155,6 @@
  "sort_field": "modified",
  "sort_order": "DESC",
  "states": [],
- "track_changes": 1
+ "track_changes": 1,
+ "track_views": 1
 }
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/spic__test_2/spic__test_2.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("spic- test 2", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/doctype/spic__test_2/spic__test_2.json
@@ -0,0 +1,152 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{YY}{MM}{DD}{#####}",
+ "creation": "2024-08-14 11:06:38.190428",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "specimen_type",
+  "received_time",
+  "spec_status",
+  "department",
+  "column_break_wyhn",
+  "status",
+  "operator",
+  "barcode",
+  "section_break_auky",
+  "patient",
+  "patient_name",
+  "column_break_1kvr",
+  "patient_age",
+  "patient_gender",
+  "section_break_aas5",
+  "note"
+ ],
+ "fields": [
+  {
+   "fieldname": "specimen_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Specimen Type",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fieldname": "received_time",
+   "fieldtype": "Datetime",
+   "label": "Received Time",
+   "print_width": "1"
+  },
+  {
+   "fieldname": "spec_status",
+   "fieldtype": "Select",
+   "label": "Speciment Status",
+   "options": "Requested\nCollected\nTrasnsmiting\nTransmited\nRejected\nApproved\nCenterfusion\nProcessing\nResult"
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "column_break_wyhn",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Available\nUnavailable\nUnsatisfactory\nEntered In Error"
+  },
+  {
+   "fieldname": "operator",
+   "fieldtype": "Autocomplete",
+   "label": "\u0633\u0627\u062d\u0628 \u0627\u0644\u062f\u0645",
+   "length": 11,
+   "options": "\u0647\u0627\u0644\u0629 \u0641\u0627\u0631\u0633\n\u0627\u0643\u062a\u0641\u0627\u0621 \u0645\u062d\u0645\u062f\n\u0632\u064a\u0646\u0628 \u0631\u0627\u0626\u062f\nother"
+  },
+  {
+   "fieldname": "barcode",
+   "fieldtype": "Barcode",
+   "label": "Barcode"
+  },
+  {
+   "fieldname": "section_break_auky",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_1kvr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_gender",
+   "fieldtype": "Link",
+   "label": "Patient Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_aas5",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "note",
+   "fieldtype": "Text Editor",
+   "label": "Note"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-14 11:06:38.190428",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "spic- test 2",
+ "naming_rule": "Expression",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1,
+ "track_views": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/doctype/spic__test_2/spic__test_2.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class spictest2(Document):
+	pass
--- /dev/null
+++ b/healthcare/doctype/spic__test_2/test_spic__test_2.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class Testspictest2(FrappeTestCase):
+	pass
index c03e9de..b85fc0e
--- a/healthcare/doctype/therapy_plan/therapy_plan.json
+++ b/healthcare/doctype/therapy_plan/therapy_plan.json
@@ -21,7 +21,62 @@
   "section_break_9",
   "total_sessions",
   "column_break_11",
-  "total_sessions_completed"
+  "total_sessions_completed",
+  "treatment_plan_check_list_tab",
+  "planning_technique_section",
+  "3d",
+  "column_break_vowa",
+  "imrt",
+  "column_break_eprl",
+  "vmat",
+  "structures_set_defined_section",
+  "aa",
+  "column_break_gyub",
+  "ctv",
+  "column_break_nntv",
+  "gtv",
+  "column_break_axvv",
+  "oars",
+  "rt_treatment_accessories_section",
+  "bolus",
+  "column_break_pduf",
+  "applicator",
+  "column_break_hols",
+  "compensator",
+  "section_break_rydl",
+  "gating",
+  "column_break_zzfw",
+  "insert_couch_and_immobilization",
+  "section_break_dyay",
+  "user_origin_correctly",
+  "column_break_lbde",
+  "prescription_doesgy",
+  "section_break_owpn",
+  "plan_normalization",
+  "column_break_micj",
+  "beams_group_have_the_same_iscenter",
+  "section_break_zuwp",
+  "setup_field_and_correct_drr_image",
+  "column_break_qabw",
+  "does_distributions",
+  "section_break_ifto",
+  "beam_geometry",
+  "column_break_beqt",
+  "dmax_in_patient",
+  "section_break_sgri",
+  "reference_dose_coveragedx__vx",
+  "column_break_zywc",
+  "oars_doses_met_criteria",
+  "section_break_hwyy",
+  "prescription_dose_at_the_reference_point",
+  "column_break_hzrr",
+  "patient_shifts_in_treatment_preparation",
+  "section_break_pqct",
+  "reference_point_check",
+  "column_break_wbwl",
+  "signed_planning_approvaleclipse",
+  "section_break_vyxt",
+  "signed_treatment_approvaleclipse"
  ],
  "fields": [
   {
@@ -30,7 +85,8 @@
    "in_list_view": 1,
    "label": "Patient",
    "options": "Patient",
-   "reqd": 1
+   "reqd": 1,
+   "search_index": 1
   },
   {
    "fieldname": "start_date",
@@ -61,6 +117,8 @@
    "fetch_from": "patient.patient_name",
    "fieldname": "patient_name",
    "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
    "label": "Patient Name",
    "read_only": 1
   },
@@ -126,13 +184,301 @@
    "no_copy": 1,
    "print_hide": 1,
    "read_only": 1
+  },
+  {
+   "fieldname": "treatment_plan_check_list_tab",
+   "fieldtype": "Tab Break",
+   "label": "Treatment plan check list"
+  },
+  {
+   "fieldname": "planning_technique_section",
+   "fieldtype": "Section Break",
+   "label": "Planning Technique"
+  },
+  {
+   "default": "0",
+   "fieldname": "3d",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "3D"
+  },
+  {
+   "fieldname": "column_break_vowa",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "imrt",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "IMRT"
+  },
+  {
+   "fieldname": "column_break_eprl",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "vmat",
+   "fieldtype": "Check",
+   "label": "VMAT"
+  },
+  {
+   "fieldname": "structures_set_defined_section",
+   "fieldtype": "Section Break",
+   "label": "Structures set defined"
+  },
+  {
+   "default": "0",
+   "fieldname": "aa",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "PVT"
+  },
+  {
+   "fieldname": "column_break_gyub",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "ctv",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "CTV"
+  },
+  {
+   "fieldname": "column_break_nntv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "gtv",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "GTV"
+  },
+  {
+   "fieldname": "column_break_axvv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "oars",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "OARs"
+  },
+  {
+   "fieldname": "rt_treatment_accessories_section",
+   "fieldtype": "Section Break",
+   "label": "RT treatment accessories"
+  },
+  {
+   "default": "0",
+   "fieldname": "bolus",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Bolus"
+  },
+  {
+   "fieldname": "column_break_pduf",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "applicator",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Applicator"
+  },
+  {
+   "fieldname": "column_break_hols",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "compensator",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Compensator"
+  },
+  {
+   "fieldname": "section_break_rydl",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "gating",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Gating"
+  },
+  {
+   "fieldname": "column_break_zzfw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "insert_couch_and_immobilization",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "insert couch and immobilization"
+  },
+  {
+   "fieldname": "section_break_dyay",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "user_origin_correctly",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "User origin correctly"
+  },
+  {
+   "fieldname": "column_break_lbde",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "prescription_doesgy",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Prescription Does(Gy)"
+  },
+  {
+   "fieldname": "section_break_owpn",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "plan_normalization",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Plan normalization"
+  },
+  {
+   "fieldname": "column_break_micj",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "beams_group_have_the_same_iscenter",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Beams group have the same ISCENTER"
+  },
+  {
+   "fieldname": "section_break_zuwp",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "setup_field_and_correct_drr_image",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Setup Field and correct DRR image"
+  },
+  {
+   "fieldname": "column_break_qabw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "does_distributions",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Does Distributions"
+  },
+  {
+   "fieldname": "section_break_ifto",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "beam_geometry",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Beam geometry"
+  },
+  {
+   "fieldname": "column_break_beqt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "dmax_in_patient",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Dmax in Patient"
+  },
+  {
+   "fieldname": "section_break_sgri",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "reference_dose_coveragedx__vx",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Reference dose coverage(DX % VX%)"
+  },
+  {
+   "fieldname": "column_break_zywc",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "oars_doses_met_criteria",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "OARs doses met criteria"
+  },
+  {
+   "fieldname": "section_break_hwyy",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "prescription_dose_at_the_reference_point",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "prescription dose at the reference point"
+  },
+  {
+   "fieldname": "column_break_hzrr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_shifts_in_treatment_preparation",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "patient shifts in treatment preparation"
+  },
+  {
+   "fieldname": "section_break_pqct",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "reference_point_check",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Reference point check"
+  },
+  {
+   "fieldname": "column_break_wbwl",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "signed_planning_approvaleclipse",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Signed planning approval(Eclipse)"
+  },
+  {
+   "fieldname": "section_break_vyxt",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "signed_treatment_approvaleclipse",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Signed treatment approval(Eclipse)"
   }
  ],
  "links": [],
- "modified": "2020-11-04 18:13:13.564999",
+ "modified": "2024-08-31 08:22:10.952224",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Therapy Plan",
+ "naming_rule": "By \"Naming Series\" field",
  "owner": "Administrator",
  "permissions": [
   {
@@ -171,9 +517,10 @@
   }
  ],
  "quick_entry": 1,
- "search_fields": "patient",
+ "search_fields": "patient_name",
  "sort_field": "modified",
  "sort_order": "DESC",
- "title_field": "patient",
+ "states": [],
+ "title_field": "patient_name",
  "track_changes": 1
 }
\ No newline at end of file
index cfc25a3..0b2bf4b
--- a/healthcare/doctype/therapy_session/therapy_session.json
+++ b/healthcare/doctype/therapy_session/therapy_session.json
@@ -90,13 +90,6 @@
    "fieldtype": "Section Break",
    "label": "Details"
   },
-  {
-   "fetch_from": "therapy_template.default_duration",
-   "fieldname": "duration",
-   "fieldtype": "Int",
-   "label": "Duration",
-   "reqd": 1
-  },
   {
    "fieldname": "location",
    "fieldtype": "Select",
@@ -244,6 +237,13 @@
    "fieldname": "more_information_section",
    "fieldtype": "Section Break",
    "label": "More Information"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Int",
+   "label": "Duration",
+   "non_negative": 1,
+   "reqd": 1
   }
  ],
  "is_submittable": 1,
@@ -251,9 +251,13 @@
   {
    "link_doctype": "Nursing Task",
    "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Sales Invoice",
+   "link_fieldname": "reference_name"
   }
  ],
- "modified": "2023-04-06 04:11:55.237021",
+ "modified": "2024-08-14 17:14:50.817700",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Therapy Session",
index 135c23c..8239ccd
--- a/healthcare/doctype/vital_signs/vital_signs.json
+++ b/healthcare/doctype/vital_signs/vital_signs.json
@@ -30,10 +30,12 @@
   "bp_systolic",
   "bp_diastolic",
   "bp",
+  "spo2",
   "vital_signs_note",
   "sb_nutrition_values",
   "height",
   "weight",
+  "body_surface_area",
   "bmi",
   "column_break_14",
   "nutrition_note",
@@ -190,7 +192,7 @@
    "fieldname": "height",
    "fieldtype": "Float",
    "in_list_view": 1,
-   "label": "Height (In Meter)"
+   "label": "Height (In Centimeter)"
   },
   {
    "fieldname": "weight",
@@ -253,11 +255,22 @@
    "no_copy": 1,
    "print_hide": 1,
    "read_only": 1
+  },
+  {
+   "fieldname": "spo2",
+   "fieldtype": "Data",
+   "label": "SPO2"
+  },
+  {
+   "fieldname": "body_surface_area",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "body surface area (In Meter square)"
   }
  ],
  "is_submittable": 1,
  "links": [],
- "modified": "2023-01-14 19:10:30.668831",
+ "modified": "2024-08-22 02:04:56.455323",
  "modified_by": "Administrator",
  "module": "Healthcare",
  "name": "Vital Signs",
index 41f3d2a..7a98e61
--- a/healthcare/doctype/vital_signs/vital_signs.py
+++ b/healthcare/doctype/vital_signs/vital_signs.py
@@ -2,17 +2,36 @@
 # Copyright (c) 2015, ESS LLP and contributors
 # For license information, please see license.txt
 
-
 import frappe
+import math
 from frappe import _
 from frappe.model.document import Document
 
-
 class VitalSigns(Document):
-	def validate(self):
-		self.set_title()
+    def validate(self):
+        self.set_title()
+
+    def set_title(self):
+        self.title = _("{0} on {1}").format(
+            self.patient_name or self.patient, frappe.utils.format_date(self.signs_date)
+        )[:100]
+
+    def calculate_bsa(self):
+        if self.check_height_weight():
+            self.body_surface_area = round(math.sqrt((self.weight * self.height) / 3600), 2)
+           # frappe.msgprint(f"BSA: {self.body_surface_area}")
+
+    def before_save(self):
+        self.calculate_bsa()
+        self.calculate_bmi()
+
+    def calculate_bmi(self):
+        # Convert height from cm to meters
+        if self.check_height_weight():
+            height_m = self.height / 100
+            # Calculate BMI
+            self.bmi = round(self.weight / (height_m ** 2), 2)
+            #frappe.msgprint(f"BMI: {self.bmi}")
 
-	def set_title(self):
-		self.title = _("{0} on {1}").format(
-			self.patient_name or self.patient, frappe.utils.format_date(self.signs_date)
-		)[:100]
+    def check_height_weight(self):
+        return self.height > 0 and self.weight > 0
--- /dev/null
+++ b/healthcare/healthcare/custom_doctype/sales_invoice.py
@@ -0,0 +1,50 @@
+import frappe
+
+from erpnext.accounts.doctype.sales_invoice.sales_invoice import SalesInvoice
+
+
+class HealthcareSalesInvoice(SalesInvoice):
+	@frappe.whitelist()
+	def set_healthcare_services(self, checked_values):
+		from erpnext.stock.get_item_details import get_item_details
+
+		for checked_item in checked_values:
+			item_line = self.append("items", {})
+			price_list, price_list_currency = frappe.db.get_values(
+				"Price List", {"selling": 1}, ["name", "currency"]
+			)[0]
+			args = {
+				"doctype": "Sales Invoice",
+				"item_code": checked_item["item"],
+				"company": self.company,
+				"customer": frappe.db.get_value("Patient", self.patient, "customer"),
+				"selling_price_list": price_list,
+				"price_list_currency": price_list_currency,
+				"plc_conversion_rate": 1.0,
+				"conversion_rate": 1.0,
+			}
+			item_details = get_item_details(args)
+			item_line.item_code = checked_item["item"]
+			item_line.qty = 1
+			if checked_item["qty"]:
+				item_line.qty = checked_item["qty"]
+			if checked_item["rate"]:
+				item_line.rate = checked_item["rate"]
+			else:
+				item_line.rate = item_details.price_list_rate
+			item_line.amount = float(item_line.rate) * float(item_line.qty)
+			if checked_item["income_account"]:
+				item_line.income_account = checked_item["income_account"]
+			if checked_item["dt"]:
+				item_line.reference_dt = checked_item["dt"]
+			if checked_item["dn"]:
+				item_line.reference_dn = checked_item["dn"]
+			if checked_item["description"]:
+				item_line.description = checked_item["description"]
+			if checked_item["dt"] == "Lab Test":
+				lab_test = frappe.get_doc("Lab Test", checked_item["dn"])
+				item_line.service_unit = lab_test.service_unit
+				item_line.practitioner = lab_test.practitioner
+				item_line.medical_department = lab_test.department
+
+		self.set_missing_values(for_validate=True)
--- /dev/null
+++ b/healthcare/healthcare/custom_doctype/test_sales_invoice.py
@@ -0,0 +1,29 @@
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+test_records = frappe.get_test_records("Sales Invoice")
+
+
+class TestSalesInvoice(FrappeTestCase):
+	def test_set_healthcare_services_should_preserve_state(self):
+		invoice = frappe.copy_doc(test_records[0])
+
+		count = len(invoice.items)
+		item = invoice.items[0]
+		checked_values = [
+			{
+				"dt": "Item",
+				"dn": item.item_name,
+				"item": item.item_code,
+				"qty": False,
+				"rate": False,
+				"income_account": False,
+				"description": False,
+			}
+		]
+
+		invoice.set_healthcare_services(checked_values)
+		self.assertEqual(count + 1, len(invoice.items))
+
+		invoice.set_healthcare_services(checked_values)
+		self.assertEqual(count + 2, len(invoice.items))
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/clinical_procedures/clinical_procedures.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "Clinical Procedures",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.601236",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Clinical Procedure",
+ "dynamic_filters_json": "[[\"Clinical Procedure\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Clinical Procedure\",\"docstatus\",\"=\",\"1\",false]]",
+ "group_by_based_on": "procedure_template",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2021-01-30 21:03:30.086891",
+ "modified": "2021-02-01 13:36:04.469863",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Procedures",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/clinical_procedures_status/clinical_procedures_status.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "Clinical Procedure Status",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.654325",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Clinical Procedure",
+ "dynamic_filters_json": "[[\"Clinical Procedure\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Clinical Procedure\",\"docstatus\",\"=\",\"1\",false]]",
+ "group_by_based_on": "status",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2021-02-01 13:36:38.787783",
+ "modified": "2021-02-01 13:37:18.718275",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Procedures Status",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/department_wise_patient_appointments/department_wise_patient_appointments.json
@@ -0,0 +1,25 @@
+{
+ "chart_name": "Department wise Patient Appointments",
+ "chart_type": "Custom",
+ "creation": "2020-07-17 11:25:37.190130",
+ "custom_options": "{\"colors\": [\"#7CD5FA\", \"#5F62F6\", \"#7544E2\", \"#EE5555\"], \"barOptions\": {\"stacked\": 1}, \"height\": 300}",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "dynamic_filters_json": "{\"company\":\"frappe.defaults.get_user_default(\\\"Company\\\")\"}",
+ "filters_json": "{}",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2020-07-22 15:32:05.827566",
+ "modified": "2020-07-22 15:35:12.798035",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Department wise Patient Appointments",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "source": "Department wise Patient Appointments",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/diagnoses/diagnoses.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "Diagnoses",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.705698",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Patient Encounter Diagnosis",
+ "dynamic_filters_json": "",
+ "filters_json": "[]",
+ "group_by_based_on": "diagnosis",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2021-01-30 21:03:33.729487",
+ "modified": "2021-02-01 13:34:57.385335",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diagnoses",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/in_patient_status/in_patient_status.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "In-Patient Status",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.629199",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Inpatient Record",
+ "dynamic_filters_json": "[[\"Inpatient Record\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[]",
+ "group_by_based_on": "status",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2020-07-22 13:22:46.792131",
+ "modified": "2020-07-22 13:33:16.008150",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "In-Patient Status",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/lab_tests/lab_tests.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "Lab Tests",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.574903",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Lab Test",
+ "dynamic_filters_json": "[[\"Lab Test\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Lab Test\",\"docstatus\",\"=\",\"1\",false]]",
+ "group_by_based_on": "template",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2021-01-30 21:03:28.272914",
+ "modified": "2021-02-01 13:36:08.391433",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Tests",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/patient_appointments/patient_appointments.json
@@ -0,0 +1,27 @@
+{
+ "based_on": "appointment_datetime",
+ "chart_name": "Patient Appointments",
+ "chart_type": "Count",
+ "creation": "2020-07-14 18:17:54.525082",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Patient Appointment",
+ "dynamic_filters_json": "[[\"Patient Appointment\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Patient Appointment\",\"status\",\"!=\",\"Cancelled\",false]]",
+ "idx": 0,
+ "is_public": 0,
+ "is_standard": 1,
+ "last_synced_on": "2020-07-22 13:22:46.830491",
+ "modified": "2020-07-22 13:38:02.254190",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Appointments",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "time_interval": "Daily",
+ "timeseries": 1,
+ "timespan": "Last Month",
+ "type": "Line",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart/symptoms/symptoms.json
@@ -0,0 +1,26 @@
+{
+ "chart_name": "Symptoms",
+ "chart_type": "Group By",
+ "creation": "2020-07-14 18:17:54.680852",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart",
+ "document_type": "Patient Encounter Symptom",
+ "dynamic_filters_json": "",
+ "filters_json": "[]",
+ "group_by_based_on": "complaint",
+ "group_by_type": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "last_synced_on": "2021-01-30 21:03:32.067473",
+ "modified": "2021-02-01 13:35:30.953718",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Symptoms",
+ "number_of_groups": 0,
+ "owner": "Administrator",
+ "timeseries": 0,
+ "type": "Bar",
+ "use_report_chart": 0,
+ "y_axis": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart_source/department_wise_patient_appointments/department_wise_patient_appointments.js
@@ -0,0 +1,14 @@
+frappe.provide('frappe.dashboards.chart_sources');
+
+frappe.dashboards.chart_sources["Department wise Patient Appointments"] = {
+	method: "healthcare.healthcare.dashboard_chart_source.department_wise_patient_appointments.department_wise_patient_appointments.get",
+	filters: [
+		{
+			fieldname: "company",
+			label: __("Company"),
+			fieldtype: "Link",
+			options: "Company",
+			default: frappe.defaults.get_user_default("Company")
+		}
+	]
+};
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart_source/department_wise_patient_appointments/department_wise_patient_appointments.json
@@ -0,0 +1,13 @@
+{
+ "creation": "2020-05-18 19:18:42.571045",
+ "docstatus": 0,
+ "doctype": "Dashboard Chart Source",
+ "idx": 0,
+ "modified": "2020-05-18 19:18:42.571045",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Department wise Patient Appointments",
+ "owner": "Administrator",
+ "source_name": "Department wise Patient Appointments",
+ "timeseries": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/dashboard_chart_source/department_wise_patient_appointments/department_wise_patient_appointments.py
@@ -0,0 +1,71 @@
+# Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
+# License: GNU General Public License v3. See license.txt
+
+
+import frappe
+from frappe import _
+from frappe.utils.dashboard import cache_source
+
+
+@frappe.whitelist()
+@cache_source
+def get(
+	chart_name=None,
+	chart=None,
+	no_cache=None,
+	filters=None,
+	from_date=None,
+	to_date=None,
+	timespan=None,
+	time_interval=None,
+	heatmap_year=None,
+):
+	if chart_name:
+		chart = frappe.get_doc("Dashboard Chart", chart_name)
+	else:
+		chart = frappe._dict(frappe.parse_json(chart))
+
+	filters = frappe.parse_json(filters)
+
+	data = frappe.db.get_list("Medical Department", fields=["name"])
+	if not filters:
+		filters = {}
+
+	status = ["Open", "Scheduled", "Closed", "Cancelled"]
+	for department in data:
+		filters["department"] = department.name
+		department["total_appointments"] = frappe.db.count("Patient Appointment", filters=filters)
+
+		for entry in status:
+			filters["status"] = entry
+			department[frappe.scrub(entry)] = frappe.db.count("Patient Appointment", filters=filters)
+		filters.pop("status")
+
+	sorted_department_map = sorted(data, key=lambda i: i["total_appointments"], reverse=True)
+
+	if len(sorted_department_map) > 10:
+		sorted_department_map = sorted_department_map[:10]
+
+	labels = []
+	open_appointments = []
+	scheduled = []
+	closed = []
+	cancelled = []
+
+	for department in sorted_department_map:
+		labels.append(department.name)
+		open_appointments.append(department.open)
+		scheduled.append(department.scheduled)
+		closed.append(department.closed)
+		cancelled.append(department.cancelled)
+
+	return {
+		"labels": labels,
+		"datasets": [
+			{"name": _("Open"), "values": open_appointments},
+			{"name": _("Scheduled"), "values": scheduled},
+			{"name": _("Closed"), "values": closed},
+			{"name": _("Cancelled"), "values": cancelled},
+		],
+		"type": "bar",
+	}
--- /dev/null
+++ b/healthcare/healthcare/desk_page/healthcare/healthcare.json
@@ -0,0 +1,122 @@
+{
+ "cards": [
+  {
+   "hidden": 0,
+   "label": "Masters",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient\",\n\t\t\"label\": \"Patient\",\n\t\t\"onboard\": 1\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Healthcare Practitioner\",\n\t\t\"label\":\"Healthcare Practitioner\",\n\t\t\"onboard\": 1\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Practitioner Schedule\",\n\t\t\"label\": \"Practitioner Schedule\",\n\t\t\"onboard\": 1\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Medical Department\",\n\t\t\"label\": \"Medical Department\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Healthcare Service Unit Type\",\n\t\t\"label\": \"Healthcare Service Unit Type\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Healthcare Service Unit\",\n\t\t\"label\": \"Healthcare Service Unit\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Medical Code Standard\",\n\t\t\"label\": \"Medical Code Standard\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Medical Code\",\n\t\t\"label\": \"Medical Code\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Consultation Setup",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Appointment Type\",\n\t\t\"label\": \"Appointment Type\"\n    },\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Clinical Procedure Template\",\n\t\t\"label\": \"Clinical Procedure Template\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Prescription Dosage\",\n\t\t\"label\": \"Prescription Dosage\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Prescription Duration\",\n\t\t\"label\": \"Prescription Duration\"\n\t},\n\t{\n\t    \"type\": \"doctype\",\n\t\t\"name\": \"Antibiotic\",\n\t\t\"label\": \"Antibiotic\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Consultation",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient Appointment\",\n\t\t\"label\": \"Patient Appointment\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Clinical Procedure\",\n\t\t\"label\": \"Clinical Procedure\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient Encounter\",\n\t\t\"label\": \"Patient Encounter\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Vital Signs\",\n\t\t\"label\": \"Vital Signs\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Complaint\",\n\t\t\"label\": \"Complaint\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Diagnosis\",\n\t\t\"label\": \"Diagnosis\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Fee Validity\",\n\t\t\"label\": \"Fee Validity\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Settings",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Healthcare Settings\",\n\t\t\"label\": \"Healthcare Settings\",\n\t\t\"onboard\": 1\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Laboratory Setup",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Lab Test Template\",\n\t\t\"label\": \"Lab Test Template\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Lab Test Sample\",\n\t\t\"label\": \"Lab Test Sample\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Lab Test UOM\",\n\t\t\"label\": \"Lab Test UOM\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Sensitivity\",\n\t\t\"label\": \"Sensitivity\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Laboratory",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Lab Test\",\n\t\t\"label\": \"Lab Test\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Sample Collection\",\n\t\t\"label\": \"Sample Collection\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Dosage Form\",\n\t\t\"label\": \"Dosage Form\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Inpatient",
+   "links": "[\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Inpatient Record\",\n\t\t\"label\": \"Inpatient Record\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Inpatient Medication Order\",\n\t\t\"label\": \"Inpatient Medication Order\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Inpatient Medication Entry\",\n\t\t\"label\": \"Inpatient Medication Entry\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Rehabilitation and Physiotherapy",
+   "links": "[\n    {\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Exercise Type\",\n\t\t\"label\": \"Exercise Type\",\n\t\t\"onboard\": 1\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Therapy Type\",\n\t\t\"label\": \"Therapy Type\",\n\t\t\"onboard\": 1\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Therapy Plan\",\n\t\t\"label\": \"Therapy Plan\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Therapy Session\",\n\t\t\"label\": \"Therapy Session\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient Assessment Template\",\n\t\t\"label\": \"Patient Assessment Template\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient Assessment\",\n\t\t\"label\": \"Patient Assessment\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Records and History",
+   "links": "[\n\t{\n\t\t\"type\": \"page\",\n\t\t\"name\": \"patient_history\",\n\t\t\"label\": \"Patient History\"\n\t},\n\t{\n\t\t\"type\": \"page\",\n\t\t\"name\": \"patient-progress\",\n\t\t\"label\": \"Patient Progress\"\n\t},\n\t{\n\t\t\"type\": \"doctype\",\n\t\t\"name\": \"Patient Medical Record\",\n\t\t\"label\": \"Patient Medical Record\"\n\t}\n]"
+  },
+  {
+   "hidden": 0,
+   "label": "Reports",
+   "links": "[\n\t{\n\t\t\"type\": \"report\",\n\t\t\"is_query_report\": true,\n\t\t\"name\": \"Patient Appointment Analytics\",\n\t\t\"doctype\": \"Patient Appointment\"\n\t},\n\t{\n\t\t\"type\": \"report\",\n\t\t\"is_query_report\": true,\n\t\t\"name\": \"Lab Test Report\",\n\t\t\"doctype\": \"Lab Test\",\n\t\t\"label\": \"Lab Test Report\"\n\t},\n\t{\n\t\t\"type\": \"report\",\n\t\t\"is_query_report\": true,\n\t\t\"name\": \"Inpatient Medication Orders\",\n\t\t\"doctype\": \"Inpatient Medication Order\",\n\t\t\"label\": \"Inpatient Medication Orders\"\n\t}\n]"
+  }
+ ],
+ "category": "Domains",
+ "charts": [
+  {
+   "chart_name": "Patient Appointments",
+   "label": "Patient Appointments"
+  }
+ ],
+ "charts_label": "",
+ "creation": "2020-03-02 17:23:17.919682",
+ "developer_mode_only": 0,
+ "disable_user_customization": 0,
+ "docstatus": 0,
+ "doctype": "Desk Page",
+ "extends_another_page": 0,
+ "hide_custom": 0,
+ "idx": 0,
+ "is_standard": 1,
+ "label": "Healthcare",
+ "modified": "2020-11-26 22:09:09.164584",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare",
+ "onboarding": "Healthcare",
+ "owner": "Administrator",
+ "pin_to_bottom": 0,
+ "pin_to_top": 0,
+ "restrict_to_domain": "Healthcare",
+ "shortcuts": [
+  {
+   "color": "#ffe8cd",
+   "format": "{} Open",
+   "label": "Patient Appointment",
+   "link_to": "Patient Appointment",
+   "stats_filter": "{\n    \"status\": \"Open\",\n    \"company\": [\"like\", '%' + frappe.defaults.get_global_default(\"company\") + '%']\n}",
+   "type": "DocType"
+  },
+  {
+   "color": "#ffe8cd",
+   "format": "{} Active",
+   "label": "Patient",
+   "link_to": "Patient",
+   "stats_filter": "{\n    \"status\": \"Active\"\n}",
+   "type": "DocType"
+  },
+  {
+   "color": "#cef6d1",
+   "format": "{} Vacant",
+   "label": "Healthcare Service Unit",
+   "link_to": "Healthcare Service Unit",
+   "stats_filter": "{\n    \"occupancy_status\": \"Vacant\",\n    \"is_group\": 0,\n    \"company\": [\"like\", \"%\" + frappe.defaults.get_global_default(\"company\") + \"%\"]\n}",
+   "type": "DocType"
+  },
+  {
+   "label": "Healthcare Practitioner",
+   "link_to": "Healthcare Practitioner",
+   "type": "DocType"
+  },
+  {
+   "label": "Patient History",
+   "link_to": "patient_history",
+   "type": "Page"
+  },
+  {
+   "label": "Dashboard",
+   "link_to": "Healthcare",
+   "type": "Dashboard"
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_request/abdm_request.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2022, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('ABDM Request', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_request/abdm_request.json
@@ -0,0 +1,107 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2022-03-15 18:16:17.060579",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "request_name",
+  "request_date",
+  "column_break_3",
+  "status",
+  "url",
+  "section_break_4",
+  "request",
+  "traceback",
+  "column_break_6",
+  "response"
+ ],
+ "fields": [
+  {
+   "fieldname": "request_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Request Name",
+   "read_only": 1
+  },
+  {
+   "default": "Now",
+   "fieldname": "request_date",
+   "fieldtype": "Datetime",
+   "label": "Request Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Requested\nGranted\nRevoked\nExpired\nDenied",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_4",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "request",
+   "fieldtype": "Code",
+   "label": "Request",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "response",
+   "fieldtype": "Code",
+   "label": "Response",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "url",
+   "fieldtype": "Data",
+   "label": "URL"
+  },
+  {
+   "fieldname": "traceback",
+   "fieldtype": "Code",
+   "label": "Traceback",
+   "read_only": 1
+  }
+ ],
+ "in_create": 1,
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2022-03-24 11:11:01.555036",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "ABDM Request",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_request/abdm_request.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2022, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ABDMRequest(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_request/test_abdm_request.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2022, healthcare and Contributors
+# See license.txt
+
+# import frappe
+import unittest
+
+
+class TestABDMRequest(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_settings/abdm_settings.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2022, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('ABDM Settings', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_settings/abdm_settings.json
@@ -0,0 +1,136 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{gateway_name}-{company}",
+ "creation": "2022-03-14 20:32:55.651045",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "gateway_name",
+  "default",
+  "column_break_2",
+  "company",
+  "authorization_section",
+  "auth_base_url",
+  "column_break_7",
+  "client_id",
+  "client_secret",
+  "health_id_service_section",
+  "health_id_base_url",
+  "consent_management_section",
+  "consent_base_url",
+  "patient_consent_template_tab",
+  "consent_section_section",
+  "patient_aadhaar_consent"
+ ],
+ "fields": [
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company"
+  },
+  {
+   "default": "0",
+   "fieldname": "default",
+   "fieldtype": "Check",
+   "label": "Default"
+  },
+  {
+   "fieldname": "client_id",
+   "fieldtype": "Data",
+   "label": "Client ID"
+  },
+  {
+   "fieldname": "client_secret",
+   "fieldtype": "Data",
+   "label": "Client Secret"
+  },
+  {
+   "fieldname": "auth_base_url",
+   "fieldtype": "Data",
+   "label": "Base URL"
+  },
+  {
+   "fieldname": "gateway_name",
+   "fieldtype": "Data",
+   "label": "Gateway Name"
+  },
+  {
+   "fieldname": "authorization_section",
+   "fieldtype": "Section Break",
+   "label": "Authorization"
+  },
+  {
+   "fieldname": "column_break_7",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "health_id_service_section",
+   "fieldtype": "Section Break",
+   "label": "Health ID Service"
+  },
+  {
+   "fieldname": "health_id_base_url",
+   "fieldtype": "Data",
+   "label": "Base URL"
+  },
+  {
+   "fieldname": "consent_management_section",
+   "fieldtype": "Section Break",
+   "label": "Consent Management"
+  },
+  {
+   "fieldname": "consent_base_url",
+   "fieldtype": "Data",
+   "label": "Base URL"
+  },
+  {
+   "fieldname": "consent_section_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Consent Template"
+  },
+  {
+   "description": "Patient Consent To Use Aadhaar For ABHA Creation",
+   "fieldname": "patient_aadhaar_consent",
+   "fieldtype": "Link",
+   "label": "Aadhaar Consent Template",
+   "options": "Terms and Conditions"
+  },
+  {
+   "fieldname": "patient_consent_template_tab",
+   "fieldtype": "Tab Break",
+   "label": "Patient Consent Template"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-01-14 19:03:21.188365",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "ABDM Settings",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_settings/abdm_settings.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2022, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ABDMSettings(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/abdm_settings/test_abdm_settings.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2022, healthcare and Contributors
+# See license.txt
+
+# import frappe
+import unittest
+
+
+class TestABDMSettings(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/anti_cancer_drug__sheet/anti_cancer_drug__sheet.json
@@ -0,0 +1,92 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-07-02 05:04:59.830018",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "anti_cancer_drugs_section",
+  "drug",
+  "dose",
+  "cdose",
+  "day",
+  "date_time",
+  "column_break_gtut",
+  "route",
+  "dilute",
+  "volume",
+  "duration"
+ ],
+ "fields": [
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "fieldname": "drug",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Drug",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dose",
+   "fieldtype": "Data",
+   "label": "Dose"
+  },
+  {
+   "fieldname": "cdose",
+   "fieldtype": "Data",
+   "label": "C.Dose"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Data",
+   "label": "Route"
+  },
+  {
+   "fieldname": "dilute",
+   "fieldtype": "Data",
+   "label": "Dilute"
+  },
+  {
+   "fieldname": "volume",
+   "fieldtype": "Data",
+   "label": "Vol"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Data",
+   "hide_seconds": 1,
+   "label": "duration"
+  },
+  {
+   "fieldname": "day",
+   "fieldtype": "Data",
+   "label": "Day"
+  },
+  {
+   "fieldname": "date_time",
+   "fieldtype": "Datetime",
+   "label": "Date / Time"
+  },
+  {
+   "fieldname": "column_break_gtut",
+   "fieldtype": "Column Break"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2024-07-06 07:53:22.653563",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Anti Cancer Drug  Sheet",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/anti_cancer_drug__sheet/anti_cancer_drug__sheet.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class AntiCancerDrugSheet(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/antibiotic/antibiotic.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Antibiotic', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/antibiotic/antibiotic.json
@@ -0,0 +1,151 @@
+{
+ "allow_copy": 1,
+ "allow_events_in_timeline": 0,
+ "allow_guest_to_view": 0,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:antibiotic_name",
+ "beta": 0,
+ "creation": "2016-02-23 11:11:30.749731",
+ "custom": 0,
+ "docstatus": 0,
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 0,
+ "fields": [
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "antibiotic_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Antibiotic Name",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 1,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 1
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "abbr",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 0,
+   "in_standard_filter": 0,
+   "label": "Abbr",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 1
+  }
+ ],
+ "has_web_view": 0,
+ "hide_heading": 0,
+ "hide_toolbar": 0,
+ "idx": 0,
+ "image_view": 0,
+ "in_create": 0,
+ "is_submittable": 0,
+ "issingle": 0,
+ "istable": 0,
+ "max_attachments": 0,
+ "modified": "2019-10-01 17:58:23.136498",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Antibiotic",
+ "name_case": "",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 0,
+   "cancel": 0,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "if_owner": 0,
+   "import": 0,
+   "permlevel": 0,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "set_user_permissions": 0,
+   "share": 1,
+   "submit": 0,
+   "write": 1
+  },
+  {
+   "amend": 0,
+   "cancel": 0,
+   "create": 0,
+   "delete": 0,
+   "email": 1,
+   "export": 1,
+   "if_owner": 0,
+   "import": 0,
+   "permlevel": 0,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "set_user_permissions": 0,
+   "share": 1,
+   "submit": 0,
+   "write": 0
+  }
+ ],
+ "quick_entry": 1,
+ "read_only": 0,
+ "read_only_onload": 0,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "antibiotic_name",
+ "show_name_in_global_search": 0,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "antibiotic_name",
+ "track_changes": 0,
+ "track_seen": 0,
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/antibiotic/antibiotic.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class Antibiotic(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/antibiotic/test_antibiotic.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestAntibiotic(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type/appointment_type.js
@@ -0,0 +1,110 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Appointment Type', {
+	refresh: function(frm) {
+		frm.set_query('price_list', function() {
+			return {
+				filters: {'selling': 1}
+			};
+		});
+
+		frm.set_query('dt', 'items', function() {
+			if (['Department', 'Practitioner'].includes(frm.doc.allow_booking_for)) {
+				return {
+					filters: {'name': ['=', 'Medical Department']}
+				};
+			} else if (frm.doc.allow_booking_for === "Service Unit") {
+				return {
+					filters: {'name': ['=', 'Healthcare Service Unit']}
+				};
+			}
+		});
+
+		frm.set_query('dn', 'items', function(doc, cdt, cdn) {
+			let child = locals[cdt][cdn];
+			if (child.dt === 'Medical Department') {
+				let item_list = doc.items
+					.filter(item => item.dt === 'Medical Department')
+					.map(({dn}) => dn);
+				return {
+					filters: [
+						['Medical Department', 'name', 'not in', item_list]
+					]
+				};
+			} else if (child.dt === 'Healthcare Service Unit') {
+				let item_list = doc.items
+					.filter(item => item.dt === 'Healthcare Service Unit')
+					.map(({dn}) => dn);
+				return {
+					filters: [
+						['Healthcare Service Unit', 'name', 'not in', item_list],
+						['Healthcare Service Unit', 'allow_appointments', "=", 1],
+					]
+				};
+			}
+		});
+
+		frm.set_query('op_consulting_charge_item', 'items', function() {
+			return {
+				filters: {
+					is_stock_item: 0
+				}
+			};
+		});
+
+		frm.set_query('inpatient_visit_charge_item', 'items', function() {
+			return {
+				filters: {
+					is_stock_item: 0
+				}
+			};
+		});
+	}
+});
+
+frappe.ui.form.on('Appointment Type Service Item', {
+	op_consulting_charge_item: function(frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		if (frm.doc.price_list && d.op_consulting_charge_item) {
+			frappe.call({
+				'method': 'frappe.client.get_value',
+				args: {
+					'doctype': 'Item Price',
+					'filters': {
+						'item_code': d.op_consulting_charge_item,
+						'price_list': frm.doc.price_list
+					},
+					'fieldname': ['price_list_rate']
+				},
+				callback: function(data) {
+					if (data.message.price_list_rate) {
+						frappe.model.set_value(cdt, cdn, 'op_consulting_charge', data.message.price_list_rate);
+					}
+				}
+			});
+		}
+	},
+
+	inpatient_visit_charge_item: function(frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		if (frm.doc.price_list && d.inpatient_visit_charge_item) {
+			frappe.call({
+				'method': 'frappe.client.get_value',
+				args: {
+					'doctype': 'Item Price',
+					'filters': {
+						'item_code': d.inpatient_visit_charge_item,
+						'price_list': frm.doc.price_list
+					},
+					'fieldname': ['price_list_rate']
+				},
+				callback: function (data) {
+					if (data.message.price_list_rate) {
+						frappe.model.set_value(cdt, cdn, 'inpatient_visit_charge', data.message.price_list_rate);
+					}
+				}
+			});
+		}
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type/appointment_type.json
@@ -0,0 +1,119 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:appointment_type",
+ "creation": "2016-07-22 11:52:34.953019",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "engine": "InnoDB",
+ "field_order": [
+  "appointment_type",
+  "default_duration",
+  "allow_booking_for",
+  "column_break_jdo1",
+  "color",
+  "billing_tab",
+  "price_list",
+  "items"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "appointment_type",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Type",
+   "reqd": 1,
+   "translatable": 1,
+   "unique": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "default_duration",
+   "fieldtype": "Int",
+   "in_filter": 1,
+   "in_list_view": 1,
+   "label": "Default Duration (In Minutes)"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "color",
+   "fieldtype": "Color",
+   "in_list_view": 1,
+   "label": "Color",
+   "no_copy": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "price_list",
+   "fieldtype": "Link",
+   "label": "Price List",
+   "options": "Price List"
+  },
+  {
+   "fieldname": "items",
+   "fieldtype": "Table",
+   "label": "Appointment Type Service Items",
+   "options": "Appointment Type Service Item"
+  },
+  {
+   "fieldname": "billing_tab",
+   "fieldtype": "Tab Break",
+   "label": "Billing"
+  },
+  {
+   "fieldname": "column_break_jdo1",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Practitioner",
+   "fieldname": "allow_booking_for",
+   "fieldtype": "Select",
+   "label": "Allow Booking For",
+   "options": "Practitioner\nDepartment\nService Unit",
+   "reqd": 1
+  }
+ ],
+ "links": [],
+ "modified": "2023-06-10 13:43:27.137414",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Appointment Type",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "appointment_type",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type/appointment_type.py
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+
+
+class AppointmentType(Document):
+	def validate(self):
+		if self.items and self.price_list:
+			for item in self.items:
+				existing_op_item_price = frappe.db.exists(
+					"Item Price", {"item_code": item.op_consulting_charge_item, "price_list": self.price_list}
+				)
+
+				if not existing_op_item_price and item.op_consulting_charge_item and item.op_consulting_charge:
+					make_item_price(self.price_list, item.op_consulting_charge_item, item.op_consulting_charge)
+
+				existing_ip_item_price = frappe.db.exists(
+					"Item Price", {"item_code": item.inpatient_visit_charge_item, "price_list": self.price_list}
+				)
+
+				if (
+					not existing_ip_item_price
+					and item.inpatient_visit_charge_item
+					and item.inpatient_visit_charge
+				):
+					make_item_price(
+						self.price_list, item.inpatient_visit_charge_item, item.inpatient_visit_charge
+					)
+
+
+def get_billing_details(appointment_type, docname=None):
+	def get_details(filters=None):
+		if not filters:
+			# fetch generic ones without department / service_unit
+			filters = {
+				"parent": appointment_type,
+				"dt": None,
+				"dn": None,
+			}
+		return frappe.db.get_value(
+			"Appointment Type Service Item",
+			filters=filters,
+			fieldname=[
+				"op_consulting_charge_item",
+				"inpatient_visit_charge_item",
+				"op_consulting_charge",
+				"inpatient_visit_charge",
+			],
+			as_dict=1,
+		)
+
+	filters = {
+		"parent": appointment_type,
+		"dn": docname,
+	}
+	details = get_details(filters)
+
+	# if department wise items are not set up
+	# use the generic items
+	if not details:
+		details = get_details()
+	return details
+
+
+def make_item_price(price_list, item, item_price):
+	frappe.get_doc(
+		{
+			"doctype": "Item Price",
+			"price_list": price_list,
+			"item_code": item,
+			"price_list_rate": item_price,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type/appointment_type_dashboard.py
@@ -0,0 +1,10 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "appointment_type",
+		"transactions": [
+			{"label": _("Patient Appointments"), "items": ["Patient Appointment"]},
+		],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type/test_appointment_type.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Appointment Type')
+
+
+class TestAppointmentType(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type_service_item/appointment_type_service_item.json
@@ -0,0 +1,82 @@
+{
+ "actions": [],
+ "creation": "2021-01-22 09:34:53.373105",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "dt",
+  "dn",
+  "op_consulting_charge_item",
+  "op_consulting_charge",
+  "column_break_4",
+  "inpatient_visit_charge_item",
+  "inpatient_visit_charge"
+ ],
+ "fields": [
+  {
+   "columns": 2,
+   "fieldname": "op_consulting_charge_item",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Out Patient Consulting Charge Item",
+   "options": "Item"
+  },
+  {
+   "columns": 1,
+   "fieldname": "op_consulting_charge",
+   "fieldtype": "Currency",
+   "in_list_view": 1,
+   "label": "Out Patient Consulting Charge"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "columns": 2,
+   "fieldname": "inpatient_visit_charge_item",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Inpatient Visit Charge Item",
+   "options": "Item"
+  },
+  {
+   "columns": 1,
+   "fieldname": "inpatient_visit_charge",
+   "fieldtype": "Currency",
+   "in_list_view": 1,
+   "label": "Inpatient Visit Charge"
+  },
+  {
+   "columns": 2,
+   "fieldname": "dt",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "DocType",
+   "options": "DocType"
+  },
+  {
+   "columns": 2,
+   "fieldname": "dn",
+   "fieldtype": "Dynamic Link",
+   "in_list_view": 1,
+   "label": "DocName",
+   "options": "dt"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2023-07-02 07:55:17.926324",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Appointment Type Service Item",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/appointment_type_service_item/appointment_type_service_item.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class AppointmentTypeServiceItem(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part/body_part.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Body Part', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part/body_part.json
@@ -0,0 +1,45 @@
+{
+ "actions": [],
+ "autoname": "field:body_part",
+ "creation": "2020-04-10 12:21:55.036402",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "body_part"
+ ],
+ "fields": [
+  {
+   "fieldname": "body_part",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Body Part",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2020-04-10 12:26:44.087985",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Body Part",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part/body_part.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class BodyPart(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part/test_body_part.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestBodyPart(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part_link/body_part_link.json
@@ -0,0 +1,32 @@
+{
+ "actions": [],
+ "creation": "2020-04-10 12:23:15.259816",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "body_part"
+ ],
+ "fields": [
+  {
+   "fieldname": "body_part",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Body Part",
+   "options": "Body Part",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-04-10 12:25:23.101749",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Body Part Link",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/body_part_link/body_part_link.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class BodyPartLink(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/chemo_order/chemo_order.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Order", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/chemo_order/chemo_order.json
@@ -0,0 +1,314 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{protocol_name}-{patient}-{DD}{MM}{YY}.{#####}",
+ "creation": "2024-07-02 05:15:21.509355",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "order_details",
+  "patient",
+  "healthcare_practitioner",
+  "visit_date",
+  "full_name",
+  "gender",
+  "birth_date",
+  "column_break_azjb",
+  "allergy",
+  "diagnosis",
+  "stage",
+  "column_break_cxji",
+  "weight",
+  "height",
+  "bsa",
+  "ecog_score",
+  "service_unit",
+  "order_details_section",
+  "protocol_name",
+  "column_break_aepk",
+  "cycle_no",
+  "cycle_no_written",
+  "previous_cycle_aes",
+  "column_break_ebvk",
+  "date",
+  "pre_medications_section",
+  "pre_meds",
+  "anti_cancer_drugs_section",
+  "patients_anti_cancer_drugs",
+  "section_break_taax",
+  "notes",
+  "refrence_info_section",
+  "inpatient_record",
+  "reference_name",
+  "column_break_omjt",
+  "reference_doc",
+  "section_break_2ktq",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_2ktq",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Order",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "order_details",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  },
+  {
+   "fieldname": "visit_date",
+   "fieldtype": "Datetime",
+   "label": "Visit Date"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "full_name",
+   "fieldtype": "Data",
+   "label": "Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Data",
+   "label": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "birth_date",
+   "fieldtype": "Data",
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_azjb",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.allergies",
+   "fieldname": "allergy",
+   "fieldtype": "Small Text",
+   "label": "Allergy",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_cxji",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "weight",
+   "fieldtype": "Data",
+   "label": "Weight"
+  },
+  {
+   "fieldname": "height",
+   "fieldtype": "Data",
+   "label": "Height"
+  },
+  {
+   "fieldname": "bsa",
+   "fieldtype": "Data",
+   "label": "BSA"
+  },
+  {
+   "fieldname": "ecog_score",
+   "fieldtype": "Data",
+   "label": "ECOG Score"
+  },
+  {
+   "fieldname": "order_details_section",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "fieldname": "protocol_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Protocol Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cycle_no",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Cycle No.",
+   "reqd": 1
+  },
+  {
+   "fieldname": "previous_cycle_aes",
+   "fieldtype": "Data",
+   "label": "Previous Cycle  AEs"
+  },
+  {
+   "fieldname": "column_break_aepk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "label": "Date"
+  },
+  {
+   "fieldname": "column_break_ebvk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "pre_medications_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medications"
+  },
+  {
+   "columns": 10,
+   "fieldname": "pre_meds",
+   "fieldtype": "Table",
+   "label": "Patients Pre Medications list",
+   "options": "Pre Medication Sheet"
+  },
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "columns": 10,
+   "fieldname": "patients_anti_cancer_drugs",
+   "fieldtype": "Table",
+   "label": "Patients Anti Cancer Drugs",
+   "options": "Anti Cancer Drug  Sheet"
+  },
+  {
+   "fieldname": "section_break_taax",
+   "fieldtype": "Section Break",
+   "label": "Review Notes"
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Text Editor",
+   "label": "Notes"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_info_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Refrence Info"
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record"
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Reference Name",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_omjt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "label": "Reference Doc",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "cycle_no_written",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Cycle No Written"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Vital Signs",
+   "link_fieldname": "patient",
+   "table_fieldname": "patient"
+  },
+  {
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "chemo_order"
+  }
+ ],
+ "modified": "2024-09-09 17:48:09.554736",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Chemo Order",
+ "naming_rule": "Expression (old style)",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "full_name"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/chemo_order/chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ChemoOrder(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/chemo_order/test_chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoOrder(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note/clinical_note.js
@@ -0,0 +1,29 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Clinical Note", {
+	refresh(frm) {
+
+	},
+    terms_and_conditions: function(frm) {
+        set_terms_and_conditions(frm)
+    }
+});
+
+var set_terms_and_conditions = function(frm, terms_and_conditions=''){
+    console.log(frm.doc.terms_and_conditions)
+    if (frm.doc.terms_and_conditions) {
+      return frappe.call({
+        method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',
+        args: {
+          template_name: frm.doc.terms_and_conditions || terms_and_conditions,
+          doc: frm.doc
+        },
+        callback: function (r) {
+          frm.set_value('note', r.message)
+        }
+      });
+    } else {
+      frm.set_value('note', '')
+    }
+  }
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note/clinical_note.json
@@ -0,0 +1,176 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{patient}-{reference_name}-{#####}",
+ "creation": "2023-05-12 12:31:47.611942",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient",
+  "data_erbi",
+  "gender",
+  "blood_group",
+  "clinical_note_type",
+  "terms_and_conditions",
+  "column_break_jw2e",
+  "posting_date",
+  "practitioner",
+  "department",
+  "d_name",
+  "user",
+  "note_section",
+  "note",
+  "reference_section",
+  "reference_doc",
+  "reference_name"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.blood_group",
+   "fieldname": "blood_group",
+   "fieldtype": "Data",
+   "label": "Blood Group",
+   "read_only": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "note",
+   "fieldtype": "Text Editor",
+   "label": "Note"
+  },
+  {
+   "fieldname": "reference_section",
+   "fieldtype": "Section Break",
+   "label": "Reference"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Reference Doc",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Dynamic Link",
+   "label": "Reference Name",
+   "options": "reference_doc",
+   "read_only": 1
+  },
+  {
+   "fieldname": "note_section",
+   "fieldtype": "Section Break",
+   "label": "Note"
+  },
+  {
+   "fieldname": "column_break_jw2e",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "now",
+   "fieldname": "posting_date",
+   "fieldtype": "Datetime",
+   "label": "Posting Date"
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "label": "Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.user_id",
+   "fieldname": "user",
+   "fieldtype": "Link",
+   "label": "User",
+   "options": "User",
+   "read_only": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "clinical_note_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Clinical Note Type",
+   "options": "Clinical Note Type",
+   "reqd": 1
+  },
+  {
+   "fieldname": "terms_and_conditions",
+   "fieldtype": "Link",
+   "label": "Terms and Conditions",
+   "options": "Terms and Conditions"
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "d_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Doctor",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "data_erbi",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "department",
+   "fieldtype": "Data",
+   "label": "Department",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-06-22 16:22:56.324010",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Note",
+ "naming_rule": "Expression",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note/clinical_note.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ClinicalNote(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note/test_clinical_note.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestClinicalNote(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note_type/clinical_note_type.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Clinical Note Type", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note_type/clinical_note_type.json
@@ -0,0 +1,48 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:clinical_note_type",
+ "creation": "2023-05-19 14:45:09.962290",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "clinical_note_type"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "clinical_note_type",
+   "fieldtype": "Data",
+   "label": "Clinical Note Type",
+   "unique": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-12-19 17:26:31.014995",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Note Type",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note_type/clinical_note_type.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ClinicalNoteType(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_note_type/test_clinical_note_type.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestClinicalNoteType(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure/clinical_procedure.js
@@ -0,0 +1,511 @@
+// Copyright (c) 2017, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Clinical Procedure', {
+	setup: function(frm) {
+		frm.set_query('batch_no', 'items', function(doc, cdt, cdn) {
+			let item = locals[cdt][cdn];
+			if (!item.item_code) {
+				frappe.throw(__('Please enter Item Code to get Batch Number'));
+			} else {
+				let filters = {'item_code': item.item_code};
+
+				if (frm.doc.status == 'In Progress') {
+					filters['posting_date'] = frm.doc.start_date || frappe.datetime.nowdate();
+					if (frm.doc.warehouse) filters['warehouse'] = frm.doc.warehouse;
+				}
+
+				return {
+					query : 'erpnext.controllers.queries.get_batch_no',
+					filters: filters
+				};
+			}
+		});
+
+		frm.set_query('service_request', function() {
+			return {
+				filters: {
+					'patient': frm.doc.patient,
+					'status': 'Active',
+					'docstatus': 1,
+					'template_dt': 'Clinical Procedure template'
+				}
+			};
+		});
+	},
+
+	refresh: function(frm) {
+		frm.set_query('patient', function () {
+			return {
+				filters: {'status': ['!=', 'Disabled']}
+			};
+		});
+
+		frm.set_query('appointment', function () {
+			return {
+				filters: {
+					'procedure_template': ['not in', null],
+					'status': ['in', 'Open, Scheduled']
+				}
+			};
+		});
+
+		frm.set_query('service_unit', function() {
+			return {
+				filters: {
+					'is_group': false,
+					'allow_appointments': true,
+					'company': frm.doc.company
+				}
+			};
+		});
+
+		frm.set_query('practitioner', function() {
+			return {
+				filters: {
+					'department': frm.doc.medical_department
+				}
+			};
+		});
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+
+		if (frm.doc.consume_stock) {
+			frm.set_indicator_formatter('item_code',
+				function(doc) { return (doc.qty<=doc.actual_qty) ? 'green' : 'orange' ; });
+		}
+
+		if (frm.doc.docstatus == 1) {
+			if (frm.doc.status == 'In Progress') {
+				let btn_label = '';
+				let msg = '';
+				if (frm.doc.consume_stock) {
+					btn_label = __('Complete and Consume');
+					msg = __('Complete {0} and Consume Stock?', [frm.doc.name]);
+				} else {
+					btn_label = 'Complete';
+					msg = __('Complete {0}?', [frm.doc.name]);
+				}
+
+				frm.add_custom_button(__(btn_label), function () {
+					frappe.confirm(
+						msg,
+						function() {
+							frappe.call({
+								method: 'complete_procedure',
+								doc: frm.doc,
+								freeze: true,
+								callback: function(r) {
+									if (r.message) {
+										frappe.show_alert({
+											message: __('Stock Entry {0} created', ['<a class="bold" href="/app/stock-entry/'+ r.message + '">' + r.message + '</a>']),
+											indicator: 'green'
+										});
+									}
+									frm.reload_doc();
+								}
+							});
+						}
+					);
+				}).addClass("btn-primary");
+
+			} else if (frm.doc.status == 'Pending') {
+				frm.add_custom_button(__('Start'), function() {
+					frappe.call({
+						doc: frm.doc,
+						method: 'start_procedure',
+						callback: function(r) {
+							if (!r.exc) {
+								if (r.message == 'insufficient stock') {
+									let msg = __('Stock quantity to start the Procedure is not available in the Warehouse {0}. Do you want to record a Stock Entry?', [frm.doc.warehouse.bold()]);
+									frappe.confirm(
+										msg,
+										function() {
+											frappe.call({
+												doc: frm.doc,
+												method: 'make_material_receipt',
+												freeze: true,
+												callback: function(r) {
+													if (!r.exc) {
+														frm.reload_doc();
+														let doclist = frappe.model.sync(r.message);
+														frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+													}
+												}
+											});
+										}
+									);
+								} else {
+									frm.reload_doc();
+								}
+							}
+						}
+					});
+				}).addClass("btn-primary");
+			}
+		}
+		if(frm.doc.__islocal) {
+			frm.add_custom_button(__('Get from Patient Encounter'), function () {
+				get_procedure_prescribed(frm);
+			});
+		}
+
+		frm.add_custom_button(__("Clinical Note"), function() {
+			frappe.route_options = {
+				"patient": frm.doc.patient,
+				"reference_doc": "Clinical Procedure",
+				"reference_name": frm.doc.name}
+					frappe.new_doc("Clinical Note");
+		},__('Create'));
+
+	},
+
+	onload: function(frm) {
+		if (frm.is_new()) {
+			frm.add_fetch('procedure_template', 'medical_department', 'medical_department');
+			frm.set_value('start_time', null);
+		}
+	},
+
+	patient: function(frm) {
+		if (frm.doc.patient) {
+			frappe.call({
+				'method': 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+				args: {
+					patient: frm.doc.patient
+				},
+				callback: function (data) {
+					let age = '';
+					if (data.message.dob) {
+						age = calculate_age(data.message.dob);
+					} else if (data.message.age) {
+						age = data.message.age;
+						if (data.message.age_as_on) {
+							age = __('{0} as on {1}', [age, data.message.age_as_on]);
+						}
+					}
+					frm.set_value('patient_name', data.message.patient_name);
+					frm.set_value('patient_age', age);
+					frm.set_value('patient_sex', data.message.sex);
+				}
+			});
+		} else {
+			frm.set_value('patient_name', '');
+			frm.set_value('patient_age', '');
+			frm.set_value('patient_sex', '');
+		}
+	},
+
+	appointment: function(frm) {
+		if (frm.doc.appointment) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Patient Appointment',
+					name: frm.doc.appointment
+				},
+				callback: function(data) {
+					let values = {
+						'patient':data.message.patient,
+						'procedure_template': data.message.procedure_template,
+						'medical_department': data.message.department,
+						'practitioner': data.message.practitioner,
+						'start_date': data.message.appointment_date,
+						'start_time': data.message.appointment_time,
+						'notes': data.message.notes,
+						'service_unit': data.message.service_unit,
+						'company': data.message.company
+					};
+					frm.set_value(values);
+				}
+			});
+		} else {
+			let values = {
+				'patient': '',
+				'patient_name': '',
+				'patient_sex': '',
+				'patient_age': '',
+				'medical_department': '',
+				'procedure_template': '',
+				'start_date': '',
+				'start_time': '',
+				'notes': '',
+				'service_unit': '',
+				'inpatient_record': ''
+			};
+			frm.set_value(values);
+		}
+	},
+
+	procedure_template: function(frm) {
+		if (frm.doc.procedure_template) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Clinical Procedure Template',
+					name: frm.doc.procedure_template
+				},
+				callback: function (data) {
+					frm.set_value('medical_department', data.message.medical_department);
+					frm.set_value('consume_stock', data.message.consume_stock);
+					frm.events.set_warehouse(frm);
+					frm.events.set_procedure_consumables(frm);
+				}
+			});
+		}
+	},
+
+	service_unit: function(frm) {
+		if (frm.doc.service_unit) {
+			frappe.call({
+				method: 'frappe.client.get_value',
+				args:{
+					fieldname: 'warehouse',
+					doctype: 'Healthcare Service Unit',
+					filters:{name: frm.doc.service_unit},
+				},
+				callback: function(data) {
+					if (data.message) {
+						frm.set_value('warehouse', data.message.warehouse);
+					}
+				}
+			});
+		}
+	},
+
+	practitioner: function(frm) {
+		if (frm.doc.practitioner) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Healthcare Practitioner',
+					name: frm.doc.practitioner
+				},
+				callback: function (data) {
+					frappe.model.set_value(frm.doctype,frm.docname, 'practitioner_name', data.message.practitioner_name);
+				}
+			});
+		} else {
+			frappe.model.set_value(frm.doctype,frm.docname, 'practitioner_name', '');
+		}
+	},
+
+	set_warehouse: function(frm) {
+		if (!frm.doc.warehouse) {
+			frappe.call({
+				method: 'frappe.client.get_value',
+				args: {
+					doctype: 'Stock Settings',
+					fieldname: 'default_warehouse'
+				},
+				callback: function (data) {
+					frm.set_value('warehouse', data.message.default_warehouse);
+				}
+			});
+		}
+	},
+
+	set_procedure_consumables: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.clinical_procedure.clinical_procedure.get_procedure_consumables',
+			args: {
+				procedure_template: frm.doc.procedure_template
+			},
+			callback: function(data) {
+				if (data.message) {
+					frm.doc.items = [];
+					$.each(data.message, function(i, v) {
+						let item = frm.add_child('items');
+						item.item_code = v.item_code;
+						item.item_name = v.item_name;
+						item.uom = v.uom;
+						item.stock_uom = v.stock_uom;
+						item.qty = flt(v.qty);
+						item.transfer_qty = v.transfer_qty;
+						item.conversion_factor = v.conversion_factor;
+						item.invoice_separately_as_consumables = v.invoice_separately_as_consumables;
+						item.batch_no = v.batch_no;
+					});
+					refresh_field('items');
+				}
+			}
+		});
+	},
+
+	procedure_template: function(frm) {
+		if (frm.doc.procedure_template) {
+			frappe.call({
+				"method": "healthcare.healthcare.utils.get_medical_codes",
+				args: {
+					template_dt: "Clinical Procedure Template",
+					template_dn: frm.doc.procedure_template,
+				},
+				callback: function(r) {
+					if (!r.exc && r.message) {
+						frm.doc.codification_table = []
+						$.each(r.message, function(k, val) {
+							if (val.code_value) {
+								var child = cur_frm.add_child("codification_table");
+								child.code_value = val.code_value
+								child.code_system = val.code_system
+								child.code = val.code
+								child.description = val.description
+								child.system = val.system
+							}
+						});
+						frm.refresh_field("codification_table");
+					} else {
+						frm.clear_table("codification_table")
+						frm.refresh_field("codification_table");
+					}
+				}
+			})
+		} else {
+			frm.clear_table("codification_table")
+			frm.refresh_field("codification_table");
+		}
+	}
+
+});
+
+frappe.ui.form.on('Clinical Procedure Item', {
+	qty: function(frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		frappe.model.set_value(cdt, cdn, 'transfer_qty', d.qty*d.conversion_factor);
+	},
+
+	uom: function(doc, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		if (d.uom && d.item_code) {
+			return frappe.call({
+				method: 'erpnext.stock.doctype.stock_entry.stock_entry.get_uom_details',
+				args: {
+					item_code: d.item_code,
+					uom: d.uom,
+					qty: d.qty
+				},
+				callback: function(r) {
+					if (r.message) {
+						frappe.model.set_value(cdt, cdn, r.message);
+					}
+				}
+			});
+		}
+	},
+
+	item_code: function(frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		let args = null;
+		if (d.item_code) {
+			args = {
+				'doctype' : 'Clinical Procedure',
+				'item_code' : d.item_code,
+				'company' : frm.doc.company,
+				'warehouse': frm.doc.warehouse
+			};
+			return frappe.call({
+				method: 'healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template.get_item_details',
+				args: {args: args},
+				callback: function(r) {
+					if (r.message) {
+						let d = locals[cdt][cdn];
+						$.each(r.message, function(k, v) {
+							d[k] = v;
+						});
+						refresh_field('items');
+					}
+				}
+			});
+		}
+	}
+});
+
+let calculate_age = function(birth) {
+	let ageMS = Date.parse(Date()) - Date.parse(birth);
+	let age = new Date();
+	age.setTime(ageMS);
+	let years =  age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
+
+// List Stock items
+cur_frm.set_query('item_code', 'items', function() {
+	return {
+		filters: {
+			is_stock_item:1
+		}
+	};
+});
+
+let get_procedure_prescribed = function(frm){
+	if(frm.doc.patient){
+		frappe.call({
+			method:"healthcare.healthcare.doctype.clinical_procedure.clinical_procedure.get_procedure_prescribed",
+			args: {patient: frm.doc.patient},
+			callback: function(r){
+				show_procedure_templates(frm, r.message);
+			}
+		});
+	}
+	else{
+		frappe.msgprint(__("Please select Patient to get prescribed procedure"));
+	}
+};
+
+
+let show_procedure_templates = function(frm, result){
+	var d = new frappe.ui.Dialog({
+		title: __("Prescribed Procedures"),
+		fields: [{
+				fieldtype: "HTML", fieldname: "procedure_template"
+		}]
+	});
+	var html_field = d.fields_dict.procedure_template.$wrapper;
+	html_field.empty();
+	$.each(result, function(x, y){
+		var row = $(repl(
+			'<div class="col-xs-12 row" style="padding-top:12px;">\
+				<div class="col-xs-3"> %(procedure_template)s </div>\
+				<div class="col-xs-4">%(encounter)s</div>\
+				<div class="col-xs-3"> %(date)s </div>\
+				<div class="col-xs-1">\
+				<a data-name="%(name)s" data-procedure-template="%(procedure_template)s"\
+					data-encounter="%(encounter)s" data-practitioner="%(practitioner)s"\
+					data-invoiced="%(invoiced)s" data-source="%(source)s"\
+					href="#"><button class="btn btn-default btn-xs">Get</button></a>\
+				</div>\
+			</div><hr>',
+			{ procedure_template: y[0], encounter: y[1], invoiced: y[2], practitioner: y[3], date: y[4],
+				name: y[5]})
+			).appendTo(html_field);
+			row.find("a").click(function() {
+			frm.doc.procedure_template = $(this).attr("data-procedure-template");
+			frm.doc.service_request = $(this).attr('data-name');
+			frm.doc.practitioner = $(this).attr("data-practitioner");
+			frm.doc.invoiced = 0;
+			if ($(this).attr('data-invoiced') === 1) {
+				frm.doc.invoiced = 1;
+			}
+			frm.refresh_field("procedure_template");
+			frm.refresh_field("service_request");
+			frm.refresh_field("practitioner");
+			frm.refresh_field('invoiced');
+			d.hide();
+			return false;
+		});
+	});
+	if(!result || result.length < 1){
+		var msg = "There are no procedure prescribed for patient "+frm.doc.patient;
+		$(repl('<div class="text-left">%(msg)s</div>', {msg: msg})).appendTo(html_field);
+	}
+	d.show();
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure/clinical_procedure.json
@@ -0,0 +1,448 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2017-04-07 12:52:43.542429",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "title",
+  "appointment",
+  "procedure_template",
+  "column_break_30",
+  "company",
+  "request_note",
+  "section_break_6",
+  "patient",
+  "patient_name",
+  "diagnosis",
+  "cancer_type",
+  "stage",
+  "patient_sex",
+  "patient_age",
+  "inpatient_record",
+  "notes",
+  "column_break_7",
+  "status",
+  "medical_department",
+  "practitioner",
+  "by_practioner",
+  "practitioner_name",
+  "service_unit",
+  "start_date",
+  "start_time",
+  "sample",
+  "medical_report_by",
+  "phone_patient",
+  "medical_report_section",
+  "report",
+  "imaging",
+  "consumables_section",
+  "consume_stock",
+  "warehouse",
+  "items",
+  "section_break_24",
+  "invoice_separately_as_consumables",
+  "consumption_invoiced",
+  "consumable_total_amount",
+  "column_break_27",
+  "consumption_details",
+  "medical_coding_section",
+  "codification_table",
+  "sb_refs",
+  "service_request",
+  "order_refrence",
+  "invoiced",
+  "prescription",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-CPR-.YYYY.-"
+  },
+  {
+   "fieldname": "appointment",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Appointment",
+   "options": "Patient Appointment",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "prescription",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Procedure Prescription",
+   "options": "Procedure Prescription",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Order by Healthcare Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "column_break_7",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "procedure_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Procedure Template",
+   "options": "Clinical Procedure Template",
+   "reqd": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "warehouse",
+   "fieldtype": "Link",
+   "label": "Warehouse",
+   "mandatory_depends_on": "eval: doc.consume_stock == 1",
+   "options": "Warehouse"
+  },
+  {
+   "default": "Today",
+   "fieldname": "start_date",
+   "fieldtype": "Date",
+   "label": "Start Date"
+  },
+  {
+   "fieldname": "start_time",
+   "fieldtype": "Time",
+   "label": "Start Time"
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "label": "Sample",
+   "options": "Sample Collection"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Small Text",
+   "label": "Notes",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Company",
+   "options": "Company",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "consume_stock",
+   "fieldtype": "Check",
+   "label": "Consume Stock"
+  },
+  {
+   "fieldname": "items",
+   "fieldtype": "Table",
+   "label": "Consumables",
+   "options": "Clinical Procedure Item"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoice_separately_as_consumables",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Invoice Consumables Separately",
+   "read_only": 1
+  },
+  {
+   "depends_on": "invoice_separately_as_consumables",
+   "fieldname": "consumable_total_amount",
+   "fieldtype": "Currency",
+   "label": "Consumable Total Amount",
+   "read_only": 1
+  },
+  {
+   "depends_on": "invoice_separately_as_consumables",
+   "fieldname": "consumption_details",
+   "fieldtype": "Small Text",
+   "label": "Consumption Details"
+  },
+  {
+   "default": "0",
+   "depends_on": "invoice_separately_as_consumables",
+   "fieldname": "consumption_invoiced",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Consumption Invoiced",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Draft\nSubmitted\nCancelled\nIn Progress\nCompleted\nPending",
+   "read_only": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Clinical Procedure",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "collapsible_depends_on": "consume_stock",
+   "fieldname": "consumables_section",
+   "fieldtype": "Section Break",
+   "label": "Consumables"
+  },
+  {
+   "fieldname": "column_break_27",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_24",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "column_break_30",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_6",
+   "fieldtype": "Section Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "sb_refs",
+   "fieldtype": "Section Break",
+   "label": "More Information"
+  },
+  {
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_coding_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "label": "Service Request",
+   "no_copy": 1,
+   "options": "Service Request",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_report_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Report"
+  },
+  {
+   "fieldname": "report",
+   "fieldtype": "Text Editor",
+   "label": "Report"
+  },
+  {
+   "fieldname": "imaging",
+   "fieldtype": "Attach",
+   "hidden": 1,
+   "label": "imaging"
+  },
+  {
+   "fieldname": "by_practioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner (process by)",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "request_note",
+   "fieldtype": "Small Text",
+   "label": "Request Note",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.order_group",
+   "fieldname": "order_refrence",
+   "fieldtype": "Data",
+   "label": "Order Reference"
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis ",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.cancer_type",
+   "fieldname": "cancer_type",
+   "fieldtype": "Data",
+   "label": "Cancer Type",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_report_by",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Medical Report by"
+  },
+  {
+   "fetch_from": "patient.phone",
+   "fieldname": "phone_patient",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Phone",
+   "options": "patient"
+  }
+ ],
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Nursing Task",
+   "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Clinical Note",
+   "link_fieldname": "patient"
+  }
+ ],
+ "modified": "2024-08-18 20:39:18.830815",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Procedure",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure/clinical_procedure.py
@@ -0,0 +1,365 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, ESS LLP and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.mapper import get_mapped_doc
+from frappe.utils import flt, get_link_to_form, now_datetime, nowdate, nowtime
+
+from erpnext.stock.get_item_details import get_item_details
+from erpnext.stock.stock_ledger import get_previous_sle
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import get_account
+from healthcare.healthcare.doctype.lab_test.lab_test import create_sample_doc
+from healthcare.healthcare.doctype.nursing_task.nursing_task import NursingTask
+from healthcare.healthcare.doctype.service_request.service_request import (
+	update_service_request_status,
+)
+from healthcare.healthcare.utils import validate_nursing_tasks
+
+
+class ClinicalProcedure(Document):
+	def validate(self):
+		self.set_status()
+		self.set_title()
+		if self.consume_stock:
+			self.set_actual_qty()
+
+		if self.items:
+			self.invoice_separately_as_consumables = False
+			for item in self.items:
+				if item.invoice_separately_as_consumables:
+					self.invoice_separately_as_consumables = True
+
+	def before_insert(self):
+		if self.consume_stock:
+			self.set_actual_qty()
+
+		if self.service_request:
+			therapy_session = frappe.db.exists(
+				"Clinical Procedure",
+				{"service_request": self.service_request, "docstatus": ["!=", 2]},
+			)
+			if therapy_session:
+				frappe.throw(
+					_("Clinical Procedure {0} already created from service request {1}").format(
+						frappe.bold(get_link_to_form("Clinical Procedure", therapy_session)),
+						frappe.bold(get_link_to_form("Service Request", self.service_request)),
+					),
+					title=_("Already Exist"),
+				)
+
+	def on_cancel(self):
+		if self.service_request:
+			frappe.db.set_value("Service Request", self.service_request, "status", "active-Request Status")
+
+	def after_insert(self):
+		if self.service_request:
+			update_service_request_status(
+				self.service_request, self.doctype, self.name, "completed-Request Status"
+			)
+
+		if self.appointment:
+			frappe.db.set_value("Patient Appointment", self.appointment, "status", "Closed")
+
+		if self.procedure_template:
+			template = frappe.get_doc("Clinical Procedure Template", self.procedure_template)
+			if template.sample:
+				patient = frappe.get_doc("Patient", self.patient)
+				sample_collection = create_sample_doc(template, patient, None, self.company)
+				self.db_set("sample", sample_collection.name)
+
+		self.reload()
+
+	def on_submit(self):
+		self.create_nursing_tasks(post_event=False)
+
+	def create_nursing_tasks(self, post_event=True):
+		if post_event:
+			template = frappe.db.get_value(
+				"Clinical Procedure Template", self.procedure_template, "post_op_nursing_checklist_template"
+			)
+			start_time = now_datetime()
+
+		else:
+			template = frappe.db.get_value(
+				"Clinical Procedure Template", self.procedure_template, "pre_op_nursing_checklist_template"
+			)
+			# pre op tasks to be created on Clinical Procedure submit, use scheduled date
+			start_time = frappe.utils.get_datetime(f"{self.start_date} {self.start_time}")
+
+		if template:
+			NursingTask.create_nursing_tasks_from_template(
+				template, self, start_time=start_time, post_event=post_event
+			)
+
+		template_doc = frappe.get_doc("Clinical Procedure Template", self.procedure_template)
+		if template_doc.sample:
+			patient = frappe.get_doc("Patient", self.patient)
+			sample_collection = create_sample_doc(template_doc, patient, None, self.company)
+			self.db_set("sample", sample_collection.name)
+			self.reload()
+
+	def set_status(self):
+		if self.docstatus == 0:
+			self.status = "Draft"
+		elif self.docstatus == 1:
+			if self.status not in ["In Progress", "Completed"]:
+				self.status = "Pending"
+		elif self.docstatus == 2:
+			self.status = "Cancelled"
+
+	def set_title(self):
+		self.title = _("{0} - {1}").format(self.patient_name or self.patient, self.procedure_template)[
+			:100
+		]
+
+	@frappe.whitelist()
+	def complete_procedure(self):
+		if self.consume_stock and self.items:
+			stock_entry = make_stock_entry(self)
+
+		if self.items:
+			consumable_total_amount = 0
+			consumption_details = False
+			customer = frappe.db.get_value("Patient", self.patient, "customer")
+			if customer:
+				for item in self.items:
+					if item.invoice_separately_as_consumables:
+						price_list, price_list_currency = frappe.db.get_values(
+							"Price List", {"selling": 1}, ["name", "currency"]
+						)[0]
+						args = {
+							"doctype": "Sales Invoice",
+							"item_code": item.item_code,
+							"company": self.company,
+							"warehouse": self.warehouse,
+							"customer": customer,
+							"selling_price_list": price_list,
+							"price_list_currency": price_list_currency,
+							"plc_conversion_rate": 1.0,
+							"conversion_rate": 1.0,
+						}
+						item_details = get_item_details(args)
+						item_price = item_details.price_list_rate * item.qty
+						item_consumption_details = (
+							item_details.item_name + " " + str(item.qty) + " " + item.uom + " " + str(item_price)
+						)
+						consumable_total_amount += item_price
+						if not consumption_details:
+							consumption_details = _("Clinical Procedure ({0}):").format(self.name)
+						consumption_details += "\n\t" + item_consumption_details
+
+				if consumable_total_amount > 0:
+					frappe.db.set_value(
+						"Clinical Procedure", self.name, "consumable_total_amount", consumable_total_amount
+					)
+					frappe.db.set_value(
+						"Clinical Procedure", self.name, "consumption_details", consumption_details
+					)
+			else:
+				frappe.throw(
+					_("Please set Customer in Patient {0}").format(frappe.bold(self.patient)),
+					title=_("Customer Not Found"),
+				)
+
+		self.db_set("status", "Completed")
+
+		if self.service_request:
+			frappe.db.set_value(
+				"Service Request", self.service_request, "status", "completed-Request Status"
+			)
+
+		# post op nursing tasks
+		if self.procedure_template:
+			self.create_nursing_tasks()
+
+		if self.consume_stock and self.items:
+			return stock_entry
+
+	@frappe.whitelist()
+	def start_procedure(self):
+		allow_start = self.set_actual_qty()
+
+		if allow_start:
+			validate_nursing_tasks(self)
+
+			self.db_set("status", "In Progress")
+			return "success"
+
+		return "insufficient stock"
+
+	def set_actual_qty(self):
+		allow_negative_stock = frappe.db.get_single_value("Stock Settings", "allow_negative_stock")
+
+		allow_start = True
+		for d in self.get("items"):
+			d.actual_qty = get_stock_qty(d.item_code, self.warehouse)
+			# validate qty
+			if not allow_negative_stock and d.actual_qty < d.qty:
+				allow_start = False
+				break
+
+		return allow_start
+
+	@frappe.whitelist()
+	def make_material_receipt(self, submit=False):
+		stock_entry = frappe.new_doc("Stock Entry")
+
+		stock_entry.stock_entry_type = "Material Receipt"
+		stock_entry.to_warehouse = self.warehouse
+		stock_entry.company = self.company
+		expense_account = get_account(None, "expense_account", "Healthcare Settings", self.company)
+		for item in self.items:
+			if item.qty > item.actual_qty:
+				se_child = stock_entry.append("items")
+				se_child.item_code = item.item_code
+				se_child.item_name = item.item_name
+				se_child.uom = item.uom
+				se_child.stock_uom = item.stock_uom
+				se_child.qty = flt(item.qty - item.actual_qty)
+				se_child.t_warehouse = self.warehouse
+				# in stock uom
+				se_child.transfer_qty = flt(item.transfer_qty)
+				se_child.conversion_factor = flt(item.conversion_factor)
+				cost_center = frappe.get_cached_value("Company", self.company, "cost_center")
+				se_child.cost_center = cost_center
+				se_child.expense_account = expense_account
+		if submit:
+			stock_entry.submit()
+			return stock_entry
+		return stock_entry.as_dict()
+
+
+def get_stock_qty(item_code, warehouse):
+	return (
+		get_previous_sle(
+			{
+				"item_code": item_code,
+				"warehouse": warehouse,
+				"posting_date": nowdate(),
+				"posting_time": nowtime(),
+			}
+		).get("qty_after_transaction")
+		or 0
+	)
+
+
+@frappe.whitelist()
+def get_procedure_consumables(procedure_template):
+	return get_items("Clinical Procedure Item", procedure_template, "Clinical Procedure Template")
+
+
+@frappe.whitelist()
+def set_stock_items(doc, stock_detail_parent, parenttype):
+	items = get_items("Clinical Procedure Item", stock_detail_parent, parenttype)
+
+	for item in items:
+		se_child = doc.append("items")
+		se_child.item_code = item.item_code
+		se_child.item_name = item.item_name
+		se_child.uom = item.uom
+		se_child.stock_uom = item.stock_uom
+		se_child.qty = flt(item.qty)
+		# in stock uom
+		se_child.transfer_qty = flt(item.transfer_qty)
+		se_child.conversion_factor = flt(item.conversion_factor)
+		if item.batch_no:
+			se_child.batch_no = item.batch_no
+		if parenttype == "Clinical Procedure Template":
+			se_child.invoice_separately_as_consumables = item.invoice_separately_as_consumables
+
+	return doc
+
+
+def get_items(table, parent, parenttype):
+	items = frappe.db.get_all(
+		table, filters={"parent": parent, "parenttype": parenttype}, fields=["*"]
+	)
+
+	return items
+
+
+@frappe.whitelist()
+def make_stock_entry(doc):
+	stock_entry = frappe.new_doc("Stock Entry")
+	stock_entry = set_stock_items(stock_entry, doc.name, "Clinical Procedure")
+	stock_entry.stock_entry_type = "Material Issue"
+	stock_entry.from_warehouse = doc.warehouse
+	stock_entry.company = doc.company
+	expense_account = get_account(None, "expense_account", "Healthcare Settings", doc.company)
+
+	for item_line in stock_entry.items:
+		cost_center = frappe.get_cached_value("Company", doc.company, "cost_center")
+		item_line.cost_center = cost_center
+		item_line.expense_account = expense_account
+
+	stock_entry.save(ignore_permissions=True)
+	stock_entry.submit()
+	return stock_entry.name
+
+
+@frappe.whitelist()
+def make_procedure(source_name, target_doc=None):
+	def set_missing_values(source, target):
+		consume_stock = frappe.db.get_value(
+			"Clinical Procedure Template", source.procedure_template, "consume_stock"
+		)
+		if consume_stock:
+			target.consume_stock = 1
+			warehouse = None
+			if source.service_unit:
+				warehouse = frappe.db.get_value("Healthcare Service Unit", source.service_unit, "warehouse")
+			if not warehouse:
+				warehouse = frappe.db.get_value("Stock Settings", None, "default_warehouse")
+			if warehouse:
+				target.warehouse = warehouse
+
+			set_stock_items(target, source.procedure_template, "Clinical Procedure Template")
+
+	doc = get_mapped_doc(
+		"Patient Appointment",
+		source_name,
+		{
+			"Patient Appointment": {
+				"doctype": "Clinical Procedure",
+				"field_map": [
+					["appointment", "name"],
+					["patient", "patient"],
+					["patient_age", "patient_age"],
+					["patient_sex", "patient_sex"],
+					["procedure_template", "procedure_template"],
+					["prescription", "procedure_prescription"],
+					["practitioner", "practitioner"],
+					["medical_department", "department"],
+					["start_date", "appointment_date"],
+					["start_time", "appointment_time"],
+					["notes", "notes"],
+					["service_unit", "service_unit"],
+					["company", "company"],
+					["invoiced", "invoiced"],
+				],
+			}
+		},
+		target_doc,
+		set_missing_values,
+	)
+
+	return doc
+
+
+@frappe.whitelist()
+def get_procedure_prescribed(patient, encounter=False):
+	hso = frappe.qb.DocType("Service Request")
+	return (
+		frappe.qb.from_(hso)
+		.select(
+			hso.template_dn, hso.order_group, hso.invoiced, hso.practitioner, hso.order_date, hso.name
+		)
+		.where(hso.patient == patient)
+		.where(hso.status != "completed-Request Status")
+		.where(hso.template_dt == "Clinical Procedure Template")
+		.orderby(hso.creation, order=frappe.qb.desc)
+	).run()
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure/clinical_procedure_list.js
@@ -0,0 +1,11 @@
+frappe.listview_settings['Clinical Procedure'] = {
+	get_indicator: function(doc) {
+		var colors = {
+			'Completed': 'green',
+			'In Progress': 'orange',
+			'Pending': 'orange',
+			'Cancelled': 'grey'
+		};
+		return [__(doc.status), colors[doc.status], 'status,=,' + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure/test_clinical_procedure.py
@@ -0,0 +1,75 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, ESS LLP and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_clinical_procedure_template,
+	create_healthcare_docs,
+)
+
+test_dependencies = ["Item"]
+
+
+class TestClinicalProcedure(FrappeTestCase):
+	def test_procedure_template_item(self):
+		patient, practitioner = create_healthcare_docs()
+		procedure_template = create_clinical_procedure_template()
+		self.assertTrue(frappe.db.exists("Item", procedure_template.item))
+
+		procedure_template.disabled = 1
+		procedure_template.save()
+		self.assertEqual(frappe.db.get_value("Item", procedure_template.item, "disabled"), 1)
+
+	def test_consumables(self):
+		patient, practitioner = create_healthcare_docs()
+		procedure_template = create_clinical_procedure_template()
+		procedure_template.allow_stock_consumption = 1
+		consumable = create_consumable()
+		procedure_template.append(
+			"items",
+			{
+				"item_code": consumable.item_code,
+				"qty": 1,
+				"uom": consumable.stock_uom,
+				"stock_uom": consumable.stock_uom,
+			},
+		)
+		procedure_template.save()
+		procedure = create_procedure(procedure_template, patient, practitioner)
+		result = procedure.start_procedure()
+		if result == "insufficient stock":
+			procedure.make_material_receipt(submit=True)
+			result = procedure.start_procedure()
+		self.assertEqual(procedure.status, "In Progress")
+		result = procedure.complete_procedure()
+		# check consumption
+		self.assertTrue(frappe.db.exists("Stock Entry", result))
+
+
+def create_consumable():
+	if frappe.db.exists("Item", "Syringe"):
+		return frappe.get_doc("Item", "Syringe")
+	consumable = frappe.new_doc("Item")
+	consumable.item_code = "Syringe"
+	consumable.item_group = "_Test Item Group"
+	consumable.stock_uom = "Nos"
+	consumable.valuation_rate = 5.00
+	consumable.save()
+	return consumable
+
+
+def create_procedure(procedure_template, patient, practitioner):
+	procedure = frappe.new_doc("Clinical Procedure")
+	procedure.procedure_template = procedure_template.name
+	procedure.patient = patient
+	procedure.practitioner = practitioner
+	procedure.consume_stock = procedure_template.allow_stock_consumption
+	procedure.items = procedure_template.items
+	procedure.company = "_Test Company"
+	procedure.warehouse = "_Test Warehouse - _TC"
+	procedure.submit()
+	return procedure
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_item/clinical_procedure_item.json
@@ -0,0 +1,123 @@
+{
+ "actions": [],
+ "beta": 0,
+ "creation": "2017-10-05 16:15:10.876952",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "item_code",
+  "item_name",
+  "qty",
+  "barcode",
+  "uom",
+  "invoice_separately_as_consumables",
+  "column_break_5",
+  "batch_no",
+  "conversion_factor",
+  "stock_uom",
+  "transfer_qty",
+  "actual_qty"
+ ],
+ "fields": [
+  {
+   "bold": 1,
+   "columns": 3,
+   "fieldname": "item_code",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "label": "Item",
+   "options": "Item",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "barcode",
+   "fieldtype": "Data",
+   "label": "Barcode"
+  },
+  {
+   "fieldname": "item_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Item Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "qty",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Quantity",
+   "reqd": 1
+  },
+  {
+   "fieldname": "uom",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "UOM",
+   "options": "UOM",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoice_separately_as_consumables",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Invoice Separately as Consumables"
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "batch_no",
+   "fieldtype": "Link",
+   "label": "Batch",
+   "options": "Batch"
+  },
+  {
+   "fieldname": "conversion_factor",
+   "fieldtype": "Float",
+   "label": "Conversion Factor",
+   "read_only": 1
+  },
+  {
+   "fieldname": "stock_uom",
+   "fieldtype": "Link",
+   "label": "Stock UOM",
+   "options": "UOM",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "transfer_qty",
+   "fieldtype": "Float",
+   "label": "Transfer Qty",
+   "read_only": 1
+  },
+  {
+   "fieldname": "actual_qty",
+   "fieldtype": "Float",
+   "label": "Actual Qty (at source/target)",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-03-01 15:34:54.226722",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Procedure Item",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_item/clinical_procedure_item.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, earthians and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class ClinicalProcedureItem(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_template/clinical_procedure_template.js
@@ -0,0 +1,229 @@
+// Copyright (c) 2017, earthians and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Clinical Procedure Template', {
+	template: function (frm) {
+		if (!frm.doc.item_code)
+			frm.set_value('item_code', frm.doc.template);
+		if (!frm.doc.description)
+			frm.set_value('description', frm.doc.template);
+		mark_change_in_item(frm);
+	},
+
+	rate: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+	is_billable: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+	item_group: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+	description: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+	medical_department: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+
+	refresh: function (frm) {
+		frm.fields_dict['items'].grid.set_column_disp('barcode', false);
+		frm.fields_dict['items'].grid.set_column_disp('batch_no', false);
+
+		if (!frm.doc.__islocal) {
+			cur_frm.add_custom_button(__('Change Item Code'), function () {
+				change_template_code(frm.doc);
+			});
+		}
+
+		frm.set_query('item', function() {
+			return {
+				filters: {
+					'disabled': false,
+					'is_stock_item': false
+				}
+			};
+		});
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		})
+
+		frm.set_query('staff_role', function () {
+			return {
+				filters: {
+					'restrict_to_domain': 'Healthcare'
+				}
+			};
+		});
+	},
+
+	link_existing_item: function (frm) {
+		if (frm.doc.link_existing_item) {
+			frm.set_value('item_code', '');
+		} else {
+			frm.set_value('item', '');
+		}
+	},
+
+	item: function (frm) {
+		if (frm.doc.item) {
+			frappe.db.get_value('Item', frm.doc.item, ['item_group', 'description'])
+			.then(r => {
+				frm.set_value({
+					'item_group': r.message.item_group,
+					'description': r.message.description,
+					'item_code': frm.doc.item
+				});
+			})
+		}
+	}
+});
+
+let mark_change_in_item = function (frm) {
+	if (!frm.doc.__islocal || frm.doc.link_existing_item) {
+		frm.doc.change_in_item = 1;
+	}
+};
+
+let change_template_code = function (doc) {
+	let d = new frappe.ui.Dialog({
+		title: __('Change Item Code'),
+		fields: [
+			{
+				'fieldtype': 'Data',
+				'label': 'Item Code',
+				'fieldname': 'item_code',
+				reqd: 1
+			}
+		],
+		primary_action: function () {
+			let values = d.get_values();
+
+			if (values) {
+				frappe.call({
+					'method': 'healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template.change_item_code_from_template',
+					'args': { item_code: values.item_code, doc: doc },
+					callback: function () {
+						cur_frm.reload_doc();
+						frappe.show_alert({
+							message: 'Item Code renamed successfully',
+							indicator: 'green'
+						});
+					}
+				});
+			}
+			d.hide();
+		},
+		primary_action_label: __('Change Item Code')
+	});
+	d.show();
+
+	d.set_values({
+		'item_code': doc.item_code
+	});
+};
+
+frappe.ui.form.on('Clinical Procedure Item', {
+	qty: function (frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		frappe.model.set_value(cdt, cdn, 'transfer_qty', d.qty * d.conversion_factor);
+	},
+
+	uom: function (doc, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		if (d.uom && d.item_code) {
+			return frappe.call({
+				method: 'erpnext.stock.doctype.stock_entry.stock_entry.get_uom_details',
+				args: {
+					item_code: d.item_code,
+					uom: d.uom,
+					qty: d.qty
+				},
+				callback: function (r) {
+					if (r.message) {
+						frappe.model.set_value(cdt, cdn, r.message);
+					}
+				}
+			});
+		}
+	},
+
+	item_code: function (frm, cdt, cdn) {
+		let d = locals[cdt][cdn];
+		if (d.item_code) {
+			let args = {
+				'item_code': d.item_code,
+				'transfer_qty': d.transfer_qty,
+				'quantity': d.qty
+			};
+			return frappe.call({
+				method: 'healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template.get_item_details',
+				args: { args: args },
+				callback: function (r) {
+					if (r.message) {
+						let d = locals[cdt][cdn];
+						$.each(r.message, function (k, v) {
+							d[k] = v;
+						});
+						refresh_field('items');
+					}
+				}
+			});
+		}
+	}
+});
+
+// List Stock items
+cur_frm.set_query('item_code', 'items', function () {
+	return {
+		filters: {
+			is_stock_item: 1
+		}
+	};
+});
+
+frappe.tour['Clinical Procedure Template'] = [
+	{
+		fieldname: 'template',
+		title: __('Template Name'),
+		description: __('Enter a name for the Clinical Procedure Template')
+	},
+	{
+		fieldname: 'item_code',
+		title: __('Item Code'),
+		description: __('Set the Item Code which will be used for billing the Clinical Procedure.')
+	},
+	{
+		fieldname: 'item_group',
+		title: __('Item Group'),
+		description: __('Select an Item Group for the Clinical Procedure Item.')
+	},
+	{
+		fieldname: 'is_billable',
+		title: __('Clinical Procedure Rate'),
+		description: __('Check this if the Clinical Procedure is billable and also set the rate.')
+	},
+	{
+		fieldname: 'consume_stock',
+		title: __('Allow Stock Consumption'),
+		description: __('Check this if the Clinical Procedure utilises consumables. Click ') + "<a href='https://frappehealth.com/docs/v13/user/manual/en/healthcare/clinical_procedure_template#22-manage-procedure-consumables' target='_blank'>here</a>" + __(' to know more')
+	},
+	{
+		fieldname: 'medical_department',
+		title: __('Medical Department'),
+		description: __('You can also set the Medical Department for the template. After saving the document, an Item will automatically be created for billing this Clinical Procedure. You can then use this template while creating Clinical Procedures for Patients. Templates save you from filling up redundant data every single time. You can also create templates for other operations like Lab Tests, Therapy Sessions, etc.')
+	}
+];
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_template/clinical_procedure_template.json
@@ -0,0 +1,324 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:template",
+ "creation": "2017-10-05 14:59:55.438359",
+ "description": "Procedure Template",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "template",
+  "medical_department",
+  "description",
+  "column_break_5",
+  "disabled",
+  "pre_op_nursing_checklist_template",
+  "post_op_nursing_checklist_template",
+  "billing_section",
+  "column_break_ea5h",
+  "link_existing_item",
+  "item",
+  "item_code",
+  "item_group",
+  "column_break_lhbf",
+  "is_billable",
+  "rate",
+  "consumption_tab",
+  "consumables",
+  "consume_stock",
+  "items",
+  "sample_collection_tab",
+  "sample_collection",
+  "sample_uom",
+  "sample_qty",
+  "sample",
+  "column_break_21",
+  "sample_details",
+  "change_in_item",
+  "codification",
+  "codification_table",
+  "service_request_defaults_tab",
+  "patient_care_type",
+  "staff_role"
+ ],
+ "fields": [
+  {
+   "fieldname": "template",
+   "fieldtype": "Data",
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "label": "Template Name",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "depends_on": "eval:!doc.link_existing_item || !doc.__islocal",
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "label": "Item Code",
+   "mandatory_depends_on": "eval:!doc.link_existing_item",
+   "read_only_depends_on": "eval: !doc.__islocal"
+  },
+  {
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Item Group",
+   "options": "Item Group",
+   "read_only_depends_on": "eval:doc.link_existing_item",
+   "reqd": 1
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:!doc.link_existing_item || !doc.__islocal;",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "label": "Is Billable"
+  },
+  {
+   "depends_on": "eval:doc.is_billable && (!doc.link_existing_item || !doc.__islocal)",
+   "fieldname": "rate",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Rate",
+   "mandatory_depends_on": "eval:doc.is_billable && !doc.link_existing_item"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Description",
+   "no_copy": 1,
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "consume_stock",
+   "fieldtype": "Check",
+   "label": "Allow Stock Consumption",
+   "search_index": 1
+  },
+  {
+   "fieldname": "consumables",
+   "fieldtype": "Section Break",
+   "label": "Consumables"
+  },
+  {
+   "depends_on": "eval:doc.consume_stock == 1",
+   "fieldname": "items",
+   "fieldtype": "Table",
+   "ignore_user_permissions": 1,
+   "label": "Items",
+   "options": "Clinical Procedure Item"
+  },
+  {
+   "fieldname": "sample_collection",
+   "fieldtype": "Section Break",
+   "label": "Sample Collection"
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Sample",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fetch_from": "sample.sample_uom",
+   "fieldname": "sample_uom",
+   "fieldtype": "Data",
+   "label": "Sample UOM",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sample_qty",
+   "fieldtype": "Float",
+   "label": "Quantity"
+  },
+  {
+   "fieldname": "column_break_21",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "sample_details",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Collection Details"
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Change In Item",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "depends_on": "eval: !doc.__islocal || doc.link_existing_item",
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Item",
+   "mandatory_depends_on": "eval:doc.link_existing_item",
+   "no_copy": 1,
+   "options": "Item",
+   "read_only_depends_on": "eval: !doc.__islocal"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "codification",
+   "fieldtype": "Tab Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "pre_op_nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Pre-op Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "fieldname": "post_op_nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Post-op Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.__islocal",
+   "fieldname": "link_existing_item",
+   "fieldtype": "Check",
+   "label": "Link existing Item"
+  },
+  {
+   "fieldname": "billing_section",
+   "fieldtype": "Section Break",
+   "label": "Billing"
+  },
+  {
+   "fieldname": "column_break_ea5h",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_lhbf",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "consumption_tab",
+   "fieldtype": "Tab Break",
+   "label": "Stock Consumption"
+  },
+  {
+   "fieldname": "sample_collection_tab",
+   "fieldtype": "Tab Break",
+   "label": "Sample Collection"
+  },
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  },
+  {
+   "fieldname": "service_request_defaults_tab",
+   "fieldtype": "Tab Break",
+   "label": "Service Request Defaults"
+  }
+ ],
+ "links": [],
+ "modified": "2023-11-06 15:00:26.292044",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Clinical Procedure Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "template",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "template",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_template/clinical_procedure_template.py
@@ -0,0 +1,149 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, earthians and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.rename_doc import rename_doc
+from frappe.utils import today
+
+
+class ClinicalProcedureTemplate(Document):
+	def before_insert(self):
+		if self.link_existing_item and self.item:
+			price_list = frappe.db.get_all(
+				"Item Price", {"item_code": self.item}, ["price_list_rate"], order_by="valid_from desc"
+			)
+			if price_list:
+				self.rate = price_list[0].get("price_list_rate")
+
+	def validate(self):
+		self.enable_disable_item()
+
+	def after_insert(self):
+		if not self.link_existing_item:
+			create_item_from_template(self)
+
+	def on_update(self):
+		if self.change_in_item:
+			update_item_and_item_price(self)
+
+	def enable_disable_item(self):
+		if self.is_billable:
+			if self.disabled:
+				frappe.db.set_value("Item", self.item, "disabled", 1)
+			else:
+				frappe.db.set_value("Item", self.item, "disabled", 0)
+
+
+@frappe.whitelist()
+def get_item_details(args=None):
+	if not isinstance(args, dict):
+		args = json.loads(args)
+
+	item = frappe.db.get_all(
+		"Item", filters={"disabled": 0, "name": args.get("item_code")}, fields=["stock_uom", "item_name"]
+	)
+
+	if not item:
+		frappe.throw(_("Item {0} is not active").format(args.get("item_code")))
+
+	item = item[0]
+	ret = {
+		"uom": item.stock_uom,
+		"stock_uom": item.stock_uom,
+		"item_name": item.item_name,
+		"qty": 1,
+		"transfer_qty": 0,
+		"conversion_factor": 1,
+	}
+	return ret
+
+
+def create_item_from_template(doc):
+	disabled = doc.disabled
+	if doc.is_billable and not doc.disabled:
+		disabled = 0
+
+	uom = frappe.db.exists("UOM", "Unit") or frappe.db.get_single_value("Stock Settings", "stock_uom")
+	item = frappe.get_doc(
+		{
+			"doctype": "Item",
+			"item_code": doc.item_code,
+			"item_name": doc.template,
+			"item_group": doc.item_group,
+			"description": doc.description,
+			"is_sales_item": 1,
+			"is_service_item": 1,
+			"is_purchase_item": 0,
+			"is_stock_item": 0,
+			"show_in_website": 0,
+			"is_pro_applicable": 0,
+			"disabled": disabled,
+			"stock_uom": uom,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+	make_item_price(item.name, doc.rate)
+	doc.db_set("item", item.name)
+
+
+def make_item_price(item, item_price):
+	price_list_name = frappe.db.get_value(
+		"Selling Settings", None, "selling_price_list"
+	) or frappe.db.get_value("Price List", {"selling": 1})
+	frappe.get_doc(
+		{
+			"doctype": "Item Price",
+			"price_list": price_list_name,
+			"item_code": item,
+			"price_list_rate": item_price,
+			"valid_from": today(),
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+
+@frappe.whitelist()
+def change_item_code_from_template(item_code, doc):
+	doc = frappe._dict(json.loads(doc))
+
+	if frappe.db.exists("Item", {"item_code": item_code}):
+		frappe.throw(_("Item with Item Code {0} already exists").format(item_code))
+	else:
+		rename_doc("Item", doc.item_code, item_code, ignore_permissions=True)
+		frappe.db.set_value("Clinical Procedure Template", doc.name, "item_code", item_code)
+	return
+
+
+def update_item_and_item_price(doc):
+	if doc.is_billable and doc.item:
+		item_name = doc.lab_test_name if doc.get("doctype") == "Lab Test Template" else doc.template
+		rate = doc.lab_test_rate if doc.get("doctype") == "Lab Test Template" else doc.rate
+		item_group = doc.lab_test_group if doc.get("doctype") == "Lab Test Template" else doc.item_group
+
+		item_doc = frappe.get_doc("Item", {"item_code": doc.item})
+		item_doc.item_name = item_name
+		item_doc.item_group = item_group
+		item_doc.description = (
+			doc.description if doc.get("doctype") == "Clinical Procedure Template" else ""
+		)
+		item_doc.disabled = 0
+		item_doc.save(ignore_permissions=True)
+		if rate:
+			if not frappe.db.exists("Item Price", {"item_code": doc.item, "valid_from": today()}):
+				make_item_price(doc.item, rate)
+			else:
+				item_price = frappe.get_doc("Item Price", {"item_code": doc.item})
+				item_price.item_name = item_name
+				item_price.valid_from = today()
+				item_price.price_list_rate = rate
+				item_price.save()
+
+	elif not doc.is_billable and doc.item and not doc.link_existing_item:
+		frappe.db.set_value("Item", doc.item, "disabled", 1)
+
+	doc.db_set("change_in_item", 0)
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_template/clinical_procedure_template_dashboard.py
@@ -0,0 +1,8 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "procedure_template",
+		"transactions": [{"label": _("Consultations"), "items": ["Clinical Procedure"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/clinical_procedure_template/test_clinical_procedure_template.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, earthians and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestClinicalProcedureTemplate(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_system/code_system.js
@@ -0,0 +1,14 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Code System', {
+	setup: function(frm) {
+		frm.set_query("version", function () {
+			return {
+				"filters": {
+					"code_system": "FHIRVersion",
+				}
+			};
+		});
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_system/code_system.json
@@ -0,0 +1,201 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "autoname": "field:code_system",
+ "beta": 1,
+ "creation": "2017-06-21 13:07:00.463176",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "column_break_seaq",
+  "disabled",
+  "section_break_zyqx",
+  "code_system",
+  "uri",
+  "description",
+  "column_break_ijhv",
+  "status",
+  "version",
+  "is_fhir_defined",
+  "oid",
+  "experimental",
+  "immutable",
+  "complete",
+  "custom"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "uri",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "URI",
+   "no_copy": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "oid",
+   "fieldtype": "Data",
+   "label": "OID",
+   "no_copy": 1,
+   "read_only_depends_on": "eval:doc.is_fhir_defined",
+   "unique": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description"
+  },
+  {
+   "fieldname": "column_break_ijhv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "code_system",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Code System",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled",
+   "search_index": 1
+  },
+  {
+   "fieldname": "section_break_zyqx",
+   "fieldtype": "Section Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "1",
+   "fieldname": "is_fhir_defined",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Is FHIR Defined",
+   "no_copy": 1
+  },
+  {
+   "default": "1",
+   "fieldname": "experimental",
+   "fieldtype": "Check",
+   "label": "Experimental ",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "custom",
+   "fieldtype": "Check",
+   "label": "Custom",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "immutable",
+   "fieldtype": "Check",
+   "label": "Immutable "
+  },
+  {
+   "default": "1",
+   "fieldname": "column_break_seaq",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "version",
+   "fieldtype": "Link",
+   "label": "Version",
+   "options": "Code Value",
+   "search_index": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Link",
+   "label": "Status",
+   "options": "Code Value"
+  },
+  {
+   "default": "0",
+   "fieldname": "complete",
+   "fieldtype": "Check",
+   "label": "Complete"
+  }
+ ],
+ "links": [
+  {
+   "link_doctype": "Code Value",
+   "link_fieldname": "code_system"
+  }
+ ],
+ "modified": "2024-01-08 16:44:38.512275",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Code System",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "code_system, uri",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "code_system",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_system/code_system.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class CodeSystem(Document):
+	def autoname(self):
+		self.name = f"{self.code_system}-{self.version}" if self.version else self.code_system
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_system/test_code_system.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestCodeSystem(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value/code_value.js
@@ -0,0 +1,14 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Code Value', {
+	setup: function(frm) {
+		frm.set_query("version", function () {
+			return {
+				"filters": {
+					"code_system": "FHIRVersion",
+				}
+			};
+		});
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value/code_value.json
@@ -0,0 +1,221 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "beta": 1,
+ "creation": "2017-06-21 13:02:56.122897",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_mygg",
+  "code_system",
+  "system_uri",
+  "experimental",
+  "immutable",
+  "complete",
+  "code_value",
+  "value_set",
+  "display",
+  "column_break_cmkw",
+  "status",
+  "version",
+  "level",
+  "definition",
+  "official_url",
+  "canonical_mapping",
+  "custom"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fetch_from": "value_set.code_system",
+   "fieldname": "code_system",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Code System",
+   "options": "Code System",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_cmkw",
+   "fieldtype": "Column Break",
+   "no_copy": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "definition",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Definition",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "section_break_mygg",
+   "fieldtype": "Section Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "code_value",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Code Value",
+   "no_copy": 1,
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "code_system.uri",
+   "fieldname": "system_uri",
+   "fieldtype": "Data",
+   "label": "System URI",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "official_url",
+   "fieldtype": "Data",
+   "label": "Official URL"
+  },
+  {
+   "default": "0",
+   "fetch_from": "code_system.experimental",
+   "fieldname": "experimental",
+   "fieldtype": "Check",
+   "label": "Experimental",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fetch_from": "code_system.custom",
+   "fieldname": "custom",
+   "fieldtype": "Check",
+   "label": "Custom"
+  },
+  {
+   "default": "0",
+   "fetch_from": "code_system.immutable",
+   "fieldname": "immutable",
+   "fieldtype": "Check",
+   "label": "Immutable",
+   "read_only": 1
+  },
+  {
+   "fieldname": "version",
+   "fieldtype": "Link",
+   "label": "Version",
+   "options": "Code Value",
+   "search_index": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Link",
+   "label": "Status",
+   "options": "Code Value"
+  },
+  {
+   "default": "0",
+   "fetch_from": "code_system.complete",
+   "fieldname": "complete",
+   "fieldtype": "Check",
+   "label": "Complete",
+   "read_only": 1
+  },
+  {
+   "fieldname": "level",
+   "fieldtype": "Int",
+   "label": "Level",
+   "length": 10,
+   "non_negative": 1
+  },
+  {
+   "description": "Only applicable to status codes, all status codes are mapped to one of the codes defined as part of Resource Status (The master set of status codes used throughout FHIR)",
+   "fieldname": "canonical_mapping",
+   "fieldtype": "Link",
+   "label": "Canonical Mapping",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "value_set",
+   "fieldtype": "Link",
+   "label": "Value Set",
+   "options": "Code Value Set"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "display",
+   "fieldtype": "Small Text",
+   "in_list_view": 1,
+   "label": "Display",
+   "no_copy": 1
+  }
+ ],
+ "links": [],
+ "modified": "2024-02-05 14:35:20.896155",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Code Value",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "code_value, code_system, level",
+ "show_title_field_in_link": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "display",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value/code_value.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class CodeValue(Document):
+	def autoname(self):
+		self.name = f"{self.code_value}{'-' + self.version if self.version else ''}-{self.code_system}"
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value/test_code_value.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestCodeValue(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value_set/code_value_set.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2023, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Code Value Set", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value_set/code_value_set.json
@@ -0,0 +1,84 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:value_set",
+ "beta": 1,
+ "creation": "2023-12-28 16:17:20.877603",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "code_system",
+  "system_uri",
+  "value_set",
+  "description",
+  "column_break_ufln",
+  "status"
+ ],
+ "fields": [
+  {
+   "fieldname": "value_set",
+   "fieldtype": "Data",
+   "label": "Value Set",
+   "unique": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_ufln",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "code_system",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Code System",
+   "options": "Code System"
+  },
+  {
+   "fetch_from": "code_system.uri",
+   "fieldname": "system_uri",
+   "fieldtype": "Data",
+   "label": "System URI",
+   "unique": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-12-29 18:58:14.304840",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Code Value Set",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value_set/code_value_set.py
@@ -0,0 +1,10 @@
+# Copyright (c) 2023, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class CodeValueSet(Document):
+	def autoname(self):
+		self.name = f"{self.code_value}-{self.code_system}"
--- /dev/null
+++ b/healthcare/healthcare/doctype/code_value_set/test_code_value_set.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestCodeValueSet(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/codification_table/codification_table.json
@@ -0,0 +1,116 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2017-06-22 13:09:23.159579",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "code_system",
+  "system",
+  "is_fhir_defined",
+  "oid",
+  "column_break_3",
+  "code_value",
+  "code",
+  "display",
+  "section_break_5",
+  "definition"
+ ],
+ "fields": [
+  {
+   "columns": 2,
+   "fieldname": "code_value",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Code Value",
+   "options": "Code Value",
+   "reqd": 1
+  },
+  {
+   "columns": 2,
+   "fetch_from": "code_value.code_value",
+   "fieldname": "code",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Code",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_5",
+   "fieldtype": "Section Break"
+  },
+  {
+   "columns": 2,
+   "fetch_from": "code_system.uri",
+   "fieldname": "system",
+   "fieldtype": "Data",
+   "label": "System",
+   "read_only": 1
+  },
+  {
+   "columns": 2,
+   "fieldname": "code_system",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Code System",
+   "options": "Code System",
+   "read_only_depends_on": "code_value",
+   "reqd": 1
+  },
+  {
+   "columns": 2,
+   "fetch_from": "code_value.definition",
+   "fieldname": "definition",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Definition",
+   "read_only": 1
+  },
+  {
+   "columns": 2,
+   "fetch_from": "code_value.display",
+   "fieldname": "display",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Display",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_fhir_defined",
+   "fieldtype": "Check",
+   "label": "Is FHIR Defined",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "code_system.oid",
+   "fieldname": "oid",
+   "fieldtype": "Data",
+   "label": "OID",
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-11-03 13:28:04.445778",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Codification Table",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/codification_table/codification_table.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class CodificationTable(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/complaint/complaint.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Complaint', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/complaint/complaint.json
@@ -0,0 +1,116 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "field:complaints", 
+ "beta": 0,
+ "creation": "2017-02-15 12:25:28.045267", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "", 
+ "editable_grid": 1, 
+ "engine": "InnoDB", 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "complaints", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Complaints", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2017-10-05 11:18:42.017864", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Complaint", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }, 
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Physician", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }
+ ], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "search_fields": "complaints", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "title_field": "complaints", 
+ "track_changes": 0, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/complaint/complaint.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class Complaint(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/complaint/test_complaint.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestComplaint(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/descriptive_test_result/descriptive_test_result.json
@@ -0,0 +1,74 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "beta": 0,
+ "creation": "2016-02-22 15:12:36.202380",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "lab_test_particulars",
+  "result_value",
+  "allow_blank",
+  "template",
+  "require_result_value"
+ ],
+ "fields": [
+  {
+   "fieldname": "lab_test_particulars",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Particulars",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value == 1",
+   "fieldname": "result_value",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Value"
+  },
+  {
+   "fieldname": "template",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Template",
+   "options": "Lab Test Template",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "require_result_value",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Require Result Value",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "1",
+   "fieldname": "allow_blank",
+   "fieldtype": "Check",
+   "label": "Allow Blank",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-07-23 12:33:47.693065",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Descriptive Test Result",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/descriptive_test_result/descriptive_test_result.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class DescriptiveTestResult(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/descriptive_test_template/descriptive_test_template.json
@@ -0,0 +1,41 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "beta": 0,
+ "creation": "2016-02-22 16:12:12.394200",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "particulars",
+  "allow_blank"
+ ],
+ "fields": [
+  {
+   "fieldname": "particulars",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Result Component"
+  },
+  {
+   "default": "0",
+   "fieldname": "allow_blank",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Allow Blank"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-06-24 14:03:51.728863",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Descriptive Test Template",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/descriptive_test_template/descriptive_test_template.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class DescriptiveTestTemplate(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnosis/diagnosis.js
@@ -0,0 +1,17 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Diagnosis', {
+    refresh : function(frm) {
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+	},
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnosis/diagnosis.json
@@ -0,0 +1,93 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:diagnosis",
+ "beta": 1,
+ "creation": "2017-02-15 12:23:59.341108",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "diagnosis",
+  "column_break_2",
+  "estimated_duration",
+  "codification",
+  "codification_table"
+ ],
+ "fields": [
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Diagnosis",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "estimated_duration",
+   "fieldtype": "Duration",
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Estimated Duration"
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+  "fieldname": "codification_table",
+  "fieldtype": "Table",
+  "label": "Medical Codes",
+  "options": "Codification Table"
+ },
+ {
+  "fieldname": "codification",
+  "fieldtype": "Section Break",
+  "label": "Medical Coding"
+ }
+ ],
+ "links": [],
+ "modified": "2021-03-14 20:34:07.440600",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diagnosis",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "diagnosis",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "diagnosis",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnosis/diagnosis.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class Diagnosis(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnosis/test_diagnosis.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Diagnosis')
+
+
+class TestDiagnosis(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnostic_report/diagnostic_report.js
@@ -0,0 +1,135 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Diagnostic Report", {
+	refresh: function(frm) {
+		show_diagnostic_report(frm);
+		if (!frm.is_new()) {
+			frm.add_custom_button(__(`Get PDF`), function () {
+				generate_pdf_with_print_format(frm)
+			})
+		}
+	},
+	before_save: function(frm) {
+		if (!frm.doc.is_new() && frm.is_dirty()) {
+			this.diagnostic_report.save_action("save")
+		}
+	},
+	after_workflow_action: function(frm) {
+		frappe.call({
+			"method": "healthcare.healthcare.doctype.diagnostic_report.diagnostic_report.set_observation_status",
+			args: {
+				docname: frm.doc.name
+			},
+		})
+	}
+});
+
+var show_diagnostic_report = function(frm) {
+	frm.fields_dict.observation.html("");
+	if (frm.doc.patient) {
+		this.diagnostic_report = new healthcare.Diagnostic.DiagnosticReport({
+			frm: frm,
+			observation_wrapper: $(frm.fields_dict.observation.wrapper),
+			create_observation: false,
+		});
+		this.diagnostic_report.refresh();
+	}
+}
+
+var generate_pdf_with_print_format = function(frm) {
+	const letterheads = get_letterhead_options();
+	const dialog = new frappe.ui.Dialog({
+		title: __('Print {0}', [frm.doc.name]),
+		fields: [
+			{
+				fieldtype: "Select",
+				label: __("Letter Head"),
+				fieldname: "letter_sel",
+				options: letterheads,
+				default: letterheads[0],
+			},
+			{
+				fieldtype: "Select",
+				label: __("Print Format"),
+				fieldname: "print_sel",
+				options: frappe.meta.get_print_formats(frm.doc.doctype),
+				default: frappe.get_meta(frm.doc.doctype).default_print_format,
+			}
+		],
+	});
+
+	dialog.set_primary_action(__("Print"), (args) => {
+		if (!args) return;
+		const default_print_format = frappe.get_meta(frm.doc.doctype).default_print_format;
+		const with_letterhead = args.letter_sel == __("No Letterhead") ? 0 : 1;
+		const print_format = args.print_sel ? args.print_sel : default_print_format;
+		const doc_names = JSON.stringify([
+			frm.doc.name,
+			]);
+		const letterhead = args.letter_sel;
+
+		let pdf_options = JSON.stringify({
+			"page-size": "A4",
+			"margin-top": "60mm",
+			"margin-bottom": "60mm",
+			"margin-left": "0mm",
+			"margin-right": "0mm",
+		});
+
+		if (letterhead == __("No Letterhead")) {
+			pdf_options = JSON.stringify({
+				"page-size": "A4",
+				"margin-top": "5mm",
+				"margin-bottom": "5mm",
+				"margin-left": "0mm",
+				"margin-right": "0mm",
+			});
+		}
+
+		const w = window.open(
+			"/api/method/frappe.utils.print_format.download_multi_pdf?" +
+				"doctype=" +
+				encodeURIComponent(frm.doc.doctype) +
+				"&name=" +
+				encodeURIComponent(doc_names) +
+				"&format=" +
+				encodeURIComponent(print_format) +
+				"&no_letterhead=" +
+				(with_letterhead ? "0" : "1") +
+				"&letterhead=" +
+				encodeURIComponent(letterhead) +
+				"&options=" +
+				encodeURIComponent(pdf_options)
+		);
+
+		if (!w) {
+			frappe.msgprint(__("Please enable pop-ups"));
+			return;
+		}
+	});
+
+	dialog.show();
+}
+
+var get_letterhead_options = () => {
+	const letterhead_options = [__("No Letterhead")];
+	frappe.call({
+		method: "frappe.client.get_list",
+		args: {
+			doctype: "Letter Head",
+			fields: ["name", "is_default"],
+			filters: { disabled: 0 },
+			limit_page_length: 0,
+		},
+		async: false,
+		callback(r) {
+			if (r.message) {
+				r.message.forEach((letterhead) => {
+					letterhead_options.push(letterhead.name);
+				});
+			}
+		},
+	});
+	return letterhead_options;
+};
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnostic_report/diagnostic_report.json
@@ -0,0 +1,202 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2023-06-24 10:55:17.218952",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient",
+  "patient_name",
+  "gender",
+  "age",
+  "practitioner",
+  "practitioner_name",
+  "column_break_v6l1",
+  "company",
+  "status",
+  "naming_series",
+  "ref_doctype",
+  "docname",
+  "sales_invoice_status",
+  "reference_posting_date",
+  "sample_collection",
+  "section_break_wtn1",
+  "observation",
+  "amended_from",
+  "title"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_v6l1",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "ref_doctype",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "in_standard_filter": 1,
+   "label": "Ref DocType",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "docname",
+   "fieldtype": "Dynamic Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Ref DocName",
+   "options": "ref_doctype",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_wtn1",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "observation",
+   "fieldtype": "HTML",
+   "label": "Observation"
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "DIA-RPT-.YYYY.-"
+  },
+  {
+   "fieldname": "sample_collection",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Sample Collection",
+   "options": "Sample Collection"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Diagnostic Report",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "age",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sales_invoice_status",
+   "fieldtype": "Data",
+   "label": "Sales Invoice Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "read_only": 1
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_posting_date",
+   "fieldtype": "Date",
+   "label": "Reference Posting Date",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Open\nPending Review\nPartially Approved\nApproved\nDisapproved",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-10-16 17:53:14.702170",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diagnostic Report",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [
+  {
+   "color": "Orange",
+   "title": "Open"
+  }
+ ],
+ "title_field": "title",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnostic_report/diagnostic_report.py
@@ -0,0 +1,104 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe.model.document import Document
+from frappe.model.workflow import get_workflow_name, get_workflow_state_field
+
+from healthcare.healthcare.doctype.observation.observation import get_observation_details
+
+
+class DiagnosticReport(Document):
+	def validate(self):
+		self.set_reference_details()
+		self.set_age()
+		self.set_title()
+		# set_diagnostic_status(self)
+
+	def before_insert(self):
+		if self.ref_doctype == "Sales Invoice" and self.docname:
+			self.practitioner = frappe.db.get_value(self.ref_doctype, self.docname, "ref_practitioner")
+
+	def set_age(self):
+		if not self.age:
+			patient_doc = frappe.get_doc("Patient", self.patient)
+			if patient_doc.dob:
+				self.age = patient_doc.calculate_age(self.reference_posting_date).get("age_in_string")
+
+	def set_title(self):
+		self.title = f"{self.patient_name} - {self.age or ''} {self.gender}"
+
+	def set_reference_details(self):
+		if self.ref_doctype == "Sales Invoice" and self.docname:
+			self.sales_invoice_status, self.reference_posting_date = frappe.db.get_value(
+				"Sales Invoice", self.docname, ["status", "posting_date"]
+			)
+
+
+def diagnostic_report_print(diagnostic_report):
+	return get_observation_details(diagnostic_report)
+
+
+def validate_observations_has_result(doc):
+	if doc.ref_doctype == "Sales Invoice":
+		submittable = True
+		observations = frappe.db.get_all(
+			"Observation",
+			{
+				"sales_invoice": doc.docname,
+				"docstatus": ["!=", 2],
+				"has_component": False,
+				"status": ["!=", "Cancelled"],
+			},
+			pluck="name",
+		)
+		for obs in observations:
+			if not frappe.get_doc("Observation", obs).has_result():
+				submittable = False
+		return submittable
+
+
+def set_diagnostic_status(doc):
+	if doc.get("__islocal"):
+		return
+	observations = frappe.db.get_all(
+		"Observation",
+		{"sales_invoice": doc.docname, "docstatus": 0, "status": ["!=", "Approved"], "has_component": 0},
+	)
+	workflow_name = get_workflow_name("Diagnostic Report")
+	workflow_state_field = get_workflow_state_field(workflow_name)
+	if observations and len(observations) > 0:
+		set_status = "Partially Approved"
+	else:
+		set_status = "Approved"
+	doc.status = set_status
+	doc.set(workflow_state_field, set_status)
+
+
+@frappe.whitelist()
+def set_observation_status(docname):
+	doc = frappe.get_doc("Diagnostic Report", docname)
+	if doc.ref_doctype == "Sales Invoice":
+		observations = frappe.db.get_all(
+			"Observation",
+			{
+				"sales_invoice": doc.docname,
+				"docstatus": ["!=", 2],
+				"has_component": False,
+				"status": ["not in", ["Cancelled", "Approved", "Disapproved"]],
+			},
+			pluck="name",
+		)
+		if observations:
+			for obs in observations:
+				if doc.status in ["Approved", "Disapproved"]:
+					observation_doc = frappe.get_doc("Observation", obs)
+					if observation_doc.has_result():
+						if doc.status == "Approved" and not observation_doc.status in ["Approved", "Disapproved"]:
+							observation_doc.status = doc.status
+							observation_doc.save().submit()
+						if doc.status == "Disapproved" and observation_doc.status == "Approved":
+							new_doc = frappe.copy_doc(observation_doc)
+							new_doc.status = ""
+							new_doc.insert()
+							observation_doc.cancel()
--- /dev/null
+++ b/healthcare/healthcare/doctype/diagnostic_report/test_diagnostic_report.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestDiagnosticReport(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/diluent/diluent.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Diluent", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/diluent/diluent.json
@@ -0,0 +1,68 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "autoname": "field:title",
+ "creation": "2024-08-20 02:11:19.185728",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "acronym",
+  "volume"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Title",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "volume",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Volume",
+   "non_negative": 1,
+   "precision": "2"
+  },
+  {
+   "fieldname": "acronym",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Acronym",
+   "reqd": 1
+  }
+ ],
+ "in_create": 1,
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-20 03:01:59.363585",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diluent",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "acronym",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/diluent/diluent.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class Diluent(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/diluent/test_diluent.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestDiluent(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_form/dosage_form.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Dosage Form', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_form/dosage_form.json
@@ -0,0 +1,114 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "field:dosage_form", 
+ "beta": 0,
+ "creation": "2017-04-08 12:04:33.987972", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "", 
+ "editable_grid": 1, 
+ "engine": "InnoDB", 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "dosage_form", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Dosage Form", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2017-10-05 11:24:57.888091", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Dosage Form", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Physician", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }, 
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }
+ ], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "track_changes": 1, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_form/dosage_form.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class DosageForm(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_form/test_dosage_form.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, ESS LLP and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestDosageForm(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_strength/dosage_strength.json
@@ -0,0 +1,102 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 0, 
+ "allow_rename": 0, 
+ "beta": 0,
+ "creation": "2017-02-14 15:40:14.385707", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "", 
+ "editable_grid": 1, 
+ "engine": "InnoDB", 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "strength", 
+   "fieldtype": "Float", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Strength", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }, 
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "strength_time", 
+   "fieldtype": "Time", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Time", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 0, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 1, 
+ "max_attachments": 0, 
+ "modified": "2017-08-31 14:11:59.874645", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Dosage Strength", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "track_changes": 0, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/dosage_strength/dosage_strength.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class DosageStrength(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/drug_prescription/drug_prescription.json
@@ -0,0 +1,196 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2016-09-16 16:41:45.533374",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "medication",
+  "drug_code",
+  "drug_name",
+  "strength",
+  "strength_uom",
+  "dosage_form",
+  "column_break_7",
+  "dosage_by_interval",
+  "dosage",
+  "interval",
+  "interval_uom",
+  "period",
+  "number_of_repeats_allowed",
+  "section_break_u9av",
+  "intent",
+  "priority",
+  "medication_request",
+  "section_break_13",
+  "comment",
+  "update_schedule"
+ ],
+ "fields": [
+  {
+   "fieldname": "drug_code",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Drug Code",
+   "options": "Item"
+  },
+  {
+   "fetch_from": "drug_code.item_name",
+   "fieldname": "drug_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Drug Name / Description",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.dosage_by_interval",
+   "fetch_from": "medication.default_prescription_dosage",
+   "fetch_if_empty": 1,
+   "fieldname": "dosage",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Dosage",
+   "mandatory_depends_on": "eval:!doc.dosage_by_interval",
+   "options": "Prescription Dosage"
+  },
+  {
+   "fetch_from": "medication.default_prescription_duration",
+   "fetch_if_empty": 1,
+   "fieldname": "period",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Period",
+   "options": "Prescription Duration",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "medication.dosage_form",
+   "fetch_if_empty": 1,
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Dosage Form",
+   "options": "Dosage Form",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_7",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "comment",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Comment"
+  },
+  {
+   "depends_on": "eval:doc.dosage_by_interval",
+   "fetch_from": "medication.default_interval",
+   "fetch_if_empty": 1,
+   "fieldname": "interval",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "label": "Interval",
+   "mandatory_depends_on": "eval:doc.dosage_by_interval"
+  },
+  {
+   "default": "1",
+   "depends_on": "usage_interval",
+   "fieldname": "update_schedule",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Update Schedule",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "depends_on": "eval:doc.dosage_by_interval",
+   "fetch_from": "medication.default_interval_uom",
+   "fetch_if_empty": 1,
+   "fieldname": "interval_uom",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Interval UOM",
+   "mandatory_depends_on": "eval:doc.dosage_by_interval",
+   "options": "\nHour\nDay"
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Medication",
+   "options": "Medication"
+  },
+  {
+   "fetch_from": "medication.strength",
+   "fieldname": "strength",
+   "fieldtype": "Float",
+   "label": "Strength",
+   "read_only_depends_on": "eval: doc.medication"
+  },
+  {
+   "depends_on": "strength",
+   "fetch_from": "medication.strength_uom",
+   "fieldname": "strength_uom",
+   "fieldtype": "Link",
+   "label": "Strength UOM",
+   "options": "UOM",
+   "read_only_depends_on": "eval: doc.medication"
+  },
+  {
+   "default": "0",
+   "fieldname": "dosage_by_interval",
+   "fieldtype": "Check",
+   "label": "Dosage by Time Interval"
+  },
+  {
+   "fieldname": "section_break_13",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "number_of_repeats_allowed",
+   "fieldtype": "Float",
+   "label": "Number Of Repeats Allowed"
+  },
+  {
+   "fieldname": "section_break_u9av",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "medication_request",
+   "fieldtype": "Data",
+   "label": "Medication Request",
+   "no_copy": 1,
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-11-01 23:09:36.121900",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Drug Prescription",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/drug_prescription/drug_prescription.py
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+
+
+class DrugPrescription(Document):
+	def get_quantity(self):
+		quantity = 0
+		dosage = None
+		period = None
+
+		if self.dosage:
+			dosage = frappe.get_doc("Prescription Dosage", self.dosage)
+			for item in dosage.dosage_strength:
+				quantity += item.strength
+			if self.period and self.interval:
+				period = frappe.get_doc("Prescription Duration", self.period)
+				if self.interval < period.get_days():
+					quantity = quantity * (period.get_days() / self.interval)
+
+		elif self.interval and self.interval_uom and self.period:
+			period = frappe.get_doc("Prescription Duration", self.period)
+			interval_in = self.interval_uom
+			if interval_in == "Day" and self.interval < period.get_days():
+				quantity = period.get_days() / self.interval
+			elif interval_in == "Hour" and self.interval < period.get_hours():
+				quantity = period.get_hours() / self.interval
+		if quantity > 0:
+			return quantity
+		else:
+			return 1
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise/exercise.json
@@ -0,0 +1,62 @@
+{
+ "actions": [],
+ "creation": "2020-03-11 09:25:00.968572",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "exercise_type",
+  "difficulty_level",
+  "counts_target",
+  "counts_completed",
+  "assistance_level"
+ ],
+ "fields": [
+  {
+   "fieldname": "exercise_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Exercise Type",
+   "options": "Exercise Type",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "exercise_type.difficulty_level",
+   "fieldname": "difficulty_level",
+   "fieldtype": "Link",
+   "label": "Difficulty Level",
+   "options": "Exercise Difficulty Level"
+  },
+  {
+   "fieldname": "counts_target",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "label": "Counts Target"
+  },
+  {
+   "depends_on": "eval:doc.parenttype==\"Therapy\";",
+   "fieldname": "counts_completed",
+   "fieldtype": "Int",
+   "label": "Counts Completed",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "assistance_level",
+   "fieldtype": "Select",
+   "label": "Assistance Level",
+   "options": "\nPassive\nActive Assist\nActive"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-11-04 18:20:25.583491",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Exercise",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise/exercise.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class Exercise(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_difficulty_level/exercise_difficulty_level.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Exercise Difficulty Level', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_difficulty_level/exercise_difficulty_level.json
@@ -0,0 +1,45 @@
+{
+ "actions": [],
+ "autoname": "field:difficulty_level",
+ "creation": "2020-03-29 21:12:55.835941",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "difficulty_level"
+ ],
+ "fields": [
+  {
+   "fieldname": "difficulty_level",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Difficulty Level",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2020-03-31 23:14:33.554066",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Exercise Difficulty Level",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_difficulty_level/exercise_difficulty_level.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ExerciseDifficultyLevel(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_difficulty_level/test_exercise_difficulty_level.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestExerciseDifficultyLevel(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type/exercise_type.js
@@ -0,0 +1,186 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Exercise Type', {
+	refresh: function(frm) {
+		let wrapper = frm.fields_dict.steps_html.wrapper;
+
+		frm.ExerciseEditor = new erpnext.ExerciseEditor(frm, wrapper);
+	}
+});
+
+erpnext.ExerciseEditor = class ExerciseEditor {
+	constructor(frm, wrapper) {
+		this.wrapper = wrapper;
+		this.frm = frm;
+		this.make(frm, wrapper);
+	}
+
+	make(frm, wrapper) {
+		$(this.wrapper).empty();
+
+		this.exercise_toolbar = $('<p>\
+		<button class="btn btn-default btn-add btn-xs" style="margin-left: 10px;"></button>').appendTo(this.wrapper);
+
+		this.exercise_cards = $('<div class="exercise-cards"></div>').appendTo(this.wrapper);
+
+		this.row = $('<div class="exercise-row"></div>').appendTo(this.wrapper);
+
+		let me = this;
+
+		this.exercise_toolbar.find(".btn-add")
+			.html(__('Add'))
+			.on("click", function() {
+				me.show_add_card_dialog(frm);
+			});
+
+		if (frm.doc.steps_table && frm.doc.steps_table.length > 0) {
+			this.make_cards(frm);
+			this.make_buttons(frm);
+		}
+	}
+
+	make_cards(frm) {
+		var me = this;
+		$(me.exercise_cards).empty();
+
+		$.each(frm.doc.steps_table, function(i, step) {
+			$(repl(`
+				<div class="exercise-col col-sm-4" id="%(col_id)s">
+					<div class="card h-100 exercise-card" id="%(card_id)s">
+						<div class="card-body exercise-card-body">
+							<img src="%(image_src)s" class="card-img-top" alt="...">
+							<h4 class="card-title">%(title)s</h4>
+							<p class="card-text text-truncate">%(description)s</p>
+						</div>
+						<div class="card-footer">
+							<button class="btn btn-default btn-xs btn-edit" data-id="%(id)s"><i class="fa fa-pencil" aria-hidden="true"></i></button>
+							<button class="btn btn-default btn-xs btn-del" data-id="%(id)s"><i class="fa fa-trash" aria-hidden="true"></i></button>
+						</div>
+					</div>
+			</div>`, {image_src: step.image, title: step.title, description: step.description, col_id: "col-"+i, card_id: "card-"+i, id: i})).appendTo(me.row);
+		});
+	}
+
+	make_buttons(frm) {
+		let me = this;
+		$('.btn-edit').on('click', function() {
+			let id = $(this).attr('data-id');
+			me.show_edit_card_dialog(frm, id);
+		});
+
+		$('.btn-del').on('click', function() {
+			let id = $(this).attr('data-id');
+			$('#card-'+id).addClass("zoom-out");
+
+			setTimeout(() => {
+				// not using grid_rows[id].remove because
+				// grid_rows is not defined when the table is hidden
+				frm.doc.steps_table.pop(id);
+				frm.refresh_field('steps_table');
+				$('#col-'+id).remove();
+				frm.dirty();
+			}, 300);
+		});
+	}
+
+	show_add_card_dialog(frm) {
+		let me = this;
+		let d = new frappe.ui.Dialog({
+			title: __('Add Exercise Step'),
+			fields: [
+				{
+					"label": "Title",
+					"fieldname": "title",
+					"fieldtype": "Data",
+					"reqd": 1
+				},
+				{
+					"label": "Attach Image",
+					"fieldname": "image",
+					"fieldtype": "Attach Image"
+				},
+				{
+					"label": "Step Description",
+					"fieldname": "step_description",
+					"fieldtype": "Long Text"
+				}
+			],
+			primary_action: function() {
+				let data = d.get_values();
+				let i = 0;
+				if (frm.doc.steps_table) {
+					i = frm.doc.steps_table.length;
+				}
+				$(repl(`
+					<div class="exercise-col col-sm-4" id="%(col_id)s">
+						<div class="card h-100 exercise-card" id="%(card_id)s">
+							<div class="card-body exercise-card-body">
+								<img src=%(image_src)s class="card-img-top" alt="...">
+								<h4 class="card-title">%(title)s</h4>
+								<p class="card-text text-truncate">%(description)s</p>
+							</div>
+							<div class="card-footer">
+								<button class="btn btn-default btn-xs btn-edit" data-id="%(id)s"><i class="fa fa-pencil" aria-hidden="true"></i></button>
+								<button class="btn btn-default btn-xs btn-del" data-id="%(id)s"><i class="fa fa-trash" aria-hidden="true"></i></button>
+							</div>
+						</div>
+					</div>`, {image_src: data.image, title: data.title, description: data.step_description, col_id: "col-"+i, card_id: "card-"+i, id: i})).appendTo(me.row);
+				let step = frappe.model.add_child(frm.doc, 'Exercise Type Step', 'steps_table');
+				step.title = data.title;
+				step.image = data.image;
+				step.description = data.step_description;
+				me.make_buttons(frm);
+				frm.refresh_field('steps_table');
+				d.hide();
+			},
+			primary_action_label: __('Add')
+		});
+		d.show();
+	}
+
+	show_edit_card_dialog(frm, id) {
+		let new_dialog = new frappe.ui.Dialog({
+			title: __("Edit Exercise Step"),
+			fields: [
+				{
+					"label": "Title",
+					"fieldname": "title",
+					"fieldtype": "Data",
+					"reqd": 1
+				},
+				{
+					"label": "Attach Image",
+					"fieldname": "image",
+					"fieldtype": "Attach Image"
+				},
+				{
+					"label": "Step Description",
+					"fieldname": "step_description",
+					"fieldtype": "Long Text"
+				}
+			],
+			primary_action: () => {
+				let data = new_dialog.get_values();
+				$('#card-'+id).find('.card-title').html(data.title);
+				$('#card-'+id).find('img').attr('src', data.image);
+				$('#card-'+id).find('.card-text').html(data.step_description);
+
+				frm.doc.steps_table[id].title = data.title;
+				frm.doc.steps_table[id].image = data.image;
+				frm.doc.steps_table[id].description = data.step_description;
+				refresh_field('steps_table');
+				frm.dirty();
+				new_dialog.hide();
+			},
+			primary_action_label: __("Edit"),
+		});
+
+		new_dialog.set_values({
+			title: frm.doc.steps_table[id].title,
+			image: frm.doc.steps_table[id].image,
+			step_description: frm.doc.steps_table[id].description
+		});
+		new_dialog.show();
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type/exercise_type.json
@@ -0,0 +1,152 @@
+{
+ "actions": [],
+ "creation": "2020-03-29 21:37:03.366344",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "exercise_name",
+  "body_parts",
+  "column_break_3",
+  "difficulty_level",
+  "section_break_5",
+  "description",
+  "instructions_tab",
+  "section_break_7",
+  "exercise_steps",
+  "column_break_9",
+  "exercise_video",
+  "section_break_11",
+  "steps_html",
+  "section_break_13",
+  "steps_table"
+ ],
+ "fields": [
+  {
+   "fieldname": "exercise_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Exercise Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "difficulty_level",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Difficulty Level",
+   "options": "Exercise Difficulty Level"
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_5",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Long Text",
+   "label": "Description"
+  },
+  {
+   "fieldname": "section_break_7",
+   "fieldtype": "Section Break",
+   "label": "Exercise Instructions"
+  },
+  {
+   "fieldname": "exercise_steps",
+   "fieldtype": "Attach",
+   "label": "Exercise Instructions"
+  },
+  {
+   "fieldname": "exercise_video",
+   "fieldtype": "Link",
+   "label": "Exercise Video",
+   "options": "Video"
+  },
+  {
+   "fieldname": "column_break_9",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "steps_html",
+   "fieldtype": "HTML",
+   "label": "Steps"
+  },
+  {
+   "fieldname": "steps_table",
+   "fieldtype": "Table",
+   "hidden": 1,
+   "label": "Steps Table",
+   "options": "Exercise Type Step"
+  },
+  {
+   "fieldname": "section_break_11",
+   "fieldtype": "Section Break",
+   "label": "Exercise Steps"
+  },
+  {
+   "fieldname": "section_break_13",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "body_parts",
+   "fieldtype": "Table MultiSelect",
+   "label": "Body Parts",
+   "options": "Body Part Link"
+  },
+  {
+   "fieldname": "instructions_tab",
+   "fieldtype": "Tab Break",
+   "label": "Instructions"
+  }
+ ],
+ "links": [],
+ "modified": "2023-01-13 19:40:58.647870",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Exercise Type",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type/exercise_type.py
@@ -0,0 +1,15 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ExerciseType(Document):
+	def autoname(self):
+		if self.difficulty_level:
+			self.name = " - ".join(filter(None, [self.exercise_name, self.difficulty_level]))
+		else:
+			self.name = self.exercise_name
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type/test_exercise_type.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestExerciseType(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type_step/exercise_type_step.json
@@ -0,0 +1,44 @@
+{
+ "actions": [],
+ "creation": "2020-03-31 23:01:18.761967",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "image",
+  "description"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Title",
+   "reqd": 1
+  },
+  {
+   "fieldname": "image",
+   "fieldtype": "Attach Image",
+   "label": "Image"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Long Text",
+   "in_list_view": 1,
+   "label": "Description"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-04-02 20:39:34.258512",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Exercise Type Step",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/exercise_type_step/exercise_type_step.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ExerciseTypeStep(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity/fee_validity.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Fee Validity', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity/fee_validity.json
@@ -0,0 +1,152 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "creation": "2017-01-05 10:56:29.564806",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "practitioner",
+  "patient",
+  "medical_department",
+  "column_break_3",
+  "status",
+  "patient_appointment",
+  "sales_invoice_ref",
+  "section_break_3",
+  "max_visits",
+  "visited",
+  "ref_appointments",
+  "column_break_6",
+  "start_date",
+  "valid_till"
+ ],
+ "fields": [
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only": 1,
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "read_only": 1,
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "visited",
+   "fieldtype": "Int",
+   "label": "Visits Completed",
+   "read_only": 1
+  },
+  {
+   "fieldname": "valid_till",
+   "fieldtype": "Date",
+   "label": "Valid Till",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_3",
+   "fieldtype": "Section Break",
+   "label": "Validity",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "max_visits",
+   "fieldtype": "Int",
+   "label": "Max number of visit",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Active\nExpired\nCompleted\nCancelled",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "ref_appointment.appointment_date",
+   "fieldname": "start_date",
+   "fieldtype": "Date",
+   "label": "Start Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "ref_appointments",
+   "fieldtype": "Table MultiSelect",
+   "label": "Reference Appointments",
+   "options": "Fee Validity Reference",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sales_invoice_ref",
+   "fieldtype": "Link",
+   "label": "Sales Invoice Reference",
+   "options": "Sales Invoice",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_appointment",
+   "fieldtype": "Link",
+   "label": "Patient Appointment",
+   "options": "Patient Appointment",
+   "read_only": 1
+  }
+ ],
+ "in_create": 1,
+ "links": [],
+ "modified": "2023-04-09 10:40:36.311443",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Fee Validity",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "practitioner, patient",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "practitioner"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity/fee_validity.py
@@ -0,0 +1,198 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+import datetime
+import json
+
+import frappe
+from frappe.model.document import Document
+from frappe.utils import getdate
+
+
+class FeeValidity(Document):
+	def validate(self):
+		self.update_status()
+
+	def update_status(self):
+		if getdate(self.valid_till) < getdate():
+			self.status = "Expired"
+		elif self.visited == self.max_visits:
+			self.status = "Completed"
+		else:
+			self.status = "Active"
+
+
+def create_fee_validity(appointment):
+	if patient_has_validity(appointment):
+		return
+
+	fee_validity = frappe.new_doc("Fee Validity")
+	fee_validity.practitioner = appointment.practitioner
+	fee_validity.patient = appointment.patient
+	fee_validity.medical_department = appointment.department
+	fee_validity.patient_appointment = appointment.name
+	fee_validity.sales_invoice_ref = frappe.db.get_value(
+		"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+	)
+	fee_validity.max_visits = frappe.db.get_single_value("Healthcare Settings", "max_visits") or 1
+	valid_days = frappe.db.get_single_value("Healthcare Settings", "valid_days") or 1
+	fee_validity.visited = 0
+	fee_validity.start_date = getdate(appointment.appointment_date)
+	fee_validity.valid_till = getdate(appointment.appointment_date) + datetime.timedelta(
+		days=int(valid_days)
+	)
+	fee_validity.save(ignore_permissions=True)
+	return fee_validity
+
+
+def patient_has_validity(appointment):
+	validity_exists = frappe.db.exists(
+		"Fee Validity",
+		{
+			"practitioner": appointment.practitioner,
+			"patient": appointment.patient,
+			"status": "Active",
+			"valid_till": [">=", appointment.appointment_date],
+			"start_date": ["<=", appointment.appointment_date],
+		},
+	)
+
+	return validity_exists
+
+
+@frappe.whitelist()
+def check_fee_validity(appointment, date=None, practitioner=None):
+	if not frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups"):
+		return
+
+	if isinstance(appointment, str):
+		appointment = json.loads(appointment)
+		appointment = frappe.get_doc(appointment)
+
+	date = getdate(date) if date else appointment.appointment_date
+
+	filters = {
+		"practitioner": practitioner if practitioner else appointment.practitioner,
+		"patient": appointment.patient,
+		"valid_till": (">=", date),
+		"start_date": ("<=", date),
+	}
+	if appointment.status != "Cancelled":
+		filters["status"] = "Active"
+	else:
+		filters["patient_appointment"] = appointment.name
+
+	validity = frappe.db.exists(
+		"Fee Validity",
+		filters,
+	)
+
+	if not validity:
+		# return valid fee validity when rescheduling appointment
+		if appointment.get("__islocal"):
+			return
+		else:
+			validity = get_fee_validity(appointment.get("name"), date) or None
+			if validity and len(validity):
+				return frappe.get_doc("Fee Validity", validity[0].get("name"))
+		return
+
+	validity = frappe.get_doc("Fee Validity", validity)
+	return validity
+
+
+def manage_fee_validity(appointment):
+	free_follow_ups = frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups")
+	# Update fee validity dates when rescheduling an invoiced appointment
+	if free_follow_ups:
+		invoiced_fee_validity = frappe.db.exists(
+			"Fee Validity", {"patient_appointment": appointment.name}
+		)
+		if invoiced_fee_validity and appointment.invoiced:
+			start_date = frappe.db.get_value("Fee Validity", invoiced_fee_validity, "start_date")
+			if getdate(appointment.appointment_date) != start_date:
+				frappe.db.set_value(
+					"Fee Validity",
+					invoiced_fee_validity,
+					{
+						"start_date": appointment.appointment_date,
+						"valid_till": getdate(appointment.appointment_date)
+						+ datetime.timedelta(
+							days=int(frappe.db.get_single_value("Healthcare Settings", "valid_days") or 1)
+						),
+					},
+				)
+
+	fee_validity = check_fee_validity(appointment)
+
+	if fee_validity:
+		exists = frappe.db.exists("Fee Validity Reference", {"appointment": appointment.name})
+		if appointment.status == "Cancelled" and fee_validity.visited > 0:
+			fee_validity.visited -= 1
+			frappe.db.delete("Fee Validity Reference", {"appointment": appointment.name})
+		elif fee_validity.status != "Active":
+			return
+		elif appointment.name != fee_validity.patient_appointment and not exists:
+			fee_validity.visited += 1
+			fee_validity.append("ref_appointments", {"appointment": appointment.name})
+		fee_validity.save(ignore_permissions=True)
+	else:
+		# remove appointment from fee validity reference when rescheduling an appointment to date not in fee validity
+		free_visit_validity = frappe.db.get_value(
+			"Fee Validity Reference", {"appointment": appointment.name}, "parent"
+		)
+		if free_visit_validity:
+			fee_validity = frappe.get_doc(
+				"Fee Validity",
+				free_visit_validity,
+			)
+			if fee_validity:
+				frappe.db.delete("Fee Validity Reference", {"appointment": appointment.name})
+				if fee_validity.visited > 0:
+					fee_validity.visited -= 1
+					fee_validity.save(ignore_permissions=True)
+		fee_validity = create_fee_validity(appointment)
+	return fee_validity
+
+
+@frappe.whitelist()
+def get_fee_validity(appointment_name, date, ignore_status=False):
+	"""
+	Get the fee validity details for the free visit appointment
+	:params appointment_name: Appointment doc name
+	:params date: Schedule date
+	:params ignore_status: status will not filter in query
+	:return fee validity name and valid_till values of free visit appointments
+	"""
+	if appointment_name:
+		appointment_doc = frappe.get_doc("Patient Appointment", appointment_name)
+	fee_validity = frappe.qb.DocType("Fee Validity")
+	child = frappe.qb.DocType("Fee Validity Reference")
+
+	query = (
+		frappe.qb.from_(fee_validity)
+		.inner_join(child)
+		.on(fee_validity.name == child.parent)
+		.select(fee_validity.name, fee_validity.valid_till)
+		.where(fee_validity.start_date <= date)
+		.where(fee_validity.valid_till >= date)
+		.where(fee_validity.patient == appointment_doc.patient)
+		.where(fee_validity.practitioner == appointment_doc.practitioner)
+		.where(child.appointment == appointment_name)
+	)
+
+	if not ignore_status:
+		query = query.where(fee_validity.status == "Active")
+
+	return query.run(as_dict=True)
+
+
+def update_validity_status():
+	# update the status of fee validity daily
+	validities = frappe.db.get_all("Fee Validity", {"status": ["not in", ["Expired", "Cancelled"]]})
+
+	for fee_validity in validities:
+		fee_validity_doc = frappe.get_doc("Fee Validity", fee_validity.name)
+		fee_validity_doc.update_status()
+		fee_validity_doc.save()
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity/fee_validity_list.js
@@ -0,0 +1,12 @@
+frappe.listview_settings['Fee Validity'] = {
+	add_fields: ['practitioner', 'patient', 'status', 'valid_till'],
+	get_indicator: function (doc) {
+		const color = {
+			'Active': 'green',
+			'Completed': 'green',
+			'Expired': 'red',
+			'Cancelled': 'red',
+		};
+		return [__(doc.status), color[doc.status], 'status,=,' + doc.status];
+	}
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity/test_fee_validity.py
@@ -0,0 +1,85 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, nowdate
+
+from erpnext.accounts.doctype.pos_profile.test_pos_profile import make_pos_profile
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_appointment,
+	create_healthcare_docs,
+	create_healthcare_service_items,
+	update_status,
+)
+
+test_dependencies = ["Company"]
+
+
+class TestFeeValidity(FrappeTestCase):
+	def setUp(self):
+		frappe.db.sql("""delete from `tabPatient Appointment`""")
+		frappe.db.sql("""delete from `tabFee Validity`""")
+		frappe.db.sql("""delete from `tabPatient`""")
+		make_pos_profile()
+
+	def test_fee_validity(self):
+		item = create_healthcare_service_items()
+		healthcare_settings = frappe.get_single("Healthcare Settings")
+		healthcare_settings.enable_free_follow_ups = 1
+		healthcare_settings.max_visits = 1
+		healthcare_settings.valid_days = 7
+		healthcare_settings.show_payment_popup = 1
+		healthcare_settings.op_consulting_charge_item = item
+		healthcare_settings.save(ignore_permissions=True)
+		patient, practitioner = create_healthcare_docs()
+
+		# For first appointment, invoice is generated. First appointment not considered in fee validity
+		appointment = create_appointment(patient, practitioner, nowdate())
+		fee_validity = frappe.db.exists(
+			"Fee Validity",
+			{"patient": patient, "practitioner": practitioner, "patient_appointment": appointment.name},
+		)
+		invoiced = frappe.db.get_value("Patient Appointment", appointment.name, "invoiced")
+		self.assertEqual(invoiced, 1)
+		self.assertTrue(fee_validity)
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "status"), "Active")
+
+		# appointment should not be invoiced as it is within fee validity
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 4))
+		invoiced = frappe.db.get_value("Patient Appointment", appointment.name, "invoiced")
+		self.assertEqual(invoiced, 0)
+
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "visited"), 1)
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "status"), "Completed")
+
+		# appointment should be invoiced as it is within fee validity but the max_visits are exceeded, should insert new fee validity
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 5), invoice=1)
+		invoiced = frappe.db.get_value("Patient Appointment", appointment.name, "invoiced")
+		self.assertEqual(invoiced, 1)
+
+		fee_validity = frappe.db.exists(
+			"Fee Validity",
+			{"patient": patient, "practitioner": practitioner, "patient_appointment": appointment.name},
+		)
+		self.assertTrue(fee_validity)
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "status"), "Active")
+
+		# appointment should be invoiced as it is not within fee validity and insert new fee validity
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 13), invoice=1)
+		invoiced = frappe.db.get_value("Patient Appointment", appointment.name, "invoiced")
+		self.assertEqual(invoiced, 1)
+
+		fee_validity = frappe.db.exists(
+			"Fee Validity",
+			{"patient": patient, "practitioner": practitioner, "patient_appointment": appointment.name},
+		)
+		self.assertTrue(fee_validity)
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "status"), "Active")
+
+		# For first appointment cancel should cancel fee validity
+		update_status(appointment.name, "Cancelled")
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "status"), "Cancelled")
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity_reference/fee_validity_reference.json
@@ -0,0 +1,32 @@
+{
+ "actions": [],
+ "creation": "2020-03-13 16:08:42.859996",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "appointment"
+ ],
+ "fields": [
+  {
+   "fieldname": "appointment",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient Appointment",
+   "options": "Patient Appointment",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-03-15 00:27:02.076470",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Fee Validity Reference",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/fee_validity_reference/fee_validity_reference.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class FeeValidityReference(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare.py
@@ -0,0 +1,2 @@
+def get_data():
+	return []
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_activity/healthcare_activity.js
@@ -0,0 +1,26 @@
+// Copyright (c) 2021, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Healthcare Activity', {
+	onload: function(frm) {
+
+		frm.set_query('role', function() {
+			return {
+				filters: {
+					'disabled': false,
+					'desk_access': true
+				}
+			};
+		});
+
+		frm.set_query('task_doctype', function() {
+			return {
+				filters: {
+					'istable': false,
+					'issingle': false
+				}
+			};
+		});
+
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_activity/healthcare_activity.json
@@ -0,0 +1,89 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:activity",
+ "creation": "2021-10-28 06:33:43.654812",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "activity",
+  "description",
+  "column_break_4",
+  "activity_duration",
+  "role",
+  "task_doctype"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "activity",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Activity",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "role",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Role",
+   "options": "Role"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "in_list_view": 1,
+   "label": "Description"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "task_doctype",
+   "fieldtype": "Link",
+   "label": "Task DocType",
+   "options": "DocType"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "activity_duration",
+   "fieldtype": "Duration",
+   "label": "Activity Duration",
+   "reqd": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-06-17 16:00:09.616401",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Activity",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_activity/healthcare_activity.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class HealthcareActivity(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_activity/test_healthcare_activity.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, healthcare and Contributors
+# See license.txt
+
+# import frappe
+import unittest
+
+
+class TestHealthcareActivity(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Healthcare Practioner Speciality", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.json
@@ -0,0 +1,105 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:speciality",
+ "creation": "2024-08-13 21:08:25.062498",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_8xbn",
+  "lft",
+  "rgt",
+  "is_group",
+  "old_parent",
+  "parent_healthcare_practioner_speciality",
+  "speciality",
+  "desc"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_8xbn",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "lft",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Left",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "rgt",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Right",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_group",
+   "fieldtype": "Check",
+   "label": "Is Group"
+  },
+  {
+   "fieldname": "old_parent",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Old Parent",
+   "options": "Healthcare Practioner Speciality"
+  },
+  {
+   "fieldname": "parent_healthcare_practioner_speciality",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Parent Healthcare Practioner Speciality",
+   "options": "Healthcare Practioner Speciality"
+  },
+  {
+   "fieldname": "speciality",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Speciality",
+   "reqd": 1,
+   "search_index": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "desc",
+   "fieldtype": "Small Text",
+   "label": "Desc"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_tree": 1,
+ "links": [],
+ "modified": "2024-08-13 21:10:49.863352",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Practioner Speciality",
+ "naming_rule": "By fieldname",
+ "nsm_parent_field": "parent_healthcare_practioner_speciality",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "speciality",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "speciality"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practioner_speciality/healthcare_practioner_speciality.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.utils.nestedset import NestedSet
+
+
+class HealthcarePractionerSpeciality(NestedSet):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practioner_speciality/test_healthcare_practioner_speciality.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcarePractionerSpeciality(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practitioner/healthcare_practitioner.js
@@ -0,0 +1,237 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Healthcare Practitioner', {
+	setup: function(frm) {
+		frm.set_query('account', 'accounts', function(doc, cdt, cdn) {
+			let d = locals[cdt][cdn];
+			return {
+				filters: {
+					'root_type': 'Income',
+					'company': d.company,
+					'is_group': 0
+				}
+			};
+		});
+
+		frm.set_query('google_calendar', function(){
+			return {
+				filters: {
+					'enable': true,
+					'owner': frm.doc.user_id,
+				}
+			};
+		});
+
+		frm.set_query('practitioner_primary_contact', function(doc) {
+			return {
+				filters: {
+					'link_doctype': 'Healthcare Practitioner',
+					'link_name': doc.name
+				}
+			}
+		})
+
+		frm.set_query('practitioner_primary_address', function(doc) {
+			return {
+				filters: {
+					'link_doctype': 'Healthcare Practitioner',
+					'link_name': doc.name
+				}
+			}
+		})
+	},
+
+	practitioner_type: function (frm) {
+		if (frm.doc.practitioner_type == 'Internal') {
+			frm.set_value({'supplier': '', 'user_id': ''});
+		} else {
+			frm.set_value({'employee': '', 'user_id': ''});
+		}
+	},
+
+	supplier: function (frm) {
+		if (frm.doc.supplier) {
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.healthcare_practitioner.healthcare_practitioner.get_supplier_and_user',
+				args: {
+					'supplier': frm.doc.supplier
+				},
+				callback: function(r) {
+					if (r.message) {
+						if (!frm.doc.user_id || frm.doc.user_id != r.message['user']) {
+							frm.set_value('user_id', r.message['user']);
+						}
+					} else {
+						frm.set_value('user_id', '');
+					}
+				}
+			});
+		}
+	},
+
+	refresh: function(frm) {
+		frappe.dynamic_link = {doc: frm.doc, fieldname: 'name', doctype: 'Healthcare Practitioner'};
+
+		if (!frm.is_new()) {
+			frappe.contacts.render_address_and_contact(frm);
+		} else {
+			frappe.contacts.clear_address_and_contact(frm);
+		}
+
+		frm.set_query('service_unit', 'practitioner_schedules', function(){
+			return {
+				filters: {
+					'is_group': false,
+					'allow_appointments': true
+				}
+			};
+		});
+
+		set_query_service_item(frm, 'inpatient_visit_charge_item');
+		set_query_service_item(frm, 'op_consulting_charge_item');
+	},
+
+	practitioner_primary_address: function(frm) {
+		if (frm.doc.practitioner_primary_address) {
+			frappe.call({
+				method: 'frappe.contacts.doctype.address.address.get_address_display',
+				args: {
+					'address_dict': frm.doc.practitioner_primary_address
+				},
+				callback: function(r) {
+					frm.set_value('primary_address', r.message);
+				}
+			});
+		}
+
+		if (!frm.doc.practitioner_primary_address) {
+			frm.set_value('primary_address', '');
+		}
+	},
+
+	user_id: function(frm) {
+		if (frm.doc.user_id && frm.doc.practitioner_type == 'Internal') {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'User',
+					name: frm.doc.user_id
+				},
+				callback: function (data) {
+					frappe.model.get_value('Employee', {'user_id': frm.doc.user_id}, 'name',
+						function(data) {
+							if (data) {
+								if (!frm.doc.employee || frm.doc.employee != data.name)
+									frappe.model.set_value(frm.doctype, frm.docname, 'employee', data.name);
+							} else {
+								frappe.model.set_value(frm.doctype, frm.docname, 'employee', '');
+							}
+						}
+					);
+
+					if (!frm.doc.first_name || frm.doc.first_name != data.message.first_name)
+						frappe.model.set_value(frm.doctype,frm.docname, 'first_name', data.message.first_name);
+					if (!frm.doc.middle_name || frm.doc.middle_name != data.message.middle_name)
+						frappe.model.set_value(frm.doctype,frm.docname, 'middle_name', data.message.middle_name);
+					if (!frm.doc.last_name || frm.doc.last_name != data.message.last_name)
+						frappe.model.set_value(frm.doctype,frm.docname, 'last_name', data.message.last_name);
+					if (!frm.doc.mobile_phone || frm.doc.mobile_phone != data.message.mobile_no)
+						frappe.model.set_value(frm.doctype,frm.docname, 'mobile_phone', data.message.mobile_no);
+				}
+			});
+		} else if (frm.doc.user_id && frm.doc.practitioner_type == 'External') {
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.healthcare_practitioner.healthcare_practitioner.get_supplier_and_user',
+				args: {
+					'user_id': frm.doc.user_id
+				},
+				callback: function(r) {
+					if (r.message) {
+						if (!frm.doc.supplier || frm.doc.supplier != r.message['supplier']) {
+							frm.set_value('supplier', r.message['supplier']);
+						}
+					} else {
+						frm.set_value('supplier', '');
+					}
+				}
+			});
+		}
+	},
+
+	employee: function(frm) {
+		if (frm.doc.employee){
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Employee',
+					name: frm.doc.employee
+				},
+				callback: function (data) {
+					if (!frm.doc.user_id || frm.doc.user_id != data.message.user_id)
+						frm.set_value('user_id', data.message.user_id);
+					if (!frm.doc.designation || frm.doc.designation != data.message.designation)
+						frappe.model.set_value(frm.doctype,frm.docname, 'designation', data.message.designation);
+					if (!frm.doc.first_name || !frm.doc.user_id){
+						frappe.model.set_value(frm.doctype,frm.docname, 'first_name', data.message.first_name);
+						frappe.model.set_value(frm.doctype,frm.docname, 'middle_name', '');
+						frappe.model.set_value(frm.doctype,frm.docname, 'last_name', data.message.last_name);
+					}
+					if (!frm.doc.mobile_phone || !frm.doc.user_id)
+						frappe.model.set_value(frm.doctype,frm.docname, 'mobile_phone', data.message.cell_number);
+					if (!frm.doc.address || frm.doc.address != data.message.current_address)
+						frappe.model.set_value(frm.doctype,frm.docname, 'address', data.message.current_address);
+				}
+			});
+		}
+	}
+});
+
+let set_query_service_item = function(frm, service_item_field) {
+	frm.set_query(service_item_field, function() {
+		return {
+			filters: {
+				'is_sales_item': 1,
+				'is_stock_item': 0
+			}
+		};
+	});
+};
+
+frappe.tour['Healthcare Practitioner'] = [
+	{
+		fieldname: 'employee',
+		title: __('Employee'),
+		description: __('If you want to track Payroll and other HRMS operations for a Practitoner, create an Employee and link it here.')
+	},
+	{
+		fieldname: 'practitioner_schedules',
+		title: __('Practitioner Schedules'),
+		description: __('Set the Practitioner Schedule you just created. This will be used while booking appointments.')
+	},
+	{
+		fieldname: 'google_calendar',
+		title: __('Google Calendar'),
+		description: __('Link the Google Calendar created and Authorized by the practitioner, all tele consultation appointments will be scheduled using this calendar')
+	},
+	{
+		fieldname: 'op_consulting_charge_item',
+		title: __('Out Patient Consulting Charge Item'),
+		description: __('Create and link a service item to be billed for Out Patient Consulting.')
+	},
+	{
+		fieldname: 'inpatient_visit_charge_item',
+		title: __('Inpatient Visit Charge Item'),
+		description: __('If this Healthcare Practitioner works for the In-Patient Department, create a service item for Inpatient Visits.')
+	},
+	{
+		fieldname: 'op_consulting_charge',
+		title: __('Out Patient Consulting Charge'),
+		description: __('Set the Out Patient Consulting Charge for this Practitioner.')
+	},
+	{
+		fieldname: 'inpatient_visit_charge',
+		title: __('Inpatient Visit Charge'),
+		description: __('If this Healthcare Practitioner also works for the In-Patient Department, set the inpatient visit charge for this Practitioner.')
+	}
+];
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practitioner/healthcare_practitioner.json
@@ -0,0 +1,429 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:first_name",
+ "creation": "2016-02-23 11:20:53.565119",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "engine": "InnoDB",
+ "field_order": [
+  "basic_details_section",
+  "naming_series",
+  "first_name",
+  "middle_name",
+  "last_name",
+  "practitioner_name",
+  "gender",
+  "image",
+  "prc_type",
+  "healthcare_practioner_speciality",
+  "column_break_7",
+  "status",
+  "mobile_phone",
+  "residence_phone",
+  "office_phone",
+  "employee_and_user_details_section",
+  "practitioner_type",
+  "employee",
+  "supplier",
+  "department",
+  "designation",
+  "column_break_17",
+  "user_id",
+  "hospital",
+  "appointments",
+  "practitioner_schedules",
+  "google_calendar",
+  "charges",
+  "op_consulting_charge_item",
+  "op_consulting_charge",
+  "column_break_18",
+  "inpatient_visit_charge_item",
+  "inpatient_visit_charge",
+  "account_details",
+  "default_currency",
+  "accounts",
+  "address_and_contacts_section",
+  "address_html",
+  "column_break_19",
+  "contact_html",
+  "primary_address_and_contact_detail",
+  "practitioner_primary_contact",
+  "mobile_no",
+  "email_id",
+  "column_break_26",
+  "practitioner_primary_address",
+  "primary_address"
+ ],
+ "fields": [
+  {
+   "fieldname": "first_name",
+   "fieldtype": "Data",
+   "label": "First Name",
+   "no_copy": 1,
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "middle_name",
+   "fieldtype": "Data",
+   "label": "Middle Name (Optional)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "last_name",
+   "fieldtype": "Data",
+   "label": "Last Name",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "image",
+   "fieldtype": "Attach Image",
+   "hidden": 1,
+   "label": "Image",
+   "no_copy": 1,
+   "print_hide": 1
+  },
+  {
+   "depends_on": "eval: doc.practitioner_type == \"Internal\"",
+   "fieldname": "employee",
+   "fieldtype": "Link",
+   "label": "Employee",
+   "options": "Employee"
+  },
+  {
+   "fieldname": "user_id",
+   "fieldtype": "Link",
+   "label": "User",
+   "options": "User",
+   "search_index": 1
+  },
+  {
+   "fetch_from": "employee",
+   "fieldname": "designation",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Designation",
+   "options": "Designation",
+   "read_only": 1
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "column_break_7",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "hospital",
+   "fieldtype": "Data",
+   "label": "Hospital"
+  },
+  {
+   "fieldname": "mobile_phone",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Mobile"
+  },
+  {
+   "fieldname": "residence_phone",
+   "fieldtype": "Data",
+   "label": "Phone (R)"
+  },
+  {
+   "fieldname": "office_phone",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Phone (Office)"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "appointments",
+   "fieldtype": "Section Break",
+   "label": "Appointments"
+  },
+  {
+   "fieldname": "practitioner_schedules",
+   "fieldtype": "Table",
+   "label": "Practitioner Schedules",
+   "options": "Practitioner Service Unit Schedule"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "charges",
+   "fieldtype": "Section Break",
+   "label": "Charges"
+  },
+  {
+   "fieldname": "op_consulting_charge_item",
+   "fieldtype": "Link",
+   "label": "Out Patient Consulting Charge Item",
+   "options": "Item"
+  },
+  {
+   "fieldname": "op_consulting_charge",
+   "fieldtype": "Currency",
+   "label": "Out Patient Consulting Charge",
+   "mandatory_depends_on": "op_consulting_charge_item",
+   "options": "Currency"
+  },
+  {
+   "fieldname": "column_break_18",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "inpatient_visit_charge_item",
+   "fieldtype": "Link",
+   "label": "Inpatient Visit Charge Item",
+   "options": "Item"
+  },
+  {
+   "fieldname": "inpatient_visit_charge",
+   "fieldtype": "Currency",
+   "label": "Inpatient Visit Charge",
+   "mandatory_depends_on": "inpatient_visit_charge_item"
+  },
+  {
+   "depends_on": "eval: !doc.__islocal",
+   "fieldname": "address_html",
+   "fieldtype": "HTML",
+   "label": "Address HTML",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "column_break_19",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval: !doc.__islocal",
+   "fieldname": "contact_html",
+   "fieldtype": "HTML",
+   "label": "Contact HTML",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "account_details",
+   "fieldtype": "Section Break",
+   "label": "Account Details"
+  },
+  {
+   "fieldname": "accounts",
+   "fieldtype": "Table",
+   "label": "Income Account",
+   "options": "Party Account"
+  },
+  {
+   "fieldname": "default_currency",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Default Currency",
+   "no_copy": 1,
+   "options": "Currency",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Full Name",
+   "no_copy": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "no_copy": 1,
+   "options": "HLC-PRAC-.YYYY.-",
+   "report_hide": 1,
+   "set_only_once": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender"
+  },
+  {
+   "fieldname": "employee_and_user_details_section",
+   "fieldtype": "Section Break",
+   "label": "Employee and User Details"
+  },
+  {
+   "fieldname": "column_break_17",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Active",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Status",
+   "options": "\nActive\nDisabled",
+   "reqd": 1
+  },
+  {
+   "fieldname": "basic_details_section",
+   "fieldtype": "Section Break",
+   "label": "Basic Details"
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval: !doc.__islocal",
+   "fieldname": "address_and_contacts_section",
+   "fieldtype": "Section Break",
+   "label": "Address and Contacts"
+  },
+  {
+   "fieldname": "google_calendar",
+   "fieldtype": "Link",
+   "label": "Google Calendar",
+   "options": "Google Calendar"
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval: !doc.__islocal",
+   "description": "Select, to make the practitioner searchable with these fields",
+   "fieldname": "primary_address_and_contact_detail",
+   "fieldtype": "Section Break",
+   "label": "Primary Address and Contact"
+  },
+  {
+   "description": "Reselect, if the chosen contact is edited after save",
+   "fieldname": "practitioner_primary_contact",
+   "fieldtype": "Link",
+   "label": "Practitioner Primary Contact",
+   "options": "Contact"
+  },
+  {
+   "fetch_from": "practitioner_primary_contact.mobile_no",
+   "fieldname": "mobile_no",
+   "fieldtype": "Read Only",
+   "label": "Mobile No"
+  },
+  {
+   "fetch_from": "practitioner_primary_contact.email_id",
+   "fieldname": "email_id",
+   "fieldtype": "Read Only",
+   "label": "Email Id"
+  },
+  {
+   "fieldname": "column_break_26",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "Reselect, if the chosen address is edited after save",
+   "fieldname": "practitioner_primary_address",
+   "fieldtype": "Link",
+   "label": "Practitioner Primary Address",
+   "options": "Address"
+  },
+  {
+   "fieldname": "primary_address",
+   "fieldtype": "Text",
+   "label": "Primary Address",
+   "read_only": 1
+  },
+  {
+   "default": "Internal",
+   "fieldname": "practitioner_type",
+   "fieldtype": "Select",
+   "label": "Practitioner Type",
+   "options": "Internal\nExternal"
+  },
+  {
+   "depends_on": "eval: doc.practitioner_type == \"External\"",
+   "fieldname": "supplier",
+   "fieldtype": "Link",
+   "label": "Supplier",
+   "options": "Supplier"
+  },
+  {
+   "fieldname": "prc_type",
+   "fieldtype": "Select",
+   "label": "Practitioner Type",
+   "options": "Doctor\nNurse\nLab Tech\nPharmasisit"
+  },
+  {
+   "fieldname": "healthcare_practioner_speciality",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Healthcare Practioner Speciality",
+   "options": "Healthcare Practioner Speciality"
+  }
+ ],
+ "image_field": "image",
+ "links": [],
+ "modified": "2024-09-16 18:33:38.499201",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Practitioner",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "email": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "select": 1,
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "select": 1,
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "select": 1,
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "practitioner_name, mobile_phone, office_phone",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "practitioner_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practitioner/healthcare_practitioner.py
@@ -0,0 +1,174 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe import _
+from frappe.contacts.address_and_contact import (
+	delete_contact_and_address,
+	load_address_and_contact,
+)
+from frappe.model.document import Document
+from frappe.model.naming import append_number_if_name_exists
+from frappe.utils import get_link_to_form
+
+from erpnext.accounts.party import validate_party_accounts
+
+
+class HealthcarePractitioner(Document):
+	def onload(self):
+		load_address_and_contact(self)
+
+	def autoname(self):
+		# concat first and last name
+		self.name = self.practitioner_name
+
+		if frappe.db.exists("Healthcare Practitioner", self.name):
+			self.name = append_number_if_name_exists("Contact", self.name)
+
+	def validate(self):
+		self.set_full_name()
+		validate_party_accounts(self)
+		if self.inpatient_visit_charge_item:
+			validate_service_item(
+				self.inpatient_visit_charge_item,
+				"Configure a service Item for Inpatient Consulting Charge Item",
+			)
+			if not self.inpatient_visit_charge:
+				frappe.throw(
+					_(
+						"Inpatient Consulting Charge is mandatory if you are setting Inpatient Consulting Charge Item"
+					),
+					frappe.MandatoryError,
+				)
+
+		if self.op_consulting_charge_item:
+			validate_service_item(
+				self.op_consulting_charge_item,
+				"Configure a service Item for Outpatient Consulting Charge Item",
+			)
+			if not self.op_consulting_charge:
+				frappe.throw(
+					_(
+						"Outpatient Consulting Charge is mandatory if you are setting Outpatient Consulting Charge Item"
+					),
+					frappe.MandatoryError,
+				)
+
+		if self.user_id:
+			self.validate_user_id()
+		else:
+			existing_user_id = frappe.db.get_value("Healthcare Practitioner", self.name, "user_id")
+			if existing_user_id:
+				frappe.permissions.remove_user_permission(
+					"Healthcare Practitioner", self.name, existing_user_id
+				)
+
+		self.validate_practitioner_schedules()
+
+	def on_update(self):
+		if self.user_id:
+			frappe.permissions.add_user_permission("Healthcare Practitioner", self.name, self.user_id)
+
+	def set_full_name(self):
+		if self.last_name:
+			self.practitioner_name = " ".join(filter(None, [self.first_name, self.last_name]))
+		else:
+			self.practitioner_name = self.first_name
+
+	def validate_practitioner_schedules(self):
+		for practitioner_schedule in self.practitioner_schedules:
+			if frappe.db.get_value(
+				"Practitioner Schedule", practitioner_schedule.schedule, "allow_video_conferencing"
+			):
+
+				if not self.google_calendar and not frappe.db.get_single_value(
+					"Healthcare Settings", "default_google_calendar"
+				):
+					frappe.throw(
+						_(
+							"Video conferencing enabled for {}, \
+											please link {} or configure Default Google Calendar in {}"
+						).format(
+							get_link_to_form("Practitioner Schedule", practitioner_schedule.schedule),
+							frappe.bold("Google Calendar"),
+							get_link_to_form("Healthcare Settings", "Healthcare Settings", "Healthcare Settings"),
+						),
+						title=_("Google Calendar Required"),
+					)
+				break
+
+	def validate_user_id(self):
+		if not frappe.db.exists("User", self.user_id):
+			frappe.throw(_("User {0} does not exist").format(self.user_id))
+		elif not frappe.db.exists("User", self.user_id, "enabled"):
+			frappe.throw(_("User {0} is disabled").format(self.user_id))
+
+		# check duplicate
+		practitioner = frappe.db.exists(
+			"Healthcare Practitioner", {"user_id": self.user_id, "name": ("!=", self.name)}
+		)
+		if practitioner:
+			frappe.throw(
+				_("User {0} is already assigned to Healthcare Practitioner {1}").format(
+					self.user_id, practitioner
+				)
+			)
+
+	def on_trash(self):
+		delete_contact_and_address("Healthcare Practitioner", self.name)
+
+
+def validate_service_item(item, msg):
+	if frappe.db.get_value("Item", item, "is_stock_item"):
+		frappe.throw(_(msg), frappe.ValidationError)
+
+
+@frappe.whitelist()
+@frappe.validate_and_sanitize_search_inputs
+def get_practitioner_list(doctype, txt, searchfield, start, page_len, filters=None):
+
+	active_filter = {"status": "Active"}
+
+	filters = {**active_filter, **filters} if filters else active_filter
+
+	fields = ["name", "practitioner_name", "mobile_phone"]
+
+	text_in = {"name": ("like", "%%%s%%" % txt), "practitioner_name": ("like", "%%%s%%" % txt)}
+
+	return frappe.get_all(
+		"Healthcare Practitioner",
+		fields=fields,
+		filters=filters,
+		or_filters=text_in,
+		start=start,
+		page_length=page_len,
+		order_by="name, practitioner_name",
+		as_list=1,
+	)
+
+
+@frappe.whitelist()
+def get_supplier_and_user(user_id=None, supplier=None):
+	"""
+	if user_id or supplier is passed, return both supplier and user_id
+	"""
+
+	if not user_id and not supplier:
+		return None
+
+	con = frappe.qb.DocType("Contact")
+	dlink = frappe.qb.DocType("Dynamic Link")
+
+	supplier_and_user = (
+		frappe.qb.from_(con)
+		.join(dlink)
+		.on(con.name == dlink.parent)
+		.select((con.user).as_("user"), (dlink.link_name).as_("supplier"))
+		.where(dlink.link_doctype == "Supplier")
+		.where((dlink.link_name == supplier) | (con.user == user_id))
+		.run(as_dict=True)
+	)
+
+	return supplier_and_user[0] if supplier_and_user else None
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practitioner/healthcare_practitioner_dashboard.py
@@ -0,0 +1,16 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"heatmap": True,
+		"heatmap_message": _("This is based on transactions against this Healthcare Practitioner."),
+		"fieldname": "practitioner",
+		"transactions": [
+			{
+				"label": _("Appointments and Patient Encounters"),
+				"items": ["Patient Appointment", "Patient Encounter", "Fee Validity"],
+			},
+			{"label": _("Consultation"), "items": ["Clinical Procedure", "Lab Test"]},
+		],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_practitioner/test_healthcare_practitioner.py
@@ -0,0 +1,70 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcarePractitioner(FrappeTestCase):
+	def test_practitioner_mandatory_charges(self):
+		fieldnames = ["op_consulting_charge", "inpatient_visit_charge"]
+		for idx, fieldname in enumerate(fieldnames):
+			item_fieldname = f"{fieldname}_item"
+			charge_fieldname = f"{fieldname}"
+			practitioner = frappe.get_doc(
+				{
+					"doctype": "Healthcare Practitioner",
+					"first_name": f"__Test Healthcare Practitioner {idx}",
+					"gender": "Female",
+					item_fieldname: self.get_item(is_stock_item=False),
+					charge_fieldname: 0,
+				}
+			)
+			self.assertRaises(frappe.MandatoryError, practitioner.insert)
+
+	def test_practitioner_service_item(self):
+		fieldnames = ["op_consulting_charge", "inpatient_visit_charge"]
+		for idx, fieldname in enumerate(fieldnames):
+			item_fieldname = f"{fieldname}_item"
+			charge_fieldname = f"{fieldname}"
+			practitioner = frappe.get_doc(
+				{
+					"doctype": "Healthcare Practitioner",
+					"first_name": f"__Test Healthcare Practitioner {idx}",
+					"gender": "Male",
+					item_fieldname: self.get_item(is_stock_item=True),
+					charge_fieldname: 0,
+				}
+			)
+			self.assertRaises(frappe.ValidationError, practitioner.insert)
+
+	def get_item(self, is_stock_item=False):
+		item_code = "__Test Stock Item" if is_stock_item else "__Test Service Item"
+
+		if not frappe.db.exists("Item", item_code):
+			return (
+				frappe.get_doc(
+					{
+						"doctype": "Item",
+						"name": item_code,
+						"item_code": item_code,
+						"item_name": item_code,
+						"is_stock_item": is_stock_item,
+						"item_group": "All Item Groups",
+						"stock_uom": "Nos",
+					}
+				)
+				.insert()
+				.name
+			)
+		else:
+			return item_code
+
+	@classmethod
+	def tearDown(cls):
+		frappe.delete_doc_if_exists("Item", "__Test Stock Item", force=True)
+		frappe.delete_doc_if_exists("Item", "__Test Service Item", force=True)
+		frappe.db.sql(
+			"""delete from `tabHealthcare Practitioner` where name like '__Test Healthcare Practitioner%'"""
+		)
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_schedule_time_slot/healthcare_schedule_time_slot.json
@@ -0,0 +1,63 @@
+{
+ "actions": [],
+ "creation": "2017-05-03 17:27:07.466088",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "day",
+  "from_time",
+  "to_time",
+  "duration",
+  "maximum_appointments"
+ ],
+ "fields": [
+  {
+   "fieldname": "day",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Day",
+   "options": "Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday",
+   "reqd": 1
+  },
+  {
+   "fieldname": "from_time",
+   "fieldtype": "Time",
+   "in_list_view": 1,
+   "label": "From Time",
+   "reqd": 1
+  },
+  {
+   "fieldname": "to_time",
+   "fieldtype": "Time",
+   "in_list_view": 1,
+   "label": "To Time",
+   "reqd": 1
+  },
+  {
+   "fieldname": "maximum_appointments",
+   "fieldtype": "Int",
+   "label": "Maximum Appointments"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Float",
+   "label": "Duration",
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-07-21 15:01:12.835381",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Schedule Time Slot",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_schedule_time_slot/healthcare_schedule_time_slot.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class HealthcareScheduleTimeSlot(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/healthcare_service_unit.js
@@ -0,0 +1,82 @@
+// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Healthcare Service Unit', {
+	onload: function(frm) {
+		frm.list_route = 'Tree/Healthcare Service Unit';
+
+		// get query select healthcare service unit
+		frm.fields_dict['parent_healthcare_service_unit'].get_query = function(doc) {
+			return {
+				filters: [
+					['Healthcare Service Unit', 'is_group', '=', 1],
+					['Healthcare Service Unit', 'name', '!=', doc.healthcare_service_unit_name]
+				]
+			};
+		};
+	},
+	refresh: function(frm) {
+		frm.toggle_display(['address_html', 'contact_html'], !frm.is_new());
+
+		if (!frm.is_new()) {
+			frappe.contacts.render_address_and_contact(frm);
+			frappe.dynamic_link = {doc: frm.doc, fieldname: 'name', doctype: 'Healthcare Service Unit'}
+		} else {
+			frappe.contacts.clear_address_and_contact(frm);
+		}
+
+		frm.trigger('set_root_readonly');
+		frm.set_df_property('service_unit_type', 'reqd', 1);
+		frm.add_custom_button(__('Healthcare Service Unit Tree'), function() {
+			frappe.set_route('Tree', 'Healthcare Service Unit');
+		});
+
+		frm.set_query('warehouse', function() {
+			return {
+				filters: {
+					'company': frm.doc.company
+				}
+			};
+		});
+	},
+	set_root_readonly: function(frm) {
+		// read-only for root healthcare service unit
+		frm.set_intro('');
+		if (!frm.doc.parent_healthcare_service_unit) {
+			frm.set_read_only();
+			frm.set_intro(__('This is a root healthcare service unit and cannot be edited.'), true);
+		}
+	},
+	allow_appointments: function(frm) {
+		if (!frm.doc.allow_appointments) {
+			frm.set_value('overlap_appointments', false);
+		}
+	},
+	is_group: function(frm) {
+		if (frm.doc.is_group == 1) {
+			frm.set_value('allow_appointments', false);
+			frm.set_df_property('service_unit_type', 'reqd', 0);
+		}
+		else {
+			frm.set_df_property('service_unit_type', 'reqd', 1);
+		}
+	},
+	overlap_appointments: function(frm) {
+		if (frm.doc.overlap_appointments == 0) {
+			frm.set_value('service_unit_capacity', '');
+		}
+	}
+});
+
+
+frappe.ui.form.on('Healthcare Service Unit', 'parent_healthcare_service_unit', function(frm) {
+	if (!frm.doc.parent_healthcare_service_unit) {
+	    frm.set_intro(__('This is a root healthcare service unit and cannot be edited.'), true);
+	    frm.set_read_only();
+	    frm.disable_save();
+	} else {
+	    frm.set_intro('');
+	    frm.perm = frappe.perm.get_perm(frm.doc.doctype);
+	    frm.enable_save();
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/healthcare_service_unit.json
@@ -0,0 +1,294 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "creation": "2016-09-21 13:48:14.731437",
+ "description": "Healthcare Service Unit",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "healthcare_service_unit_name",
+  "is_group",
+  "service_unit_type",
+  "allow_appointments",
+  "overlap_appointments",
+  "service_unit_capacity",
+  "inpatient_occupancy",
+  "occupancy_status",
+  "column_break_9",
+  "company",
+  "warehouse",
+  "tree_details_section",
+  "parent_healthcare_service_unit",
+  "lft",
+  "rgt",
+  "old_parent",
+  "contact_and_address_tab",
+  "address_and_contact_section",
+  "address_html",
+  "column_break_10",
+  "contact_html",
+  "connections_tab"
+ ],
+ "fields": [
+  {
+   "fieldname": "healthcare_service_unit_name",
+   "fieldtype": "Data",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "label": "Service Unit",
+   "reqd": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "parent_healthcare_service_unit",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Parent Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.inpatient_occupancy != 1 && doc.allow_appointments != 1",
+   "fieldname": "is_group",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Is Group"
+  },
+  {
+   "bold": 1,
+   "depends_on": "eval:doc.is_group != 1",
+   "fieldname": "service_unit_type",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Service Unit Type",
+   "mandatory_depends_on": "eval: !(doc.is_group);",
+   "options": "Healthcare Service Unit Type"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:doc.is_group != 1 && doc.inpatient_occupancy != 1",
+   "fetch_from": "service_unit_type.allow_appointments",
+   "fieldname": "allow_appointments",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Allow Appointments",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:doc.is_group != 1 && doc.allow_appointments == 1 && doc.inpatient_occupany != 1",
+   "fetch_from": "service_unit_type.overlap_appointments",
+   "fieldname": "overlap_appointments",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Allow Overlap",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.allow_appointments != 1 && doc.is_group != 1",
+   "fetch_from": "service_unit_type.inpatient_occupancy",
+   "fieldname": "inpatient_occupancy",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Inpatient Occupancy",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "depends_on": "eval:doc.inpatient_occupancy == 1",
+   "fieldname": "occupancy_status",
+   "fieldtype": "Select",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Occupancy Status",
+   "no_copy": 1,
+   "options": "Vacant\nOccupied",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_9",
+   "fieldtype": "Column Break",
+   "hide_days": 1,
+   "hide_seconds": 1
+  },
+  {
+   "bold": 1,
+   "depends_on": "eval:doc.is_group != 1",
+   "fieldname": "warehouse",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Warehouse",
+   "no_copy": 1,
+   "options": "Warehouse"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "remember_last_selected_value": 1,
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "lft",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "lft",
+   "no_copy": 1,
+   "print_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "rgt",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "rgt",
+   "no_copy": 1,
+   "print_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "old_parent",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "label": "Old Parent",
+   "no_copy": 1,
+   "options": "Healthcare Service Unit",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "tree_details_section",
+   "fieldtype": "Section Break",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Tree Details"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "depends_on": "eval:doc.overlap_appointments == 1",
+   "fieldname": "service_unit_capacity",
+   "fieldtype": "Int",
+   "label": "Service Unit Capacity",
+   "mandatory_depends_on": "eval:doc.overlap_appointments == 1",
+   "non_negative": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_and_contact_section",
+   "fieldtype": "Section Break",
+   "label": "Address and Contact"
+  },
+  {
+   "fieldname": "address_html",
+   "fieldtype": "HTML",
+   "label": "Address HTML"
+  },
+  {
+   "fieldname": "contact_html",
+   "fieldtype": "HTML",
+   "label": "Contact HTML"
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "contact_and_address_tab",
+   "fieldtype": "Tab Break",
+   "label": "Contact & Address"
+  },
+  {
+   "fieldname": "connections_tab",
+   "fieldtype": "Tab Break",
+   "label": "Connections",
+   "show_dashboard": 1
+  }
+ ],
+ "is_tree": 1,
+ "links": [],
+ "modified": "2023-04-20 11:43:38.575796",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Service Unit",
+ "nsm_parent_field": "parent_healthcare_service_unit",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "healthcare_service_unit_name",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "healthcare_service_unit_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/healthcare_service_unit.py
@@ -0,0 +1,149 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.contacts.address_and_contact import load_address_and_contact
+from frappe.utils import cint, cstr
+from frappe.utils.nestedset import NestedSet
+
+
+class HealthcareServiceUnit(NestedSet):
+	nsm_parent_field = "parent_healthcare_service_unit"
+
+	def onload(self):
+		"""Load address and contacts in `__onload`"""
+		load_address_and_contact(self)
+
+	def validate(self):
+		self.set_service_unit_properties()
+
+	def autoname(self):
+		if self.company:
+			suffix = " - " + frappe.get_cached_value("Company", self.company, "abbr")
+			if not self.healthcare_service_unit_name.endswith(suffix):
+				self.name = self.healthcare_service_unit_name + suffix
+		else:
+			self.name = self.healthcare_service_unit_name
+
+	def on_update(self):
+		super(HealthcareServiceUnit, self).on_update()
+		self.validate_one_root()
+
+	def on_trash(self):
+		if self.flags.on_trash_company:
+			NestedSet.on_trash(self, allow_root_deletion=True)
+		else:
+			NestedSet.on_trash(self)
+
+	def set_service_unit_properties(self):
+		if cint(self.is_group):
+			self.allow_appointments = False
+			self.overlap_appointments = False
+			self.inpatient_occupancy = False
+			self.service_unit_capacity = 0
+			self.occupancy_status = ""
+			self.service_unit_type = ""
+		elif self.service_unit_type != "":
+			service_unit_type = frappe.get_doc("Healthcare Service Unit Type", self.service_unit_type)
+			self.allow_appointments = service_unit_type.allow_appointments
+			self.inpatient_occupancy = service_unit_type.inpatient_occupancy
+
+			if self.inpatient_occupancy and self.occupancy_status != "":
+				self.occupancy_status = "Vacant"
+
+			if service_unit_type.overlap_appointments:
+				self.overlap_appointments = True
+			else:
+				self.overlap_appointments = False
+				self.service_unit_capacity = 0
+
+		if self.overlap_appointments:
+			if not self.service_unit_capacity:
+				frappe.throw(
+					_("Please set a valid Service Unit Capacity to enable Overlapping Appointments"),
+					title=_("Mandatory"),
+				)
+
+
+@frappe.whitelist()
+def add_multiple_service_units(parent, data):
+	"""
+	parent - parent service unit under which the service units are to be created
+	data (dict) - company, healthcare_service_unit_name, count, service_unit_type, warehouse, service_unit_capacity
+	"""
+	if not parent or not data:
+		return
+
+	data = json.loads(data)
+	company = (
+		data.get("company")
+		or frappe.defaults.get_defaults().get("company")
+		or frappe.db.get_single_value("Global Defaults", "default_company")
+	)
+
+	if not data.get("healthcare_service_unit_name") or not company:
+		frappe.throw(
+			_("Service Unit Name and Company are mandatory to create Healthcare Service Units"),
+			title=_("Missing Required Fields"),
+		)
+
+	count = cint(data.get("count") or 0)
+	if count <= 0:
+		frappe.throw(
+			_("Number of Service Units to be created should at least be 1"),
+			title=_("Invalid Number of Service Units"),
+		)
+
+	capacity = cint(data.get("service_unit_capacity") or 1)
+
+	service_unit = {
+		"doctype": "Healthcare Service Unit",
+		"parent_healthcare_service_unit": parent,
+		"service_unit_type": data.get("service_unit_type") or None,
+		"service_unit_capacity": capacity if capacity > 0 else 1,
+		"warehouse": data.get("warehouse") or None,
+		"company": company,
+	}
+
+	service_unit_name = "{}".format(data.get("healthcare_service_unit_name").strip(" -"))
+
+	last_suffix = frappe.db.sql(
+		"""SELECT
+		IFNULL(MAX(CAST(SUBSTRING(name FROM %(start)s FOR 4) AS UNSIGNED)), 0)
+		FROM `tabHealthcare Service Unit`
+		WHERE name like %(prefix)s AND company=%(company)s""",
+		{
+			"start": len(service_unit_name) + 2,
+			"prefix": "{}-%".format(service_unit_name),
+			"company": company,
+		},
+		as_list=1,
+	)[0][0]
+	start_suffix = cint(last_suffix) + 1
+
+	failed_list = []
+	for i in range(start_suffix, count + start_suffix):
+		# name to be in the form WARD-####
+		service_unit["healthcare_service_unit_name"] = "{}-{}".format(
+			service_unit_name, cstr("%0*d" % (4, i))
+		)
+		service_unit_doc = frappe.get_doc(service_unit)
+		try:
+			service_unit_doc.insert()
+		except Exception:
+			failed_list.append(service_unit["healthcare_service_unit_name"])
+
+	return failed_list
+
+
+def on_doctype_update():
+	frappe.db.add_unique(
+		"Healthcare Service Unit",
+		["healthcare_service_unit_name", "company"],
+		constraint_name="unique_service_unit_company",
+	)
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/healthcare_service_unit_dashboard.py
@@ -0,0 +1,6 @@
+def get_data():
+	return {
+		"fieldname": "service_unit",
+		"internal_links": {"Inpatient Occupancy": ["inpatient_occupancies"]},
+		"transactions": [{"items": ["Inpatient Record"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/healthcare_service_unit_tree.js
@@ -0,0 +1,185 @@
+frappe.provide("frappe.treeview_settings");
+
+frappe.treeview_settings['Healthcare Service Unit'] = {
+	breadcrumbs: 'Healthcare Service Unit',
+	title: __('Service Unit Tree'),
+	get_tree_root: false,
+	get_tree_nodes: 'healthcare.healthcare.utils.get_children',
+	filters: [{
+		fieldname: 'company',
+		fieldtype: 'Select',
+		options: erpnext.utils.get_tree_options('company'),
+		label: __('Company'),
+		default: erpnext.utils.get_tree_default('company')
+	}],
+	fields: [
+		{
+			fieldtype: 'Data', fieldname: 'healthcare_service_unit_name', label: __('New Service Unit Name'),
+			reqd: true
+		},
+		{
+			fieldtype: 'Check', fieldname: 'is_group', label: __('Is Group'),
+			description: __("Child nodes can be only created under 'Group' type nodes")
+		},
+		{
+			fieldtype: 'Link', fieldname: 'service_unit_type', label: __('Service Unit Type'),
+			options: 'Healthcare Service Unit Type', description: __('Type of the new Service Unit'),
+			depends_on: 'eval:!doc.is_group', default: '',
+			onchange: () => {
+				if (cur_dialog) {
+					if (cur_dialog.fields_dict.service_unit_type.value) {
+						frappe.db.get_value('Healthcare Service Unit Type',
+							cur_dialog.fields_dict.service_unit_type.value, 'overlap_appointments')
+							.then(r => {
+								if (r.message.overlap_appointments) {
+									cur_dialog.set_df_property('service_unit_capacity', 'hidden', false);
+									cur_dialog.set_df_property('service_unit_capacity', 'reqd', true);
+								} else {
+									cur_dialog.set_df_property('service_unit_capacity', 'hidden', true);
+									cur_dialog.set_df_property('service_unit_capacity', 'reqd', false);
+								}
+							});
+					} else {
+						cur_dialog.set_df_property('service_unit_capacity', 'hidden', true);
+						cur_dialog.set_df_property('service_unit_capacity', 'reqd', false);
+					}
+				}
+			}
+		},
+		{
+			fieldtype: 'Int', fieldname: 'service_unit_capacity', label: __('Service Unit Capacity'),
+			description: __('Sets the number of concurrent appointments allowed'), reqd: false,
+			depends_on: "eval:!doc.is_group && doc.service_unit_type != ''", hidden: true
+		},
+		{
+			fieldtype: 'Link', fieldname: 'warehouse', label: __('Warehouse'), options: 'Warehouse',
+			description: __('Optional, if you want to manage stock separately for this Service Unit'),
+			depends_on: 'eval:!doc.is_group'
+		},
+		{
+			fieldtype: 'Link', fieldname: 'company', label: __('Company'), options: 'Company', reqd: true,
+			default: () => {
+				return cur_page.page.page.fields_dict.company.value;
+			}
+		}
+	],
+	ignore_fields: ['parent_healthcare_service_unit'],
+	onrender: function (node) {
+		if (node.data.occupied_of_available !== undefined) {
+			$("<span class='occupancy-status-area pull-right text-muted'>"
+				+ ' ' + node.data.occupied_of_available
+				+ '</span>').insertBefore(node.$ul);
+		}
+		if (node.data && node.data.inpatient_occupancy !== undefined) {
+			if (node.data.inpatient_occupancy == 1) {
+				if (node.data.occupancy_status == 'Occupied') {
+					$("<span class='occupancy-status-area pull-right text-muted'>"
+						+ ' ' + node.data.occupancy_status
+						+ '</span>').insertBefore(node.$ul);
+				}
+				if (node.data.occupancy_status == 'Vacant') {
+					$("<span class='occupancy-status-area pull-right text-muted'>"
+						+ ' ' + node.data.occupancy_status
+						+ '</span>').insertBefore(node.$ul);
+				}
+			}
+		}
+	},
+	post_render: function (treeview) {
+		frappe.treeview_settings['Healthcare Service Unit'].treeview = {};
+		$.extend(frappe.treeview_settings['Healthcare Service Unit'].treeview, treeview);
+	},
+	toolbar: [
+		{
+			label: __('Add Multiple'),
+			condition: function (node) {
+				return node.expandable;
+			},
+			click: function (node) {
+				const dialog = new frappe.ui.Dialog({
+					title: __('Add Multiple Service Units'),
+					fields: [
+						{
+							fieldtype: 'Data', fieldname: 'healthcare_service_unit_name', label: __('Service Unit Name'),
+							reqd: true, description: __("Will be serially suffixed to maintain uniquness. Example: 'Ward' will be named as 'Ward-####'"),
+						},
+						{
+							fieldtype: 'Int', fieldname: 'count', label: __('Number of Service Units'),
+							reqd: true
+						},
+						{
+							fieldtype: 'Link', fieldname: 'service_unit_type', label: __('Service Unit Type'),
+							options: 'Healthcare Service Unit Type', description: __('Type of the new Service Unit'),
+							depends_on: 'eval:!doc.is_group', default: '', reqd: true,
+							onchange: () => {
+								if (cur_dialog) {
+									if (cur_dialog.fields_dict.service_unit_type.value) {
+										frappe.db.get_value('Healthcare Service Unit Type',
+											cur_dialog.fields_dict.service_unit_type.value, 'overlap_appointments')
+											.then(r => {
+												if (r.message.overlap_appointments) {
+													cur_dialog.set_df_property('service_unit_capacity', 'hidden', false);
+													cur_dialog.set_df_property('service_unit_capacity', 'reqd', true);
+												} else {
+													cur_dialog.set_df_property('service_unit_capacity', 'hidden', true);
+													cur_dialog.set_df_property('service_unit_capacity', 'reqd', false);
+												}
+											});
+									} else {
+										cur_dialog.set_df_property('service_unit_capacity', 'hidden', true);
+										cur_dialog.set_df_property('service_unit_capacity', 'reqd', false);
+									}
+								}
+							}
+						},
+						{
+							fieldtype: 'Int', fieldname: 'service_unit_capacity', label: __('Service Unit Capacity'),
+							description: __('Sets the number of concurrent appointments allowed'), reqd: false,
+							depends_on: "eval:!doc.is_group && doc.service_unit_type != ''", hidden: true
+						},
+						{
+							fieldtype: 'Link', fieldname: 'warehouse', label: __('Warehouse'), options: 'Warehouse',
+							description: __('Optional, if you want to manage stock separately for this Service Unit'),
+						},
+						{
+							fieldtype: 'Link', fieldname: 'company', label: __('Company'), options: 'Company', reqd: true,
+							default: () => {
+								return cur_page.page.page.fields_dict.company.get_value();
+							}
+						}
+					],
+					primary_action: () => {
+						dialog.hide();
+						let vals = dialog.get_values();
+						if (!vals) return;
+
+						return frappe.call({
+							method: 'healthcare.healthcare.doctype.healthcare_service_unit.healthcare_service_unit.add_multiple_service_units',
+							args: {
+								parent: node.data.value,
+								data: vals
+							},
+							callback: function (r) {
+								if (!r.exc && r.message) {
+									frappe.treeview_settings['Healthcare Service Unit'].treeview.tree.load_children(node, true);
+
+									frappe.show_alert({
+										message: __('{0} Service Units created', [vals.count - r.message.length]),
+										indicator: 'green'
+									});
+								} else {
+									frappe.msgprint(__('Could not create Service Units'));
+								}
+							},
+							freeze: true,
+							freeze_message: __('Creating {0} Service Units', [vals.count])
+						});
+					},
+					primary_action_label: __('Create')
+				});
+				dialog.show();
+			}
+		}
+	],
+	extend_toolbar: true
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit/test_healthcare_service_unit.py
@@ -0,0 +1,24 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcareServiceUnit(FrappeTestCase):
+	def test_create_company_should_create_root_service_unit(self):
+		company = frappe.get_doc(
+			{
+				"doctype": "Company",
+				"company_name": "Test Hospital",
+				"country": "India",
+				"default_currency": "INR",
+			}
+		)
+		try:
+			company = company.insert()
+		except frappe.exceptions.DuplicateEntryError:
+			pass
+		filters = {"company": company.name, "parent_healthcare_service_unit": None}
+		root_service_unit = frappe.db.exists("Healthcare Service Unit", filters)
+		self.assertTrue(root_service_unit)
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit_type/healthcare_service_unit_type.js
@@ -0,0 +1,86 @@
+// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Healthcare Service Unit Type', {
+	refresh: function(frm) {
+		frm.set_df_property('item_code', 'read_only', frm.doc.__islocal ? 0 : 1);
+		if (!frm.doc.__islocal && frm.doc.is_billable) {
+			frm.add_custom_button(__('Change Item Code'), function() {
+				change_item_code(cur_frm, frm.doc);
+			});
+		}
+	},
+
+	service_unit_type: function(frm) {
+		set_item_details(frm);
+
+		if (!frm.doc.__islocal) {
+			frm.doc.change_in_item = 1;
+		}
+	},
+
+	is_billable: function(frm) {
+		set_item_details(frm);
+	},
+
+	rate: function(frm) {
+		if (!frm.doc.__islocal) {
+			frm.doc.change_in_item = 1;
+		}
+	},
+	item_group: function(frm) {
+		if (!frm.doc.__islocal) {
+			frm.doc.change_in_item = 1;
+		}
+	},
+	description: function(frm) {
+		if (!frm.doc.__islocal) {
+			frm.doc.change_in_item = 1;
+		}
+	}
+});
+
+let set_item_details = function(frm) {
+	if (frm.doc.service_unit_type && frm.doc.is_billable) {
+		if (!frm.doc.item_code)
+			frm.set_value('item_code', frm.doc.service_unit_type);
+		if (!frm.doc.description)
+			frm.set_value('description', frm.doc.service_unit_type);
+		if (!frm.doc.item_group)
+			frm.set_value('item_group', 'Services');
+	}
+};
+
+let change_item_code = function(frm, doc) {
+	let d = new frappe.ui.Dialog({
+		title: __('Change Item Code'),
+		fields: [
+			{
+				'fieldtype': 'Data',
+				'label': 'Item Code',
+				'fieldname': 'item_code',
+				'default': doc.item_code,
+				reqd: 1,
+			}
+		],
+		primary_action: function() {
+			let values = d.get_values();
+			if (values) {
+				frappe.call({
+					"method": "healthcare.healthcare.doctype.healthcare_service_unit_type.healthcare_service_unit_type.change_item_code",
+					"args": { item: doc.item, item_code: values['item_code'], doc_name: doc.name },
+					callback: function() {
+						frm.reload_doc();
+					}
+				});
+			}
+			d.hide();
+		},
+		primary_action_label: __("Change Template Code")
+	});
+
+	d.show();
+	d.set_values({
+		'Item Code': frm.doc.item_code
+	});
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit_type/healthcare_service_unit_type.json
@@ -0,0 +1,196 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:service_unit_type",
+ "creation": "2018-07-11 16:47:51.414675",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "disabled",
+  "service_unit_type",
+  "allow_appointments",
+  "overlap_appointments",
+  "inpatient_occupancy",
+  "is_billable",
+  "item_details",
+  "item",
+  "item_code",
+  "item_group",
+  "uom",
+  "no_of_hours",
+  "column_break_11",
+  "rate",
+  "description",
+  "change_in_item"
+ ],
+ "fields": [
+  {
+   "fieldname": "service_unit_type",
+   "fieldtype": "Data",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Service Unit Type",
+   "no_copy": 1,
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.inpatient_occupancy != 1",
+   "fieldname": "allow_appointments",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Allow Appointments"
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.allow_appointments == 1 && doc.inpatient_occupany != 1",
+   "fieldname": "overlap_appointments",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Allow Overlap"
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.allow_appointments != 1",
+   "fieldname": "inpatient_occupancy",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Inpatient Occupancy"
+  },
+  {
+   "bold": 1,
+   "default": "0",
+   "depends_on": "eval:doc.inpatient_occupancy == 1 && doc.allow_appointments != 1",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Is Billable"
+  },
+  {
+   "depends_on": "is_billable",
+   "fieldname": "item_details",
+   "fieldtype": "Section Break",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Item Details"
+  },
+  {
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Item",
+   "no_copy": 1,
+   "options": "Item",
+   "read_only": 1
+  },
+  {
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Item Code",
+   "mandatory_depends_on": "eval: doc.is_billable == 1",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Item Group",
+   "mandatory_depends_on": "eval: doc.is_billable == 1",
+   "options": "Item Group"
+  },
+  {
+   "fieldname": "uom",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "UOM",
+   "mandatory_depends_on": "eval: doc.is_billable == 1",
+   "options": "UOM"
+  },
+  {
+   "fieldname": "no_of_hours",
+   "fieldtype": "Int",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "UOM Conversion in Hours",
+   "mandatory_depends_on": "eval: doc.is_billable == 1"
+  },
+  {
+   "fieldname": "column_break_11",
+   "fieldtype": "Column Break",
+   "hide_days": 1,
+   "hide_seconds": 1
+  },
+  {
+   "fieldname": "rate",
+   "fieldtype": "Currency",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Rate / UOM"
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Disabled",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Description"
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Change in Item"
+  }
+ ],
+ "links": [],
+ "modified": "2021-08-19 17:52:30.266667",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Service Unit Type",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "service_unit_type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit_type/healthcare_service_unit_type.py
@@ -0,0 +1,151 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.rename_doc import rename_doc
+
+
+class HealthcareServiceUnitType(Document):
+	def validate(self):
+		if self.allow_appointments and self.inpatient_occupancy:
+			frappe.msgprint(
+				_("Healthcare Service Unit Type cannot have both {0} and {1}").format(
+					frappe.bold("Allow Appointments"), frappe.bold("Inpatient Occupancy")
+				),
+				raise_exception=1,
+				title=_("Validation Error"),
+				indicator="red",
+			)
+		elif not self.allow_appointments and not self.inpatient_occupancy:
+			frappe.msgprint(
+				_("Healthcare Service Unit Type must allow atleast one among {0} and {1}").format(
+					frappe.bold("Allow Appointments"), frappe.bold("Inpatient Occupancy")
+				),
+				raise_exception=1,
+				title=_("Validation Error"),
+				indicator="red",
+			)
+
+		if not self.allow_appointments:
+			self.overlap_appointments = 0
+
+		if self.is_billable:
+			if self.disabled:
+				frappe.db.set_value("Item", self.item, "disabled", 1)
+			else:
+				frappe.db.set_value("Item", self.item, "disabled", 0)
+
+	def after_insert(self):
+		if self.inpatient_occupancy and self.is_billable:
+			create_item(self)
+
+	def on_trash(self):
+		if self.item:
+			try:
+				item = self.item
+				self.db_set("item", "")
+				frappe.delete_doc("Item", item)
+			except Exception:
+				frappe.throw(_("Not permitted. Please disable the Service Unit Type"))
+
+	def on_update(self):
+		if self.change_in_item and self.is_billable and self.item:
+			update_item(self)
+
+			item_price = item_price_exists(self)
+
+			if not item_price:
+				price_list_name = frappe.db.get_value("Price List", {"selling": 1})
+				if self.rate:
+					make_item_price(self.item_code, price_list_name, self.rate)
+				else:
+					make_item_price(self.item_code, price_list_name, 0.0)
+			else:
+				frappe.db.set_value("Item Price", item_price, "price_list_rate", self.rate)
+
+			frappe.db.set_value(self.doctype, self.name, "change_in_item", 0)
+		elif not self.is_billable and self.item:
+			frappe.db.set_value("Item", self.item, "disabled", 1)
+		self.reload()
+
+
+def item_price_exists(doc):
+	item_price = frappe.db.exists({"doctype": "Item Price", "item_code": doc.item_code})
+	if len(item_price):
+		return item_price[0][0]
+	return False
+
+
+def create_item(doc):
+	# insert item
+	item = frappe.get_doc(
+		{
+			"doctype": "Item",
+			"item_code": doc.item_code,
+			"item_name": doc.service_unit_type,
+			"item_group": doc.item_group,
+			"description": doc.description or doc.item_code,
+			"is_sales_item": 1,
+			"is_service_item": 1,
+			"is_purchase_item": 0,
+			"is_stock_item": 0,
+			"show_in_website": 0,
+			"is_pro_applicable": 0,
+			"disabled": 0,
+			"stock_uom": doc.uom,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+	# insert item price
+	# get item price list to insert item price
+	price_list_name = frappe.db.get_value("Price List", {"selling": 1})
+	if doc.rate:
+		make_item_price(item.name, price_list_name, doc.rate)
+		item.standard_rate = doc.rate
+	else:
+		make_item_price(item.name, price_list_name, 0.0)
+		item.standard_rate = 0.0
+
+	item.save(ignore_permissions=True)
+
+	# Set item in the doc
+	doc.db_set("item", item.name)
+
+
+def make_item_price(item, price_list_name, item_price):
+	frappe.get_doc(
+		{
+			"doctype": "Item Price",
+			"price_list": price_list_name,
+			"item_code": item,
+			"price_list_rate": item_price,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+
+def update_item(doc):
+	item = frappe.get_doc("Item", doc.item)
+	if item:
+		item.update(
+			{
+				"item_name": doc.service_unit_type,
+				"item_group": doc.item_group,
+				"disabled": 0,
+				"standard_rate": doc.rate,
+				"description": doc.description,
+			}
+		)
+		item.db_update()
+
+
+@frappe.whitelist()
+def change_item_code(item, item_code, doc_name):
+	if frappe.db.exists({"doctype": "Item", "item_code": item_code}):
+		frappe.throw(_("Item with Item Code {0} already exists").format(item_code))
+	else:
+		rename_doc("Item", item, item_code, ignore_permissions=True)
+		frappe.db.set_value("Healthcare Service Unit Type", doc_name, "item_code", item_code)
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit_type/healthcare_service_unit_type_dashboard.py
@@ -0,0 +1,10 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "service_unit_type",
+		"transactions": [
+			{"label": _("Healthcare Service Units"), "items": ["Healthcare Service Unit"]},
+		],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_service_unit_type/test_healthcare_service_unit_type.py
@@ -0,0 +1,35 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcareServiceUnitType(FrappeTestCase):
+	def test_item_creation(self):
+		unit_type = get_unit_type()
+		self.assertTrue(frappe.db.exists("Item", unit_type.item))
+
+		# check item disabled
+		unit_type.disabled = 1
+		unit_type.save()
+		self.assertEqual(frappe.db.get_value("Item", unit_type.item, "disabled"), 1)
+
+
+def get_unit_type():
+	if frappe.db.exists("Healthcare Service Unit Type", "Inpatient Rooms"):
+		return frappe.get_doc("Healthcare Service Unit Type", "Inpatient Rooms")
+
+	unit_type = frappe.new_doc("Healthcare Service Unit Type")
+	unit_type.service_unit_type = "Inpatient Rooms"
+	unit_type.inpatient_occupancy = 1
+	unit_type.is_billable = 1
+	unit_type.item_code = "Inpatient Rooms"
+	unit_type.item_group = "Services"
+	unit_type.uom = "Hour"
+	unit_type.no_of_hours = 1
+	unit_type.rate = 4000
+	unit_type.save()
+	return unit_type
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_settings/healthcare_settings.js
@@ -0,0 +1,120 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Healthcare Settings', {
+	setup: function(frm) {
+		frm.set_query('default_google_calendar', function(doc) {
+			return {
+				filters: {
+					'enable': true
+				}
+			};
+		});
+		frm.set_query('account', 'receivable_account', function(doc, cdt, cdn) {
+			var d  = locals[cdt][cdn];
+			return {
+				filters: {
+					'account_type': 'Receivable',
+					'company': d.company,
+					'is_group': 0
+				}
+			};
+		});
+		frm.set_query('account', 'income_account', function(doc, cdt, cdn) {
+			var d  = locals[cdt][cdn];
+			return {
+				filters: {
+					'root_type': 'Income',
+					'company': d.company,
+					'is_group': 0
+				}
+			};
+		});
+		frm.set_query('default_code_system', function(doc) {
+			return {
+				filters: {
+					'is_fhir_defined': false
+				}
+			};
+		});
+		frm.set_query('default_priority', function () {
+			return {
+				filters: {
+					code_system: 'Priority'
+				}
+			};
+		});
+
+		frm.set_query('default_intent', function () {
+			return {
+				filters: {
+					code_system: 'Intent'
+				}
+			};
+		});
+
+		set_query_service_item(frm, 'inpatient_visit_charge_item');
+		set_query_service_item(frm, 'op_consulting_charge_item');
+		set_query_service_item(frm, 'clinical_procedure_consumable_item');
+	}
+});
+
+var set_query_service_item = function(frm, service_item_field) {
+	frm.set_query(service_item_field, function() {
+		return {
+			filters: {
+				'is_sales_item': 1,
+				'is_stock_item': 0
+			}
+		};
+	});
+};
+
+frappe.tour['Healthcare Settings'] = [
+	{
+		fieldname: 'link_customer_to_patient',
+		title: __('Link Customer to Patient'),
+		description: __('If checked, a customer will be created for every Patient. Patient Invoices will be created against this Customer. You can also select existing Customer while creating a Patient. This field is checked by default.')
+	},
+	{
+		fieldname: 'default_code_system',
+		title: __('Default Code System'),
+		description: __('Will be set as the default Code System selected in the Codification Table')
+	},
+	{
+		fieldname: 'default_google_calendar',
+		title: __('Default Google Calendar'),
+		description: __('While booking tele-consultation appointments via Google Meet, this Google Calendar will be used. You can also configure separate Google Calender for each Practitioner if required')
+	},
+	{
+		fieldname: 'collect_registration_fee',
+		title: __('Collect Registration Fee'),
+		description: __('If your Healthcare facility bills registrations of Patients, you can check this and set the Registration Fee in the field below. Checking this will create new Patients with a Disabled status by default and will only be enabled after invoicing the Registration Fee.')
+	},
+	{
+		fieldname: 'show_payment_popup',
+		title: __('Show Payment Popup'),
+		description: __('Checking this will popup to invoice appointment')
+	},
+	{
+		fieldname: 'validate_nursing_checklists',
+		title: __('validate_nursing_checklists'),
+		description: __('Validates all mandatory tasks in nursing checklist to be Completed before a Patient transactional event. For example, if any of the tasks as part of the Discharge Checklist is not in status Completed, system will alert the user while trying to Discharge the Patient from inpatient facility')
+	},
+	{
+		fieldname: 'inpatient_visit_charge_item',
+		title: __('Healthcare Service Items'),
+		description: __('You can create a service item for Inpatient Visit Charge and set it here. Similarly, you can set up other Healthcare Service Items for billing in this section. Click ') + "<a href='https://frappehealth.com/docs/v13/user/manual/en/healthcare/healthcare_settings#2-default-healthcare-service-items' target='_blank'>here</a>" + __(' to know more')
+	},
+	{
+		fieldname: 'income_account',
+		title: __('Set up default Accounts for the Healthcare Facility'),
+		description: __('If you wish to override default accounts settings and configure the Income and Receivable accounts for Healthcare, you can do so here.')
+
+	},
+	{
+		fieldname: 'send_registration_msg',
+		title: __('Out Patient SMS alerts'),
+		description: __('If you want to send SMS alert on Patient Registration, you can enable this option. Similary, you can set up Out Patient SMS alerts for other functionalities in this section. Click ') + "<a href='https://frappehealth.com/docs/v13/user/manual/en/healthcare/healthcare_settings#4-out-patient-sms-alerts' target='_blank'>here</a>" + __(' to know more')
+	}
+];
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_settings/healthcare_settings.json
@@ -0,0 +1,431 @@
+{
+ "actions": [],
+ "creation": "2017-05-09 11:26:22.337760",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "op_ip_settings",
+  "sb_op_settings",
+  "patient_name_by",
+  "link_customer_to_patient",
+  "default_code_system",
+  "validate_nursing_checklists",
+  "default_google_calendar",
+  "column_break_9",
+  "collect_registration_fee",
+  "registration_fee",
+  "show_payment_popup",
+  "enable_free_follow_ups",
+  "max_visits",
+  "valid_days",
+  "inpatient_settings_section",
+  "allow_discharge_despite_unbilled_services",
+  "do_not_bill_inpatient_encounters",
+  "orders_tab",
+  "default_intent",
+  "column_break_1oy0",
+  "default_priority",
+  "laboratory_tab",
+  "sb_lab_settings",
+  "create_lab_test_on_si_submit",
+  "create_observation_on_si_submit",
+  "create_sample_collection_for_lab_test",
+  "column_break_34",
+  "lab_test_approval_required",
+  "employee_name_and_designation_in_print",
+  "custom_signature_in_print",
+  "billing_accounts",
+  "healthcare_service_items",
+  "inpatient_visit_charge_item",
+  "op_consulting_charge_item",
+  "column_break_13",
+  "clinical_procedure_consumable_item",
+  "sb_in_ac",
+  "income_account",
+  "receivable_account",
+  "order_details_section",
+  "process_service_request_only_if_paid",
+  "alerts_tab",
+  "out_patient_sms_alerts",
+  "send_registration_msg",
+  "registration_msg",
+  "send_appointment_confirmation",
+  "appointment_confirmation_msg",
+  "avoid_confirmation",
+  "column_break_16",
+  "send_appointment_reminder",
+  "appointment_reminder_msg",
+  "remind_before",
+  "laboratory_sms_alerts",
+  "sms_printed",
+  "column_break_28",
+  "sms_emailed"
+ ],
+ "fields": [
+  {
+   "fieldname": "sb_op_settings",
+   "fieldtype": "Section Break",
+   "label": "Outpatient Settings"
+  },
+  {
+   "fieldname": "column_break_9",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "description": "Checking this will create new Patients with a Disabled status by default and will only be enabled after invoicing the Registration Fee.",
+   "fieldname": "collect_registration_fee",
+   "fieldtype": "Check",
+   "label": "Collect Fee for Patient Registration"
+  },
+  {
+   "depends_on": "collect_registration_fee",
+   "fieldname": "registration_fee",
+   "fieldtype": "Currency",
+   "label": "Registration Fee",
+   "mandatory_depends_on": "eval:doc.collect_registration_fee == 1",
+   "options": "Currency"
+  },
+  {
+   "depends_on": "eval:doc.enable_free_follow_ups == 1",
+   "description": "Time period (Valid number of days) for free consultations",
+   "fieldname": "valid_days",
+   "fieldtype": "Int",
+   "label": "Valid Number of Days",
+   "mandatory_depends_on": "eval:doc.enable_free_follow_ups == 1"
+  },
+  {
+   "description": "You can configure default Items for billing consultation charges, procedure consumption items and inpatient visits",
+   "fieldname": "healthcare_service_items",
+   "fieldtype": "Section Break",
+   "label": "Default Healthcare Service Items"
+  },
+  {
+   "fieldname": "inpatient_visit_charge_item",
+   "fieldtype": "Link",
+   "label": "Inpatient Visit Charge Item",
+   "options": "Item"
+  },
+  {
+   "fieldname": "op_consulting_charge_item",
+   "fieldtype": "Link",
+   "label": "Out Patient Consulting Charge Item",
+   "options": "Item"
+  },
+  {
+   "fieldname": "column_break_13",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "clinical_procedure_consumable_item",
+   "fieldtype": "Link",
+   "label": "Clinical Procedure Consumable Item",
+   "options": "Item"
+  },
+  {
+   "fieldname": "out_patient_sms_alerts",
+   "fieldtype": "Section Break",
+   "label": "Out Patient SMS Alerts"
+  },
+  {
+   "fieldname": "column_break_16",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "sb_in_ac",
+   "fieldtype": "Section Break",
+   "label": "Default Accounts"
+  },
+  {
+   "description": "Default income accounts to be used if not set in Healthcare Practitioner to book Appointment charges.",
+   "fieldname": "income_account",
+   "fieldtype": "Table",
+   "label": "Income Account",
+   "options": "Party Account"
+  },
+  {
+   "description": "Default receivable accounts to be used to book Appointment charges.",
+   "fieldname": "receivable_account",
+   "fieldtype": "Table",
+   "label": "Receivable Account",
+   "options": "Party Account"
+  },
+  {
+   "fieldname": "sb_lab_settings",
+   "fieldtype": "Section Break",
+   "label": "Laboratory Settings"
+  },
+  {
+   "fieldname": "column_break_34",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "1",
+   "description": "Check this if you want the Name and Designation of the Employee associated with the User who submits the document to be printed in the Lab Test Report.",
+   "fieldname": "employee_name_and_designation_in_print",
+   "fieldtype": "Check",
+   "label": "Employee name and designation in print"
+  },
+  {
+   "depends_on": "eval:doc.employee_name_and_designation_in_print == '0'\n",
+   "fieldname": "custom_signature_in_print",
+   "fieldtype": "Small Text",
+   "label": "Custom Signature in Print"
+  },
+  {
+   "fieldname": "laboratory_sms_alerts",
+   "fieldtype": "Section Break",
+   "label": "Laboratory SMS Alerts"
+  },
+  {
+   "default": "Hello {{doc.patient}}, Your {{doc.lab_test_name}} result is ready with {{doc.company }}. \nThank You, Good day!",
+   "fieldname": "sms_printed",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Result Printed Message"
+  },
+  {
+   "fieldname": "column_break_28",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Hello {{doc.patient}}, Your {{doc.lab_test_name}} result has been emailed to {{doc.email}}. \n{{doc.company }}. \nThank You, Good day!",
+   "fieldname": "sms_emailed",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Result Emailed Message"
+  },
+  {
+   "default": "0",
+   "description": "Checking this will restrict printing and emailing of Lab Test documents unless they have the status as Approved.",
+   "fieldname": "lab_test_approval_required",
+   "fieldtype": "Check",
+   "label": "Do not print or email Lab Tests without Approval"
+  },
+  {
+   "default": "1",
+   "description": "If checked, a customer will be created, mapped to Patient.\nPatient Invoices will be created against this Customer. You can also select existing Customer while creating Patient.",
+   "fieldname": "link_customer_to_patient",
+   "fieldtype": "Check",
+   "label": "Link Customer to Patient"
+  },
+  {
+   "default": "0",
+   "description": "Checking this will create Lab Test(s) specified in the Sales Invoice on submission.",
+   "fieldname": "create_lab_test_on_si_submit",
+   "fieldtype": "Check",
+   "label": "Create Lab Test(s) on Sales Invoice Submission"
+  },
+  {
+   "default": "0",
+   "description": "Checking this will create a Sample Collection document  every time you create a Lab Test",
+   "fieldname": "create_sample_collection_for_lab_test",
+   "fieldtype": "Check",
+   "label": "Create Sample Collection document for Lab Test"
+  },
+  {
+   "fieldname": "patient_name_by",
+   "fieldtype": "Select",
+   "label": "Patient Name By",
+   "options": "Patient Name\nNaming Series"
+  },
+  {
+   "default": "0",
+   "description": "Checking this will popup dialog for Appointment Invoicing",
+   "fieldname": "show_payment_popup",
+   "fieldtype": "Check",
+   "label": "Show Payment Popup"
+  },
+  {
+   "default": "0",
+   "fieldname": "send_registration_msg",
+   "fieldtype": "Check",
+   "label": "Patient Registration"
+  },
+  {
+   "default": "Hello {{doc.patient}}, Thank you for registering with  {{doc.company}}. Your ID is {{doc.name}} . Please note this ID for future reference. \nThank You!",
+   "depends_on": "send_registration_msg",
+   "fieldname": "registration_msg",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Registration Message"
+  },
+  {
+   "default": "0",
+   "fieldname": "send_appointment_confirmation",
+   "fieldtype": "Check",
+   "label": "Appointment Confirmation"
+  },
+  {
+   "default": "Hello {{doc.patient}}, You have scheduled an appointment with {{doc.practitioner}} on {{doc.appointment_datetime}} at  {{doc.company}}.\nThank you, Good day!",
+   "depends_on": "send_appointment_confirmation",
+   "fieldname": "appointment_confirmation_msg",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Confirmation Message"
+  },
+  {
+   "default": "0",
+   "depends_on": "send_appointment_confirmation",
+   "description": "Do not confirm if appointment is created for the same day",
+   "fieldname": "avoid_confirmation",
+   "fieldtype": "Check",
+   "label": "Avoid Confirmation"
+  },
+  {
+   "default": "0",
+   "fieldname": "send_appointment_reminder",
+   "fieldtype": "Check",
+   "label": "Appointment Reminder"
+  },
+  {
+   "default": "Hello {{doc.patient}}, You have an appointment with {{doc.practitioner}} by {{doc.appointment_datetime}} at  {{doc.company}}.\nThank you, Good day!\n",
+   "depends_on": "send_appointment_reminder",
+   "fieldname": "appointment_reminder_msg",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Reminder Message"
+  },
+  {
+   "depends_on": "send_appointment_reminder",
+   "fieldname": "remind_before",
+   "fieldtype": "Time",
+   "label": "Remind Before"
+  },
+  {
+   "depends_on": "eval:doc.enable_free_follow_ups == 1",
+   "description": "The number of free follow ups (Patient Encounters in valid days) allowed",
+   "fieldname": "max_visits",
+   "fieldtype": "Int",
+   "label": "Number of Patient Encounters in Valid Days",
+   "mandatory_depends_on": "eval:doc.enable_free_follow_ups == 1"
+  },
+  {
+   "default": "0",
+   "fieldname": "enable_free_follow_ups",
+   "fieldtype": "Check",
+   "label": "Enable Free Follow-ups"
+  },
+  {
+   "fieldname": "inpatient_settings_section",
+   "fieldtype": "Section Break",
+   "label": "Inpatient Settings"
+  },
+  {
+   "default": "0",
+   "fieldname": "allow_discharge_despite_unbilled_services",
+   "fieldtype": "Check",
+   "label": "Allow Discharge Despite Unbilled Healthcare Services"
+  },
+  {
+   "default": "0",
+   "fieldname": "do_not_bill_inpatient_encounters",
+   "fieldtype": "Check",
+   "label": "Do Not Bill Patient Encounters for Inpatients"
+  },
+  {
+   "default": "0",
+   "description": "Validates all mandatory tasks in nursing checklist to be Completed before a Patient transactional event.",
+   "fieldname": "validate_nursing_checklists",
+   "fieldtype": "Check",
+   "label": "Validate Nursing Checklists"
+  },
+  {
+   "fieldname": "op_ip_settings",
+   "fieldtype": "Tab Break",
+   "label": "OP & IP"
+  },
+  {
+   "fieldname": "laboratory_tab",
+   "fieldtype": "Tab Break",
+   "label": "Laboratory"
+  },
+  {
+   "fieldname": "billing_accounts",
+   "fieldtype": "Tab Break",
+   "label": "Billing & Accounts"
+  },
+  {
+   "fieldname": "alerts_tab",
+   "fieldtype": "Tab Break",
+   "label": "Alerts"
+  },
+  {
+   "description": "For use while scheduling tele-consultations via Google Meet",
+   "fieldname": "default_google_calendar",
+   "fieldtype": "Link",
+   "label": "Default Google Calendar",
+   "options": "Google Calendar"
+  },
+  {
+   "fieldname": "order_details_section",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "default": "0",
+   "fieldname": "process_service_request_only_if_paid",
+   "fieldtype": "Check",
+   "label": "Process Service Request If Billing Status Is Paid"
+  },
+  {
+   "default": "0",
+   "fieldname": "create_observation_on_si_submit",
+   "fieldtype": "Check",
+   "label": "Create Observation(s) on Sales Invoice Submission"
+  },
+  {
+   "fieldname": "default_code_system",
+   "fieldtype": "Link",
+   "label": "Default Code System",
+   "options": "Code System"
+  },
+  {
+   "fieldname": "default_intent",
+   "fieldtype": "Link",
+   "label": "Default Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "column_break_1oy0",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "default_priority",
+   "fieldtype": "Link",
+   "label": "Default Priority",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "orders_tab",
+   "fieldtype": "Tab Break",
+   "label": "Orders"
+  }
+ ],
+ "issingle": 1,
+ "links": [],
+ "modified": "2023-11-06 14:20:22.424895",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare Settings",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "print": 1,
+   "read": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_settings/healthcare_settings.py
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.core.doctype.sms_settings.sms_settings import send_sms
+from frappe.model.document import Document
+
+
+class HealthcareSettings(Document):
+	def validate(self):
+		for key in [
+			"collect_registration_fee",
+			"link_customer_to_patient",
+			"patient_name_by",
+			"lab_test_approval_required",
+			"create_sample_collection_for_lab_test",
+			"default_medical_code_standard",
+		]:
+			frappe.db.set_default(key, self.get(key, ""))
+
+		if self.collect_registration_fee:
+			if self.registration_fee <= 0:
+				frappe.throw(_("Registration Fee cannot be negative or zero"))
+
+		if self.inpatient_visit_charge_item:
+			validate_service_item(self.inpatient_visit_charge_item)
+		if self.op_consulting_charge_item:
+			validate_service_item(self.op_consulting_charge_item)
+		if self.clinical_procedure_consumable_item:
+			validate_service_item(self.clinical_procedure_consumable_item)
+
+
+def validate_service_item(item):
+	if frappe.db.get_value("Item", item, "is_stock_item"):
+		frappe.throw(_("Configure a service Item for {0}").format(item))
+
+
+@frappe.whitelist()
+def get_sms_text(doc):
+	sms_text = {}
+	doc = frappe.get_doc("Lab Test", doc)
+	context = {"doc": doc, "alert": doc, "comments": None}
+
+	emailed = frappe.db.get_single_value("Healthcare Settings", "sms_emailed")
+	sms_text["emailed"] = frappe.render_template(emailed, context)
+
+	printed = frappe.db.get_single_value("Healthcare Settings", "sms_printed")
+	sms_text["printed"] = frappe.render_template(printed, context)
+
+	return sms_text
+
+
+def send_registration_sms(doc):
+	if frappe.db.get_single_value("Healthcare Settings", "send_registration_msg"):
+		if doc.mobile:
+			context = {"doc": doc, "alert": doc, "comments": None}
+			if doc.get("_comments"):
+				context["comments"] = json.loads(doc.get("_comments"))
+			messages = frappe.db.get_single_value("Healthcare Settings", "registration_msg")
+			messages = frappe.render_template(messages, context)
+			number = [doc.mobile]
+			send_sms(number, messages)
+		else:
+			frappe.msgprint(doc.name + " has no mobile number to send registration SMS", alert=True)
+
+
+def get_receivable_account(company):
+	receivable_account = get_account(None, "receivable_account", "Healthcare Settings", company)
+	if receivable_account:
+		return receivable_account
+
+	return frappe.get_cached_value("Company", company, "default_receivable_account")
+
+
+def get_income_account(practitioner, company):
+	# check income account in Healthcare Practitioner
+	if practitioner:
+		income_account = get_account("Healthcare Practitioner", None, practitioner, company)
+		if income_account:
+			return income_account
+
+	# else check income account in Healthcare Settings
+	income_account = get_account(None, "income_account", "Healthcare Settings", company)
+	if income_account:
+		return income_account
+
+	# else return default income account of company
+	return frappe.get_cached_value("Company", company, "default_income_account")
+
+
+def get_account(parent_type, parent_field, parent, company):
+	if parent_type:
+		return frappe.db.get_value(
+			"Party Account", {"parenttype": parent_type, "parent": parent, "company": company}, "account"
+		)
+
+	if parent_field:
+		return frappe.db.get_value(
+			"Party Account", {"parentfield": parent_field, "parent": parent, "company": company}, "account"
+		)
--- /dev/null
+++ b/healthcare/healthcare/doctype/healthcare_settings/test_healthcare_settings.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestHealthcareSettings(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry/inpatient_medication_entry.js
@@ -0,0 +1,74 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Inpatient Medication Entry', {
+	refresh: function(frm) {
+		// Ignore cancellation of doctype on cancel all
+		frm.ignore_doctypes_on_cancel_all = ['Stock Entry'];
+		frm.fields_dict['medication_orders'].grid.wrapper.find('.grid-add-row').hide();
+
+		frm.set_query('item_code', () => {
+			return {
+				filters: {
+					is_stock_item: 1
+				}
+			};
+		});
+
+		frm.set_query('drug_code', 'medication_orders', () => {
+			return {
+				filters: {
+					is_stock_item: 1
+				}
+			};
+		});
+
+		frm.set_query('warehouse', () => {
+			return {
+				filters: {
+					company: frm.doc.company
+				}
+			};
+		});
+
+		if (frm.doc.__islocal || frm.doc.docstatus !== 0 || !frm.doc.update_stock)
+			return;
+
+		frm.add_custom_button(__('Make Stock Entry'), function() {
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.inpatient_medication_entry.inpatient_medication_entry.make_difference_stock_entry',
+				args: {	docname: frm.doc.name },
+				freeze: true,
+				callback: function(r) {
+					if (r.message) {
+						var doclist = frappe.model.sync(r.message);
+						frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+					} else {
+						frappe.msgprint({
+							title: __('No Drug Shortage'),
+							message: __('All the drugs are available with sufficient qty to process this Inpatient Medication Entry.'),
+							indicator: 'green'
+						});
+					}
+				}
+			});
+		});
+	},
+
+	patient: function(frm) {
+		if (frm.doc.patient)
+			frm.set_value('service_unit', '');
+	},
+
+	get_medication_orders: function(frm) {
+		frappe.call({
+			method: 'get_medication_orders',
+			doc: frm.doc,
+			freeze: true,
+			freeze_message: __('Fetching Pending Medication Orders'),
+			callback: function() {
+				refresh_field('medication_orders');
+			}
+		});
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry/inpatient_medication_entry.json
@@ -0,0 +1,204 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2020-09-25 14:13:20.111906",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "company",
+  "column_break_3",
+  "posting_date",
+  "status",
+  "filters_section",
+  "item_code",
+  "assigned_to_practitioner",
+  "patient",
+  "practitioner",
+  "service_unit",
+  "column_break_11",
+  "from_date",
+  "to_date",
+  "from_time",
+  "to_time",
+  "select_medication_orders_section",
+  "get_medication_orders",
+  "medication_orders",
+  "section_break_18",
+  "update_stock",
+  "warehouse",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming Series",
+   "options": "HLC-IME-.YYYY.-"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "posting_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Posting Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "\nDraft\nSubmitted\nPending\nIn Process\nCompleted\nCancelled",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "collapsible_depends_on": "eval: doc.__islocal",
+   "fieldname": "filters_section",
+   "fieldtype": "Section Break",
+   "label": "Filters"
+  },
+  {
+   "fieldname": "item_code",
+   "fieldtype": "Link",
+   "label": "Item Code (Drug)",
+   "options": "Item"
+  },
+  {
+   "depends_on": "update_stock",
+   "description": "Warehouse from where medication stock should be consumed",
+   "fieldname": "warehouse",
+   "fieldtype": "Link",
+   "label": "Medication Warehouse",
+   "mandatory_depends_on": "update_stock",
+   "options": "Warehouse"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "label": "Patient",
+   "options": "Patient"
+  },
+  {
+   "depends_on": "eval:!doc.patient",
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Healthcare Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "column_break_11",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "from_date",
+   "fieldtype": "Date",
+   "label": "From Date"
+  },
+  {
+   "fieldname": "to_date",
+   "fieldtype": "Date",
+   "label": "To Date"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Inpatient Medication Entry",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "select_medication_orders_section",
+   "fieldtype": "Section Break",
+   "label": "Medication Orders"
+  },
+  {
+   "fieldname": "medication_orders",
+   "fieldtype": "Table",
+   "label": "Inpatient Medication Orders",
+   "options": "Inpatient Medication Entry Detail",
+   "reqd": 1
+  },
+  {
+   "depends_on": "eval:doc.docstatus!==1",
+   "fieldname": "get_medication_orders",
+   "fieldtype": "Button",
+   "label": "Get Pending Medication Orders",
+   "print_hide": 1
+  },
+  {
+   "fieldname": "assigned_to_practitioner",
+   "fieldtype": "Link",
+   "label": "Assigned To",
+   "options": "User"
+  },
+  {
+   "fieldname": "section_break_18",
+   "fieldtype": "Section Break",
+   "label": "Stock Details"
+  },
+  {
+   "default": "1",
+   "fieldname": "update_stock",
+   "fieldtype": "Check",
+   "label": "Update Stock"
+  },
+  {
+   "fieldname": "from_time",
+   "fieldtype": "Time",
+   "label": "From Time"
+  },
+  {
+   "fieldname": "to_time",
+   "fieldtype": "Time",
+   "label": "To Time"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2021-01-11 12:37:46.749659",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Medication Entry",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry/inpatient_medication_entry.py
@@ -0,0 +1,350 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+import datetime
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import flt, get_link_to_form, get_time, getdate
+
+from erpnext.stock.utils import get_latest_stock_qty
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import get_account
+
+
+class InpatientMedicationEntry(Document):
+	def validate(self):
+		self.validate_medication_orders()
+
+	@frappe.whitelist()
+	def get_medication_orders(self):
+		# pull inpatient medication orders based on selected filters
+		orders = get_pending_medication_orders(self)
+
+		if orders:
+			self.add_mo_to_table(orders)
+			return self
+		else:
+			self.set("medication_orders", [])
+			frappe.msgprint(_("No pending medication orders found for selected criteria"))
+
+	def add_mo_to_table(self, orders):
+		# Add medication orders in the child table
+		self.set("medication_orders", [])
+		for data in orders:
+			self.append(
+				"medication_orders",
+				{
+					"patient": data.patient,
+					"patient_name": data.patient_name,
+					"inpatient_record": data.inpatient_record,
+					"service_unit": data.service_unit,
+					"datetime": datetime.datetime.combine(getdate(data.date), get_time(data.time)),
+					"drug_code": data.drug,
+					"drug_name": data.drug_name,
+					"dosage": data.dosage,
+					"dosage_form": data.dosage_form,
+					"against_imo": data.parent,
+					"against_imoe": data.name,
+				},
+			)
+
+	def on_submit(self):
+		self.validate_medication_orders()
+		success_msg = ""
+		if self.update_stock:
+			stock_entry = self.process_stock()
+			success_msg += _("Stock Entry {0} created and ").format(
+				frappe.bold(get_link_to_form("Stock Entry", stock_entry))
+			)
+
+		self.update_medication_orders()
+		success_msg += _("Inpatient Medication Orders updated successfully")
+		frappe.msgprint(success_msg, title=_("Success"), indicator="green")
+
+	def validate_medication_orders(self):
+		for entry in self.medication_orders:
+			docstatus, is_completed = frappe.db.get_value(
+				"Inpatient Medication Order Entry", entry.against_imoe, ["docstatus", "is_completed"]
+			)
+
+			if docstatus == 2:
+				frappe.throw(
+					_(
+						"Row {0}: Cannot create Inpatient Medication Entry against cancelled Inpatient Medication Order {1}"
+					).format(entry.idx, get_link_to_form(entry.against_imo))
+				)
+
+			if is_completed:
+				frappe.throw(
+					_("Row {0}: This Medication Order is already marked as completed").format(entry.idx)
+				)
+
+	def on_cancel(self):
+		self.cancel_stock_entries()
+		self.update_medication_orders(on_cancel=True)
+
+	def process_stock(self):
+		allow_negative_stock = frappe.db.get_single_value("Stock Settings", "allow_negative_stock")
+		if not allow_negative_stock:
+			self.check_stock_qty()
+
+		return self.make_stock_entry()
+
+	def update_medication_orders(self, on_cancel=False):
+		orders, order_entry_map = self.get_order_entry_map()
+		# mark completion status
+		is_completed = 1
+		if on_cancel:
+			is_completed = 0
+
+		frappe.db.sql(
+			"""
+			UPDATE `tabInpatient Medication Order Entry`
+			SET is_completed = %(is_completed)s
+			WHERE name IN %(orders)s
+		""",
+			{"orders": orders, "is_completed": is_completed},
+		)
+
+		# update status and completed orders count
+		for order, count in order_entry_map.items():
+			medication_order = frappe.get_doc("Inpatient Medication Order", order)
+			completed_orders = flt(count)
+			current_value = frappe.db.get_value("Inpatient Medication Order", order, "completed_orders")
+
+			if on_cancel:
+				completed_orders = flt(current_value) - flt(count)
+			else:
+				completed_orders = flt(current_value) + flt(count)
+
+			medication_order.db_set("completed_orders", completed_orders)
+			medication_order.set_status()
+
+	def get_order_entry_map(self):
+		# for marking order completion status
+		orders = []
+		# orders mapped
+		order_entry_map = dict()
+
+		for entry in self.medication_orders:
+			orders.append(entry.against_imoe)
+			parent = entry.against_imo
+			if not order_entry_map.get(parent):
+				order_entry_map[parent] = 0
+
+			order_entry_map[parent] += 1
+
+		return orders, order_entry_map
+
+	def check_stock_qty(self):
+		drug_shortage = get_drug_shortage_map(self.medication_orders, self.warehouse)
+
+		if drug_shortage:
+			message = _("Quantity not available for the following items in warehouse {0}. ").format(
+				frappe.bold(self.warehouse)
+			)
+			message += _(
+				"Please enable Allow Negative Stock in Stock Settings or create Stock Entry to proceed."
+			)
+
+			formatted_item_rows = ""
+
+			for drug, shortage_qty in drug_shortage.items():
+				item_link = get_link_to_form("Item", drug)
+				formatted_item_rows += """
+					<td>{0}</td>
+					<td>{1}</td>
+				</tr>""".format(
+					item_link, frappe.bold(shortage_qty)
+				)
+
+			message += """
+				<table class='table'>
+					<thead>
+						<th>{0}</th>
+						<th>{1}</th>
+					</thead>
+					{2}
+				</table>
+			""".format(
+				_("Drug Code"), _("Shortage Qty"), formatted_item_rows
+			)
+
+			frappe.throw(message, title=_("Insufficient Stock"), is_minimizable=True, wide=True)
+
+	def make_stock_entry(self):
+		stock_entry = frappe.new_doc("Stock Entry")
+		stock_entry.purpose = "Material Issue"
+		stock_entry.set_stock_entry_type()
+		stock_entry.from_warehouse = self.warehouse
+		stock_entry.company = self.company
+		stock_entry.inpatient_medication_entry = self.name
+		cost_center = frappe.get_cached_value("Company", self.company, "cost_center")
+		expense_account = get_account(None, "expense_account", "Healthcare Settings", self.company)
+
+		for entry in self.medication_orders:
+			se_child = stock_entry.append("items")
+			se_child.item_code = entry.drug_code
+			se_child.item_name = entry.drug_name
+			se_child.uom = frappe.db.get_value("Item", entry.drug_code, "stock_uom")
+			se_child.stock_uom = se_child.uom
+			se_child.qty = flt(entry.dosage)
+			# in stock uom
+			se_child.conversion_factor = 1
+			se_child.cost_center = cost_center
+			se_child.expense_account = expense_account
+			# references
+			se_child.patient = entry.patient
+			se_child.inpatient_medication_entry_child = entry.name
+
+		stock_entry.submit()
+		return stock_entry.name
+
+	def cancel_stock_entries(self):
+		stock_entries = frappe.get_all("Stock Entry", {"inpatient_medication_entry": self.name})
+		for entry in stock_entries:
+			doc = frappe.get_doc("Stock Entry", entry.name)
+			doc.cancel()
+
+
+def get_pending_medication_orders(entry):
+	filters, values = get_filters(entry)
+	to_remove = []
+
+	data = frappe.db.sql(
+		"""
+		SELECT
+			ip.inpatient_record, ip.patient, ip.patient_name,
+			entry.name, entry.parent, entry.drug, entry.drug_name,
+			entry.dosage, entry.dosage_form, entry.date, entry.time, entry.instructions
+		FROM
+			`tabInpatient Medication Order` ip
+		INNER JOIN
+			`tabInpatient Medication Order Entry` entry
+		ON
+			ip.name = entry.parent
+		WHERE
+			ip.docstatus = 1 and
+			ip.company = %(company)s and
+			entry.is_completed = 0
+			{0}
+		ORDER BY
+			entry.date, entry.time
+		""".format(
+			filters
+		),
+		values,
+		as_dict=1,
+	)
+
+	for doc in data:
+		inpatient_record = doc.inpatient_record
+		if inpatient_record:
+			doc["service_unit"] = get_current_healthcare_service_unit(inpatient_record)
+
+		if entry.service_unit and doc.service_unit != entry.service_unit:
+			to_remove.append(doc)
+
+	for doc in to_remove:
+		data.remove(doc)
+
+	return data
+
+
+def get_filters(entry):
+	filters = ""
+	values = dict(company=entry.company)
+	if entry.from_date:
+		filters += " and entry.date >= %(from_date)s"
+		values["from_date"] = entry.from_date
+
+	if entry.to_date:
+		filters += " and entry.date <= %(to_date)s"
+		values["to_date"] = entry.to_date
+
+	if entry.from_time:
+		filters += " and entry.time >= %(from_time)s"
+		values["from_time"] = entry.from_time
+
+	if entry.to_time:
+		filters += " and entry.time <= %(to_time)s"
+		values["to_time"] = entry.to_time
+
+	if entry.patient:
+		filters += " and ip.patient = %(patient)s"
+		values["patient"] = entry.patient
+
+	if entry.practitioner:
+		filters += " and ip.practitioner = %(practitioner)s"
+		values["practitioner"] = entry.practitioner
+
+	if entry.item_code:
+		filters += " and entry.drug = %(item_code)s"
+		values["item_code"] = entry.item_code
+
+	if entry.assigned_to_practitioner:
+		filters += " and ip._assign LIKE %(assigned_to)s"
+		values["assigned_to"] = "%" + entry.assigned_to_practitioner + "%"
+
+	return filters, values
+
+
+def get_current_healthcare_service_unit(inpatient_record):
+	ip_record = frappe.get_doc("Inpatient Record", inpatient_record)
+	if ip_record.status in ["Admitted", "Discharge Scheduled"] and ip_record.inpatient_occupancies:
+		return ip_record.inpatient_occupancies[-1].service_unit
+	return
+
+
+def get_drug_shortage_map(medication_orders, warehouse):
+	"""
+	Returns a dict like { drug_code: shortage_qty }
+	"""
+	drug_requirement = dict()
+	for d in medication_orders:
+		if not drug_requirement.get(d.drug_code):
+			drug_requirement[d.drug_code] = 0
+		drug_requirement[d.drug_code] += flt(d.dosage)
+
+	drug_shortage = dict()
+	for drug, required_qty in drug_requirement.items():
+		available_qty = get_latest_stock_qty(drug, warehouse)
+		if flt(required_qty) > flt(available_qty):
+			drug_shortage[drug] = flt(flt(required_qty) - flt(available_qty))
+
+	return drug_shortage
+
+
+@frappe.whitelist()
+def make_difference_stock_entry(docname):
+	doc = frappe.get_doc("Inpatient Medication Entry", docname)
+	drug_shortage = get_drug_shortage_map(doc.medication_orders, doc.warehouse)
+
+	if not drug_shortage:
+		return None
+
+	stock_entry = frappe.new_doc("Stock Entry")
+	stock_entry.purpose = "Material Transfer"
+	stock_entry.set_stock_entry_type()
+	stock_entry.to_warehouse = doc.warehouse
+	stock_entry.company = doc.company
+	cost_center = frappe.get_cached_value("Company", doc.company, "cost_center")
+	expense_account = get_account(None, "expense_account", "Healthcare Settings", doc.company)
+
+	for drug, shortage_qty in drug_shortage.items():
+		se_child = stock_entry.append("items")
+		se_child.item_code = drug
+		se_child.item_name = frappe.db.get_value("Item", drug, "stock_uom")
+		se_child.uom = frappe.db.get_value("Item", drug, "stock_uom")
+		se_child.stock_uom = se_child.uom
+		se_child.qty = flt(shortage_qty)
+		se_child.t_warehouse = doc.warehouse
+		# in stock uom
+		se_child.conversion_factor = 1
+		se_child.cost_center = cost_center
+		se_child.expense_account = expense_account
+
+	return stock_entry
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry/inpatient_medication_entry_dashboard.py
@@ -0,0 +1,9 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "against_imoe",
+		"internal_links": {"Inpatient Medication Order": ["medication_orders", "against_imo"]},
+		"transactions": [{"label": _("Reference"), "items": ["Inpatient Medication Order"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry/test_inpatient_medication_entry.py
@@ -0,0 +1,181 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, getdate, now_datetime
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import get_account
+from healthcare.healthcare.doctype.inpatient_medication_entry.inpatient_medication_entry import (
+	get_drug_shortage_map,
+	make_difference_stock_entry,
+)
+from healthcare.healthcare.doctype.inpatient_medication_order.test_inpatient_medication_order import (
+	create_ipme,
+	create_ipmo,
+)
+from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+	admit_patient,
+	discharge_patient,
+	schedule_discharge,
+)
+from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+	create_inpatient,
+	create_patient,
+	get_healthcare_service_unit,
+	mark_invoiced_inpatient_occupancy,
+)
+
+
+class TestInpatientMedicationEntry(FrappeTestCase):
+	def setUp(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		frappe.db.sql("""delete from `tabInpatient Medication Order`""")
+		frappe.db.sql("""delete from `tabInpatient Medication Entry`""")
+		self.patient = create_patient()
+
+		# Admit
+		ip_record = create_inpatient(self.patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save()
+		ip_record.reload()
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+		self.ip_record = ip_record
+
+	def test_filters_for_fetching_pending_mo(self):
+		ipmo = create_ipmo(self.patient)
+		ipmo.submit()
+		ipmo.reload()
+
+		date = add_days(getdate(), -1)
+		filters = frappe._dict(
+			from_date=date,
+			to_date=date,
+			from_time="",
+			to_time="",
+			item_code="Dextromethorphan",
+			patient=self.patient,
+		)
+
+		ipme = create_ipme(filters, update_stock=0)
+
+		# 3 dosages per day
+		self.assertEqual(len(ipme.medication_orders), 3)
+		self.assertEqual(getdate(ipme.medication_orders[0].datetime), date)
+
+	def test_ipme_with_stock_update(self):
+		ipmo = create_ipmo(self.patient)
+		ipmo.submit()
+		ipmo.reload()
+
+		date = add_days(getdate(), -1)
+		filters = frappe._dict(
+			from_date=date,
+			to_date=date,
+			from_time="",
+			to_time="",
+			item_code="Dextromethorphan",
+			patient=self.patient,
+		)
+
+		make_stock_entry()
+		ipme = create_ipme(filters, update_stock=1)
+		ipme.submit()
+		ipme.reload()
+
+		# test order completed
+		is_order_completed = frappe.db.get_value(
+			"Inpatient Medication Order Entry", ipme.medication_orders[0].against_imoe, "is_completed"
+		)
+		self.assertEqual(is_order_completed, 1)
+
+		# test stock entry
+		stock_entry = frappe.db.exists("Stock Entry", {"inpatient_medication_entry": ipme.name})
+		self.assertTrue(stock_entry)
+
+		# check references
+		stock_entry = frappe.get_doc("Stock Entry", stock_entry)
+		self.assertEqual(stock_entry.items[0].patient, self.patient)
+		self.assertEqual(
+			stock_entry.items[0].inpatient_medication_entry_child, ipme.medication_orders[0].name
+		)
+
+	def test_drug_shortage_stock_entry(self):
+		ipmo = create_ipmo(self.patient)
+		ipmo.submit()
+		ipmo.reload()
+
+		date = add_days(getdate(), -1)
+		filters = frappe._dict(
+			from_date=date,
+			to_date=date,
+			from_time="",
+			to_time="",
+			item_code="Dextromethorphan",
+			patient=self.patient,
+		)
+
+		# check drug shortage
+		ipme = create_ipme(filters, update_stock=1)
+		ipme.warehouse = "Finished Goods - _TC"
+		ipme.save()
+		drug_shortage = get_drug_shortage_map(ipme.medication_orders, ipme.warehouse)
+		self.assertEqual(drug_shortage.get("Dextromethorphan"), 3)
+
+		# check material transfer for drug shortage
+		make_stock_entry()
+		stock_entry = make_difference_stock_entry(ipme.name)
+		self.assertEqual(stock_entry.items[0].item_code, "Dextromethorphan")
+		self.assertEqual(stock_entry.items[0].qty, 3)
+		stock_entry.from_warehouse = "Stores - _TC"
+		stock_entry.submit()
+
+		ipme.reload()
+		ipme.submit()
+
+	def tearDown(self):
+		# cleanup - Discharge
+		schedule_discharge(frappe.as_json({"patient": self.patient}))
+		self.ip_record.reload()
+		mark_invoiced_inpatient_occupancy(self.ip_record)
+
+		self.ip_record.reload()
+		discharge_patient(self.ip_record)
+
+		for entry in frappe.get_all("Inpatient Medication Entry"):
+			doc = frappe.get_doc("Inpatient Medication Entry", entry.name)
+			doc.cancel()
+
+		for entry in frappe.get_all("Inpatient Medication Order"):
+			doc = frappe.get_doc("Inpatient Medication Order", entry.name)
+			doc.cancel()
+
+
+def make_stock_entry(warehouse=None):
+	frappe.db.set_value(
+		"Company",
+		"_Test Company",
+		{
+			"stock_adjustment_account": "Stock Adjustment - _TC",
+			"default_inventory_account": "Stock In Hand - _TC",
+		},
+	)
+	stock_entry = frappe.new_doc("Stock Entry")
+	stock_entry.stock_entry_type = "Material Receipt"
+	stock_entry.company = "_Test Company"
+	stock_entry.to_warehouse = warehouse or "Stores - _TC"
+	expense_account = get_account(None, "expense_account", "Healthcare Settings", "_Test Company")
+	se_child = stock_entry.append("items")
+	se_child.item_code = "Dextromethorphan"
+	se_child.item_name = "Dextromethorphan"
+	se_child.uom = "Nos"
+	se_child.stock_uom = "Nos"
+	se_child.qty = 6
+	se_child.t_warehouse = "Stores - _TC"
+	# in stock uom
+	se_child.conversion_factor = 1.0
+	se_child.expense_account = expense_account
+	stock_entry.submit()
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry_detail/inpatient_medication_entry_detail.json
@@ -0,0 +1,163 @@
+{
+ "actions": [],
+ "creation": "2020-09-25 14:56:32.636569",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient",
+  "patient_name",
+  "inpatient_record",
+  "column_break_4",
+  "service_unit",
+  "datetime",
+  "medication_details_section",
+  "drug_code",
+  "drug_name",
+  "dosage",
+  "available_qty",
+  "dosage_form",
+  "column_break_10",
+  "instructions",
+  "references_section",
+  "against_imo",
+  "against_imoe"
+ ],
+ "fields": [
+  {
+   "columns": 2,
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "columns": 2,
+   "fieldname": "drug_code",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Drug Code",
+   "options": "Item",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "drug_code.item_name",
+   "fieldname": "drug_name",
+   "fieldtype": "Data",
+   "label": "Drug Name",
+   "read_only": 1
+  },
+  {
+   "columns": 1,
+   "fieldname": "dosage",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Dosage",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "label": "Dosage Form",
+   "options": "Dosage Form"
+  },
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "references_section",
+   "fieldtype": "Section Break",
+   "label": "References"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "medication_details_section",
+   "fieldtype": "Section Break",
+   "label": "Medication Details"
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "columns": 3,
+   "fieldname": "datetime",
+   "fieldtype": "Datetime",
+   "in_list_view": 1,
+   "label": "Datetime",
+   "reqd": 1
+  },
+  {
+   "fieldname": "instructions",
+   "fieldtype": "Small Text",
+   "label": "Instructions"
+  },
+  {
+   "columns": 2,
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "against_imo",
+   "fieldtype": "Link",
+   "label": "Against Inpatient Medication Order",
+   "no_copy": 1,
+   "options": "Inpatient Medication Order",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "against_imoe",
+   "fieldtype": "Data",
+   "label": "Against Inpatient Medication Order Entry",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "available_qty",
+   "fieldtype": "Float",
+   "hidden": 1,
+   "label": "Available Qty",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2020-09-30 14:48:23.648223",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Medication Entry Detail",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_entry_detail/inpatient_medication_entry_detail.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class InpatientMedicationEntryDetail(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order/inpatient_medication_order.js
@@ -0,0 +1,128 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Inpatient Medication Order', {
+	refresh: function(frm) {
+		if (frm.doc.docstatus === 1) {
+			frm.trigger("show_progress");
+		}
+
+		frm.events.show_medication_order_button(frm);
+		frm.events.show_get_from_encounter_button(frm);
+
+		frm.set_query('patient', () => {
+			return {
+				filters: {
+					'inpatient_record': ['!=', ''],
+					'inpatient_status': 'Admitted'
+				}
+			};
+		});
+	},
+
+	show_medication_order_button: function(frm) {
+		frm.fields_dict['medication_orders'].grid.wrapper.find('.grid-add-row').hide();
+		frm.fields_dict['medication_orders'].grid.add_custom_button(__('Add Medication Orders'), () => {
+			let d = new frappe.ui.Dialog({
+				title: __('Add Medication Orders'),
+				fields: [
+					{
+						fieldname: 'drug_code',
+						label: __('Drug'),
+						fieldtype: 'Link',
+						options: 'Item',
+						reqd: 1,
+						"get_query": function () {
+							return {
+								filters: {'is_stock_item': 1}
+							};
+						}
+					},
+					{
+						fieldname: 'dosage',
+						label: __('Dosage'),
+						fieldtype: 'Link',
+						options: 'Prescription Dosage',
+						reqd: 1
+					},
+					{
+						fieldname: 'period',
+						label: __('Period'),
+						fieldtype: 'Link',
+						options: 'Prescription Duration',
+						reqd: 1
+					},
+					{
+						fieldname: 'dosage_form',
+						label: __('Dosage Form'),
+						fieldtype: 'Link',
+						options: 'Dosage Form',
+						reqd: 1
+					}
+				],
+				primary_action_label: __('Add'),
+				primary_action: () => {
+					let values = d.get_values();
+					if (values) {
+						frm.call({
+							doc: frm.doc,
+							method: 'add_order_entries',
+							args: {
+								order: values
+							},
+							freeze: true,
+							freeze_message: __('Adding Order Entries'),
+							callback: function() {
+								frm.refresh_field('medication_orders');
+							}
+						});
+					}
+				},
+			});
+			d.show();
+		});
+	},
+
+	show_get_from_encounter_button: function(frm) {
+		frm.fields_dict['medication_orders'].grid.add_custom_button(__('Get From Encounter'), () => {
+			if (!frm.doc.patient_encounter) {
+				frappe.throw(__("Please select a Patient Encounter to get from"));
+			}
+			frm.call({
+				doc: frm.doc,
+				method: 'get_from_encounter',
+				args: {
+					encounter: frm.doc.patient_encounter
+				},
+				freeze: true,
+				freeze_message: __('Getting From Encounter'),
+				callback: function() {
+					frm.refresh_field('medication_orders');
+				}
+			});
+		});
+	},
+
+	show_progress: function(frm) {
+		let bars = [];
+		let message = '';
+
+		// completed sessions
+		let title = __('{0} medication orders completed', [frm.doc.completed_orders]);
+		if (frm.doc.completed_orders === 1) {
+			title = __('{0} medication order completed', [frm.doc.completed_orders]);
+		}
+		title += __(' out of {0}', [frm.doc.total_orders]);
+
+		bars.push({
+			'title': title,
+			'width': (frm.doc.completed_orders / frm.doc.total_orders * 100) + '%',
+			'progress_class': 'progress-bar-success'
+		});
+		if (bars[0].width == '0%') {
+			bars[0].width = '0.5%';
+		}
+		message = title;
+		frm.dashboard.add_progress(__('Status'), bars, message);
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order/inpatient_medication_order.json
@@ -0,0 +1,196 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2020-09-14 18:33:56.715736",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient_details_section",
+  "naming_series",
+  "patient_encounter",
+  "patient",
+  "patient_name",
+  "patient_age",
+  "inpatient_record",
+  "column_break_6",
+  "company",
+  "status",
+  "practitioner",
+  "start_date",
+  "end_date",
+  "medication_orders_section",
+  "medication_orders",
+  "section_break_16",
+  "total_orders",
+  "column_break_18",
+  "completed_orders",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient_details_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming Series",
+   "options": "HLC-IMO-.YYYY.-"
+  },
+  {
+   "fieldname": "patient_encounter",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient Encounter",
+   "options": "Patient Encounter"
+  },
+  {
+   "fetch_from": "patient_encounter.patient",
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "label": "Patient",
+   "options": "Patient",
+   "read_only_depends_on": "patient_encounter",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient_encounter.practitioner",
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only_depends_on": "patient_encounter"
+  },
+  {
+   "fieldname": "start_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Start Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "end_date",
+   "fieldtype": "Date",
+   "label": "End Date",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval: doc.patient && doc.start_date",
+   "fieldname": "medication_orders_section",
+   "fieldtype": "Section Break",
+   "label": "Medication Orders"
+  },
+  {
+   "fieldname": "medication_orders",
+   "fieldtype": "Table",
+   "label": "Medication Orders",
+   "options": "Inpatient Medication Order Entry"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Inpatient Medication Order",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "\nDraft\nSubmitted\nPending\nIn Process\nCompleted\nCancelled",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "section_break_16",
+   "fieldtype": "Section Break",
+   "label": "Other Details"
+  },
+  {
+   "fieldname": "total_orders",
+   "fieldtype": "Float",
+   "label": "Total Orders",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_18",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "completed_orders",
+   "fieldtype": "Float",
+   "label": "Completed Orders",
+   "no_copy": 1,
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2020-09-30 21:53:27.128591",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Medication Order",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "search_fields": "patient_encounter, patient",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "patient",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order/inpatient_medication_order.py
@@ -0,0 +1,90 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import cstr
+
+from healthcare.healthcare.doctype.patient_encounter.patient_encounter import (
+	get_prescription_dates,
+)
+
+
+class InpatientMedicationOrder(Document):
+	def validate(self):
+		self.validate_inpatient()
+		self.validate_duplicate()
+		self.set_total_orders()
+		self.set_status()
+
+	def on_submit(self):
+		self.validate_inpatient()
+		self.set_status()
+
+	def on_cancel(self):
+		self.set_status()
+
+	def validate_inpatient(self):
+		if not self.inpatient_record:
+			frappe.throw(_("No Inpatient Record found against patient {0}").format(self.patient))
+
+	def validate_duplicate(self):
+		existing_mo = frappe.db.exists(
+			"Inpatient Medication Order",
+			{
+				"patient_encounter": self.patient_encounter,
+				"docstatus": ("!=", 2),
+				"name": ("!=", self.name),
+			},
+		)
+		if existing_mo:
+			frappe.throw(
+				_("An Inpatient Medication Order {0} against Patient Encounter {1} already exists.").format(
+					existing_mo, self.patient_encounter
+				),
+				frappe.DuplicateEntryError,
+			)
+
+	def set_total_orders(self):
+		self.db_set("total_orders", len(self.medication_orders))
+
+	def set_status(self):
+		status = {"0": "Draft", "1": "Submitted", "2": "Cancelled"}[cstr(self.docstatus or 0)]
+
+		if self.docstatus == 1:
+			if not self.completed_orders:
+				status = "Pending"
+			elif self.completed_orders < self.total_orders:
+				status = "In Process"
+			else:
+				status = "Completed"
+
+		self.db_set("status", status)
+
+	@frappe.whitelist()
+	def add_order_entries(self, order):
+		if order.get("drug_code"):
+			dosage = frappe.get_doc("Prescription Dosage", order.get("dosage"))
+			dates = get_prescription_dates(order.get("period"), self.start_date)
+			for date in dates:
+				for dose in dosage.dosage_strength:
+					entry = self.append("medication_orders")
+					entry.drug = order.get("drug_code")
+					entry.drug_name = frappe.db.get_value("Item", order.get("drug_code"), "item_name")
+					entry.dosage = dose.strength
+					entry.dosage_form = order.get("dosage_form")
+					entry.date = date
+					entry.time = dose.strength_time
+			self.end_date = dates[-1]
+		return
+
+	@frappe.whitelist()
+	def get_from_encounter(self, encounter):
+		patient_encounter = frappe.get_doc("Patient Encounter", encounter)
+		if not patient_encounter.drug_prescription:
+			return
+		for drug in patient_encounter.drug_prescription:
+			self.add_order_entries(drug)
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order/inpatient_medication_order_list.js
@@ -0,0 +1,16 @@
+frappe.listview_settings['Inpatient Medication Order'] = {
+	add_fields: ["status"],
+	filters: [["status", "!=", "Cancelled"]],
+	get_indicator: function(doc) {
+		if (doc.status === "Pending") {
+			return [__("Pending"), "orange", "status,=,Pending"];
+
+		} else if (doc.status === "In Process") {
+			return [__("In Process"), "blue", "status,=,In Process"];
+
+		} else if (doc.status === "Completed") {
+			return [__("Completed"), "green", "status,=,Completed"];
+
+		}
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order/test_inpatient_medication_order.py
@@ -0,0 +1,161 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, getdate, now_datetime
+
+from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+	admit_patient,
+	discharge_patient,
+	schedule_discharge,
+)
+from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+	create_inpatient,
+	create_patient,
+	get_healthcare_service_unit,
+	mark_invoiced_inpatient_occupancy,
+)
+
+
+class TestInpatientMedicationOrder(FrappeTestCase):
+	def setUp(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		self.patient = create_patient()
+
+		# Admit
+		ip_record = create_inpatient(self.patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save()
+		ip_record.reload()
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+		self.ip_record = ip_record
+
+	def test_order_creation(self):
+		ipmo = create_ipmo(self.patient)
+		ipmo.submit()
+		ipmo.reload()
+
+		# 3 dosages per day for 2 days
+		self.assertEqual(len(ipmo.medication_orders), 6)
+		self.assertEqual(ipmo.medication_orders[0].date, add_days(getdate(), -1))
+
+		prescription_dosage = frappe.get_doc("Prescription Dosage", "1-1-1")
+		for i in range(len(prescription_dosage.dosage_strength)):
+			self.assertEqual(
+				ipmo.medication_orders[i].time, prescription_dosage.dosage_strength[i].strength_time
+			)
+
+		self.assertEqual(ipmo.medication_orders[3].date, getdate())
+
+	def test_inpatient_validation(self):
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": self.patient}))
+
+		self.ip_record.reload()
+		mark_invoiced_inpatient_occupancy(self.ip_record)
+
+		self.ip_record.reload()
+		discharge_patient(self.ip_record)
+
+		ipmo = create_ipmo(self.patient)
+		# inpatient validation
+		self.assertRaises(frappe.ValidationError, ipmo.insert)
+
+	def test_status(self):
+		ipmo = create_ipmo(self.patient)
+		ipmo.submit()
+		ipmo.reload()
+
+		self.assertEqual(ipmo.status, "Pending")
+
+		filters = frappe._dict(
+			from_date=add_days(getdate(), -1), to_date=add_days(getdate(), -1), from_time="", to_time=""
+		)
+		ipme = create_ipme(filters)
+		ipme.submit()
+		ipmo.reload()
+		self.assertEqual(ipmo.status, "In Process")
+
+		filters = frappe._dict(from_date=getdate(), to_date=getdate(), from_time="", to_time="")
+		ipme = create_ipme(filters)
+		ipme.submit()
+		ipmo.reload()
+		self.assertEqual(ipmo.status, "Completed")
+
+	def tearDown(self):
+		if frappe.db.get_value("Patient", self.patient, "inpatient_record"):
+			# cleanup - Discharge
+			schedule_discharge(frappe.as_json({"patient": self.patient}))
+			self.ip_record.reload()
+			mark_invoiced_inpatient_occupancy(self.ip_record)
+
+			self.ip_record.reload()
+			discharge_patient(self.ip_record)
+
+		for doctype in ["Inpatient Medication Entry", "Inpatient Medication Order"]:
+			frappe.db.sql("delete from `tab{doctype}`".format(doctype=doctype))
+
+
+def create_dosage_form():
+	if not frappe.db.exists("Dosage Form", "Tablet"):
+		frappe.get_doc({"doctype": "Dosage Form", "dosage_form": "Tablet"}).insert()
+
+
+def create_drug(item=None):
+	if not item:
+		item = "Dextromethorphan"
+	drug = frappe.db.exists("Item", {"item_code": "Dextromethorphan"})
+	if not drug:
+		drug = frappe.get_doc(
+			{
+				"doctype": "Item",
+				"item_code": "Dextromethorphan",
+				"item_name": "Dextromethorphan",
+				"item_group": "Products",
+				"stock_uom": "Nos",
+				"is_stock_item": 1,
+				"valuation_rate": 50,
+				"opening_stock": 20,
+			}
+		).insert()
+
+
+def get_orders():
+	create_dosage_form()
+	create_drug()
+	return {
+		"drug_code": "Dextromethorphan",
+		"drug_name": "Dextromethorphan",
+		"dosage": "1-1-1",
+		"dosage_form": "Tablet",
+		"period": "2 Day",
+	}
+
+
+def create_ipmo(patient):
+	orders = get_orders()
+	ipmo = frappe.new_doc("Inpatient Medication Order")
+	ipmo.patient = patient
+	ipmo.company = "_Test Company"
+	ipmo.start_date = add_days(getdate(), -1)
+	ipmo.add_order_entries(orders)
+
+	return ipmo
+
+
+def create_ipme(filters, update_stock=0):
+	ipme = frappe.new_doc("Inpatient Medication Entry")
+	ipme.company = "_Test Company"
+	ipme.posting_date = getdate()
+	ipme.update_stock = update_stock
+	if update_stock:
+		ipme.warehouse = "Stores - _TC"
+	for key, value in filters.items():
+		ipme.set(key, value)
+	ipme = ipme.get_medication_orders()
+
+	return ipme
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order_entry/inpatient_medication_order_entry.json
@@ -0,0 +1,94 @@
+{
+ "actions": [],
+ "creation": "2020-09-14 21:51:30.259164",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "drug",
+  "drug_name",
+  "dosage",
+  "dosage_form",
+  "instructions",
+  "column_break_4",
+  "date",
+  "time",
+  "is_completed"
+ ],
+ "fields": [
+  {
+   "fieldname": "drug",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Drug",
+   "options": "Item",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "drug.item_name",
+   "fieldname": "drug_name",
+   "fieldtype": "Data",
+   "label": "Drug Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "dosage",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Dosage",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Dosage Form",
+   "options": "Dosage Form",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "time",
+   "fieldtype": "Time",
+   "in_list_view": 1,
+   "label": "Time",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_completed",
+   "fieldtype": "Check",
+   "label": "Is Order Completed",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "instructions",
+   "fieldtype": "Small Text",
+   "label": "Instructions"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2020-09-30 14:03:26.755925",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Medication Order Entry",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_medication_order_entry/inpatient_medication_order_entry.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class InpatientMedicationOrderEntry(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_occupancy/inpatient_occupancy.json
@@ -0,0 +1,64 @@
+{
+ "actions": [],
+ "creation": "2018-07-12 12:07:36.932333",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "service_unit",
+  "check_in",
+  "left",
+  "check_out",
+  "invoiced"
+ ],
+ "fields": [
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Healthcare Service Unit",
+   "options": "Healthcare Service Unit",
+   "reqd": 1
+  },
+  {
+   "fieldname": "check_in",
+   "fieldtype": "Datetime",
+   "in_list_view": 1,
+   "label": "Check In"
+  },
+  {
+   "default": "0",
+   "fieldname": "left",
+   "fieldtype": "Check",
+   "label": "Left",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "check_out",
+   "fieldtype": "Datetime",
+   "label": "Check Out"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2021-03-18 15:08:54.634132",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Occupancy",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_occupancy/inpatient_occupancy.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class InpatientOccupancy(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_record/inpatient_record.js
@@ -0,0 +1,328 @@
+// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Inpatient Record', {
+	setup: function(frm) {
+		frm.get_field('drug_prescription').grid.editable_fields = [
+			{fieldname: 'drug_code', columns: 2},
+			{fieldname: 'drug_name', columns: 2},
+			{fieldname: 'dosage', columns: 2},
+			{fieldname: 'period', columns: 2},
+			{fieldname: 'dosage_form', columns: 2}
+		];
+	},
+	refresh: function(frm) {
+		frm.set_query('admission_service_unit_type', function() {
+			return {
+				filters: {
+					'inpatient_occupancy': 1,
+					'allow_appointments': 0
+				}
+			};
+		});
+
+		frm.set_query('primary_practitioner', function() {
+			return {
+				filters: {
+					'department': frm.doc.medical_department
+				}
+			};
+		});
+		if (!frm.doc.__islocal) {
+			if (frm.doc.status == 'Admitted') {
+				frm.add_custom_button(__('Schedule Discharge'), function() {
+					schedule_discharge(frm);
+				});
+			} else if (frm.doc.status == 'Admission Scheduled') {
+				frm.add_custom_button(__('Cancel Admission'), function() {
+					cancel_ip_order(frm)
+				})
+				frm.add_custom_button(__('Admit'), function() {
+					admit_patient_dialog(frm);
+				} );
+			} else if (frm.doc.status == 'Discharge Scheduled') {
+				frm.add_custom_button(__('Discharge'), function() {
+					discharge_patient(frm);
+				} );
+			}
+		}
+
+		frm.add_custom_button(__("Clinical Note"), function() {
+			frappe.route_options = {
+				"patient": frm.doc.patient,
+				"reference_doc": "Inpatient Record",
+				"reference_name": frm.doc.name}
+					frappe.new_doc("Clinical Note");
+		},__('Create'));
+	},
+	btn_transfer: function(frm) {
+		transfer_patient_dialog(frm);
+	}
+});
+
+let discharge_patient = function(frm) {
+	frappe.call({
+		doc: frm.doc,
+		method: 'discharge',
+		callback: function(data) {
+			if (!data.exc) {
+				frm.reload_doc();
+			}
+		},
+		freeze: true,
+		freeze_message: __('Processing Inpatient Discharge')
+	});
+};
+
+let admit_patient_dialog = function(frm) {
+	let dialog = new frappe.ui.Dialog({
+		title: 'Admit Patient',
+		width: 100,
+		fields: [
+			{fieldtype: 'Link', label: 'Service Unit Type', fieldname: 'service_unit_type',
+				options: 'Healthcare Service Unit Type', default: frm.doc.admission_service_unit_type
+			},
+			{fieldtype: 'Link', label: 'Service Unit', fieldname: 'service_unit',
+				options: 'Healthcare Service Unit', reqd: 1
+			},
+			{fieldtype: 'Datetime', label: 'Admission Datetime', fieldname: 'check_in',
+				reqd: 1, default: frappe.datetime.now_datetime()
+			},
+			{fieldtype: 'Date', label: 'Expected Discharge', fieldname: 'expected_discharge',
+				default: frm.doc.expected_length_of_stay ? frappe.datetime.add_days(frappe.datetime.now_datetime(), frm.doc.expected_length_of_stay) : ''
+			}
+		],
+		primary_action_label: __('Admit'),
+		primary_action : function(){
+			let service_unit = dialog.get_value('service_unit');
+			let check_in = dialog.get_value('check_in');
+			let expected_discharge = null;
+			if (dialog.get_value('expected_discharge')) {
+				expected_discharge = dialog.get_value('expected_discharge');
+			}
+			if (!service_unit && !check_in) {
+				return;
+			}
+			frappe.call({
+				doc: frm.doc,
+				method: 'admit',
+				args:{
+					'service_unit': service_unit,
+					'check_in': check_in,
+					'expected_discharge': expected_discharge
+				},
+				callback: function(data) {
+					if (!data.exc) {
+						frm.reload_doc();
+					}
+				},
+				freeze: true,
+				freeze_message: __('Processing Patient Admission')
+			});
+			frm.refresh_fields();
+			dialog.hide();
+		}
+	});
+
+	dialog.fields_dict['service_unit_type'].get_query = function() {
+		return {
+			filters: {
+				'inpatient_occupancy': 1,
+				'allow_appointments': 0
+			}
+		};
+	};
+	dialog.fields_dict['service_unit'].get_query = function() {
+		return {
+			filters: {
+				'is_group': 0,
+				'company': frm.doc.company,
+				'service_unit_type': dialog.get_value('service_unit_type'),
+				'occupancy_status' : 'Vacant'
+			}
+		};
+	};
+
+	dialog.show();
+};
+
+let transfer_patient_dialog = function(frm) {
+	let dialog = new frappe.ui.Dialog({
+		title: 'Transfer Patient',
+		width: 100,
+		fields: [
+			{fieldtype: 'Link', label: 'Leave From', fieldname: 'leave_from', options: 'Healthcare Service Unit', reqd: 1, read_only:1},
+			{fieldtype: 'Link', label: 'Service Unit Type', fieldname: 'service_unit_type', options: 'Healthcare Service Unit Type'},
+			{fieldtype: 'Link', label: 'Transfer To', fieldname: 'service_unit', options: 'Healthcare Service Unit', reqd: 1},
+			{fieldtype: 'Datetime', label: 'Check In', fieldname: 'check_in', reqd: 1, default: frappe.datetime.now_datetime()}
+		],
+		primary_action_label: __('Transfer'),
+		primary_action : function() {
+			let service_unit = null;
+			let check_in = dialog.get_value('check_in');
+			let leave_from = null;
+			if(dialog.get_value('leave_from')){
+				leave_from = dialog.get_value('leave_from');
+			}
+			if(dialog.get_value('service_unit')){
+				service_unit = dialog.get_value('service_unit');
+			}
+			if(check_in > frappe.datetime.now_datetime()){
+				frappe.msgprint({
+					title: __('Not Allowed'),
+					message: __('Check-in time cannot be greater than the current time'),
+					indicator: 'red'
+				});
+				return;
+			}
+			frappe.call({
+				doc: frm.doc,
+				method: 'transfer',
+				args:{
+					'service_unit': service_unit,
+					'check_in': check_in,
+					'leave_from': leave_from
+				},
+				callback: function(data) {
+					if (!data.exc) {
+						frm.reload_doc();
+					}
+				},
+				freeze: true,
+				freeze_message: __('Process Transfer')
+			});
+			frm.refresh_fields();
+			dialog.hide();
+		}
+	});
+
+	dialog.fields_dict['leave_from'].get_query = function(){
+		return {
+			query : 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.get_leave_from',
+			filters: {docname:frm.doc.name}
+		};
+	};
+	dialog.fields_dict['service_unit_type'].get_query = function(){
+		return {
+			filters: {
+				'inpatient_occupancy': 1,
+				'allow_appointments': 0
+			}
+		};
+	};
+	dialog.fields_dict['service_unit'].get_query = function(){
+		return {
+			filters: {
+				'is_group': 0,
+				'service_unit_type': dialog.get_value('service_unit_type'),
+				'occupancy_status' : 'Vacant'
+			}
+		};
+	};
+
+	dialog.show();
+
+	let not_left_service_unit = null;
+	for (let inpatient_occupancy in frm.doc.inpatient_occupancies) {
+		if (frm.doc.inpatient_occupancies[inpatient_occupancy].left != 1) {
+			not_left_service_unit = frm.doc.inpatient_occupancies[inpatient_occupancy].service_unit;
+		}
+	}
+	dialog.set_values({
+		'leave_from': not_left_service_unit
+	});
+};
+
+var schedule_discharge = function(frm) {
+	var dialog = new frappe.ui.Dialog ({
+		title: 'Inpatient Discharge',
+		fields: [
+			{
+				fieldtype: 'Link',
+				label: 'Discharge Practitioner',
+				fieldname: 'discharge_practitioner',
+				options: 'Healthcare Practitioner'
+			},
+			{
+				fieldtype: 'Datetime',
+				label: 'Discharge Ordered DateTime',
+				fieldname: 'discharge_ordered_datetime',
+				default: frappe.datetime.now_datetime()
+			},
+			{
+				fieldtype: 'Date',
+				label: 'Followup Date',
+				fieldname: 'followup_date'
+			},
+			{
+				fieldtype: 'Column Break'
+			},
+			{
+				fieldtype: 'Small Text',
+				label: 'Discharge Instructions',
+				fieldname: 'discharge_instructions'
+			},
+			{
+				fieldtype: 'Section Break',
+				label:'Discharge Summary'
+			},
+			{
+				fieldtype: 'Long Text',
+				label: 'Discharge Note',
+				fieldname: 'discharge_note'
+			}
+		],
+		primary_action_label: __('Order Discharge'),
+		primary_action : function() {
+			var args = {
+				patient: frm.doc.patient,
+				discharge_practitioner: dialog.get_value('discharge_practitioner'),
+				discharge_ordered_datetime: dialog.get_value('discharge_ordered_datetime'),
+				followup_date: dialog.get_value('followup_date'),
+				discharge_instructions: dialog.get_value('discharge_instructions'),
+				discharge_note: dialog.get_value('discharge_note')
+			}
+			frappe.call ({
+				method: 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.schedule_discharge',
+				args: {args},
+				callback: function(data) {
+					if(!data.exc){
+						frm.reload_doc();
+					}
+				},
+				freeze: true,
+				freeze_message: 'Scheduling Inpatient Discharge'
+			});
+			frm.refresh_fields();
+			dialog.hide();
+		}
+	});
+
+	dialog.show();
+	dialog.$wrapper.find('.modal-dialog').css('width', '800px');
+};
+
+let cancel_ip_order = function(frm) {
+	frappe.prompt([
+		{
+			fieldname: 'reason_for_cancellation',
+			label: __('Reason for Cancellation'),
+			fieldtype: 'Small Text',
+			reqd: 1
+		}
+	],
+	function(data) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.set_ip_order_cancelled',
+			async: false,
+			freeze: true,
+			args: {
+				inpatient_record: frm.doc.name,
+				reason: data.reason_for_cancellation
+			},
+			callback: function(r) {
+				if (!r.exc) frm.reload_doc();
+			}
+		});
+	}, __('Reason for Cancellation'), __('Submit'));
+}
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_record/inpatient_record.json
@@ -0,0 +1,546 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2018-07-11 17:48:51.404139",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_1",
+  "naming_series",
+  "patient",
+  "patient_name",
+  "gender",
+  "blood_group",
+  "dob",
+  "mobile",
+  "email",
+  "phone",
+  "column_break_8",
+  "company",
+  "status",
+  "scheduled_date",
+  "admitted_datetime",
+  "expected_discharge",
+  "references",
+  "admission_encounter",
+  "admission_practitioner",
+  "medical_department",
+  "admission_ordered_for",
+  "admission_service_unit_type",
+  "admission_nursing_checklist_template",
+  "discharge_nursing_checklist_template",
+  "expected_length_of_stay",
+  "governorate",
+  "cb_admission",
+  "primary_practitioner",
+  "secondary_practitioner",
+  "admission_instruction",
+  "encounter_details_section",
+  "chief_complaint",
+  "column_break_29",
+  "diagnosis",
+  "medication_section",
+  "drug_prescription",
+  "investigations_section",
+  "lab_test_prescription",
+  "procedures_section",
+  "procedure_prescription",
+  "rehabilitation_section",
+  "therapy_plan",
+  "therapies",
+  "sb_inpatient_occupancy",
+  "inpatient_occupancies",
+  "btn_transfer",
+  "sb_discharge_details",
+  "discharge_ordered_date",
+  "discharge_practitioner",
+  "discharge_encounter",
+  "discharge_datetime",
+  "cb_discharge",
+  "discharge_instructions",
+  "followup_date",
+  "sb_discharge_note",
+  "discharge_note"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_1",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Series",
+   "options": "HLC-INP-.YYYY.-"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.blood_group",
+   "fieldname": "blood_group",
+   "fieldtype": "Select",
+   "label": "Blood Group",
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "dob",
+   "fieldtype": "Date",
+   "label": "Date of birth",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.mobile",
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "label": "Mobile",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.email",
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "label": "Email",
+   "options": "Email",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.phone",
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "label": "Phone",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "mandatory_depends_on": "eval:!doc.admission_encounter;",
+   "options": "Medical Department",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "primary_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner (Primary)",
+   "mandatory_depends_on": "eval:!doc.admission_encounter;",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "secondary_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner (Secondary)",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "column_break_8",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Admission Scheduled",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Status",
+   "options": "Admission Scheduled\nAdmitted\nDischarge Scheduled\nDischarged\nCancelled",
+   "read_only": 1
+  },
+  {
+   "default": "Today",
+   "fieldname": "scheduled_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Admission Schedule Date",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "admission_ordered_for",
+   "fieldtype": "Date",
+   "label": "Admission Ordered For",
+   "read_only": 1
+  },
+  {
+   "fieldname": "admitted_datetime",
+   "fieldtype": "Datetime",
+   "in_list_view": 1,
+   "label": "Admitted Datetime",
+   "permlevel": 2
+  },
+  {
+   "fieldname": "expected_length_of_stay",
+   "fieldtype": "Int",
+   "label": "Expected Length of Stay",
+   "mandatory_depends_on": "eval:!doc.admission_encounter;",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "expected_discharge",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Expected Discharge",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "references",
+   "fieldtype": "Section Break",
+   "label": "Admission Order Details"
+  },
+  {
+   "fieldname": "cb_admission",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "admission_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only": 1
+  },
+  {
+   "fieldname": "admission_encounter",
+   "fieldtype": "Link",
+   "label": "Patient Encounter",
+   "options": "Patient Encounter",
+   "read_only": 1
+  },
+  {
+   "fieldname": "chief_complaint",
+   "fieldtype": "Table MultiSelect",
+   "label": "Chief Complaint",
+   "options": "Patient Encounter Symptom",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "admission_instruction",
+   "fieldtype": "Small Text",
+   "label": "Admission Instructions",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "cb_discharge",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "discharge_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only": 1
+  },
+  {
+   "fieldname": "discharge_encounter",
+   "fieldtype": "Link",
+   "label": "Patient Encounter",
+   "options": "Patient Encounter",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval:!doc.__islocal;",
+   "fieldname": "medication_section",
+   "fieldtype": "Section Break",
+   "label": "Medications",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "drug_prescription",
+   "fieldtype": "Table",
+   "options": "Drug Prescription",
+   "permlevel": 1
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval:!doc.__islocal;",
+   "fieldname": "investigations_section",
+   "fieldtype": "Section Break",
+   "label": "Investigations",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "lab_test_prescription",
+   "fieldtype": "Table",
+   "options": "Lab Prescription",
+   "permlevel": 1
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval:!doc.__islocal;",
+   "fieldname": "procedures_section",
+   "fieldtype": "Section Break",
+   "label": "Procedures",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "procedure_prescription",
+   "fieldtype": "Table",
+   "options": "Procedure Prescription",
+   "permlevel": 1
+  },
+  {
+   "depends_on": "eval:(doc.status != \"Admission Scheduled\")",
+   "fieldname": "sb_inpatient_occupancy",
+   "fieldtype": "Section Break",
+   "label": "Inpatient Occupancy"
+  },
+  {
+   "fieldname": "admission_service_unit_type",
+   "fieldtype": "Link",
+   "label": "Admission Service Unit Type",
+   "mandatory_depends_on": "eval:!doc.admission_encounter;",
+   "options": "Healthcare Service Unit Type",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "inpatient_occupancies",
+   "fieldtype": "Table",
+   "options": "Inpatient Occupancy",
+   "permlevel": 2
+  },
+  {
+   "depends_on": "eval:doc.status == 'Admitted';",
+   "fieldname": "btn_transfer",
+   "fieldtype": "Button",
+   "label": "Transfer"
+  },
+  {
+   "depends_on": "eval:(doc.status == \"Discharge Scheduled\" || doc.status == \"Discharged\")",
+   "fieldname": "sb_discharge_note",
+   "fieldtype": "Section Break",
+   "label": "Discharge Notes"
+  },
+  {
+   "fieldname": "discharge_note",
+   "fieldtype": "Text Editor",
+   "permlevel": 1
+  },
+  {
+   "fetch_from": "admission_encounter.company",
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company"
+  },
+  {
+   "collapsible": 1,
+   "collapsible_depends_on": "eval:(doc.status == \"Admitted\")",
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "encounter_details_section",
+   "fieldtype": "Section Break",
+   "label": "Encounter Impression",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "column_break_29",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Table MultiSelect",
+   "label": "Diagnosis",
+   "options": "Patient Encounter Diagnosis",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "followup_date",
+   "fieldtype": "Date",
+   "label": "Follow Up Date"
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval:(doc.status == \"Discharge Scheduled\" || doc.status == \"Discharged\")",
+   "fieldname": "sb_discharge_details",
+   "fieldtype": "Section Break",
+   "label": "Discharge Details"
+  },
+  {
+   "fieldname": "discharge_instructions",
+   "fieldtype": "Small Text",
+   "label": "Discharge Instructions"
+  },
+  {
+   "fieldname": "discharge_ordered_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Discharge Ordered Date",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval:!doc.__islocal;",
+   "fieldname": "rehabilitation_section",
+   "fieldtype": "Section Break",
+   "label": "Rehabilitation",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "therapy_plan",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Therapy Plan",
+   "options": "Therapy Plan",
+   "permlevel": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "therapies",
+   "fieldtype": "Table",
+   "options": "Therapy Plan Detail",
+   "permlevel": 1
+  },
+  {
+   "fieldname": "discharge_datetime",
+   "fieldtype": "Datetime",
+   "label": "Discharge Date",
+   "permlevel": 2
+  },
+  {
+   "fieldname": "discharge_nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Discharge Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "fieldname": "admission_nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Admission Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "fetch_from": "patient.territory",
+   "fieldname": "governorate",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Governorate",
+   "print_hide": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [
+  {
+   "link_doctype": "Nursing Task",
+   "link_fieldname": "reference_name"
+  }
+ ],
+ "modified": "2024-08-25 02:43:59.131380",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Record",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "permlevel": 1,
+   "read": 1,
+   "role": "Physician",
+   "write": 1
+  },
+  {
+   "permlevel": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User"
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "permlevel": 2,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "permlevel": 2,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "permlevel": 2,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient_name",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_record/inpatient_record.py
@@ -0,0 +1,451 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.desk.reportview import get_match_cond
+from frappe.model.document import Document
+from frappe.utils import get_datetime, get_link_to_form, getdate, now_datetime, today
+
+from healthcare.healthcare.doctype.nursing_task.nursing_task import NursingTask
+from healthcare.healthcare.utils import validate_nursing_tasks
+
+
+class InpatientRecord(Document):
+	def after_insert(self):
+		frappe.db.set_value("Patient", self.patient, "inpatient_record", self.name)
+		frappe.db.set_value("Patient", self.patient, "inpatient_status", self.status)
+
+		if self.admission_encounter:  # Update encounter
+			frappe.db.set_value(
+				"Patient Encounter",
+				self.admission_encounter,
+				{"inpatient_record": self.name, "inpatient_status": self.status},
+			)
+
+			filters = {"order_group": self.admission_encounter, "docstatus": 1}
+			medication_requests = frappe.get_all("Medication Request", filters, ["name"])
+			service_requests = frappe.get_all("Service Request", filters, ["name"])
+
+			for service_request in service_requests:
+				frappe.db.set_value(
+					"Service Request",
+					service_request.name,
+					{"inpatient_record": self.name, "inpatient_status": self.status},
+				)
+
+			for medication_request in medication_requests:
+				frappe.db.set_value(
+					"Medication Request",
+					medication_request.name,
+					{"inpatient_record": self.name, "inpatient_status": self.status},
+				)
+
+		if self.admission_nursing_checklist_template:
+			NursingTask.create_nursing_tasks_from_template(
+				template=self.admission_nursing_checklist_template,
+				doc=self,
+			)
+
+	def validate(self):
+		self.validate_dates()
+		self.validate_already_scheduled_or_admitted()
+		if self.status in ["Discharged", "Cancelled"]:
+			frappe.db.set_value(
+				"Patient", self.patient, {"inpatient_status": None, "inpatient_record": None}
+			)
+
+	def validate_dates(self):
+		if (getdate(self.expected_discharge) < getdate(self.scheduled_date)) or (
+			getdate(self.discharge_ordered_date) < getdate(self.scheduled_date)
+		):
+			frappe.throw(_("Expected and Discharge dates cannot be less than Admission Schedule date"))
+
+		for entry in self.inpatient_occupancies:
+			if (
+				entry.check_in
+				and entry.check_out
+				and get_datetime(entry.check_in) > get_datetime(entry.check_out)
+			):
+				frappe.throw(
+					_("Row #{0}: Check Out datetime cannot be less than Check In datetime").format(entry.idx)
+				)
+
+	def validate_already_scheduled_or_admitted(self):
+		query = """
+			select name, status
+			from `tabInpatient Record`
+			where (status = 'Admitted' or status = 'Admission Scheduled')
+			and name != %(name)s and patient = %(patient)s
+			"""
+
+		ip_record = frappe.db.sql(query, {"name": self.name, "patient": self.patient}, as_dict=1)
+
+		if ip_record:
+			msg = _(
+				("Already {0} Patient {1} with Inpatient Record ").format(ip_record[0].status, self.patient)
+				+ """ <b><a href="/app/Form/Inpatient Record/{0}">{0}</a></b>""".format(ip_record[0].name)
+			)
+			frappe.throw(msg)
+
+	@frappe.whitelist()
+	def admit(self, service_unit, check_in, expected_discharge=None):
+		admit_patient(self, service_unit, check_in, expected_discharge)
+
+	@frappe.whitelist()
+	def discharge(self):
+		discharge_patient(self)
+
+	@frappe.whitelist()
+	def transfer(self, service_unit, check_in, leave_from):
+		if leave_from:
+			patient_leave_service_unit(self, check_in, leave_from)
+		if service_unit:
+			transfer_patient(self, service_unit, check_in)
+
+
+@frappe.whitelist()
+def schedule_inpatient(args):
+	admission_order = json.loads(args)  # admission order via Encounter
+	if (
+		not admission_order
+		or not admission_order["patient"]
+		or not admission_order["admission_encounter"]
+	):
+		frappe.throw(_("Missing required details, did not create Inpatient Record"))
+
+	inpatient_record = frappe.new_doc("Inpatient Record")
+
+	# Admission order details
+	set_details_from_ip_order(inpatient_record, admission_order)
+
+	# Patient details
+	patient = frappe.get_doc("Patient", admission_order["patient"])
+	inpatient_record.patient = patient.name
+	inpatient_record.patient_name = patient.patient_name
+	inpatient_record.gender = patient.sex
+	inpatient_record.blood_group = patient.blood_group
+	inpatient_record.dob = patient.dob
+	inpatient_record.mobile = patient.mobile
+	inpatient_record.email = patient.email
+	inpatient_record.phone = patient.phone
+	inpatient_record.scheduled_date = today()
+
+	# Set encounter details
+	encounter = frappe.get_doc("Patient Encounter", admission_order["admission_encounter"])
+	if encounter and encounter.symptoms:  # Symptoms
+		set_ip_child_records(inpatient_record, "chief_complaint", encounter.symptoms)
+
+	if encounter and encounter.diagnosis:  # Diagnosis
+		set_ip_child_records(inpatient_record, "diagnosis", encounter.diagnosis)
+
+	if encounter and encounter.drug_prescription:  # Medication
+		set_ip_child_records(inpatient_record, "drug_prescription", encounter.drug_prescription)
+
+	if encounter and encounter.lab_test_prescription:  # Lab Tests
+		set_ip_child_records(inpatient_record, "lab_test_prescription", encounter.lab_test_prescription)
+
+	if encounter and encounter.procedure_prescription:  # Procedure Prescription
+		set_ip_child_records(
+			inpatient_record, "procedure_prescription", encounter.procedure_prescription
+		)
+
+	if encounter and encounter.therapies:  # Therapies
+		inpatient_record.therapy_plan = encounter.therapy_plan
+		set_ip_child_records(inpatient_record, "therapies", encounter.therapies)
+
+	inpatient_record.status = "Admission Scheduled"
+	inpatient_record.save(ignore_permissions=True)
+
+
+@frappe.whitelist()
+def schedule_discharge(args):
+	discharge_order = json.loads(args)
+	inpatient_record_id = frappe.db.get_value(
+		"Patient", discharge_order["patient"], "inpatient_record"
+	)
+
+	if inpatient_record_id:
+
+		inpatient_record = frappe.get_doc("Inpatient Record", inpatient_record_id)
+		check_out_inpatient(inpatient_record)
+		set_details_from_ip_order(inpatient_record, discharge_order)
+		inpatient_record.status = "Discharge Scheduled"
+		inpatient_record.save(ignore_permissions=True)
+
+		frappe.db.set_value(
+			"Patient", discharge_order["patient"], "inpatient_status", inpatient_record.status
+		)
+		if inpatient_record.discharge_encounter:
+			frappe.db.set_value(
+				"Patient Encounter",
+				inpatient_record.discharge_encounter,
+				"inpatient_status",
+				inpatient_record.status,
+			)
+
+		if inpatient_record.discharge_nursing_checklist_template:
+			NursingTask.create_nursing_tasks_from_template(
+				inpatient_record.discharge_nursing_checklist_template,
+				inpatient_record,
+				start_time=now_datetime(),
+			)
+
+
+def set_details_from_ip_order(inpatient_record, ip_order):
+	for key in ip_order:
+		inpatient_record.set(key, ip_order[key])
+
+
+def set_ip_child_records(inpatient_record, inpatient_record_child, encounter_child):
+	for item in encounter_child:
+		table = inpatient_record.append(inpatient_record_child)
+		for df in table.meta.get("fields"):
+			table.set(df.fieldname, item.get(df.fieldname))
+
+
+def check_out_inpatient(inpatient_record):
+	if inpatient_record.inpatient_occupancies:
+		for inpatient_occupancy in inpatient_record.inpatient_occupancies:
+			if inpatient_occupancy.left != 1:
+				inpatient_occupancy.left = True
+				inpatient_occupancy.check_out = now_datetime()
+				frappe.db.set_value(
+					"Healthcare Service Unit", inpatient_occupancy.service_unit, "occupancy_status", "Vacant"
+				)
+
+
+def discharge_patient(inpatient_record):
+	validate_nursing_tasks(inpatient_record)
+
+	validate_inpatient_invoicing(inpatient_record)
+
+	validate_incompleted_service_requests(inpatient_record)
+
+	inpatient_record.discharge_datetime = now_datetime()
+	inpatient_record.status = "Discharged"
+
+	inpatient_record.save(ignore_permissions=True)
+
+
+def validate_inpatient_invoicing(inpatient_record):
+	if frappe.db.get_single_value("Healthcare Settings", "allow_discharge_despite_unbilled_services"):
+		return
+
+	pending_invoices = get_pending_invoices(inpatient_record)
+
+	if pending_invoices:
+		message = _("Cannot mark Inpatient Record as Discharged since there are unbilled services. ")
+
+		formatted_doc_rows = ""
+
+		for doctype, docnames in pending_invoices.items():
+			formatted_doc_rows += """
+				<td>{0}</td>
+				<td>{1}</td>
+			</tr>""".format(
+				doctype, docnames
+			)
+
+		message += """
+			<table class='table'>
+				<thead>
+					<th>{0}</th>
+					<th>{1}</th>
+				</thead>
+				{2}
+			</table>
+		""".format(
+			_("Healthcare Service"), _("Documents"), formatted_doc_rows
+		)
+
+		frappe.throw(message, title=_("Unbilled Services"), is_minimizable=True, wide=True)
+
+
+def get_pending_invoices(inpatient_record):
+	pending_invoices = {}
+	if inpatient_record.inpatient_occupancies:
+		service_unit_names = False
+		for inpatient_occupancy in inpatient_record.inpatient_occupancies:
+			if not inpatient_occupancy.invoiced:
+				if is_service_unit_billable(inpatient_occupancy.service_unit):
+					if service_unit_names:
+						service_unit_names += ", " + inpatient_occupancy.service_unit
+					else:
+						service_unit_names = inpatient_occupancy.service_unit
+		if service_unit_names:
+			pending_invoices["Inpatient Occupancy"] = service_unit_names
+
+	docs = ["Patient Appointment", "Patient Encounter", "Lab Test", "Clinical Procedure"]
+
+	for doc in docs:
+		doc_name_list = get_unbilled_inpatient_docs(doc, inpatient_record)
+		if doc_name_list:
+			pending_invoices = get_pending_doc(doc, doc_name_list, pending_invoices)
+
+	return pending_invoices
+
+
+def get_pending_doc(doc, doc_name_list, pending_invoices):
+	if doc_name_list:
+		doc_ids = False
+		for doc_name in doc_name_list:
+			doc_link = get_link_to_form(doc, doc_name.name)
+			if doc_ids:
+				doc_ids += ", " + doc_link
+			else:
+				doc_ids = doc_link
+		if doc_ids:
+			pending_invoices[doc] = doc_ids
+
+	return pending_invoices
+
+
+def get_unbilled_inpatient_docs(doc, inpatient_record):
+	filters = {
+		"patient": inpatient_record.patient,
+		"inpatient_record": inpatient_record.name,
+		"docstatus": 1,
+	}
+	if doc in ["Service Request", "Medication Request"]:
+		filters.update(
+			{
+				"billing_status": "Pending",
+			}
+		)
+	else:
+		if doc == "Patient Encounter":
+			filters.update(
+				{
+					"appointment": "",
+				}
+			)
+		else:
+			del filters["docstatus"]
+		filters.update(
+			{
+				"invoiced": 0,
+			}
+		)
+	if doc in ["Lab Test", "Clinical Procedure"]:
+		filters.update(
+			{
+				"service_request": "",
+			}
+		)
+
+	return frappe.db.get_list(
+		doc,
+		filters={
+			"patient": inpatient_record.patient,
+			"inpatient_record": inpatient_record.name,
+			"docstatus": 1,
+			"invoiced": 0,
+		},
+	)
+
+
+def admit_patient(inpatient_record, service_unit, check_in, expected_discharge=None):
+	validate_nursing_tasks(inpatient_record)
+
+	inpatient_record.admitted_datetime = check_in
+	inpatient_record.status = "Admitted"
+	inpatient_record.expected_discharge = expected_discharge
+
+	inpatient_record.set("inpatient_occupancies", [])
+	transfer_patient(inpatient_record, service_unit, check_in)
+
+	frappe.db.set_value(
+		"Patient",
+		inpatient_record.patient,
+		{"inpatient_status": "Admitted", "inpatient_record": inpatient_record.name},
+	)
+
+
+def transfer_patient(inpatient_record, service_unit, check_in):
+	item_line = inpatient_record.append("inpatient_occupancies", {})
+	item_line.service_unit = service_unit
+	item_line.check_in = check_in
+
+	inpatient_record.save(ignore_permissions=True)
+
+	frappe.db.set_value("Healthcare Service Unit", service_unit, "occupancy_status", "Occupied")
+
+
+def patient_leave_service_unit(inpatient_record, check_out, leave_from):
+	if inpatient_record.inpatient_occupancies:
+		for inpatient_occupancy in inpatient_record.inpatient_occupancies:
+			if inpatient_occupancy.left != 1 and inpatient_occupancy.service_unit == leave_from:
+				inpatient_occupancy.left = True
+				inpatient_occupancy.check_out = check_out
+				frappe.db.set_value(
+					"Healthcare Service Unit", inpatient_occupancy.service_unit, "occupancy_status", "Vacant"
+				)
+	inpatient_record.save(ignore_permissions=True)
+
+
+@frappe.whitelist()
+@frappe.validate_and_sanitize_search_inputs
+def get_leave_from(doctype, txt, searchfield, start, page_len, filters):
+	docname = filters["docname"]
+
+	query = """select io.service_unit
+		from `tabInpatient Occupancy` io, `tabInpatient Record` ir
+		where io.parent = '{docname}' and io.parentfield = 'inpatient_occupancies'
+		and io.left!=1 and io.parent = ir.name"""
+
+	return frappe.db.sql(
+		query.format(
+			**{"docname": docname, "searchfield": searchfield, "mcond": get_match_cond(doctype)}
+		),
+		{"txt": "%%%s%%" % txt, "_txt": txt.replace("%", ""), "start": start, "page_len": page_len},
+	)
+
+
+def is_service_unit_billable(service_unit):
+	service_unit_doc = frappe.qb.DocType("Healthcare Service Unit")
+	service_unit_type = frappe.qb.DocType("Healthcare Service Unit Type")
+	result = (
+		frappe.qb.from_(service_unit_doc)
+		.left_join(service_unit_type)
+		.on(service_unit_doc.service_unit_type == service_unit_type.name)
+		.select(service_unit_type.is_billable)
+		.where(service_unit_doc.name == service_unit)
+	).run(as_dict=1)
+	return result[0].get("is_billable", 0)
+
+
+@frappe.whitelist()
+def set_ip_order_cancelled(inpatient_record, reason, encounter=None):
+	inpatient_record = frappe.get_doc("Inpatient Record", inpatient_record)
+	if inpatient_record.status == "Admission Scheduled":
+		inpatient_record.status = "Cancelled"
+		inpatient_record.reason_for_cancellation = reason
+		inpatient_record.save(ignore_permissions=True)
+		encounter_name = encounter if encounter else inpatient_record.admission_encounter
+		if encounter_name:
+			frappe.db.set_value(
+				"Patient Encounter", encounter_name, {"inpatient_status": None, "inpatient_record": None}
+			)
+
+
+def validate_incompleted_service_requests(inpatient_record):
+	filters = {
+		"patient": inpatient_record.patient,
+		"inpatient_record": inpatient_record.name,
+		"docstatus": 1,
+		"status": ["not in", ["Completed"]],
+	}
+
+	service_requests = frappe.db.get_list("Service Request", filters=filters, pluck="name")
+	if service_requests and len(service_requests) > 0:
+		service_requests = [
+			get_link_to_form("Service Request", service_request) for service_request in service_requests
+		]
+		message = _("There are Orders yet to be carried out<br> {0}")
+
+		frappe.throw(message.format(", ".join(service_requests)))
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_record/inpatient_record_list.js
@@ -0,0 +1,17 @@
+// Copyright (c) 2021, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.listview_settings['Inpatient Record'] = {
+	filters: [['status', 'not in', ['Discharged']]],
+	get_indicator: function (doc) {
+		if (doc.status === 'Admission Scheduled') {
+			return [__('Admission Scheduled'), 'red', 'status, =, Admission Scheduled'];
+		} else if (doc.status === 'Admitted') {
+			return [__('Admitted'), 'blue', 'status, =, Admitted'];
+		} else if (doc.status === 'Discharge Scheduled') {
+			return [__('Discharge Scheduled'), 'orange', 'status, =, Discharge Scheduled'];
+		}  else if (doc.status === 'Discharged') {
+			return [__('Discharged'), 'green', 'status, =, Discharged'];
+		}
+	}
+};
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/inpatient_record/test_inpatient_record.py
@@ -0,0 +1,219 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import now_datetime, today
+from frappe.utils.make_random import get_random
+
+from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+	admit_patient,
+	discharge_patient,
+	schedule_discharge,
+)
+from healthcare.healthcare.doctype.lab_test.test_lab_test import create_patient_encounter
+from healthcare.healthcare.utils import get_encounters_to_invoice
+
+
+class TestInpatientRecord(FrappeTestCase):
+	def test_admit_and_discharge(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		patient = create_patient()
+		# Schedule Admission
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+		self.assertEqual(ip_record.name, frappe.db.get_value("Patient", patient, "inpatient_record"))
+		self.assertEqual(ip_record.status, frappe.db.get_value("Patient", patient, "inpatient_status"))
+
+		# Admit
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+		self.assertEqual("Admitted", frappe.db.get_value("Patient", patient, "inpatient_status"))
+		self.assertEqual(
+			"Occupied", frappe.db.get_value("Healthcare Service Unit", service_unit, "occupancy_status")
+		)
+
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": patient}))
+		self.assertEqual(
+			"Vacant", frappe.db.get_value("Healthcare Service Unit", service_unit, "occupancy_status")
+		)
+
+		ip_record1 = frappe.get_doc("Inpatient Record", ip_record.name)
+		# Validate Pending Invoices
+		self.assertRaises(frappe.ValidationError, ip_record.discharge)
+		mark_invoiced_inpatient_occupancy(ip_record1)
+
+		discharge_patient(ip_record1)
+
+		self.assertEqual(None, frappe.db.get_value("Patient", patient, "inpatient_record"))
+		self.assertEqual(None, frappe.db.get_value("Patient", patient, "inpatient_status"))
+
+	def test_allow_discharge_despite_unbilled_services(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		setup_inpatient_settings(key="allow_discharge_despite_unbilled_services", value=1)
+		patient = create_patient()
+		# Schedule Admission
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+
+		# Admit
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": patient}))
+		self.assertEqual(
+			"Vacant", frappe.db.get_value("Healthcare Service Unit", service_unit, "occupancy_status")
+		)
+
+		ip_record = frappe.get_doc("Inpatient Record", ip_record.name)
+		# Should not validate Pending Invoices
+		ip_record.discharge()
+
+		self.assertEqual(None, frappe.db.get_value("Patient", patient, "inpatient_record"))
+		self.assertEqual(None, frappe.db.get_value("Patient", patient, "inpatient_status"))
+
+		setup_inpatient_settings(key="allow_discharge_despite_unbilled_services", value=0)
+
+	def test_do_not_bill_patient_encounters_for_inpatients(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		setup_inpatient_settings(key="do_not_bill_inpatient_encounters", value=1)
+		patient = create_patient()
+		# Schedule Admission
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+
+		# Admit
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+
+		# Patient Encounter
+		patient_encounter = create_patient_encounter()
+		encounters = get_encounters_to_invoice(patient, "_Test Company")
+		encounter_ids = [entry.reference_name for entry in encounters]
+		self.assertFalse(patient_encounter.name in encounter_ids)
+
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": patient}))
+		self.assertEqual(
+			"Vacant", frappe.db.get_value("Healthcare Service Unit", service_unit, "occupancy_status")
+		)
+
+		ip_record = frappe.get_doc("Inpatient Record", ip_record.name)
+		mark_invoiced_inpatient_occupancy(ip_record)
+		discharge_patient(ip_record)
+		setup_inpatient_settings(key="do_not_bill_inpatient_encounters", value=0)
+
+	def test_validate_overlap_admission(self):
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		patient = create_patient()
+
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+		ip_record_new = create_inpatient(patient)
+		ip_record_new.expected_length_of_stay = 0
+		self.assertRaises(frappe.ValidationError, ip_record_new.save)
+
+		service_unit = get_healthcare_service_unit()
+		admit_patient(ip_record, service_unit, now_datetime())
+		ip_record_new = create_inpatient(patient)
+		self.assertRaises(frappe.ValidationError, ip_record_new.save)
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+
+
+def mark_invoiced_inpatient_occupancy(ip_record):
+	if ip_record.inpatient_occupancies:
+		for inpatient_occupancy in ip_record.inpatient_occupancies:
+			inpatient_occupancy.invoiced = 1
+		ip_record.save(ignore_permissions=True)
+
+
+def setup_inpatient_settings(key, value):
+	settings = frappe.get_single("Healthcare Settings")
+	settings.set(key, value)
+	settings.save()
+
+
+def create_inpatient(patient):
+	patient_obj = frappe.get_doc("Patient", patient)
+	inpatient_record = frappe.new_doc("Inpatient Record")
+	inpatient_record.patient = patient
+	inpatient_record.patient_name = patient_obj.patient_name
+	inpatient_record.gender = patient_obj.sex
+	inpatient_record.blood_group = patient_obj.blood_group
+	inpatient_record.dob = patient_obj.dob
+	inpatient_record.mobile = patient_obj.mobile
+	inpatient_record.email = patient_obj.email
+	inpatient_record.phone = patient_obj.phone
+	inpatient_record.inpatient = "Scheduled"
+	inpatient_record.scheduled_date = today()
+	inpatient_record.company = "_Test Company"
+	return inpatient_record
+
+
+def get_healthcare_service_unit(unit_name=None):
+	if not unit_name:
+		service_unit = get_random(
+			"Healthcare Service Unit", filters={"inpatient_occupancy": 1, "company": "_Test Company"}
+		)
+	else:
+		service_unit = frappe.db.exists(
+			"Healthcare Service Unit", {"healthcare_service_unit_name": unit_name}
+		)
+
+	if not service_unit:
+		service_unit = frappe.new_doc("Healthcare Service Unit")
+		service_unit.healthcare_service_unit_name = unit_name or "_Test Service Unit Ip Occupancy"
+		service_unit.company = "_Test Company"
+		service_unit.service_unit_type = get_service_unit_type()
+		service_unit.inpatient_occupancy = 1
+		service_unit.occupancy_status = "Vacant"
+		service_unit.is_group = 0
+		service_unit_parent_name = frappe.db.exists(
+			{
+				"doctype": "Healthcare Service Unit",
+				"healthcare_service_unit_name": "_Test All Healthcare Service Units",
+				"is_group": 1,
+			}
+		)
+		if not service_unit_parent_name:
+			parent_service_unit = frappe.new_doc("Healthcare Service Unit")
+			parent_service_unit.healthcare_service_unit_name = "_Test All Healthcare Service Units"
+			parent_service_unit.is_group = 1
+			parent_service_unit.save(ignore_permissions=True)
+			service_unit.parent_healthcare_service_unit = parent_service_unit.name
+		else:
+			service_unit.parent_healthcare_service_unit = service_unit_parent_name
+		service_unit.save(ignore_permissions=True)
+		return service_unit.name
+	return service_unit
+
+
+def get_service_unit_type():
+	service_unit_type = get_random("Healthcare Service Unit Type", filters={"inpatient_occupancy": 1})
+
+	if not service_unit_type:
+		service_unit_type = frappe.new_doc("Healthcare Service Unit Type")
+		service_unit_type.service_unit_type = "_Test Service Unit Type Ip Occupancy"
+		service_unit_type.inpatient_occupancy = 1
+		service_unit_type.save(ignore_permissions=True)
+		return service_unit_type.name
+	return service_unit_type
+
+
+def create_patient():
+	patient = frappe.db.exists("Patient", "_Test IPD Patient")
+	if not patient:
+		patient = frappe.new_doc("Patient")
+		patient.first_name = "_Test IPD Patient"
+		patient.sex = "Female"
+		patient.save(ignore_permissions=True)
+		patient = patient.name
+	return patient
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_prescription/lab_prescription.json
@@ -0,0 +1,125 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2016-09-16 16:53:06.882970",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "lab_test_code",
+  "observation_template",
+  "lab_test_name",
+  "invoiced",
+  "service_request",
+  "column_break_4",
+  "lab_test_comment",
+  "lab_test_created",
+  "section_break_pkty",
+  "patient_care_type",
+  "column_break_on3b",
+  "intent",
+  "priority"
+ ],
+ "fields": [
+  {
+   "fieldname": "lab_test_code",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Lab Test",
+   "options": "Lab Test Template"
+  },
+  {
+   "depends_on": "lab_test_code;",
+   "fetch_from": "lab_test_code.lab_test_name",
+   "fieldname": "lab_test_name",
+   "fieldtype": "Data",
+   "label": "Lab Test Name"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "lab_test_comment",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Comments"
+  },
+  {
+   "default": "0",
+   "fieldname": "lab_test_created",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Test Created",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "section_break_pkty",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "column_break_on3b",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "service_request",
+   "fieldtype": "Data",
+   "label": "Service Request",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "observation_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Observation",
+   "options": "Observation Template"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2024-06-23 05:28:10.752502",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Prescription",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_prescription/lab_prescription.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class LabPrescription(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test/lab_test.js
@@ -0,0 +1,324 @@
+// Copyright (c) 2016, ESS and contributors
+// For license information, please see license.txt
+
+cur_frm.cscript.custom_refresh = function (doc) {
+	cur_frm.toggle_display('sb_sensitivity', doc.sensitivity_toggle);
+	cur_frm.toggle_display('organisms_section', doc.descriptive_toggle);
+	cur_frm.toggle_display('sb_descriptive', doc.descriptive_toggle);
+	cur_frm.toggle_display('sb_normal', doc.normal_toggle);
+	cur_frm.toggle_display('sb_descriptive_result', doc.imaging_toggle);
+};
+
+frappe.ui.form.on('Lab Test', {
+	setup: function (frm) {
+		frm.get_field('normal_test_items').grid.editable_fields = [
+			{ fieldname: 'lab_test_name', columns: 3 },
+			{ fieldname: 'lab_test_event', columns: 2 },
+			{ fieldname: 'result_value', columns: 2 },
+			{ fieldname: 'lab_test_uom', columns: 1 },
+			{ fieldname: 'normal_range', columns: 2 }
+		];
+		frm.get_field('descriptive_test_items').grid.editable_fields = [
+			{ fieldname: 'lab_test_particulars', columns: 3 },
+			{ fieldname: 'result_value', columns: 7 }
+		];
+
+		frm.set_query('service_request', function() {
+			return {
+				filters: {
+					'patient': frm.doc.patient,
+					'status': 'Active',
+					'docstatus': 1,
+					'template_dt': 'Lab Test template'
+				}
+			};
+		});
+	},
+
+	refresh: function (frm) {
+		refresh_field('normal_test_items');
+		refresh_field('descriptive_test_items');
+		if (frm.doc.__islocal) {
+			frm.add_custom_button(__('Get from Patient Encounter'), function () {
+				get_lab_test_prescribed(frm);
+			});
+		}
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+
+		if (frappe.defaults.get_default('lab_test_approval_required') && frappe.user.has_role('LabTest Approver')) {
+			if (frm.doc.docstatus === 1 && frm.doc.status !== 'Approved' && frm.doc.status !== 'Rejected') {
+				frm.add_custom_button(__('Approve'), function () {
+					status_update(1, frm);
+				}, __('Actions'));
+				frm.add_custom_button(__('Reject'), function () {
+					status_update(0, frm);
+				}, __('Actions'));
+			}
+		}
+
+		if (frm.doc.docstatus === 1 && frm.doc.sms_sent === 0 && frm.doc.status !== 'Rejected' ) {
+			frm.add_custom_button(__('Send SMS'), function () {
+				frappe.call({
+					method: 'healthcare.healthcare.doctype.healthcare_settings.healthcare_settings.get_sms_text',
+					args: { doc: frm.doc.name },
+					callback: function (r) {
+						if (!r.exc) {
+							var emailed = r.message.emailed;
+							var printed = r.message.printed;
+							make_dialog(frm, emailed, printed);
+						}
+					}
+				});
+			});
+		}
+	},
+
+	template: function(frm) {
+		if (frm.doc.template) {
+			frappe.call({
+				"method": "healthcare.healthcare.utils.get_medical_codes",
+				args: {
+					template_dt: "Lab Test Template",
+					template_dn: frm.doc.template,
+				},
+				callback: function(r) {
+					if (!r.exc && r.message) {
+						frm.doc.codification_table = []
+						$.each(r.message, function(k, val) {
+							if (val.code_value) {
+								var child = cur_frm.add_child("codification_table");
+								child.code_value = val.code_value
+								child.code_system = val.code_system
+								child.code = val.code
+								child.description = val.description
+								child.system = val.system
+							}
+						});
+						frm.refresh_field("codification_table");
+					} else {
+						frm.clear_table("codification_table")
+						frm.refresh_field("codification_table");
+					}
+				}
+			})
+		} else {
+			frm.clear_table("codification_table")
+			frm.refresh_field("codification_table");
+		}
+	}
+});
+
+
+frappe.ui.form.on('Lab Test', 'patient', function (frm) {
+	if (frm.doc.patient) {
+		frappe.call({
+			'method': 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+			args: { patient: frm.doc.patient },
+			callback: function (data) {
+				var age = null;
+				if (data.message.dob) {
+					age = calculate_age(data.message.dob);
+				}
+				let values = {
+					'patient_age': age,
+					'patient_sex': data.message.sex,
+					'email': data.message.email,
+					'mobile': data.message.mobile,
+					'report_preference': data.message.report_preference
+				};
+				frm.set_value(values);
+			}
+		});
+	}
+});
+
+frappe.ui.form.on('Normal Test Result', {
+	normal_test_items_remove: function () {
+		frappe.msgprint(__('Not permitted, configure Lab Test Template as required'));
+		cur_frm.reload_doc();
+	}
+});
+
+frappe.ui.form.on('Descriptive Test Result', {
+	descriptive_test_items_remove: function () {
+		frappe.msgprint(__('Not permitted, configure Lab Test Template as required'));
+		cur_frm.reload_doc();
+	}
+});
+
+var status_update = function (approve, frm) {
+	var doc = frm.doc;
+	var status = null;
+	if (approve == 1) {
+		status = 'Approved';
+	}
+	else {
+		status = 'Rejected';
+	}
+	frappe.call({
+		method: 'healthcare.healthcare.doctype.lab_test.lab_test.update_status',
+		args: { status: status, name: doc.name },
+		callback: function () {
+			cur_frm.reload_doc();
+		}
+	});
+};
+
+var get_lab_test_prescribed = function (frm) {
+	if (frm.doc.patient) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.lab_test.lab_test.get_lab_test_prescribed',
+			args: { patient: frm.doc.patient },
+			callback: function (r) {
+				show_lab_tests(frm, r.message);
+			}
+		});
+	}
+	else {
+		frappe.msgprint(__('Please select Patient to get Lab Tests'));
+	}
+};
+
+var show_lab_tests = function (frm, lab_test_list) {
+	var d = new frappe.ui.Dialog({
+		title: __('Lab Tests'),
+		fields: [{
+			fieldtype: 'HTML', fieldname: 'lab_test'
+		}]
+	});
+	var html_field = d.fields_dict.lab_test.$wrapper;
+	html_field.empty();
+	$.each(lab_test_list, function (x, y) {
+		var row = $(repl(
+			'<div class="col-xs-12 row" style="padding-top:12px;">\
+			<div class="col-xs-3"> %(lab_test)s </div>\
+			<div class="col-xs-4">%(encounter)s</div>\
+			<div class="col-xs-3"> %(date)s </div>\
+			<div class="col-xs-1">\
+				<a data-name="%(name)s" data-lab-test="%(lab_test)s"\
+				data-encounter="%(encounter)s" data-practitioner="%(practitioner)s" \
+				data-invoiced="%(invoiced)s" data-source="%(source)s"\
+				data-referring-practitioner="%(referring_practitioner)s" href="#"><button class="btn btn-default btn-xs">Get</button></a>\
+			</div>\
+		</div><hr>',
+		{ lab_test: y[0], encounter: y[1], invoiced: y[2], practitioner: y[3], date: y[4],
+			name: y[5]})
+		).appendTo(html_field);
+		row.find("a").click(function () {
+			frm.doc.template = $(this).attr('data-lab-test');
+			frm.doc.service_request = $(this).attr('data-name');
+			console.log($(this).attr('data-name'))
+			frm.doc.practitioner = $(this).attr('data-practitioner');
+			frm.set_df_property('template', 'read_only', 1);
+			frm.set_df_property('patient', 'read_only', 1);
+			frm.set_df_property('practitioner', 'read_only', 1);
+			frm.doc.invoiced = 0;
+			if ($(this).attr('data-invoiced') === 1) {
+				frm.doc.invoiced = 1;
+			}
+			refresh_field('invoiced');
+			refresh_field('template');
+			frm.refresh_field('service_request');
+			d.hide();
+			return false;
+		});
+	});
+	if (!lab_test_list.length) {
+		var msg = __('No Lab Tests found for the Patient {0}', [frm.doc.patient_name.bold()]);
+		html_field.empty();
+		$(repl('<div class="col-xs-12" style="padding-top:0px;" >%(msg)s</div>', { msg: msg })).appendTo(html_field);
+	}
+	d.show();
+};
+
+var make_dialog = function (frm, emailed, printed) {
+	var number = frm.doc.mobile;
+
+	var dialog = new frappe.ui.Dialog({
+		title: 'Send SMS',
+		width: 400,
+		fields: [
+			{ fieldname: 'result_format', fieldtype: 'Select', label: 'Result Format', options: ['Emailed', 'Printed'] },
+			{ fieldname: 'number', fieldtype: 'Data', label: 'Mobile Number', reqd: 1 },
+			{ fieldname: 'message', fieldtype: 'Small Text', label: 'Message', reqd: 1 }
+		],
+		primary_action_label: __('Send'),
+		primary_action: function () {
+			var values = dialog.fields_dict;
+			if (!values) {
+				return;
+			}
+			send_sms(values, frm);
+			dialog.hide();
+		}
+	});
+	if (frm.doc.report_preference === 'Print') {
+		dialog.set_values({
+			'result_format': 'Printed',
+			'number': number,
+			'message': printed
+		});
+	} else {
+		dialog.set_values({
+			'result_format': 'Emailed',
+			'number': number,
+			'message': emailed
+		});
+	}
+	var fd = dialog.fields_dict;
+	$(fd.result_format.input).change(function () {
+		if (dialog.get_value('result_format') === 'Emailed') {
+			dialog.set_values({
+				'number': number,
+				'message': emailed
+			});
+		} else {
+			dialog.set_values({
+				'number': number,
+				'message': printed
+			});
+		}
+	});
+	dialog.show();
+};
+
+var send_sms = function (vals, frm) {
+	var number = vals.number.value;
+	var message = vals.message.last_value;
+
+	if (!number || !message) {
+		frappe.throw(__('Did not send SMS, missing patient mobile number or message content.'));
+	}
+	frappe.call({
+		method: 'frappe.core.doctype.sms_settings.sms_settings.send_sms',
+		args: {
+			receiver_list: [number],
+			msg: message
+		},
+		callback: function (r) {
+			if (r.exc) {
+				frappe.msgprint(r.exc);
+			} else {
+				frm.reload_doc();
+			}
+		}
+	});
+};
+
+var calculate_age = function (dob) {
+	var ageMS = Date.parse(Date()) - Date.parse(dob);
+	var age = new Date();
+	age.setTime(ageMS);
+	var years = age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test/lab_test.json
@@ -0,0 +1,728 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2016-03-29 17:34:47.509094",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "template",
+  "lab_test_name",
+  "lab_test_group",
+  "department",
+  "lab_test_flow",
+  "order_by",
+  "orderd_at",
+  "ordered_from",
+  "column_break_26",
+  "company",
+  "status",
+  "date",
+  "time",
+  "submitted_date",
+  "result_date",
+  "approved_date",
+  "expected_result_date",
+  "expected_result_time",
+  "printed_on",
+  "sb_first",
+  "patient",
+  "patient_name",
+  "patient_age",
+  "patient_sex",
+  "inpatient_record",
+  "report_preference",
+  "email",
+  "mobile",
+  "c_b",
+  "service_unit",
+  "practitioner",
+  "practitioner_name",
+  "requesting_department",
+  "employee",
+  "employee_name",
+  "employee_designation",
+  "user",
+  "sample",
+  "sb_normal",
+  "lab_test_html",
+  "normal_test_items",
+  "sb_descriptive_result",
+  "descriptive_result",
+  "sb_descriptive",
+  "descriptive_test_items",
+  "organisms_section",
+  "organism_test_items",
+  "sb_sensitivity",
+  "sensitivity_test_items",
+  "sb_comments",
+  "lab_test_comment",
+  "sb_customresult",
+  "custom_result",
+  "medical_coding_section",
+  "codification_table",
+  "worksheet_section",
+  "worksheet_instructions",
+  "result_legend_section",
+  "legend_print_position",
+  "result_legend",
+  "more_information_section",
+  "service_request",
+  "invoiced",
+  "section_break_50",
+  "email_sent",
+  "sms_sent",
+  "printed",
+  "normal_toggle",
+  "imaging_toggle",
+  "descriptive_toggle",
+  "sensitivity_toggle",
+  "amended_from",
+  "prescription"
+ ],
+ "fields": [
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-LAB-.YYYY.-",
+   "print_hide": 1,
+   "report_hide": 1,
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Age",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1,
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Requesting Practitioner",
+   "no_copy": 1,
+   "options": "Healthcare Practitioner",
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.email",
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Email",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "patient.mobile",
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Mobile",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "c_b",
+   "fieldtype": "Column Break",
+   "print_hide": 1
+  },
+  {
+   "fetch_from": "template.department",
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Department",
+   "options": "Medical Department",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Status",
+   "options": "Draft\nCompleted\nApproved\nRejected\nCancelled",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "submitted_date",
+   "fieldtype": "Datetime",
+   "label": "Submitted Date",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "approved_date",
+   "fieldtype": "Datetime",
+   "hidden": 1,
+   "label": "Approved Date",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_filter": 1,
+   "label": "Sample ID",
+   "options": "Sample Collection",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "Today",
+   "fieldname": "expected_result_date",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "label": "Expected Result Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "expected_result_time",
+   "fieldtype": "Time",
+   "hidden": 1,
+   "label": "Expected Result Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "result_date",
+   "fieldtype": "Date",
+   "label": "Result Date",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "printed_on",
+   "fieldtype": "Datetime",
+   "label": "Printed on",
+   "read_only": 1
+  },
+  {
+   "fieldname": "employee",
+   "fieldtype": "Link",
+   "label": "Employee (Lab Technician)",
+   "no_copy": 1,
+   "options": "Employee",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "employee.employee_name",
+   "fieldname": "employee_name",
+   "fieldtype": "Data",
+   "label": "Lab Technician Name",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "employee.designation",
+   "fieldname": "employee_designation",
+   "fieldtype": "Data",
+   "label": "Lab Technician Designation",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "user",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "User",
+   "no_copy": 1,
+   "options": "User",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "patient.report_preference",
+   "fieldname": "report_preference",
+   "fieldtype": "Data",
+   "label": "Report Preference",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "sb_first",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "lab_test_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Test Name",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "template",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Test Template",
+   "options": "Lab Test Template",
+   "print_hide": 1,
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "lab_test_group",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Test Group",
+   "options": "Item Group",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "sb_normal",
+   "fieldtype": "Section Break",
+   "label": "Compound Test Result"
+  },
+  {
+   "fieldname": "normal_test_items",
+   "fieldtype": "Table",
+   "label": "Normal Test Result",
+   "options": "Normal Test Result"
+  },
+  {
+   "fieldname": "lab_test_html",
+   "fieldtype": "HTML"
+  },
+  {
+   "depends_on": "descriptive_toggle",
+   "fieldname": "organisms_section",
+   "fieldtype": "Section Break",
+   "label": "Organism Test Result"
+  },
+  {
+   "fieldname": "sb_sensitivity",
+   "fieldtype": "Section Break",
+   "label": "Sensitivity Test Result"
+  },
+  {
+   "fieldname": "sensitivity_test_items",
+   "fieldtype": "Table",
+   "label": "Sensitivity Test Result",
+   "options": "Sensitivity Test Result",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "sb_comments",
+   "fieldtype": "Section Break",
+   "label": "Comments"
+  },
+  {
+   "fieldname": "lab_test_comment",
+   "fieldtype": "Text",
+   "ignore_xss_filter": 1,
+   "label": "Comments",
+   "print_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "sb_customresult",
+   "fieldtype": "Section Break",
+   "label": "Custom Result"
+  },
+  {
+   "fieldname": "custom_result",
+   "fieldtype": "Text Editor",
+   "ignore_xss_filter": 1,
+   "label": "Custom Result",
+   "print_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "email_sent",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "sms_sent",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "printed",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "normal_toggle",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "sensitivity_toggle",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Lab Test",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "prescription",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Prescription",
+   "no_copy": 1,
+   "options": "Lab Prescription",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "column_break_26",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "requesting_department",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Requesting Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "label": "Requesting Practitioner",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "result_legend_section",
+   "fieldtype": "Section Break",
+   "label": "Result Legend Print"
+  },
+  {
+   "fieldname": "legend_print_position",
+   "fieldtype": "Select",
+   "label": "Print Position",
+   "options": "\nBottom\nTop\nBoth",
+   "print_hide": 1
+  },
+  {
+   "fieldname": "result_legend",
+   "fieldtype": "Text Editor",
+   "label": "Result Legend",
+   "print_hide": 1
+  },
+  {
+   "fieldname": "section_break_50",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "worksheet_instructions",
+   "fieldtype": "Text Editor",
+   "label": "Worksheet Instructions",
+   "print_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "worksheet_section",
+   "fieldtype": "Section Break",
+   "label": "Worksheet Print"
+  },
+  {
+   "fieldname": "descriptive_test_items",
+   "fieldtype": "Table",
+   "label": "Descriptive Test Result",
+   "options": "Descriptive Test Result",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "sb_descriptive",
+   "fieldtype": "Section Break",
+   "label": "Descriptive Test Result"
+  },
+  {
+   "default": "0",
+   "fieldname": "descriptive_toggle",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "organism_test_items",
+   "fieldtype": "Table",
+   "label": "Organism Test Result",
+   "options": "Organism Test Result",
+   "print_hide": 1
+  },
+  {
+   "fieldname": "descriptive_result",
+   "fieldtype": "Text Editor",
+   "label": "Descriptive Result"
+  },
+  {
+   "fieldname": "sb_descriptive_result",
+   "fieldtype": "Section Break",
+   "label": "Descriptive Result"
+  },
+  {
+   "default": "0",
+   "fieldname": "imaging_toggle",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Date"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "time",
+   "fieldtype": "Time",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Time"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "more_information_section",
+   "fieldtype": "Section Break",
+   "label": "More Information"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_coding_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Service Request",
+   "no_copy": 1,
+   "options": "Service Request",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "lab_test_flow",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Lab Test Flow",
+   "options": "Requested\nCollected\nTrasmiting\nTransmited\nAccepted\nRejected\nCenterFusion\nProcessing\nResult Finished"
+  },
+  {
+   "fetch_from": "service_request.practitioner",
+   "fieldname": "order_by",
+   "fieldtype": "Data",
+   "label": "Order By",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.order_date",
+   "fieldname": "orderd_at",
+   "fieldtype": "Data",
+   "label": "Ordered At",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "service_request.healthcare_service_unit_type",
+   "fieldname": "ordered_from",
+   "fieldtype": "Data",
+   "label": "Ordered From",
+   "read_only": 1
+  }
+ ],
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Nursing Task",
+   "link_fieldname": "reference_name"
+  }
+ ],
+ "modified": "2024-08-20 11:45:19.885335",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 1,
+   "cancel": 1,
+   "create": 1,
+   "email": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "LabTest Approver",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "select": 1,
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient,practitioner,lab_test_name,sample",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test/lab_test.py
@@ -0,0 +1,450 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import get_link_to_form, getdate, now_datetime
+
+from healthcare.healthcare.doctype.nursing_task.nursing_task import NursingTask
+from healthcare.healthcare.doctype.service_request.service_request import (
+	update_service_request_status,
+)
+
+
+class LabTest(Document):
+	def validate(self):
+		if not self.is_new():
+			self.set_secondary_uom_result()
+
+	def on_submit(self):
+		from healthcare.healthcare.utils import validate_nursing_tasks
+
+		validate_nursing_tasks(self)
+		self.validate_result_values()
+		self.db_set("submitted_date", getdate())
+		self.db_set("status", "Completed")
+
+		if self.service_request:
+			frappe.db.set_value(
+				"Service Request", self.service_request, "status", "completed-Request Status"
+			)
+
+	def on_cancel(self):
+		self.db_set("status", "Cancelled")
+		if self.service_request:
+			frappe.db.set_value("Service Request", self.service_request, "status", "active-Request Status")
+		self.reload()
+
+	def on_update(self):
+		if self.sensitivity_test_items:
+			sensitivity = sorted(self.sensitivity_test_items, key=lambda x: x.antibiotic_sensitivity)
+			for i, item in enumerate(sensitivity):
+				item.idx = i + 1
+			self.sensitivity_test_items = sensitivity
+
+	def after_insert(self):
+		if self.service_request:
+			update_service_request_status(self.service_request, self.doctype, self.name)
+			billing_status = frappe.db.get_value("Service Request", self.service_request, "billing_status")
+			if billing_status == "Invoiced":
+				self.db_set("invoiced", True)
+
+		if self.template:
+			self.load_test_from_template()
+			self.reload()
+
+			# create nursing tasks
+			template = frappe.db.get_value("Lab Test Template", self.template, "nursing_checklist_template")
+			if template:
+				NursingTask.create_nursing_tasks_from_template(template, self, start_time=now_datetime())
+
+	def load_test_from_template(self):
+		lab_test = self
+		create_test_from_template(lab_test)
+		self.reload()
+
+	def set_secondary_uom_result(self):
+		for item in self.normal_test_items:
+			if item.result_value and item.secondary_uom and item.conversion_factor:
+				try:
+					item.secondary_uom_result = float(item.result_value) * float(item.conversion_factor)
+				except Exception:
+					item.secondary_uom_result = ""
+					frappe.msgprint(
+						_("Row #{0}: Result for Secondary UOM not calculated").format(item.idx), title=_("Warning")
+					)
+
+	def validate_result_values(self):
+		if self.normal_test_items:
+			for item in self.normal_test_items:
+				if not item.result_value and not item.allow_blank and item.require_result_value:
+					frappe.throw(
+						_("Row #{0}: Please enter the result value for {1}").format(
+							item.idx, frappe.bold(item.lab_test_name)
+						),
+						title=_("Mandatory Results"),
+					)
+
+		if self.descriptive_test_items:
+			for item in self.descriptive_test_items:
+				if not item.result_value and not item.allow_blank and item.require_result_value:
+					frappe.throw(
+						_("Row #{0}: Please enter the result value for {1}").format(
+							item.idx, frappe.bold(item.lab_test_particulars)
+						),
+						title=_("Mandatory Results"),
+					)
+
+
+def before_insert(self):
+	if self.service_request:
+		lab_test = frappe.db.exists(
+			"Lab Test",
+			{"service_request": self.service_request, "docstatus": ["!=", 2]},
+		)
+		if lab_test:
+			frappe.throw(
+				_("Lab Test {0} already created from service request {1}").format(
+					frappe.bold(get_link_to_form("Lab Test", lab_test)),
+					frappe.bold(get_link_to_form("Service Request", self.service_request)),
+				),
+				title=_("Already Exist"),
+			)
+
+
+def create_test_from_template(lab_test):
+	template = frappe.get_doc("Lab Test Template", lab_test.template)
+	patient = frappe.get_doc("Patient", lab_test.patient)
+
+	lab_test.lab_test_name = template.lab_test_name
+	lab_test.result_date = getdate()
+	lab_test.department = template.department
+	lab_test.lab_test_group = template.lab_test_group
+	lab_test.legend_print_position = template.legend_print_position
+	lab_test.result_legend = template.result_legend
+	lab_test.worksheet_instructions = template.worksheet_instructions
+
+	lab_test = create_sample_collection(lab_test, template, patient, None)
+	load_result_format(lab_test, template, None, None)
+
+
+@frappe.whitelist()
+def update_status(status, name):
+	if name and status:
+		frappe.db.set_value("Lab Test", name, {"status": status, "approved_date": getdate()})
+
+
+@frappe.whitelist()
+def create_multiple(doctype, docname):
+	if not doctype or not docname:
+		frappe.throw(
+			_("Sales Invoice or Patient Encounter is required to create Lab Tests"),
+			title=_("Insufficient Data"),
+		)
+
+	lab_test_created = False
+	if doctype == "Sales Invoice":
+		lab_test_created = create_lab_test_from_invoice(docname)
+	elif doctype == "Patient Encounter":
+		lab_test_created = create_lab_test_from_encounter(docname)
+
+	if lab_test_created:
+		frappe.msgprint(
+			_("Lab Test(s) {0} created successfully").format(lab_test_created), indicator="green"
+		)
+
+
+def create_lab_test_from_encounter(encounter):
+	lab_test_created = False
+	encounter = frappe.get_doc("Patient Encounter", encounter)
+
+	if encounter:
+		patient = frappe.get_doc("Patient", encounter.patient)
+		service_requests = frappe.db.get_list(
+			"Service Request",
+			filters={
+				"order_group": encounter.name,
+				"status": ["!=", "completed-Request Status"],
+				"template_dt": "Lab Test Template",
+			},
+			fields=["name"],
+		)
+		if service_requests:
+			for service_request in service_requests:
+				service_request_doc = frappe.get_doc("Service Request", service_request)
+				template = get_lab_test_template(service_request_doc.template_dn)
+				if template:
+					lab_test = create_lab_test_doc(
+						encounter.practitioner,
+						patient,
+						template,
+						encounter.company,
+						1 if service_request_doc.billing_status == "Invoiced" else 0,
+					)
+					lab_test.service_request = service_request_doc.name
+					lab_test.save(ignore_permissions=True)
+					# frappe.db.set_value("Service Request", service_request_doc.name, "status", "Scheduled")
+					if not lab_test_created:
+						lab_test_created = lab_test.name
+					else:
+						lab_test_created += ", " + lab_test.name
+	return lab_test_created
+
+
+def create_lab_test_from_invoice(sales_invoice):
+	lab_tests_created = False
+	invoice = frappe.get_doc("Sales Invoice", sales_invoice)
+	if invoice and invoice.patient:
+		patient = frappe.get_doc("Patient", invoice.patient)
+		for item in invoice.items:
+			lab_test_created = 0
+			if item.reference_dt == "Service Request":
+
+				lab_test_created = (
+					1 if frappe.db.exists("Lab Test", {"service_request": item.reference_dn}) else 0
+				)
+			elif item.reference_dt == "Lab Test":
+				lab_test_created = 1
+			if lab_test_created != 1:
+				template = get_lab_test_template(item.item_code)
+				if template:
+					lab_test = create_lab_test_doc(
+						invoice.ref_practitioner, patient, template, invoice.company, True, item.service_unit
+					)
+					if item.reference_dt == "Service Request":
+						lab_test.service_request = item.reference_dn
+					lab_test.save(ignore_permissions=True)
+					if item.reference_dt != "Service Request":
+						frappe.db.set_value(
+							"Sales Invoice Item",
+							item.name,
+							{"reference_dt": "Lab Test", "reference_dn": lab_test.name},
+						)
+					if not lab_tests_created:
+						lab_tests_created = lab_test.name
+					else:
+						lab_tests_created += ", " + lab_test.name
+	return lab_tests_created
+
+
+def get_lab_test_template(item):
+	template_id = frappe.db.exists("Lab Test Template", {"item": item})
+	if template_id:
+		return frappe.get_doc("Lab Test Template", template_id)
+	return False
+
+
+def create_lab_test_doc(
+	practitioner, patient, template, company, invoiced=False, service_unit=None
+):
+	lab_test = frappe.new_doc("Lab Test")
+	lab_test.invoiced = invoiced
+	lab_test.practitioner = practitioner
+	lab_test.patient = patient.name
+	lab_test.patient_age = patient.get_age()
+	lab_test.patient_sex = patient.sex
+	lab_test.email = patient.email
+	lab_test.mobile = patient.mobile
+	lab_test.report_preference = patient.report_preference
+	lab_test.department = template.department
+	lab_test.template = template.name
+	lab_test.lab_test_group = template.lab_test_group
+	lab_test.result_date = getdate()
+	lab_test.company = company
+	lab_test.service_unit = service_unit
+	return lab_test
+
+
+def create_normals(template, lab_test):
+	lab_test.normal_toggle = 1
+	normal = lab_test.append("normal_test_items")
+	normal.lab_test_name = template.lab_test_name
+	normal.lab_test_uom = template.lab_test_uom
+	normal.secondary_uom = template.secondary_uom
+	normal.conversion_factor = template.conversion_factor
+	normal.normal_range = template.lab_test_normal_range
+	normal.require_result_value = 1
+	normal.allow_blank = 0
+	normal.template = template.name
+
+
+def create_imaging(template, lab_test):
+	lab_test.imaging_toggle = 1
+	lab_test.template = template.name
+	lab_test.lab_test_name = template.lab_test_name
+	lab_test.descriptive_result = template.descriptive_result
+
+
+def create_compounds(template, lab_test, is_group):
+	lab_test.normal_toggle = 1
+	for normal_test_template in template.normal_test_templates:
+		normal = lab_test.append("normal_test_items")
+		if is_group:
+			normal.lab_test_event = normal_test_template.lab_test_event
+		else:
+			normal.lab_test_name = normal_test_template.lab_test_event
+
+		normal.lab_test_uom = normal_test_template.lab_test_uom
+		normal.secondary_uom = normal_test_template.secondary_uom
+		normal.conversion_factor = normal_test_template.conversion_factor
+		normal.normal_range = normal_test_template.normal_range
+		normal.require_result_value = 1
+		normal.allow_blank = normal_test_template.allow_blank
+		normal.template = template.name
+
+
+def create_descriptives(template, lab_test):
+	lab_test.descriptive_toggle = 1
+	if template.sensitivity:
+		lab_test.sensitivity_toggle = 1
+	for descriptive_test_template in template.descriptive_test_templates:
+		descriptive = lab_test.append("descriptive_test_items")
+		descriptive.lab_test_particulars = descriptive_test_template.particulars
+		descriptive.require_result_value = 1
+		descriptive.allow_blank = descriptive_test_template.allow_blank
+		descriptive.template = template.name
+
+
+def create_sample_doc(template, patient, invoice, company=None):
+	if template.sample:
+		sample_exists = frappe.db.exists(
+			{
+				"doctype": "Sample Collection",
+				"patient": patient.name,
+				"docstatus": 0,
+				"sample": template.sample,
+			}
+		)
+
+		if sample_exists:
+			# update sample collection by adding quantity
+			sample_collection = frappe.get_doc("Sample Collection", sample_exists)
+			quantity = int(sample_collection.sample_qty) + int(template.sample_qty)
+			if template.sample_details:
+				sample_details = sample_collection.sample_details + "\n-\n" + _("Test :")
+				sample_details += (template.get("lab_test_name") or template.get("template")) + "\n"
+				sample_details += _("Collection Details:") + "\n\t" + template.sample_details
+				frappe.db.set_value(
+					"Sample Collection", sample_collection.name, "sample_details", sample_details
+				)
+
+			frappe.db.set_value("Sample Collection", sample_collection.name, "sample_qty", quantity)
+
+		else:
+			# Create Sample Collection for template, copy vals from Invoice
+			sample_collection = frappe.new_doc("Sample Collection")
+			if invoice:
+				sample_collection.invoiced = True
+
+			sample_collection.patient = patient.name
+			sample_collection.patient_age = patient.get_age()
+			sample_collection.patient_sex = patient.sex
+			sample_collection.sample = template.sample
+			sample_collection.sample_uom = template.sample_uom
+			sample_collection.sample_qty = template.sample_qty
+			sample_collection.company = company
+
+			sample_collection.save(ignore_permissions=True)
+
+		return sample_collection
+
+
+def create_sample_collection(lab_test, template, patient, invoice):
+	if frappe.get_cached_value("Healthcare Settings", None, "create_sample_collection_for_lab_test"):
+		sample_collection = create_sample_doc(template, patient, invoice, lab_test.company)
+		if sample_collection:
+			lab_test.sample = sample_collection.name
+			sample_collection_doc = get_link_to_form("Sample Collection", sample_collection.name)
+			frappe.msgprint(
+				_("Sample Collection {0} has been created").format(sample_collection_doc),
+				title=_("Sample Collection"),
+				indicator="green",
+			)
+	return lab_test
+
+
+def load_result_format(lab_test, template, prescription, invoice):
+	if template.lab_test_template_type == "Single":
+		create_normals(template, lab_test)
+
+	elif template.lab_test_template_type == "Compound":
+		create_compounds(template, lab_test, False)
+
+	elif template.lab_test_template_type == "Descriptive":
+		create_descriptives(template, lab_test)
+
+	elif template.lab_test_template_type == "Imaging":
+		create_imaging(template, lab_test)
+
+	elif template.lab_test_template_type == "Grouped":
+		# Iterate for each template in the group and create one result for all.
+		for lab_test_group in template.lab_test_groups:
+			# Template_in_group = None
+			if lab_test_group.lab_test_template:
+				template_in_group = frappe.get_doc("Lab Test Template", lab_test_group.lab_test_template)
+				if template_in_group:
+					if template_in_group.lab_test_template_type == "Single":
+						create_normals(template_in_group, lab_test)
+
+					elif template_in_group.lab_test_template_type == "Compound":
+						normal_heading = lab_test.append("normal_test_items")
+						normal_heading.lab_test_name = template_in_group.lab_test_name
+						normal_heading.require_result_value = 0
+						normal_heading.allow_blank = 1
+						normal_heading.template = template_in_group.name
+						create_compounds(template_in_group, lab_test, True)
+
+					elif template_in_group.lab_test_template_type == "Descriptive":
+						descriptive_heading = lab_test.append("descriptive_test_items")
+						descriptive_heading.lab_test_name = template_in_group.lab_test_name
+						descriptive_heading.require_result_value = 0
+						descriptive_heading.allow_blank = 1
+						descriptive_heading.template = template_in_group.name
+						create_descriptives(template_in_group, lab_test)
+
+			else:  # Lab Test Group - Add New Line
+				normal = lab_test.append("normal_test_items")
+				normal.lab_test_name = lab_test_group.group_event
+				normal.lab_test_uom = lab_test_group.group_test_uom
+				normal.secondary_uom = lab_test_group.secondary_uom
+				normal.conversion_factor = lab_test_group.conversion_factor
+				normal.normal_range = lab_test_group.group_test_normal_range
+				normal.allow_blank = lab_test_group.allow_blank
+				normal.require_result_value = 1
+				normal.template = template.name
+
+	if template.lab_test_template_type != "No Result":
+		if prescription:
+			lab_test.prescription = prescription
+			if invoice:
+				frappe.db.set_value(
+					"Service Request", lab_test.service_request, "status", "completed-Request Status"
+				)
+		lab_test.save(ignore_permissions=True)  # Insert the result
+		return lab_test
+
+
+@frappe.whitelist()
+def get_employee_by_user_id(user_id):
+	emp_id = frappe.db.exists("Employee", {"user_id": user_id})
+	if emp_id:
+		return frappe.get_doc("Employee", emp_id)
+	return None
+
+
+@frappe.whitelist()
+def get_lab_test_prescribed(patient):
+	hso = frappe.qb.DocType("Service Request")
+	return (
+		frappe.qb.from_(hso)
+		.select(
+			hso.template_dn, hso.order_group, hso.invoiced, hso.practitioner, hso.order_date, hso.name
+		)
+		.where(hso.patient == patient)
+		.where(hso.status != "completed-Request Status")
+		.where(hso.template_dt == "Lab Test Template")
+		.orderby(hso.creation, order=frappe.qb.desc)
+	).run()
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test/lab_test_list.js
@@ -0,0 +1,71 @@
+/*
+(c) ESS 2015-16
+*/
+frappe.listview_settings['Lab Test'] = {
+	add_fields: ['name', 'status', 'invoiced'],
+	filters: [['docstatus', '=', '1']],
+	get_indicator: function (doc) {
+		if (doc.status === 'Approved') {
+			return [__('Approved'), 'green', 'status, =, Approved'];
+		} else if (doc.status === 'Rejected') {
+			return [__('Rejected'), 'orange', 'status, =, Rejected'];
+		} else if (doc.status === 'Completed') {
+			return [__('Completed'), 'green', 'status, =, Completed'];
+		} else if (doc.status === 'Cancelled') {
+			return [__('Cancelled'), 'red', 'status, =, Cancelled'];
+		}
+	},
+	onload: function (listview) {
+		listview.page.add_menu_item(__('Create Multiple'), function () {
+			create_multiple_dialog(listview);
+		});
+	}
+};
+
+var create_multiple_dialog = function (listview) {
+	var dialog = new frappe.ui.Dialog({
+		title: 'Create Multiple Lab Tests',
+		width: 100,
+		fields: [
+			{ fieldtype: 'Link', label: 'Patient', fieldname: 'patient', options: 'Patient', reqd: 1 },
+			{
+				fieldtype: 'Select', label: 'Invoice / Patient Encounter', fieldname: 'doctype',
+				options: '\nSales Invoice\nPatient Encounter', reqd: 1
+			},
+			{
+				fieldtype: 'Dynamic Link', fieldname: 'docname', options: 'doctype', reqd: 1,
+				get_query: function () {
+					return {
+						filters: {
+							'patient': dialog.get_value('patient'),
+							'docstatus': 1
+						}
+					};
+				}
+			}
+		],
+		primary_action_label: __('Create'),
+		primary_action: function () {
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.lab_test.lab_test.create_multiple',
+				args: {
+					'doctype': dialog.get_value('doctype'),
+					'docname': dialog.get_value('docname')
+				},
+				callback: function (data) {
+					if (!data.exc) {
+						if (!data.message) {
+							frappe.msgprint(__('No Lab Tests created'));
+						}
+						listview.refresh();
+					}
+				},
+				freeze: true,
+				freeze_message: __('Creating Lab Tests...')
+			});
+			dialog.hide();
+		}
+	});
+
+	dialog.show();
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test/test_lab_test.py
@@ -0,0 +1,241 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import getdate, nowtime
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+)
+from healthcare.healthcare.doctype.lab_test.lab_test import create_multiple
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_patient,
+)
+from healthcare.healthcare.doctype.patient_medical_record.test_patient_medical_record import (
+	create_lab_test_template as create_blood_test_template,
+)
+
+
+class TestLabTest(FrappeTestCase):
+	def test_lab_test_item(self):
+		lab_template = create_lab_test_template()
+		self.assertTrue(frappe.db.exists("Item", lab_template.item))
+		self.assertEqual(
+			frappe.db.get_value("Item Price", {"item_code": lab_template.item}, "price_list_rate"),
+			lab_template.lab_test_rate,
+		)
+
+		lab_template.disabled = 1
+		lab_template.save()
+		self.assertEqual(frappe.db.get_value("Item", lab_template.item, "disabled"), 1)
+
+		lab_template.reload()
+
+		lab_template.disabled = 0
+		lab_template.save()
+
+	def test_descriptive_lab_test(self):
+		lab_template = create_lab_test_template()
+
+		# blank result value not allowed as per template
+		lab_test = create_lab_test(lab_template)
+		lab_test.descriptive_test_items[0].result_value = 12
+		lab_test.descriptive_test_items[2].result_value = 1
+		lab_test.save()
+		self.assertRaises(frappe.ValidationError, lab_test.submit)
+
+	def test_sample_collection(self):
+		frappe.db.set_value(
+			"Healthcare Settings", "Healthcare Settings", "create_sample_collection_for_lab_test", 1
+		)
+		lab_template = create_lab_test_template()
+
+		lab_test = create_lab_test(lab_template)
+		lab_test.descriptive_test_items[0].result_value = 12
+		lab_test.descriptive_test_items[1].result_value = 1
+		lab_test.descriptive_test_items[2].result_value = 2.3
+		lab_test.save()
+
+		# check sample collection created
+		self.assertTrue(frappe.db.exists("Sample Collection", {"sample": lab_template.sample}))
+
+		frappe.db.set_value(
+			"Healthcare Settings", "Healthcare Settings", "create_sample_collection_for_lab_test", 0
+		)
+		lab_test = create_lab_test(lab_template)
+		lab_test.descriptive_test_items[0].result_value = 12
+		lab_test.descriptive_test_items[1].result_value = 1
+		lab_test.descriptive_test_items[2].result_value = 2.3
+		lab_test.save()
+
+		# sample collection should not be created
+		lab_test.reload()
+		self.assertEqual(lab_test.sample, None)
+
+	def test_create_lab_tests_from_sales_invoice(self):
+		sales_invoice = create_sales_invoice()
+		create_multiple("Sales Invoice", sales_invoice.name)
+		sales_invoice.reload()
+		self.assertIsNotNone(sales_invoice.items[0].reference_dn)
+		self.assertIsNotNone(sales_invoice.items[1].reference_dn)
+
+	def test_create_lab_tests_from_patient_encounter(self):
+		patient_encounter = create_patient_encounter()
+		create_multiple("Patient Encounter", patient_encounter.name)
+		patient_encounter.reload()
+		service_requests = frappe.db.get_list(
+			"Service Request",
+			filters={
+				"order_group": patient_encounter.name,
+				"status": ["!=", "Completed"],
+				"template_dt": "Lab Test Template",
+			},
+			fields=["name"],
+		)
+		if service_requests:
+			for service_request in service_requests:
+				self.assertTrue(frappe.db.exists("Lab Test", {"service_request": service_request.get("name")}))
+		# self.assertTrue(patient_encounter.lab_test_prescription[0].lab_test_created)
+		# self.assertTrue(patient_encounter.lab_test_prescription[0].lab_test_created)
+
+
+def create_lab_test_template(test_sensitivity=0, sample_collection=1):
+	medical_department = create_medical_department()
+	if frappe.db.exists("Lab Test Template", "Insulin Resistance"):
+		return frappe.get_doc("Lab Test Template", "Insulin Resistance")
+	template = frappe.new_doc("Lab Test Template")
+	template.lab_test_name = "Insulin Resistance"
+	template.lab_test_template_type = "Descriptive"
+	template.lab_test_code = "Insulin Resistance"
+	template.lab_test_group = "Services"
+	template.department = medical_department
+	template.is_billable = 1
+	template.lab_test_description = "Insulin Resistance"
+	template.lab_test_rate = 2000
+
+	for entry in ["FBS", "Insulin", "IR"]:
+		template.append(
+			"descriptive_test_templates", {"particulars": entry, "allow_blank": 1 if entry == "IR" else 0}
+		)
+
+	if test_sensitivity:
+		template.sensitivity = 1
+
+	if sample_collection:
+		template.sample = create_lab_test_sample()
+		template.sample_qty = 5.0
+
+	template.save()
+	return template
+
+
+def create_medical_department():
+	medical_department = frappe.db.exists("Medical Department", "_Test Medical Department")
+	if not medical_department:
+		medical_department = frappe.new_doc("Medical Department")
+		medical_department.department = "_Test Medical Department"
+		medical_department.save()
+		medical_department = medical_department.name
+
+	return medical_department
+
+
+def create_lab_test(lab_template):
+	patient = create_patient()
+	lab_test = frappe.new_doc("Lab Test")
+	lab_test.template = lab_template.name
+	lab_test.patient = patient
+	lab_test.patient_sex = "Female"
+	lab_test.save()
+
+	return lab_test
+
+
+def create_lab_test_sample():
+	blood_sample = frappe.db.exists("Lab Test Sample", "Blood Sample")
+	if blood_sample:
+		return blood_sample
+
+	sample = frappe.new_doc("Lab Test Sample")
+	sample.sample = "Blood Sample"
+	sample.sample_uom = "U/ml"
+	sample.save()
+
+	return sample.name
+
+
+def create_sales_invoice():
+	patient = create_patient()
+	medical_department = create_medical_department()
+	insulin_resistance_template = create_lab_test_template()
+	blood_test_template = create_blood_test_template(medical_department)
+
+	sales_invoice = frappe.new_doc("Sales Invoice")
+	sales_invoice.patient = patient
+	sales_invoice.customer = frappe.db.get_value("Patient", patient, "customer")
+	sales_invoice.due_date = getdate()
+	sales_invoice.company = "_Test Company"
+	sales_invoice.debit_to = get_receivable_account("_Test Company")
+
+	tests = [insulin_resistance_template, blood_test_template]
+	for entry in tests:
+		sales_invoice.append(
+			"items",
+			{
+				"item_code": entry.item,
+				"item_name": entry.lab_test_name,
+				"description": entry.lab_test_description,
+				"qty": 1,
+				"uom": "Nos",
+				"conversion_factor": 1,
+				"income_account": get_income_account(None, "_Test Company"),
+				"rate": entry.lab_test_rate,
+				"amount": entry.lab_test_rate,
+			},
+		)
+
+	sales_invoice.set_missing_values()
+
+	sales_invoice.submit()
+	return sales_invoice
+
+
+def create_patient_encounter():
+	patient = create_patient()
+	medical_department = create_medical_department()
+	insulin_resistance_template = create_lab_test_template()
+	blood_test_template = create_blood_test_template(medical_department)
+
+	patient_encounter = frappe.new_doc("Patient Encounter")
+	patient_encounter.patient = patient
+	patient_encounter.practitioner = create_practitioner()
+	patient_encounter.encounter_date = getdate()
+	patient_encounter.encounter_time = nowtime()
+
+	tests = [insulin_resistance_template, blood_test_template]
+	for entry in tests:
+		patient_encounter.append(
+			"lab_test_prescription", {"lab_test_code": entry.item, "lab_test_name": entry.lab_test_name}
+		)
+
+	patient_encounter.submit()
+	return patient_encounter
+
+
+def create_practitioner():
+	practitioner = frappe.db.exists("Healthcare Practitioner", "_Test Healthcare Practitioner")
+
+	if not practitioner:
+		practitioner = frappe.new_doc("Healthcare Practitioner")
+		practitioner.first_name = "_Test Healthcare Practitioner"
+		practitioner.gender = "Female"
+		practitioner.op_consulting_charge = 500
+		practitioner.inpatient_visit_charge = 500
+		practitioner.save(ignore_permissions=True)
+		practitioner = practitioner.name
+
+	return practitioner
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_group_template/lab_test_group_template.json
@@ -0,0 +1,119 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "beta": 0,
+ "creation": "2016-03-29 17:37:29.913583",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "engine": "InnoDB",
+ "field_order": [
+  "template_or_new_line",
+  "lab_test_template",
+  "lab_test_rate",
+  "lab_test_description",
+  "group_event",
+  "group_test_uom",
+  "secondary_uom",
+  "conversion_factor",
+  "allow_blank",
+  "column_break_8",
+  "group_test_normal_range"
+ ],
+ "fields": [
+  {
+   "default": "Add Test",
+   "fieldname": "template_or_new_line",
+   "fieldtype": "Select",
+   "options": "Add Test\nAdd New Line",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "depends_on": "eval:doc.template_or_new_line == 'Add Test'",
+   "fieldname": "lab_test_template",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Test Name",
+   "options": "Lab Test Template"
+  },
+  {
+   "fetch_from": "lab_test_template.lab_test_rate",
+   "fieldname": "lab_test_rate",
+   "fieldtype": "Currency",
+   "label": "Rate",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "lab_test_template.lab_test_description",
+   "fieldname": "lab_test_description",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Description",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.template_or_new_line == 'Add New Line'",
+   "fieldname": "group_event",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Event"
+  },
+  {
+   "depends_on": "eval:doc.template_or_new_line =='Add New Line'",
+   "fieldname": "group_test_uom",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "depends_on": "eval:doc.template_or_new_line == 'Add New Line'",
+   "fieldname": "group_test_normal_range",
+   "fieldtype": "Long Text",
+   "ignore_xss_filter": 1,
+   "label": "Normal Range"
+  },
+  {
+   "fieldname": "column_break_8",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval:doc.template_or_new_line =='Add New Line'",
+   "fieldname": "secondary_uom",
+   "fieldtype": "Link",
+   "label": "Secondary UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "depends_on": "secondary_uom",
+   "fieldname": "conversion_factor",
+   "fieldtype": "Float",
+   "label": "Conversion Factor",
+   "mandatory_depends_on": "secondary_uom"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:doc.template_or_new_line == 'Add New Line'",
+   "fieldname": "allow_blank",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Allow Blank"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-07-30 12:36:03.082391",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test Group Template",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_group_template/lab_test_group_template.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class LabTestGroupTemplate(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_sample/lab_test_sample.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Lab Test Sample', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_sample/lab_test_sample.json
@@ -0,0 +1,89 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:sample",
+ "creation": "2016-04-04 17:35:44.823951",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "engine": "InnoDB",
+ "field_order": [
+  "sample_type",
+  "sample",
+  "container_closure_color",
+  "column_break_0sbu",
+  "sample_uom"
+ ],
+ "fields": [
+  {
+   "fieldname": "sample",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Sample",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "sample_uom",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "sample_type",
+   "fieldtype": "Link",
+   "label": "Sample Type",
+   "options": "Sample Type"
+  },
+  {
+   "fieldname": "column_break_0sbu",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "container_closure_color",
+   "fieldtype": "Link",
+   "label": "Container Closure Color",
+   "options": "Color"
+  }
+ ],
+ "links": [],
+ "modified": "2023-06-29 12:37:11.086348",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test Sample",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "sample",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_sample/lab_test_sample.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class LabTestSample(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_sample/test_lab_test_sample.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestLabTestSample(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/lab_test_template.js
@@ -0,0 +1,126 @@
+// Copyright (c) 2016, ESS
+// License: ESS license.txt
+
+frappe.ui.form.on('Lab Test Template', {
+	lab_test_name: function(frm) {
+		if (!frm.doc.lab_test_code)
+			frm.set_value('lab_test_code', frm.doc.lab_test_name);
+		if (!frm.doc.lab_test_description)
+			frm.set_value('lab_test_description', frm.doc.lab_test_name);
+	},
+	refresh : function(frm) {
+		// Restrict Special, Grouped type templates in Child Test Groups
+		frm.set_query('lab_test_template', 'lab_test_groups', function() {
+			return {
+				filters: {
+					lab_test_template_type: ['in', ['Single','Compound']]
+				}
+			};
+		});
+
+		frm.set_query('item', function() {
+			return {
+				filters: {
+					'disabled': false,
+					'is_stock_item': false
+				}
+			}
+		});
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+	},
+
+	link_existing_item: function (frm) {
+		if (frm.doc.link_existing_item) {
+			frm.set_value('lab_test_code', '');
+		} else {
+			frm.set_value('item', '');
+		}
+	},
+
+	item: function (frm) {
+		if (frm.doc.item) {
+			frappe.db.get_value('Item', frm.doc.item, ['item_group'])
+			.then(r => {
+				frm.set_value({
+					'lab_test_group': r.message.item_group,
+					'lab_test_code': frm.doc.item
+				});
+			})
+		}
+	}
+});
+
+cur_frm.cscript.custom_refresh = function(doc) {
+	if (!doc.__islocal) {
+		cur_frm.add_custom_button(__('Change Template Code'), function() {
+			change_template_code(doc);
+		});
+	}
+};
+
+let change_template_code = function(doc) {
+	let d = new frappe.ui.Dialog({
+		title:__('Change Template Code'),
+		fields:[
+			{
+				'fieldtype': 'Data',
+				'label': 'Lab Test Template Code',
+				'fieldname': 'lab_test_code',
+				reqd: 1
+			}
+		],
+		primary_action: function() {
+			let values = d.get_values();
+			if (values) {
+				frappe.call({
+					'method': 'healthcare.healthcare.doctype.lab_test_template.lab_test_template.change_test_code_from_template',
+					'args': {lab_test_code: values.lab_test_code, doc: doc},
+					callback: function (data) {
+						frappe.set_route('Form', 'Lab Test Template', data.message);
+					}
+				});
+			}
+			d.hide();
+		},
+		primary_action_label: __('Change Template Code')
+	});
+	d.show();
+
+	d.set_values({
+		'lab_test_code': doc.link_existing_item ? doc.item : doc.lab_test_code
+	});
+};
+
+frappe.ui.form.on('Lab Test Template', 'lab_test_name', function(frm) {
+	frm.doc.change_in_item = 1;
+});
+
+frappe.ui.form.on('Lab Test Template', 'lab_test_rate', function(frm) {
+	frm.doc.change_in_item = 1;
+});
+
+frappe.ui.form.on('Lab Test Template', 'lab_test_group', function(frm) {
+	frm.doc.change_in_item = 1;
+});
+
+frappe.ui.form.on('Lab Test Template', 'lab_test_description', function(frm) {
+	frm.doc.change_in_item = 1;
+});
+
+frappe.ui.form.on('Lab Test Groups', 'template_or_new_line', function (frm, cdt, cdn) {
+	let child = locals[cdt][cdn];
+	if (child.template_or_new_line == 'Add New Line') {
+		frappe.model.set_value(cdt, cdn, 'lab_test_template', '');
+		frappe.model.set_value(cdt, cdn, 'lab_test_description', '');
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/lab_test_template.json
@@ -0,0 +1,450 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:lab_test_name",
+ "creation": "2016-03-29 17:35:36.761223",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "lab_test_name",
+  "department",
+  "column_break_3",
+  "disabled",
+  "nursing_checklist_template",
+  "billing_section",
+  "column_break_hih3",
+  "link_existing_item",
+  "item",
+  "lab_test_code",
+  "lab_test_group",
+  "column_break_buub",
+  "is_billable",
+  "lab_test_rate",
+  "section_break_description",
+  "lab_test_description",
+  "result_format_tab",
+  "result_format_section",
+  "lab_test_template_type",
+  "section_break_descriptive_result",
+  "descriptive_result",
+  "section_break_normal",
+  "lab_test_uom",
+  "secondary_uom",
+  "conversion_factor",
+  "column_break_10",
+  "lab_test_normal_range",
+  "section_break_compound",
+  "normal_test_templates",
+  "section_break_special",
+  "sensitivity",
+  "descriptive_test_templates",
+  "section_break_group",
+  "lab_test_groups",
+  "sample_collection_tab",
+  "sb_sample_collection",
+  "sample",
+  "sample_uom",
+  "sample_qty",
+  "column_break_33",
+  "sample_details",
+  "codification",
+  "codification_table",
+  "worksheet_legend_tab",
+  "worksheet_section",
+  "worksheet_instructions",
+  "result_legend_section",
+  "legend_print_position",
+  "result_legend",
+  "service_request_defaults_section",
+  "patient_care_type",
+  "staff_role",
+  "column_break_34",
+  "change_in_item"
+ ],
+ "fields": [
+  {
+   "fieldname": "lab_test_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Test Name",
+   "no_copy": 1,
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "depends_on": "eval: !doc.__islocal || doc.link_existing_item",
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "label": "Item",
+   "mandatory_depends_on": "eval:doc.link_existing_item",
+   "no_copy": 1,
+   "options": "Item",
+   "read_only_depends_on": "eval: !doc.__islocal",
+   "search_index": 1
+  },
+  {
+   "fieldname": "lab_test_code",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Item Code",
+   "mandatory_depends_on": "eval:!doc.link_existing_item",
+   "no_copy": 1,
+   "read_only_depends_on": "eval:!doc.__islocal"
+  },
+  {
+   "fieldname": "lab_test_group",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Item Group",
+   "options": "Item Group",
+   "read_only_depends_on": "eval:doc.link_existing_item",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Department",
+   "options": "Medical Department",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "<b>Single</b>: Results which require only a single input.\n<br>\n<b>Compound</b>: Results which require multiple event inputs.\n<br>\n<b>Descriptive</b>: Tests which have multiple result components with manual result entry.\n<br>\n<b>Grouped</b>: Test templates which are a group of other test templates.\n<br>\n<b>No Result</b>: Tests with no results, can be ordered and billed but no Lab Test will be created. e.g.. Sub Tests for Grouped results",
+   "fieldname": "lab_test_template_type",
+   "fieldtype": "Select",
+   "in_standard_filter": 1,
+   "label": "Result Format",
+   "options": "\nSingle\nCompound\nDescriptive\nGrouped\nImaging\nNo Result"
+  },
+  {
+   "default": "1",
+   "depends_on": "eval:doc.lab_test_template_type != 'Grouped' && (!doc.link_existing_item || !doc.__islocal);",
+   "description": "If unchecked, the item will not be available in Sales Invoices for billing but can be used in group test creation. ",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "label": "Is Billable",
+   "search_index": 1
+  },
+  {
+   "depends_on": "eval:doc.is_billable && (!doc.link_existing_item || !doc.__islocal)",
+   "description": "This value is updated in the Default Sales Price List.",
+   "fieldname": "lab_test_rate",
+   "fieldtype": "Currency",
+   "in_list_view": 1,
+   "label": "Rate",
+   "mandatory_depends_on": "eval:doc.is_billable && !doc.link_existing_item"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Single'",
+   "fieldname": "section_break_normal",
+   "fieldtype": "Section Break",
+   "label": "Lab Routine"
+  },
+  {
+   "fieldname": "lab_test_uom",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "fieldname": "lab_test_normal_range",
+   "fieldtype": "Long Text",
+   "ignore_xss_filter": 1,
+   "label": "Normal Range"
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Compound'",
+   "fieldname": "section_break_compound",
+   "fieldtype": "Section Break",
+   "label": "Compound"
+  },
+  {
+   "fieldname": "normal_test_templates",
+   "fieldtype": "Table",
+   "options": "Normal Test Template"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Descriptive'",
+   "fieldname": "section_break_special",
+   "fieldtype": "Section Break",
+   "label": "Descriptive Test"
+  },
+  {
+   "default": "0",
+   "fieldname": "sensitivity",
+   "fieldtype": "Check",
+   "label": "Sensitivity"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Grouped'",
+   "fieldname": "section_break_group",
+   "fieldtype": "Section Break",
+   "label": "Group Tests"
+  },
+  {
+   "fieldname": "lab_test_groups",
+   "fieldtype": "Table",
+   "options": "Lab Test Group Template"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "section_break_description",
+   "fieldtype": "Section Break",
+   "label": "Description "
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Imaging'",
+   "fieldname": "lab_test_description",
+   "fieldtype": "Text Editor",
+   "ignore_xss_filter": 1,
+   "label": "Description",
+   "no_copy": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "sb_sample_collection",
+   "fieldtype": "Section Break",
+   "label": "Sample Collection"
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Sample",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fetch_from": "sample.sample_uom",
+   "fieldname": "sample_uom",
+   "fieldtype": "Data",
+   "label": "UOM",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Change In Item",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "default": "0",
+   "fieldname": "sample_qty",
+   "fieldtype": "Float",
+   "label": "Quantity"
+  },
+  {
+   "fieldname": "sample_details",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Collection Details"
+  },
+  {
+   "collapsible": 1,
+   "description": "Information to help easily interpret the test report, will be printed as part of the Lab Test result.",
+   "fieldname": "result_legend_section",
+   "fieldtype": "Section Break",
+   "label": "Result Legend Print"
+  },
+  {
+   "fieldname": "result_legend",
+   "fieldtype": "Text Editor",
+   "label": "Result Legend"
+  },
+  {
+   "fieldname": "legend_print_position",
+   "fieldtype": "Select",
+   "label": "Print Position",
+   "options": "Bottom\nTop\nBoth"
+  },
+  {
+   "fieldname": "secondary_uom",
+   "fieldtype": "Link",
+   "label": "Secondary UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "depends_on": "secondary_uom",
+   "fieldname": "conversion_factor",
+   "fieldtype": "Float",
+   "label": "Conversion Factor",
+   "mandatory_depends_on": "secondary_uom"
+  },
+  {
+   "description": "Instructions to be printed on the worksheet",
+   "fieldname": "worksheet_instructions",
+   "fieldtype": "Text Editor",
+   "label": "Worksheet Instructions"
+  },
+  {
+   "fieldname": "worksheet_section",
+   "fieldtype": "Section Break",
+   "label": "Worksheet Print"
+  },
+  {
+   "fieldname": "descriptive_test_templates",
+   "fieldtype": "Table",
+   "options": "Descriptive Test Template"
+  },
+  {
+   "fieldname": "column_break_33",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "codification",
+   "fieldtype": "Tab Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "fieldname": "descriptive_result",
+   "fieldtype": "Text Editor",
+   "label": "Descriptive Result"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type == 'Imaging'",
+   "fieldname": "section_break_descriptive_result",
+   "fieldtype": "Section Break",
+   "label": "Descriptive Result"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.__islocal",
+   "fieldname": "link_existing_item",
+   "fieldtype": "Check",
+   "label": "Link existing Item"
+  },
+  {
+   "fieldname": "worksheet_legend_tab",
+   "fieldtype": "Tab Break",
+   "label": "Worksheet & Legend"
+  },
+  {
+   "fieldname": "result_format_section",
+   "fieldtype": "Section Break",
+   "label": "Result Format"
+  },
+  {
+   "fieldname": "result_format_tab",
+   "fieldtype": "Tab Break",
+   "label": "Result Format"
+  },
+  {
+   "depends_on": "eval:doc.lab_test_template_type != 'Imaging'",
+   "fieldname": "sample_collection_tab",
+   "fieldtype": "Tab Break",
+   "label": "Sample Collection"
+  },
+  {
+   "fieldname": "billing_section",
+   "fieldtype": "Section Break",
+   "label": "Billing"
+  },
+  {
+   "fieldname": "column_break_hih3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "service_request_defaults_section",
+   "fieldtype": "Section Break",
+   "label": "Service Request Defaults"
+  },
+  {
+   "fetch_from": "service_request_category.patient_care_type",
+   "fetch_if_empty": 1,
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  },
+  {
+   "fieldname": "column_break_34",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_buub",
+   "fieldtype": "Column Break"
+  }
+ ],
+ "links": [],
+ "modified": "2023-11-03 15:28:04.801812",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "lab_test_code,lab_test_name,lab_test_template_type",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "lab_test_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/lab_test_template.py
@@ -0,0 +1,155 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.rename_doc import rename_doc
+from frappe.utils import flt, today
+
+from healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template import (
+	make_item_price,
+	update_item_and_item_price,
+)
+
+
+class LabTestTemplate(Document):
+	def before_insert(self):
+		if self.link_existing_item and self.item:
+			price_list = frappe.db.get_all(
+				"Item Price", {"item_code": self.item}, ["price_list_rate"], order_by="valid_from desc"
+			)
+			if price_list:
+				self.lab_test_rate = price_list[0].get("price_list_rate")
+
+	def after_insert(self):
+		if not self.item and not self.link_existing_item:
+			create_item_from_template(self)
+
+	def validate(self):
+		if (
+			self.is_billable
+			and not self.link_existing_item
+			and (not self.lab_test_rate or self.lab_test_rate <= 0.0)
+		):
+			frappe.throw(_("Standard Selling Rate should be greater than zero."))
+
+		if self.sample and flt(self.sample_qty) <= 0:
+			frappe.throw(_("Sample Quantity cannot be negative or 0"), title=_("Invalid Quantity"))
+
+		self.validate_conversion_factor()
+		self.enable_disable_item()
+
+	def on_update(self):
+		# If change_in_item update Item and Price List
+		if self.change_in_item:
+			update_item_and_item_price(self)
+
+	def on_trash(self):
+		# Remove template reference from item and disable item
+		if self.item:
+			try:
+				item = self.item
+				self.db_set("item", "")
+				frappe.delete_doc("Item", item)
+			except Exception:
+				frappe.throw(_("Not permitted. Please disable the Lab Test Template"))
+
+	def enable_disable_item(self):
+		if self.is_billable:
+			if self.disabled:
+				frappe.db.set_value("Item", self.item, "disabled", 1)
+			else:
+				frappe.db.set_value("Item", self.item, "disabled", 0)
+
+	def update_item(self):
+		item = frappe.get_doc("Item", self.item)
+		if item:
+			item.update(
+				{
+					"item_name": self.lab_test_name,
+					"item_group": self.lab_test_group,
+					"disabled": 0,
+					"standard_rate": self.lab_test_rate,
+					"description": self.lab_test_description,
+				}
+			)
+			item.flags.ignore_mandatory = True
+			item.save(ignore_permissions=True)
+
+	def item_price_exists(self):
+		item_price = frappe.db.exists("Item Price", {"item_code": self.item, "valid_from": today()})
+		if item_price:
+			return item_price
+		return False
+
+	def validate_conversion_factor(self):
+		if self.lab_test_template_type == "Single" and self.secondary_uom and not self.conversion_factor:
+			frappe.throw(_("Conversion Factor is mandatory"))
+		if self.lab_test_template_type == "Compound":
+			for item in self.normal_test_templates:
+				if item.secondary_uom and not item.conversion_factor:
+					frappe.throw(_("Row #{0}: Conversion Factor is mandatory").format(item.idx))
+		if self.lab_test_template_type == "Grouped":
+			for group in self.lab_test_groups:
+				if (
+					group.template_or_new_line == "Add New Line"
+					and group.secondary_uom
+					and not group.conversion_factor
+				):
+					frappe.throw(_("Row #{0}: Conversion Factor is mandatory").format(group.idx))
+
+
+def create_item_from_template(doc):
+	uom = frappe.db.exists("UOM", "Unit") or frappe.db.get_single_value("Stock Settings", "stock_uom")
+	# Insert item
+	item = frappe.get_doc(
+		{
+			"doctype": "Item",
+			"item_code": doc.lab_test_code,
+			"item_name": doc.lab_test_name,
+			"item_group": doc.lab_test_group,
+			"description": doc.lab_test_description,
+			"is_sales_item": 1,
+			"is_service_item": 1,
+			"is_purchase_item": 0,
+			"is_stock_item": 0,
+			"include_item_in_manufacturing": 0,
+			"show_in_website": 0,
+			"is_pro_applicable": 0,
+			"disabled": 0 if doc.is_billable and not doc.disabled else doc.disabled,
+			"stock_uom": uom,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+	# Insert item price
+	if doc.is_billable and doc.lab_test_rate != 0.0:
+		price_list_name = frappe.db.get_value(
+			"Selling Settings", None, "selling_price_list"
+		) or frappe.db.get_value("Price List", {"selling": 1})
+		if doc.lab_test_rate:
+			make_item_price(item.name, doc.lab_test_rate)
+		else:
+			make_item_price(item.name, 0.0)
+	# Set item in the template
+	frappe.db.set_value("Lab Test Template", doc.name, "item", item.name)
+
+	doc.reload()
+
+
+@frappe.whitelist()
+def change_test_code_from_template(lab_test_code, doc):
+	doc = frappe._dict(json.loads(doc))
+	if frappe.db.exists({"doctype": "Item", "item_code": lab_test_code}):
+		frappe.throw(_("Lab Test Item {0} already exist").format(lab_test_code))
+	else:
+		rename_doc("Item", doc.item, lab_test_code, ignore_permissions=True)
+		frappe.db.set_value(
+			"Lab Test Template", doc.name, {"lab_test_code": lab_test_code, "lab_test_name": lab_test_code}
+		)
+		rename_doc("Lab Test Template", doc.name, lab_test_code, ignore_permissions=True)
+	return lab_test_code
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/lab_test_template_dashboard.py
@@ -0,0 +1,8 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "template",
+		"transactions": [{"label": _("Lab Tests"), "items": ["Lab Test"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/lab_test_template_list.js
@@ -0,0 +1,7 @@
+/*
+(c) ESS 2015-16
+*/
+frappe.listview_settings['Lab Test Template'] = {
+	add_fields: ['lab_test_name', 'lab_test_code', 'lab_test_rate'],
+	filters: [['disabled', '=', 'No']]
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_template/test_lab_test_template.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Lab Test Template')
+
+
+class TestLabTestTemplate(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_uom/lab_test_uom.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2016, ESS and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Lab Test UOM', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_uom/lab_test_uom.json
@@ -0,0 +1,148 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "field:lab_test_uom", 
+ "beta": 0,
+ "creation": "2016-03-29 17:28:08.630148", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "Setup", 
+ "editable_grid": 0, 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_in_quick_entry": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "lab_test_uom", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Lab Test UOM", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "translatable": 0, 
+   "unique": 1
+  }, 
+  {
+   "allow_bulk_edit": 0, 
+   "allow_in_quick_entry": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "uom_description", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Description", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 0, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "translatable": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2018-09-04 11:02:53.202718", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Lab Test UOM", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }, 
+  {
+   "amend": 0, 
+   "cancel": 0, 
+   "create": 0, 
+   "delete": 0, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Laboratory User", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 0
+  }
+ ], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "search_fields": "lab_test_uom", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "title_field": "lab_test_uom", 
+ "track_changes": 1, 
+ "track_seen": 0, 
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_uom/lab_test_uom.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class LabTestUOM(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/lab_test_uom/test_lab_test_uom.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Lab Test UOM')
+
+
+class TestLabTestUOM(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/med_route/med_route.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Med Route", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/med_route/med_route.json
@@ -0,0 +1,56 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:title",
+ "creation": "2024-08-20 03:04:14.068717",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "acrynom"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Title",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "acrynom",
+   "fieldtype": "Data",
+   "label": "Accrynom",
+   "reqd": 1
+  }
+ ],
+ "in_create": 1,
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-20 03:09:37.541687",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Med Route",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "search_fields": "acrynom",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/med_route/med_route.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class MedRoute(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/med_route/test_med_route.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestMedRoute(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medical_department/medical_department.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Medical Department', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/medical_department/medical_department.json
@@ -0,0 +1,92 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:department",
+ "beta": 1,
+ "creation": "2017-02-27 13:38:30.806362",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "department",
+  "patient_care_type"
+ ],
+ "fields": [
+  {
+   "fieldname": "department",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Department",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  }
+ ],
+ "links": [],
+ "modified": "2021-03-14 20:34:43.328918",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medical Department",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "department",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "department",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medical_department/medical_department.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class MedicalDepartment(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medical_department/test_medical_department.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Medical Department')
+
+
+class TestMedicalDepartment(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication/medication.js
@@ -0,0 +1,79 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Medication', {
+	generic_name: function(frm) {
+		frm.set_value("abbr", frappe.get_abbr(frm.doc.generic_name))
+	},
+	refresh: function(frm) {
+		frm.set_query("medication", "combinations", function() {
+			return {
+				filters: {
+					is_combination: false
+				}
+			};
+		});
+	}
+});
+
+frappe.ui.form.on('Medication Linked Item', {
+	rate: function(frm, cdt, cdn) {
+		mark_change_in_item(frm, cdt, cdn);
+	},
+
+	is_billable: function(frm, cdt, cdn) {
+		mark_change_in_item(frm, cdt, cdn);
+	},
+
+	item_group: function(frm, cdt, cdn) {
+		mark_change_in_item(frm, cdt, cdn);
+	},
+
+	description: function(frm, cdt, cdn) {
+		mark_change_in_item(frm, cdt, cdn);
+	},
+})
+
+let mark_change_in_item = function(frm, cdt, cdn) {
+	if (!frm.doc.__islocal) {
+		frappe.model.set_value(cdt, cdn, 'change_in_item', 1);
+	}
+};
+
+let change_medication_code = function(doc) {
+	let d = new frappe.ui.Dialog({
+		title: __('Change Item Code'),
+		fields: [
+			{
+				'fieldtype': 'Data',
+				'label': 'Item Code',
+				'fieldname': 'item_code',
+				reqd: 1
+			}
+		],
+		primary_action: function() {
+			let values = d.get_values();
+
+			if (values) {
+				frappe.call({
+					'method': 'healthcare.healthcare.doctype.medication.medication.change_item_code_from_medication',
+					'args': {item_code: values.item_code, doc: doc},
+					callback: function () {
+						frm.reload_doc();
+						frappe.show_alert({
+							message: 'Item Code renamed successfully',
+							indicator: 'green'
+						});
+					}
+				});
+			}
+			d.hide();
+		},
+		primary_action_label: __('Change Item Code')
+	});
+	d.show();
+
+	d.set_values({
+		'item_code': doc.item_code
+	});
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication/medication.json
@@ -0,0 +1,254 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:generic_name",
+ "creation": "2020-03-24 15:56:36.583587",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "generic_name",
+  "medication_class",
+  "abbr",
+  "national_drug_code",
+  "is_combination",
+  "column_break_4",
+  "disabled",
+  "strength",
+  "strength_uom",
+  "combinations_section",
+  "combinations",
+  "item_details",
+  "linked_items",
+  "defaults_section",
+  "default_prescription_dosage",
+  "default_prescription_duration",
+  "dosage_form",
+  "column_break_16",
+  "default_interval",
+  "default_interval_uom",
+  "section_break_36",
+  "reference_url",
+  "change_in_item",
+  "medical_coding_section",
+  "codification_table",
+  "section_break_sbkz",
+  "staff_role"
+ ],
+ "fields": [
+  {
+   "fieldname": "national_drug_code",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "National Drug Code",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "generic_name",
+   "fieldtype": "Data",
+   "label": "Scientific Name",
+   "no_copy": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "medication_class",
+   "fieldtype": "Link",
+   "label": "Medication Class",
+   "options": "Medication Class",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "strength",
+   "fieldtype": "Float",
+   "label": "Strength",
+   "no_copy": 1,
+   "precision": "2",
+   "reqd": 1
+  },
+  {
+   "fieldname": "strength_uom",
+   "fieldtype": "Link",
+   "label": "Strength UOM",
+   "options": "UOM",
+   "reqd": 1
+  },
+  {
+   "fieldname": "defaults_section",
+   "fieldtype": "Section Break",
+   "label": "Defaults"
+  },
+  {
+   "fieldname": "default_prescription_dosage",
+   "fieldtype": "Link",
+   "label": "Default Prescription Dosage",
+   "mandatory_depends_on": "!dosage_by_interval",
+   "options": "Prescription Dosage",
+   "reqd": 1
+  },
+  {
+   "fieldname": "default_prescription_duration",
+   "fieldtype": "Link",
+   "label": "Default Prescription Duration",
+   "mandatory_depends_on": "!dosage_by_interval",
+   "options": "Prescription Duration",
+   "reqd": 1
+  },
+  {
+   "fieldname": "default_interval",
+   "fieldtype": "Int",
+   "label": "Default Interval",
+   "mandatory_depends_on": "dosage_by_interval"
+  },
+  {
+   "fieldname": "default_interval_uom",
+   "fieldtype": "Select",
+   "label": "Default Interval UOM",
+   "mandatory_depends_on": "dosage_by_interval",
+   "options": "Hour\nDay"
+  },
+  {
+   "fieldname": "reference_url",
+   "fieldtype": "HTML Editor",
+   "label": "Reference URL"
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "in_filter": 1,
+   "label": "Change In Item",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "section_break_36",
+   "fieldtype": "Section Break",
+   "hidden": 1
+  },
+  {
+   "fieldname": "abbr",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Abbr",
+   "no_copy": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "label": "Dosage Form",
+   "options": "Dosage Form"
+  },
+  {
+   "fieldname": "column_break_16",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "collapsible_depends_on": "!doc.__islocal",
+   "description": "Properties of the linked Item, you may further configure Batch Number and Expiry, Serial Number, Shelf Life etc. in the Item master",
+   "fieldname": "item_details",
+   "fieldtype": "Section Break",
+   "label": "Linked Item"
+  },
+  {
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "is_combination",
+   "fieldname": "combinations_section",
+   "fieldtype": "Section Break",
+   "label": "Combinations"
+  },
+  {
+   "depends_on": "is_combination",
+   "fieldname": "combinations",
+   "fieldtype": "Table",
+   "label": "Combinations",
+   "options": "Medication Ingredient"
+  },
+  {
+   "default": "0",
+   "fieldname": "is_combination",
+   "fieldtype": "Check",
+   "label": "Is Combination"
+  },
+  {
+   "fieldname": "linked_items",
+   "fieldtype": "Table",
+   "label": "Linked Items",
+   "options": "Medication Linked Item"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_coding_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "section_break_sbkz",
+   "fieldtype": "Section Break"
+  }
+ ],
+ "links": [],
+ "modified": "2024-06-01 12:10:34.035297",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medication",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "search_fields": "abbr, national_drug_code, generic_name",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication/medication.py
@@ -0,0 +1,128 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.rename_doc import rename_doc
+
+
+class Medication(Document):
+	def after_insert(self):
+		create_item_from_medication(self)
+
+	def on_update(self):
+		if self.linked_items:
+			self.update_item_and_item_price()
+
+	def validate(self):
+		if self.linked_items:
+			for item in self.linked_items:
+				exist_medication = frappe.db.get_value(
+					"Medication Linked Item",
+					{"item": item.item_code, "parent": ("!=", self.name)},
+					"parent",
+				)
+				if exist_medication:
+					frappe.throw(
+						_(
+							"Item <b>{}</b> has been already used in <b><a href='/app/medication/{}'>Medication</a></b>"
+						).format(item.item_code, exist_medication)
+					)
+
+	def update_item_and_item_price(self):
+		for item in self.linked_items:
+			if not item.item:
+				insert_item(self, item)
+			else:
+				if item.is_billable:
+					if item.change_in_item:
+						item_doc = frappe.get_doc("Item", {"name": item.item_code})
+						item_doc.item_name = item.item_code
+						item_doc.item_group = item.item_group
+						item_doc.description = item.description
+						item_doc.stock_uom = item.stock_uom
+						item_doc.manufacturer = item.manufacturer
+						item_doc.brand = item.brand
+						item_doc.disabled = 0
+						item_doc.save(ignore_permissions=True)
+						if item.rate:
+							if not frappe.db.exists("Item Price", {"item_code": item.item_code}):
+								if item.item_code:
+									make_item_price(item.item_code, item.rate)
+							else:
+								item_price = frappe.get_doc("Item Price", {"item_code": item.item_code})
+								item_price.item_name = item.item_code
+								item_price.price_list_rate = item.rate
+								item_price.save()
+
+				else:
+					frappe.db.set_value("Item", item.item_code, "disabled", 1)
+
+				frappe.db.set_value("Medication Linked Item", item.name, "change_in_item", 0)
+		self.reload()
+
+
+def create_item_from_medication(doc):
+	for item in doc.linked_items:
+		insert_item(doc, item)
+	doc.reload()
+
+
+def insert_item(doc, item):
+	if not frappe.db.exists("Item", item.item_code):
+		item_doc = frappe.get_doc(
+			{
+				"doctype": "Item",
+				"item_code": item.item_code,
+				"item_name": item.item_code,
+				"item_group": item.item_group,
+				"description": item.item_code,
+				"is_sales_item": 1,
+				"is_stock_item": 1,
+				"disabled": 0 if item.is_billable and not doc.disabled else 1,
+				"stock_uom": item.stock_uom or frappe.db.get_single_value("Stock Settings", "stock_uom"),
+			}
+		).insert(ignore_permissions=True, ignore_mandatory=True)
+	else:
+		item_doc = frappe.get_doc("Item", item.item_code)
+		if item_doc.stock_uom != item.stock_uom:
+			frappe.throw(
+				_("Cannot link existing Item Code {}, UOM {} does not match with Item Stock UOM").format(
+					item.item_code, item.stock_uom, item_doc.stock_uom
+				)
+			)
+		item_doc.item_name = item.item_code  # also update the name and description of existing item
+		item_doc.description = item.description
+
+	make_item_price(item_doc.name, item.rate)
+	frappe.db.set_value("Medication Linked Item", item.name, "item", item.item_code)
+
+
+def make_item_price(item, item_price):
+	price_list_name = frappe.db.get_value("Price List", {"selling": 1})
+	frappe.get_doc(
+		{
+			"doctype": "Item Price",
+			"price_list": price_list_name,
+			"item_code": item,
+			"price_list_rate": item_price,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+
+@frappe.whitelist()
+def change_item_code_from_medication(item_code, doc):
+	doc = frappe._dict(json.loads(doc))
+
+	if frappe.db.exists("Item", {"item_code": item_code}):
+		frappe.throw(_("Item with Item Code {0} already exists").format(item_code))
+	else:
+		rename_doc("Item", doc.item_code, item_code, ignore_permissions=True)
+		frappe.db.set_value("Medication", doc.name, "item_code", item_code)
+	return
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication/test_medication.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+# import frappe
+import unittest
+
+
+class TestMedication(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_class/medication_class.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Medication Class', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_class/medication_class.json
@@ -0,0 +1,47 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:medication_class",
+ "creation": "2020-03-24 15:55:53.302910",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "medication_class"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "medication_class",
+   "fieldtype": "Data",
+   "label": "Medication Class",
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2023-03-24 21:12:01.434571",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medication Class",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_class/medication_class.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+# import frappe
+from frappe.model.document import Document
+
+
+class MedicationClass(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_class/test_medication_class.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+# import frappe
+import unittest
+
+
+class TestMedicationClass(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_ingredient/medication_ingredient.json
@@ -0,0 +1,55 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2023-03-23 11:54:50.247310",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "medication",
+  "strength",
+  "strength_uom"
+ ],
+ "fields": [
+  {
+   "fetch_from": "medication.strength",
+   "fieldname": "strength",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Strength",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "medication.strength_uom",
+   "fieldname": "strength_uom",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Strength UOM",
+   "options": "UOM",
+   "reqd": 1
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Medication",
+   "options": "Medication",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-03-27 13:34:21.387111",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medication Ingredient",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_ingredient/medication_ingredient.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class MedicationIngredient(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_linked_item/medication_linked_item.json
@@ -0,0 +1,113 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2023-03-22 17:54:00.674346",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "item_code",
+  "item",
+  "item_group",
+  "stock_uom",
+  "brand",
+  "manufacturer",
+  "description",
+  "column_break_p72x",
+  "is_billable",
+  "rate",
+  "change_in_item"
+ ],
+ "fields": [
+  {
+   "fieldname": "brand",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Brand",
+   "options": "Brand"
+  },
+  {
+   "fieldname": "manufacturer",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Manufacturer",
+   "options": "Manufacturer"
+  },
+  {
+   "depends_on": "is_billable",
+   "fieldname": "rate",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Rate"
+  },
+  {
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Item Code",
+   "no_copy": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Item Group",
+   "no_copy": 1,
+   "options": "Item Group"
+  },
+  {
+   "default": "0",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "label": "is Billable"
+  },
+  {
+   "fieldname": "stock_uom",
+   "fieldtype": "Link",
+   "label": "Stock UOM",
+   "no_copy": 1,
+   "options": "UOM"
+  },
+  {
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Item",
+   "no_copy": 1,
+   "options": "Item",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_p72x",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Change In Item"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-03-27 16:41:58.413488",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medication Linked Item",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_linked_item/medication_linked_item.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class MedicationLinkedItem(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_request/medication_request.js
@@ -0,0 +1,16 @@
+// Copyright (c) 2022, healthcare and contributors
+// For license information, please see license.txt
+{% include "healthcare/public/js/service_request.js" %}
+
+frappe.ui.form.on('Medication Request', {
+    refresh: function(frm) {
+        frm.set_query("status", function () {
+			return {
+				"filters": {
+					"code_system": "Medication Request Status",
+				}
+			};
+		});
+	},
+
+})
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_request/medication_request.json
@@ -0,0 +1,525 @@
+{
+ "actions": [],
+ "allow_auto_repeat": 1,
+ "autoname": "naming_series:",
+ "beta": 1,
+ "creation": "2020-09-09 15:30:33.141582",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "naming_series",
+  "medication",
+  "medication_item",
+  "order_date",
+  "expected_date",
+  "order_time",
+  "column_break_4",
+  "company",
+  "status",
+  "patient_detail_section",
+  "patient",
+  "patient_name",
+  "patient_gender",
+  "patient_birth_date",
+  "patient_age_data",
+  "patient_age",
+  "patient_blood_group",
+  "column_break_16",
+  "patient_email",
+  "patient_mobile",
+  "inpatient_record",
+  "inpatient_status",
+  "order_source_section",
+  "practitioner",
+  "practitioner_name",
+  "practitioner_email",
+  "medical_department",
+  "referred_to_practitioner",
+  "column_break_10",
+  "reason_reference_doctype",
+  "reason_reference",
+  "order_group",
+  "sequence",
+  "request_details_section",
+  "staff_role",
+  "item_code",
+  "column_break_14",
+  "intent",
+  "priority",
+  "order_specs_section",
+  "quantity",
+  "dosage_form",
+  "dosage",
+  "number_of_repeats_allowed",
+  "column_break_91",
+  "order_description",
+  "period",
+  "occurrence_time",
+  "total_dispensable_quantity",
+  "billing_section",
+  "billing_status",
+  "qty_invoiced",
+  "column_break_26",
+  "medical_code_section",
+  "codification_table",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HMR-",
+   "reqd": 1
+  },
+  {
+   "depends_on": "order_group",
+   "fieldname": "sequence",
+   "fieldtype": "Int",
+   "label": "Sequence in Order Group"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Today",
+   "fieldname": "order_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Order Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "order_group",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Order Group (Encounter)",
+   "options": "Patient Encounter"
+  },
+  {
+   "fieldname": "column_break_91",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "expected_date",
+   "fieldtype": "Date",
+   "label": "Expected By"
+  },
+  {
+   "description": "The role responsible for performing the medication request",
+   "fetch_from": "order_template.staff_role",
+   "fetch_if_empty": 1,
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role",
+   "search_index": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "Draft",
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "status",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "no_copy": 1,
+   "options": "Code Value",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_code_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "default": "1",
+   "fieldname": "quantity",
+   "fieldtype": "Int",
+   "label": "Quantity"
+  },
+  {
+   "fieldname": "reason_reference_doctype",
+   "fieldtype": "Link",
+   "label": "Reason Reference DocType",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reason_reference",
+   "fieldtype": "Dynamic Link",
+   "label": "Reason Reference",
+   "options": "reason_reference_doctype",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "order_description",
+   "fieldtype": "Small Text",
+   "label": "Order Description"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_16",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Ordered by Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1,
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "order_source_section",
+   "fieldtype": "Section Break",
+   "label": "Order Source"
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "label": "Dosage Form",
+   "options": "Dosage Form",
+   "reqd": 1
+  },
+  {
+   "depends_on": "eval:!doc.as_needed",
+   "fieldname": "dosage",
+   "fieldtype": "Link",
+   "label": "Dosage",
+   "options": "Prescription Dosage",
+   "reqd": 1
+  },
+  {
+   "fieldname": "referred_to_practitioner",
+   "fieldtype": "Link",
+   "label": "Referred to Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "depends_on": "order_template",
+   "fetch_from": "order_template.item",
+   "fieldname": "item_code",
+   "fieldtype": "Read Only",
+   "label": "Order Item Code",
+   "options": "Item"
+  },
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.inpatient_status",
+   "fieldname": "inpatient_status",
+   "fieldtype": "Data",
+   "label": "Inpatient Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "order_time",
+   "fieldtype": "Time",
+   "label": "Order Time",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.blood_group",
+   "fieldname": "patient_blood_group",
+   "fieldtype": "Select",
+   "label": "Blood Group",
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.email",
+   "fieldname": "patient_email",
+   "fieldtype": "Data",
+   "label": "Email",
+   "options": "Email",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.mobile",
+   "fieldname": "patient_mobile",
+   "fieldtype": "Data",
+   "label": "Mobile",
+   "options": "Phone",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "patient_birth_date",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_detail_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "order_specs_section",
+   "fieldtype": "Section Break",
+   "label": "Order Specifications"
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_26",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval:!doc.as_needed;",
+   "fieldname": "period",
+   "fieldtype": "Link",
+   "label": "Period",
+   "options": "Prescription Duration"
+  },
+  {
+   "depends_on": "eval:!doc.as_needed && doc.order_doctype!==\"Medication\";",
+   "fieldname": "occurrence_time",
+   "fieldtype": "Time",
+   "label": "Occurrence Time"
+  },
+  {
+   "fieldname": "patient_age_data",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "billing_section",
+   "fieldtype": "Section Break",
+   "label": "Billing"
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "0",
+   "fieldname": "qty_invoiced",
+   "fieldtype": "Float",
+   "label": "Quantity Invoiced",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "Pending",
+   "fieldname": "billing_status",
+   "fieldtype": "Select",
+   "label": "Billing Status",
+   "options": "Pending\nPartly Invoiced\nInvoiced",
+   "read_only": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Medication Request",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Link",
+   "label": "Medication",
+   "options": "Medication",
+   "search_index": 1
+  },
+  {
+   "fieldname": "number_of_repeats_allowed",
+   "fieldtype": "Float",
+   "label": "Number Of Repeats Allowed",
+   "read_only": 1
+  },
+  {
+   "fieldname": "total_dispensable_quantity",
+   "fieldtype": "Float",
+   "label": "Total Dispensable Quantity",
+   "read_only": 1
+  },
+  {
+   "fieldname": "request_details_section",
+   "fieldtype": "Section Break",
+   "label": "Request Details"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.user_id",
+   "fieldname": "practitioner_email",
+   "fieldtype": "Data",
+   "label": "Practitioner Email"
+  },
+  {
+   "fieldname": "medication_item",
+   "fieldtype": "Link",
+   "label": "Medication Item",
+   "options": "Item",
+   "reqd": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-02-13 12:58:48.827434",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Medication Request",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "title,patient,order_group,inpatient_record,practitioner,patient_email,patient_mobile",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "title",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_request/medication_request.py
@@ -0,0 +1,89 @@
+# Copyright (c) 2022, healthcare and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+import frappe
+from frappe import _
+
+from healthcare.controllers.service_request_controller import ServiceRequestController
+
+
+class MedicationRequest(ServiceRequestController):
+	def on_update_after_submit(self):
+		self.validate_invoiced_qty()
+
+	def set_title(self):
+		if frappe.flags.in_import and self.title:
+			return
+		self.title = f"{self.patient_name} - {self.medication or self.medication_item}"
+
+	def before_insert(self):
+		self.calculate_total_dispensable_quantity()
+		self.status = "draft-Medication Request Status"
+
+		if self.amended_from:
+			frappe.db.set_value(
+				"Medication Request", self.amended_from, "status", "stopped-Medication Request Status"
+			)
+
+	def set_order_details(self):
+		if self.medication:
+			medication = frappe.get_doc("Medication", self.medication)
+			# set item code
+			self.item_code = medication.get("item")
+
+			if not self.staff_role and medication.get("staff_role"):
+				self.staff_role = medication.staff_role
+
+		if not self.intent:
+			self.intent = frappe.db.get_single_value("Healthcare Settings", "default_intent")
+
+		if not self.priority:
+			self.priority = frappe.db.get_single_value("Healthcare Settings", "default_priority")
+
+	def calculate_total_dispensable_quantity(self):
+		if self.number_of_repeats_allowed:
+			self.total_dispensable_quantity = self.quantity + (
+				self.number_of_repeats_allowed * self.quantity
+			)
+		else:
+			self.total_dispensable_quantity = self.quantity
+
+	def update_invoice_details(self, qty):
+		"""
+		updates qty_invoiced and set  billing status
+		"""
+		qty_invoiced = self.qty_invoiced + qty
+
+		if qty_invoiced == 0:
+			status = "Pending"
+		if self.number_of_repeats_allowed and self.total_dispensable_quantity:
+			if qty_invoiced < self.total_dispensable_quantity:
+				status = "Partly Invoiced"
+			else:
+				status = "Invoiced"
+		else:
+			if qty_invoiced < self.quantity:
+				status = "Partly Invoiced"
+			else:
+				status = "Invoiced"
+
+		medication_request_doc = frappe.get_doc("Medication Request", self.name)
+		medication_request_doc.qty_invoiced = qty_invoiced
+		medication_request_doc.billing_status = status
+		medication_request_doc.save(ignore_permissions=True)
+
+	def validate_invoiced_qty(self):
+		if self.qty_invoiced > self.total_dispensable_quantity:
+			frappe.throw(
+				_("Maximum billable quantity exceeded by {0}").format(
+					frappe.bold(self.qty_invoiced - self.total_dispensable_quantity)
+				),
+				title=_("Maximum Quantity Exceeded"),
+			)
+
+
+@frappe.whitelist()
+def set_medication_request_status(medication_request, status):
+	frappe.db.set_value("Medication Request", medication_request, "status", status)
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_request/medication_request_list.js
@@ -0,0 +1,18 @@
+frappe.listview_settings[('Medication Request')] = {
+	add_fields: ['name', 'status'],
+	filters: [['docstatus', '=', '1']],
+	has_indicator_for_cancelled: 1,
+	get_indicator: function (doc) {
+		return [__(doc.status), {
+			'active-Medication Request Status': 'green',
+			'on-hold-Medication Request Status': 'yellow',
+			'stopped-Medication Request Status': 'orange',
+			'ended-Medication Request Status': 'grey',
+			'completed-Medication Request Status': 'blue',
+			'cancelled-Medication Request Status': 'yellow',
+			'entered-in-error-Medication Request Status': 'red',
+			'draft-Medication Request Status': 'orange',
+			'unknown-Medication Request Status': 'grey',
+		}[doc.status], 'status,=,' + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/medication_request/test_medication_request.py
@@ -0,0 +1,79 @@
+# Copyright (c) 2022, healthcare and Contributors
+# See license.txt
+
+import unittest
+
+import frappe
+
+from erpnext.stock.doctype.item.test_item import create_item
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_healthcare_docs,
+)
+from healthcare.healthcare.doctype.service_request.test_service_request import (
+	create_encounter,
+	create_sales_invoice,
+)
+
+
+class TestMedicationRequest(unittest.TestCase):
+	def setup(self):
+		frappe.db.sql("""delete from `tabMedication` where name = '_Test Medication'""")
+
+	def test_medication_request(self):
+		patient, practitioner = create_healthcare_docs()
+		medication = create_medication()
+		encounter = create_encounter(patient, practitioner, "drug_prescription", medication, submit=True)
+		self.assertTrue(frappe.db.exists("Medication Request", {"order_group": encounter.name}))
+		medication_request = frappe.db.get_value(
+			"Medication Request", {"order_group": encounter.name}, "name"
+		)
+		if medication_request:
+			medication_request_doc = frappe.get_doc("Medication Request", medication_request)
+			medication_request_doc.submit()
+			create_sales_invoice(patient, medication_request_doc, medication, "drug_prescription")
+			self.assertEqual(
+				frappe.db.get_value("Medication Request", medication_request_doc.name, "qty_invoiced"), 1
+			)
+			self.assertEqual(
+				frappe.db.get_value("Medication Request", medication_request_doc.name, "billing_status"),
+				"Invoiced",
+			)
+
+
+def create_medication():
+	if not frappe.db.exists("Medication", "_Test Medication"):
+		if not frappe.db.exists("Medication Class", "Tablet"):
+			try:
+				medication = frappe.get_doc(
+					{
+						"doctype": "Medication Class",
+						"medication_class": "Tablet",
+					}
+				).insert(ignore_permissions=True)
+			except frappe.DuplicateEntryError:
+				pass
+		try:
+			item_name = "_Test PL Item"
+			item = create_item(item_code=item_name, is_stock_item=0)
+			medication = frappe.get_doc(
+				{
+					"doctype": "Medication",
+					"generic_name": "_Test Medication",
+					"medication_class": "Tablet",
+					"abbr": "Test",
+					"strength": 500,
+					"strength_uom": "Unit",
+					"dosage_form": "Capsule",
+					"default_prescription_dosage": "0-1-0",
+					"default_prescription_duration": "1 Hour",
+					"is_billable": 1,
+					"rate": 800,
+					"linked_items": [{"item": item.item_code, "item_code": item.item_name, "item_group": "Drug"}],
+				}
+			).insert(ignore_permissions=True, ignore_mandatory=True)
+			return medication
+		except frappe.DuplicateEntryError:
+			pass
+	else:
+		return frappe.get_doc("Medication", "_Test Medication")
--- /dev/null
+++ b/healthcare/healthcare/doctype/normal_test_result/normal_test_result.json
@@ -0,0 +1,193 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2016-02-22 15:06:08.295224",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "lab_test_name",
+  "lab_test_event",
+  "result_value",
+  "lab_test_uom",
+  "secondary_uom_result",
+  "secondary_uom",
+  "conversion_factor",
+  "prev_result",
+  "column_break_10",
+  "allow_blank",
+  "normal_range",
+  "lab_test_comment",
+  "bold",
+  "italic",
+  "underline",
+  "template",
+  "require_result_value"
+ ],
+ "fields": [
+  {
+   "fieldname": "lab_test_name",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Test Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "lab_test_event",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Event",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "result_value",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Result Value"
+  },
+  {
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "lab_test_uom",
+   "fieldtype": "Link",
+   "label": "UOM",
+   "options": "Lab Test UOM",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "normal_range",
+   "fieldtype": "Long Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Normal Range",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "lab_test_comment",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "in_list_view": 1,
+   "label": "Comment",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "template",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Template",
+   "options": "Lab Test Template",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "secondary_uom",
+   "fieldtype": "Link",
+   "label": "Secondary UOM",
+   "options": "Lab Test UOM",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "depends_on": "secondary_uom",
+   "fieldname": "conversion_factor",
+   "fieldtype": "Float",
+   "label": "Conversion Factor",
+   "mandatory_depends_on": "secondary_uom",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.require_result_value && doc.result_value",
+   "fieldname": "secondary_uom_result",
+   "fieldtype": "Data",
+   "label": "Secondary UOM Result",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "0",
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "bold",
+   "fieldtype": "Check",
+   "label": "Bold",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "0",
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "italic",
+   "fieldtype": "Check",
+   "label": "Italic",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "0",
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "underline",
+   "fieldtype": "Check",
+   "label": "Underline",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "require_result_value",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Require Result Value",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "1",
+   "depends_on": "eval:doc.require_result_value",
+   "fieldname": "allow_blank",
+   "fieldtype": "Check",
+   "label": "Allow Blank",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "prev_result",
+   "fieldtype": "Data",
+   "label": "Previous Result",
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2024-09-07 18:07:32.567872",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Normal Test Result",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/normal_test_result/normal_test_result.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class NormalTestResult(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/normal_test_template/normal_test_template.json
@@ -0,0 +1,84 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "beta": 0,
+ "creation": "2016-02-22 16:09:54.310628",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "heading_text",
+  "lab_test_event",
+  "allow_blank",
+  "lab_test_uom",
+  "secondary_uom",
+  "conversion_factor",
+  "column_break_5",
+  "normal_range"
+ ],
+ "fields": [
+  {
+   "fieldname": "heading_text",
+   "fieldtype": "Heading",
+   "ignore_xss_filter": 1,
+   "label": "Test"
+  },
+  {
+   "fieldname": "lab_test_event",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Event"
+  },
+  {
+   "fieldname": "lab_test_uom",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "fieldname": "normal_range",
+   "fieldtype": "Long Text",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Normal Range"
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "secondary_uom",
+   "fieldtype": "Link",
+   "label": "Secondary UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "depends_on": "secondary_uom",
+   "fieldname": "conversion_factor",
+   "fieldtype": "Float",
+   "label": "Conversion Factor",
+   "mandatory_depends_on": "secondary_uom"
+  },
+  {
+   "default": "0",
+   "fieldname": "allow_blank",
+   "fieldtype": "Check",
+   "label": "Allow Blank"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-06-23 13:28:40.156224",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Normal Test Template",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/normal_test_template/normal_test_template.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class NormalTestTemplate(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template/nursing_checklist_template.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2021, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Nursing Checklist Template', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template/nursing_checklist_template.json
@@ -0,0 +1,94 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:title",
+ "creation": "2021-10-20 12:03:38.538651",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "disabled",
+  "section_break_2",
+  "title",
+  "department",
+  "checklist_section",
+  "tasks"
+ ],
+ "fields": [
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "label": "Title",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "tasks",
+   "fieldtype": "Table",
+   "label": "Tasks",
+   "options": "Nursing Checklist Template Task",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "fieldname": "section_break_2",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "checklist_section",
+   "fieldtype": "Section Break",
+   "label": "Checklist"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2022-07-25 19:27:22.028262",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Nursing Checklist Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template/nursing_checklist_template.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class NursingChecklistTemplate(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template/test_nursing_checklist_template.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, healthcare and Contributors
+# See license.txt
+
+# import frappe
+import unittest
+
+
+class TestNursingChecklistTemplate(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template/test_records.json
@@ -0,0 +1,27 @@
+[
+  {
+    "doctype":"Healthcare Activity",
+    "name":"BP Check",
+    "activity":"BP Check",
+    "description":"BP Check",
+    "activity_duration":60,
+    "role":"Nursing User",
+    "task_doctype":"Vital Signs"
+  },
+  {
+    "doctype": "Nursing Checklist Template",
+    "name": "Discharge checklist",
+    "title": "Discharge checklist",
+    "tasks": [
+      {
+        "doctype": "Nursing Checklist Template Task",
+        "activity": "BP Check",
+        "mandatory": 1,
+        "task_duration": 60,
+        "parent": "Discharge checklist",
+        "parentfield": "tasks",
+        "parenttype": "Nursing Checklist Template"
+      }
+    ]
+  }
+]
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template_task/nursing_checklist_template_task.json
@@ -0,0 +1,104 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2021-10-28 06:34:02.606386",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "activity",
+  "mandatory",
+  "type",
+  "time_offset",
+  "description",
+  "column_break_5",
+  "task_duration",
+  "task_doctype",
+  "role"
+ ],
+ "fields": [
+  {
+   "fieldname": "activity",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Activity",
+   "options": "Healthcare Activity"
+  },
+  {
+   "columns": 3,
+   "fetch_from": "activity.description",
+   "fetch_if_empty": 1,
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description"
+  },
+  {
+   "columns": 1,
+   "fieldname": "type",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Type",
+   "options": "\nPre-Op\nPost-Op"
+  },
+  {
+   "fetch_from": "activity.role",
+   "fetch_if_empty": 1,
+   "fieldname": "role",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Role",
+   "options": "Role"
+  },
+  {
+   "columns": 1,
+   "default": "0",
+   "fieldname": "mandatory",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Mandatory"
+  },
+  {
+   "description": "System will validate if a document of this type is created and linked before completing the Nursing Task - for example, Vital Signs if the task is supposed to capture the vitals of the Patient",
+   "fetch_from": "activity.task_doctype",
+   "fetch_if_empty": 1,
+   "fieldname": "task_doctype",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Task Doctype",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "Default duration which the task can take to complete",
+   "fetch_from": "activity.activity_duration",
+   "fetch_if_empty": 1,
+   "fieldname": "task_duration",
+   "fieldtype": "Duration",
+   "in_list_view": 1,
+   "label": "Task Duration"
+  },
+  {
+   "description": "The time duration before or after the event on which the Nursing Task is to be performed. The Nursing Task start time will be set based on this.",
+   "fieldname": "time_offset",
+   "fieldtype": "Duration",
+   "in_list_view": 1,
+   "label": "Time Offset"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2022-07-25 19:33:44.109535",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Nursing Checklist Template Task",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_checklist_template_task/nursing_checklist_template_task.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class NursingChecklistTemplateTask(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_task/nursing_task.js
@@ -0,0 +1,107 @@
+// Copyright (c) 2021, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Nursing Task', {
+
+	onload: function(frm) {
+
+		const task_document_field = frm.get_docfield("task_document_name");
+		task_document_field.get_route_options_for_new_doc = () => {
+			if (frm.is_new()) return;
+			return {
+				'company': frm.doc.company,
+				'medical_department': frm.doc.medical_department,
+				'service_unit': frm.doc.service_unit,
+				'patient': frm.doc.patient,
+			};
+		};
+
+		if (frm.doc.task_doctype) {
+			// set description
+			frm.set_df_property('task_document_name', 'description',
+				`Create and link a new ${frm.doc.task_doctype} document to complete this task`);
+
+			// set filters
+			let filters = {};
+			frappe.model.with_doctype(frm.doc.task_doctype, function() {
+				if (frappe.meta.has_field(frm.doc.task_doctype, 'patient')) {
+					filters['patient'] = frm.doc.patient;
+				}
+
+				frm.set_query('task_document_name', () => {
+					return {
+						filters: filters
+					}
+				});
+			});
+		}
+	},
+
+	refresh: function(frm) {
+
+		// TODO: handle routing back to nursing task form
+		// frm.trigger('show_form_route_button');
+
+		if (frm.is_new()) {
+			frm.set_value('status', 'Draft');
+		}
+
+		let status_list = ['Accepted', 'Received', 'Rejected',
+			'Ready', 'Failed', 'Entered in Error', 'On Hold'];
+		if (status_list.includes(frm.doc.status) || frm.doc.status == 'Requested') {
+
+			// set primary action to start
+			frm.page.set_primary_action(__('Start'), () => {
+				frm.events.update_status(frm, 'In Progress');
+			});
+
+			// optionally allow updating other statuses
+			status_list.filter(status => status != frm.doc.status).forEach(status => {
+
+				frm.add_custom_button(__(`${status}`), () => {
+					frm.events.update_status(frm, `${status}`);
+				}, __('Update Status'));
+
+			});
+		}
+
+		if (frm.doc.status == 'In Progress') {
+			frm.page.set_primary_action(__('Complete'), () => {
+				if (frm.doc.task_doctype){
+					frm.set_df_property('task_document_name', 'reqd', 1);
+				}
+				frm.events.update_status(frm, 'Completed');
+			});
+
+			frm.add_custom_button(__('Hold'), () => {
+				frm.set_df_property('task_document_name', 'reqd', 0);
+				frm.events.update_status(frm, 'On Hold');
+			});
+		}
+	},
+
+	update_status(frm, status) {
+		frm.set_value('status', status);
+		frm.save('Update');
+		frm.reload_doc();
+	},
+
+	show_form_route_button: function(frm) {
+
+		// add custom button to route to new Task DocType form
+		if (!frm.is_new() && !frm.is_dirty() && frm.doc.task_doctype) {
+
+			frm.add_custom_button(__(`New ${frm.doc.task_doctype}`), () => {
+				frappe.route_options = {
+					'patient': frm.doc.patient,
+					'medical_department': frm.doc.medical_department,
+					'company': frm.doc.company,
+					'service_unit': frm.doc.service_unit,
+				};
+
+				frappe.new_doc(frm.doc.task_doctype);
+			});
+
+		}
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_task/nursing_task.json
@@ -0,0 +1,384 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2022-01-18 15:18:15.657622",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "title",
+  "date",
+  "user",
+  "column_break_5",
+  "company",
+  "service_unit",
+  "medical_department",
+  "status",
+  "task_details",
+  "activity",
+  "mandatory",
+  "column_break_2",
+  "description",
+  "patient_details_section",
+  "patient",
+  "patient_name",
+  "age",
+  "gender",
+  "column_break_6",
+  "inpatient_record",
+  "inpatient_status",
+  "task_schedule_section",
+  "requested_start_time",
+  "requested_end_time",
+  "duration",
+  "column_break_18",
+  "task_start_time",
+  "task_end_time",
+  "task_duration",
+  "source_section",
+  "reference_doctype",
+  "amended_from",
+  "column_break_8",
+  "reference_name",
+  "section_break_28",
+  "task_doctype",
+  "task_document_name",
+  "notes"
+ ],
+ "fields": [
+  {
+   "fieldname": "activity",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Activity",
+   "options": "Healthcare Activity",
+   "read_only_depends_on": "eval:doc.reference_name",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "activity.description",
+   "fetch_if_empty": 1,
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_doctype",
+   "fieldtype": "Link",
+   "label": "Reference Doctype",
+   "no_copy": 1,
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Dynamic Link",
+   "label": "Reference Name",
+   "no_copy": 1,
+   "options": "reference_doctype",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "Draft",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Draft\nRequested\nReceived\nAccepted\nRejected\nReady\nIn Progress\nOn Hold\nCompleted\nFailed\nCancelled\nEntered in Error",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_8",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "user",
+   "fieldtype": "Link",
+   "label": "User",
+   "options": "User"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Nursing Task",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "task_details",
+   "fieldtype": "Section Break",
+   "label": "Task Details"
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming Series",
+   "options": "HLC-NUR-.YYYY.-"
+  },
+  {
+   "default": "0",
+   "fieldname": "mandatory",
+   "fieldtype": "Check",
+   "label": "Mandatory",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "fetch_from": "activity.task_doctype",
+   "fetch_if_empty": 1,
+   "fieldname": "task_doctype",
+   "fieldtype": "Link",
+   "label": "Task Doctype",
+   "options": "DocType"
+  },
+  {
+   "allow_on_submit": 1,
+   "description": "Create and link the document to complete this task",
+   "fieldname": "task_document_name",
+   "fieldtype": "Dynamic Link",
+   "label": "Task Document Name",
+   "no_copy": 1,
+   "options": "task_doctype",
+   "read_only": 1,
+   "read_only_depends_on": "eval:in_list([\"Completed\", \"Failed\", \"Cancelled\"], doc.status)"
+  },
+  {
+   "fieldname": "patient_details_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "age",
+   "fieldtype": "Data",
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.inpatient_status",
+   "fieldname": "inpatient_status",
+   "fieldtype": "Data",
+   "label": "Inpatient Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "read_only_depends_on": "eval:doc.reference_name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "default": "Today",
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "section_break_28",
+   "fieldtype": "Section Break",
+   "label": "Task Resolution"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "notes",
+   "fieldtype": "Text Editor",
+   "label": "Notes",
+   "no_copy": 1,
+   "read_only_depends_on": "eval:in_list([\"Completed\", \"Failed\", \"Cancelled\"], doc.status)"
+  },
+  {
+   "bold": 1,
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "read_only_depends_on": "eval:doc.reference_name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "label": "Title",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "requested_start_time",
+   "fieldtype": "Datetime",
+   "label": "Requested Start Time",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "fieldname": "requested_end_time",
+   "fieldtype": "Datetime",
+   "label": "Requested End Time",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "fetch_from": "activity.activity_duration",
+   "fetch_if_empty": 1,
+   "fieldname": "duration",
+   "fieldtype": "Duration",
+   "label": "Duration",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "fieldname": "task_schedule_section",
+   "fieldtype": "Section Break",
+   "label": "Task Schedule"
+  },
+  {
+   "fieldname": "column_break_18",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "task_start_time",
+   "fieldtype": "Datetime",
+   "label": "Task Start Time",
+   "read_only_depends_on": "eval:in_list([\"Completed\", \"Failed\", \"Cancelled\"], doc.status)"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "task_end_time",
+   "fieldtype": "Datetime",
+   "label": "Task End Time",
+   "read_only_depends_on": "eval:in_list([\"Completed\", \"Failed\", \"Cancelled\"], doc.status)"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "task_duration",
+   "fieldtype": "Duration",
+   "label": "Task Duration",
+   "read_only": 1
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only_depends_on": "eval:doc.reference_name"
+  },
+  {
+   "fieldname": "source_section",
+   "fieldtype": "Section Break",
+   "label": "Source"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2022-01-19 15:34:31.760433",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Nursing Task",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 1,
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "amend": 1,
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "search_fields": "patient, activity, user",
+ "sort_field": "requested_start_time",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "title",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_task/nursing_task.py
@@ -0,0 +1,144 @@
+# Copyright (c) 2021, healthcare and contributors
+# For license information, please see license.txt
+import json
+
+from six import string_types
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import add_to_date, get_datetime, getdate, now_datetime, time_diff_in_seconds
+
+from erpnext import get_default_company
+
+
+class NursingTask(Document):
+	def before_insert(self):
+		# set requested start / end
+		self.set_task_schedule()
+
+		self.title = "{} - {}".format(_(self.patient), _(self.activity))
+
+		self.age = frappe.get_doc("Patient", self.patient).get_age()
+
+	def validate(self):
+		if self.status == "Requested":
+			# auto submit if status is Requested
+			self.docstatus = 1
+
+	def on_submit(self):
+		self.db_set("status", "Requested")
+
+	def on_cancel(self):
+		if self.status == "Completed":
+			frappe.throw(_("Not Allowed to cancel Nursing Task with status 'Completed'"))
+
+		self.db_set("status", "Cancelled")
+
+	def on_update_after_submit(self):
+		if self.status == "Completed" and self.task_doctype and not self.task_document_name:
+			frappe.throw(_("Not Allowed to 'Complete' Nursing Task without linking Task Document"))
+
+		if self.status == "Draft":
+			frappe.throw(_("Nursing Task cannot be 'Draft' after submission"))
+
+		if self.status == "In Progress":
+			if not self.task_start_time:
+				self.db_set("task_start_time", now_datetime())
+
+		elif self.status == "Completed":
+			self.db_set(
+				{
+					"task_end_time": now_datetime(),
+					"task_duration": time_diff_in_seconds(self.task_end_time, self.task_start_time),
+				}
+			)
+
+		self.notify_update()
+
+	def set_task_schedule(self):
+		if not self.requested_start_time or (get_datetime(self.requested_start_time) < now_datetime()):
+			self.requested_start_time = now_datetime()
+
+		if not self.requested_end_time:
+			if not self.duration:
+				self.duration = frappe.db.get_value("Healthcare Activity", self.activity, "duration")
+			self.requested_end_time = add_to_date(self.requested_start_time, seconds=self.duration)
+
+		# set date based on requested_start_time
+		self.date = getdate(self.requested_start_time)
+
+	@classmethod
+	def create_nursing_tasks_from_template(cls, template, doc, start_time=None, post_event=True):
+		tasks = frappe.get_all(
+			"Nursing Checklist Template Task",
+			filters={"parent": template},
+			fields=["*"],
+		)
+
+		start_time = start_time or now_datetime()
+		NursingTask.create_nursing_tasks(tasks, doc, start_time, post_event)
+
+	@classmethod
+	def create_nursing_tasks(cls, tasks, doc, start_time, post_event=True):
+		for task in tasks:
+			medical_department = (
+				doc.get("department") if doc.get("department") else doc.get("medical_department")
+			)
+			if doc.get("doctype") == "Inpatient Record":
+				service_unit = (
+					frappe.db.get_value("Inpatient Occupancy", {"parent": doc.name, "left": 0}, "service_unit"),
+				)
+			else:
+				service_unit = (
+					doc.get("service_unit") if doc.get("service_unit") else doc.get("healthcare_service_unit")
+				)
+
+			options = {
+				"doctype": "Nursing Task",
+				"status": "Requested",
+				"company": doc.get("company", get_default_company()),
+				"service_unit": service_unit,
+				"medical_department": medical_department,
+				"reference_doctype": doc.get("doctype"),
+				"reference_name": doc.get("name"),
+				"patient": doc.get("patient"),
+				"activity": task.activity,
+				"mandatory": task.mandatory,
+				"duration": task.task_duration,
+				"task_doctype": task.task_doctype,
+			}
+
+			if task.time_offset:
+				time_offset = task.time_offset if not post_event else 0 - task.time_offset
+				requested_start_time = add_to_date(start_time, seconds=time_offset)
+			else:
+				requested_start_time = start_time
+
+			options.update({"requested_start_time": requested_start_time})
+
+			options = {key: value for (key, value) in options.items() if value}
+			frappe.get_doc(options).insert()
+
+	@classmethod
+	def cancel_nursing_tasks(cls, dt, dn):
+		tasks = frappe.db.get_all(
+			"Nursing Task",
+			filters={
+				"reference_doctype": dt,
+				"reference_document": dn,
+				"status": ["!=", "Completed", "Cancelled"],
+			},
+		)
+
+		for task in tasks:
+			frappe.get_doc("Nursing Task", task).cancel()
+
+
+@frappe.whitelist()
+def create_nursing_tasks_from_template(template, doc, start_time, post_event=True):
+	if isinstance(doc, string_types):
+		doc = json.loads(doc)
+
+	start_time = start_time or now_datetime()
+	NursingTask.create_nursing_tasks_from_template(template, doc, start_time, post_event)
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_task/nursing_task_list.js
@@ -0,0 +1,37 @@
+// Copyright (c) 2021, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.listview_settings['Nursing Task'] = {
+	filters: [['status', 'not in', ['Failed', 'Cancelled', 'Completed']]],
+	hide_name_column: true,
+	has_indicator_for_draft: true,
+	get_indicator: function (doc) {
+		if (doc.status === 'Draft') {
+			return [__('Draft'), 'orange', 'status, =, Draft'];
+
+		} else if (doc.status === 'Requested') {
+			return [__('Requested'), 'orange', 'status, =, Requested'];
+
+		} else if (doc.status === 'Rejected') {
+			return [__('Rejected'), 'red', 'status, =, Rejected'];
+
+		} else if (doc.status === 'Entered in Error') {
+			return [__('Entered in Error'), 'red', 'status, =, Entered In Error'];
+
+		} else if (doc.status === 'Completed') {
+			return [__('Completed'), 'green', 'status, =, Completed'];
+
+		} else if (doc.status === 'Cancelled') {
+			return [__('Cancelled'), 'grey', 'status, =, Cancelled'];
+
+		}  else if (doc.status === 'Failed') {
+			return [__('Failed'), 'red', 'status, =, Failed'];
+
+		}  else if (doc.status === 'In Progress') {
+			return [__('In Progress'), 'blue', 'status, =, In Progress'];
+
+		} else { // Received, On Hold, Accepted, Ready
+			return [__(doc.status), 'light-blue', `status, =, ${doc.status}`];
+		}
+	}
+};
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/nursing_task/test_nursing_task.py
@@ -0,0 +1,150 @@
+# Copyright (c) 2021, healthcare and Contributors
+# See license.txt
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import now_datetime
+
+from healthcare.healthcare.doctype.clinical_procedure.test_clinical_procedure import (
+	create_procedure,
+)
+from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+	admit_patient,
+	discharge_patient,
+)
+from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+	create_inpatient,
+	get_healthcare_service_unit,
+)
+from healthcare.healthcare.doctype.lab_test.test_lab_test import (
+	create_lab_test,
+	create_lab_test_template,
+)
+from healthcare.healthcare.doctype.nursing_task.nursing_task import NursingTask
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_clinical_procedure_template,
+	create_healthcare_docs,
+)
+from healthcare.healthcare.doctype.therapy_plan.test_therapy_plan import create_therapy_plan
+from healthcare.healthcare.doctype.therapy_session.test_therapy_session import (
+	create_therapy_session,
+)
+from healthcare.healthcare.doctype.therapy_type.test_therapy_type import create_therapy_type
+
+
+class TestNursingTask(FrappeTestCase):
+	def setUp(self) -> None:
+		nursing_checklist_templates = frappe.get_test_records("Nursing Checklist Template")
+
+		self.activity = frappe.get_doc(nursing_checklist_templates[0]).insert(ignore_if_duplicate=True)
+		self.nc_template = frappe.get_doc(nursing_checklist_templates[1]).insert(
+			ignore_if_duplicate=True
+		)
+
+		self.settings = frappe.get_single("Healthcare Settings")
+		self.settings.validate_nursing_checklists = 1
+		self.settings.save()
+
+		self.patient, self.practitioner = create_healthcare_docs()
+
+	def test_lab_test_submission_should_validate_pending_nursing_tasks(self):
+		self.lt_template = create_lab_test_template()
+		self.lt_template.nursing_checklist_template = self.nc_template.name
+		self.lt_template.save()
+
+		lab_test = create_lab_test(self.lt_template)
+		lab_test.descriptive_test_items[0].result_value = 12
+		lab_test.descriptive_test_items[1].result_value = 1
+		lab_test.descriptive_test_items[2].result_value = 2.3
+		lab_test.save()
+
+		self.assertRaises(frappe.ValidationError, lab_test.submit)
+
+		complete_nusing_tasks(lab_test)
+		lab_test.submit()
+
+	def test_start_clinical_procedure_should_validate_pending_nursing_tasks(self):
+		procedure_template = create_clinical_procedure_template()
+		procedure_template.allow_stock_consumption = 1
+		procedure_template.pre_op_nursing_checklist_template = self.nc_template.name
+		procedure_template.save()
+
+		procedure = create_procedure(procedure_template, self.patient, self.practitioner)
+		self.assertRaises(frappe.ValidationError, procedure.start_procedure)
+
+		complete_nusing_tasks(procedure)
+		procedure.start_procedure()
+
+	def test_admit_inpatient_should_validate_pending_nursing_tasks(self):
+		self.settings.allow_discharge_despite_unbilled_services = 1
+		self.settings.save()
+
+		ip_record = create_inpatient(self.patient)
+		ip_record.admission_nursing_checklist_template = self.nc_template.name
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+		NursingTask.create_nursing_tasks_from_template(
+			ip_record.admission_nursing_checklist_template, ip_record, start_time=now_datetime()
+		)
+
+		service_unit = get_healthcare_service_unit()
+		kwargs = {
+			"inpatient_record": ip_record,
+			"service_unit": service_unit,
+			"check_in": now_datetime(),
+		}
+		self.assertRaises(frappe.ValidationError, admit_patient, **kwargs)
+
+		complete_nusing_tasks(ip_record)
+		admit_patient(**kwargs)
+
+		ip_record.discharge_nursing_checklist_template = self.nc_template.name
+		ip_record.save()
+		NursingTask.create_nursing_tasks_from_template(
+			ip_record.admission_nursing_checklist_template, ip_record, start_time=now_datetime()
+		)
+
+		self.assertRaises(frappe.ValidationError, discharge_patient, inpatient_record=ip_record)
+
+		complete_nusing_tasks(ip_record)
+		discharge_patient(ip_record)
+
+	def test_submit_therapy_session_should_validate_pending_nursing_tasks(self):
+		therapy_type = create_therapy_type()
+		therapy_type.nursing_checklist_template = self.nc_template.name
+		therapy_type.save()
+
+		therapy_plan = create_therapy_plan()
+		therapy_session = create_therapy_session(self.patient, therapy_type.name, therapy_plan.name)
+
+		self.assertRaises(frappe.ValidationError, therapy_session.submit)
+
+		complete_nusing_tasks(therapy_session)
+		therapy_session.submit()
+
+
+def complete_nusing_tasks(document):
+	filters = {
+		"reference_name": document.name,
+		"mandatory": 1,
+		"status": ["not in", ["Completed", "Cancelled"]],
+	}
+	tasks = frappe.get_all("Nursing Task", filters=filters)
+	for task_name in tasks:
+		task = frappe.get_doc("Nursing Task", task_name)
+		task.status = "Completed"
+		task.task_document_name = create_vital_signs(document.patient)
+		task.save()
+
+
+def create_vital_signs(patient):
+	return frappe.get_doc(
+		{
+			"doctype": "Vital Signs",
+			"patient": patient,
+			"signs_date": frappe.utils.nowdate(),
+			"signs_time": frappe.utils.nowtime(),
+			"bp_systolic": 120,
+			"bp_diastolic": 80,
+		}
+	).insert(ignore_if_duplicate=True)
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation/observation.js
@@ -0,0 +1,62 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Observation", {
+	onload_post_render: function(frm) {
+		frm.trigger("set_options");
+	},
+
+	permitted_data_type: function(frm) {
+		frm.trigger("set_options");
+	},
+
+	options: function(frm) {
+		frm.trigger("set_options");
+	},
+
+	set_options: function(frm) {
+		if (frm.doc.permitted_data_type == "Select") {
+			frm.set_df_property('result_select', 'options', frm.doc.options);
+		} else if (frm.doc.permitted_data_type == "Boolean") {
+			frm.set_df_property('result_boolean', 'options', frm.doc.options);
+		}
+	},
+
+	observation_template: function(frm) {
+		get_medical_codes(frm);
+	},
+});
+
+var get_medical_codes = function(frm) {
+	if (frm.doc.observation_template) {
+		frappe.call({
+			"method": "healthcare.healthcare.utils.get_medical_codes",
+			args: {
+				template_dt: "Observation Template",
+				template_dn: frm.doc.observation_template,
+			},
+			callback: function(r) {
+				if (!r.exc && r.message) {
+					frm.doc.codification_table = []
+					$.each(r.message, function(k, val) {
+						if (val.code_value) {
+							var child = frm.add_child("codification_table");
+							child.code_value = val.code_value
+							child.code_system = val.code_system
+							child.code = val.code
+							child.description = val.description
+							child.system = val.system
+						}
+					});
+					frm.refresh_field("codification_table");
+				} else {
+					frm.clear_table("codification_table")
+					frm.refresh_field("codification_table");
+				}
+			}
+		})
+	} else {
+		frm.clear_table("codification_table")
+		frm.refresh_field("codification_table");
+	}
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation/observation.json
@@ -0,0 +1,609 @@
+{
+ "actions": [],
+ "allow_events_in_timeline": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2023-06-09 11:01:49.970959",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "observation_template",
+  "observation_category",
+  "column_break_7xu5",
+  "company",
+  "posting_date",
+  "status",
+  "medical_department",
+  "amended_from",
+  "section_break_i70a",
+  "patient",
+  "patient_name",
+  "column_break_qxq5",
+  "age",
+  "gender",
+  "section_break_zz5k",
+  "healthcare_practitioner",
+  "practitioner_name",
+  "template_details_section",
+  "has_component",
+  "preferred_display_name",
+  "sample_collection_required",
+  "permitted_unit",
+  "column_break_pxgu",
+  "sample",
+  "sample_type",
+  "permitted_data_type",
+  "method",
+  "column_break_meur",
+  "specimen",
+  "sample_collection_time",
+  "column_break_yo05",
+  "sample_status",
+  "result_section",
+  "result_template",
+  "result_attach",
+  "result_boolean",
+  "result_data",
+  "result_text",
+  "result_float",
+  "result_select",
+  "result_datetime",
+  "result_time",
+  "result_period_from",
+  "result_period_to",
+  "options",
+  "time_of_result",
+  "time_of_approval",
+  "column_break_zrac",
+  "interpretation_template",
+  "result_interpretation",
+  "observation_method",
+  "reference_section",
+  "reference",
+  "column_break_2ts3",
+  "section_break_xbqa",
+  "note",
+  "description_section",
+  "description",
+  "medical_coding_section",
+  "codification_table",
+  "tab_more_information",
+  "reference_doctype",
+  "reference_docname",
+  "sales_invoice",
+  "sales_invoice_status",
+  "sales_invoice_item",
+  "service_request",
+  "column_break_wwnp",
+  "disapproval_reason",
+  "parent_observation",
+  "observation_idx",
+  "days",
+  "invoiced"
+ ],
+ "fields": [
+  {
+   "fieldname": "observation_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Observation Template",
+   "options": "Observation Template",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "column_break_7xu5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "Registered",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Registered\nPreliminary\nFinal\nAmended\nCorrected\nCancelled\nEntered in Error\nUnknown\nApproved\nDisapproved",
+   "read_only_depends_on": "eval:doc.docstatus==1;"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "description_section",
+   "fieldtype": "Section Break",
+   "label": "Description"
+  },
+  {
+   "fetch_from": "observation_template.description",
+   "fieldname": "description",
+   "fieldtype": "Text Editor",
+   "label": "Description"
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming",
+   "options": "HLC-OBS-.YYYY.-",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "medical_coding_section",
+   "fieldtype": "Tab Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "age",
+   "fieldtype": "Data",
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender"
+  },
+  {
+   "fieldname": "section_break_i70a",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fetch_from": "observation_template.permitted_data_type",
+   "fieldname": "permitted_data_type",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Permitted Data Type",
+   "options": "Quantity\nSelect\nText\nBoolean\nNumeric\nRange\nRatio\nTime\nDateTime\nPeriod\nAttach",
+   "read_only_depends_on": "observation_template"
+  },
+  {
+   "depends_on": "eval:[\"Range\", \"Ratio\", \"Quantity\", \"Numeric\"].includes(doc.permitted_data_type)",
+   "fieldname": "result_data",
+   "fieldtype": "Data",
+   "label": "Result"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Text\" || doc.observation_category == \"Imaging\";",
+   "fieldname": "result_text",
+   "fieldtype": "Text Editor",
+   "label": "Result"
+  },
+  {
+   "depends_on": "eval:[\"Quantity\", 'Numeric'].includes(doc.permitted_data_type)",
+   "fieldname": "result_float",
+   "fieldtype": "Float",
+   "hidden": 1,
+   "label": "Result"
+  },
+  {
+   "fieldname": "reference_doctype",
+   "fieldtype": "Link",
+   "label": "Reference Doctype",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_docname",
+   "fieldtype": "Dynamic Link",
+   "label": "Reference Docname",
+   "options": "reference_doctype",
+   "read_only": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Observation",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name"
+  },
+  {
+   "fieldname": "column_break_wwnp",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "parent_observation",
+   "fieldtype": "Link",
+   "label": "Parent Observation",
+   "options": "Observation",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Attach\";",
+   "fieldname": "result_attach",
+   "fieldtype": "Attach",
+   "label": "Attach Result"
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "label": "Service Request",
+   "options": "Service Request",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Select\";",
+   "fieldname": "result_select",
+   "fieldtype": "Select",
+   "label": "Result"
+  },
+  {
+   "fieldname": "column_break_meur",
+   "fieldtype": "Section Break",
+   "label": "Sample Details"
+  },
+  {
+   "fieldname": "sales_invoice",
+   "fieldtype": "Link",
+   "label": "Sales Invoice",
+   "options": "Sales Invoice",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.observation_template && [\"Select\", \"Boolean\"].includes(doc.permitted_data_type)",
+   "fetch_from": "observation_template.options",
+   "fieldname": "options",
+   "fieldtype": "Small Text",
+   "label": "Allowed Options",
+   "read_only": 1,
+   "read_only_depends_on": "observation_template"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "sample_collection_time",
+   "fieldtype": "Datetime",
+   "label": "Sample Collection Time"
+  },
+  {
+   "fieldname": "sample_status",
+   "fieldtype": "Select",
+   "label": "Sample Status",
+   "options": "\nAccepted\nRejected"
+  },
+  {
+   "fetch_from": "observation_template.observation_category",
+   "fieldname": "observation_category",
+   "fieldtype": "Select",
+   "label": "Observation Category",
+   "options": "\nSocial History\nVital Signs\nImaging\nLaboratory\nProcedure\nSurvey\nExam\nTherapy\nActivity",
+   "read_only": 1,
+   "read_only_depends_on": "observation_template",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_qxq5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_yo05",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "result_section",
+   "fieldtype": "Section Break",
+   "label": "Result"
+  },
+  {
+   "fieldname": "section_break_xbqa",
+   "fieldtype": "Section Break"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Period\";",
+   "fieldname": "result_period_from",
+   "fieldtype": "Datetime",
+   "label": "Result Period From"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Period\";",
+   "fieldname": "result_period_to",
+   "fieldtype": "Datetime",
+   "label": "Result Period To"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"DateTime\";",
+   "fieldname": "result_datetime",
+   "fieldtype": "Datetime",
+   "label": "Result"
+  },
+  {
+   "fetch_from": "observation_template.medical_department",
+   "fetch_if_empty": 1,
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only_depends_on": "observation_template"
+  },
+  {
+   "fieldname": "time_of_result",
+   "fieldtype": "Datetime",
+   "label": "Time of Result",
+   "read_only": 1
+  },
+  {
+   "fieldname": "time_of_approval",
+   "fieldtype": "Datetime",
+   "label": "Time of Approval",
+   "read_only": 1
+  },
+  {
+   "fieldname": "note",
+   "fieldtype": "Text Editor",
+   "label": "Note"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Boolean\";",
+   "fieldname": "result_boolean",
+   "fieldtype": "Select",
+   "label": "Result"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Time\";",
+   "fieldname": "result_time",
+   "fieldtype": "Datetime",
+   "label": "Result"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "tab_more_information",
+   "fieldtype": "Tab Break",
+   "label": "More Information"
+  },
+  {
+   "fieldname": "specimen",
+   "fieldtype": "Link",
+   "label": "Specimen",
+   "options": "Specimen",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "sales_invoice.status",
+   "fieldname": "sales_invoice_status",
+   "fieldtype": "Data",
+   "label": "Sales Invoice Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_zrac",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "observation_template.method",
+   "fieldname": "observation_method",
+   "fieldtype": "Link",
+   "label": "Observation Method",
+   "options": "Code Value",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_section",
+   "fieldtype": "Section Break",
+   "label": "Reference"
+  },
+  {
+   "fieldname": "reference",
+   "fieldtype": "Small Text",
+   "label": "Reference",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_2ts3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "observation_idx",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Observation idx"
+  },
+  {
+   "fieldname": "section_break_zz5k",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fetch_from": "healthcare_practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "template_details_section",
+   "fieldtype": "Section Break",
+   "label": "Template Details"
+  },
+  {
+   "default": "0",
+   "fetch_from": "observation_template.sample_collection_required",
+   "fieldname": "sample_collection_required",
+   "fieldtype": "Check",
+   "label": "Sample Collection Required",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.preferred_display_name",
+   "fieldname": "preferred_display_name",
+   "fieldtype": "Data",
+   "label": "Preferred Display Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.permitted_unit",
+   "fieldname": "permitted_unit",
+   "fieldtype": "Link",
+   "label": "Permitted Unit",
+   "options": "Lab Test UOM",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_pxgu",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "observation_template.sample",
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "label": "Sample",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fetch_from": "observation_template.sample_type",
+   "fieldname": "sample_type",
+   "fieldtype": "Link",
+   "label": "Sample Type",
+   "options": "Sample Type",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.method_value",
+   "fieldname": "method",
+   "fieldtype": "Data",
+   "label": "Method",
+   "read_only": 1
+  },
+  {
+   "fieldname": "days",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Days",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.observation_category == \"Imaging\";\n",
+   "fieldname": "result_interpretation",
+   "fieldtype": "Text Editor",
+   "label": "Result Interpretation"
+  },
+  {
+   "fetch_from": "observation_template.result_template",
+   "fieldname": "result_template",
+   "fieldtype": "Link",
+   "label": "Result Template",
+   "options": "Terms and Conditions",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.interpretation_template",
+   "fieldname": "interpretation_template",
+   "fieldtype": "Link",
+   "label": "Interpretation Template",
+   "options": "Terms and Conditions",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fetch_from": "observation_template.has_component",
+   "fieldname": "has_component",
+   "fieldtype": "Check",
+   "label": "Has Component",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "disapproval_reason",
+   "fieldtype": "Text",
+   "label": "Disapproval Reason",
+   "read_only": 1
+  },
+  {
+   "default": "Today",
+   "fieldname": "posting_date",
+   "fieldtype": "Date",
+   "label": "Posting Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sales_invoice_item",
+   "fieldtype": "Data",
+   "label": "Sales Invoice Item",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2023-10-25 06:00:59.016090",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Observation",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation/observation.py
@@ -0,0 +1,484 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+import json
+import re
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.workflow import get_workflow_name, get_workflow_state_field
+from frappe.utils import now_datetime
+
+from erpnext.setup.doctype.terms_and_conditions.terms_and_conditions import (
+	get_terms_and_conditions,
+)
+
+
+class Observation(Document):
+	def validate(self):
+		self.set_age()
+		self.set_result_time()
+		self.set_status()
+		self.reference = get_observation_reference(self)
+		self.validate_input()
+
+	def on_update(self):
+		set_diagnostic_report_status(self)
+
+	def before_insert(self):
+		set_observation_idx(self)
+
+	def on_submit(self):
+		if self.service_request:
+			frappe.db.set_value(
+				"Service Request", self.service_request, "status", "completed-Request Status"
+			)
+
+	def on_cancel(self):
+		if self.service_request:
+			frappe.db.set_value("Service Request", self.service_request, "status", "active-Request Status")
+
+	def set_age(self):
+		patient_doc = frappe.get_doc("Patient", self.patient)
+		if patient_doc.dob:
+			self.age = patient_doc.calculate_age().get("age_in_string")
+			self.days = patient_doc.calculate_age().get("age_in_days")
+
+	def set_status(self):
+		if self.status not in ["Approved", "Disapproved"]:
+			if self.has_result() and self.status != "Final":
+				self.status = "Preliminary"
+			elif self.amended_from and self.status not in ["Amended", "Corrected"]:
+				self.status = "Amended"
+			elif self.status not in ["Final", "Cancelled", "Entered in Error", "Unknown"]:
+				self.status = "Registered"
+
+	def set_result_time(self):
+		if not self.time_of_result:
+			if self.has_result():
+				self.time_of_result = now_datetime()
+			else:
+				self.time_of_result = ""
+
+		if self.status == "Final" and not self.time_of_approval:
+			self.time_of_approval = now_datetime()
+		else:
+			self.time_of_approval = ""
+
+	def has_result(self):
+		result_fields = [
+			"result_attach",
+			"result_boolean",
+			"result_data",
+			"result_text",
+			"result_float",
+			"result_select",
+		]
+		for field in result_fields:
+			if self.get(field, None):
+				return True
+
+		# TODO: handle fields defaulting to now
+		# "result_datetime",
+		# "result_time",
+		# "result_period_from",
+		# "result_period_to",
+
+		return False
+
+	def validate_input(self):
+		if self.permitted_data_type in ["Quantity", "Numeric"]:
+			if self.result_data and not is_numbers_with_exceptions(self.result_data):
+				frappe.throw(
+					_("Non numeric result {0} is not allowed for Permitted Data Type {1}").format(
+						frappe.bold(self.result_data), frappe.bold(self.permitted_data_type)
+					)
+				)
+
+
+@frappe.whitelist()
+def get_observation_details(docname):
+	reference = frappe.get_value(
+		"Diagnostic Report", docname, ["docname", "ref_doctype"], as_dict=True
+	)
+
+	if reference.get("ref_doctype") == "Sales Invoice":
+		observation = frappe.get_list(
+			"Observation",
+			fields=["*"],
+			filters={
+				"sales_invoice": reference.get("docname"),
+				"parent_observation": "",
+				"status": ["!=", "Cancelled"],
+				"docstatus": ["!=", 2],
+			},
+			order_by="creation",
+		)
+	elif reference.get("ref_doctype") == "Patient Encounter":
+		service_requests = frappe.get_all(
+			"Service Request",
+			filters={
+				"source_doc": reference.get("ref_doctype"),
+				"order_group": reference.get("docname"),
+				"status": ["!=", "revoked-Request Status"],
+				"docstatus": ["!=", 2],
+			},
+			order_by="creation",
+			pluck="name",
+		)
+		observation = frappe.get_list(
+			"Observation",
+			fields=["*"],
+			filters={
+				"service_request": ["in", service_requests],
+				"parent_observation": "",
+				"status": ["!=", "Cancelled"],
+				"docstatus": ["!=", 2],
+			},
+			order_by="creation",
+		)
+
+	out_data, obs_length = aggregate_and_return_observation_data(observation)
+
+	return out_data, obs_length
+
+
+def aggregate_and_return_observation_data(observations):
+	out_data = []
+	obs_length = 0
+
+	for obs in observations:
+
+		if not obs.get("has_component"):
+			if obs.get("permitted_data_type"):
+				obs_length += 1
+
+			if obs.get("permitted_data_type") == "Select" and obs.get("options"):
+				obs["options_list"] = obs.get("options").split("\n")
+
+			if obs.get("observation_template") and obs.get("specimen"):
+				obs["received_time"] = frappe.get_value("Specimen", obs.get("specimen"), "received_time")
+
+			out_data.append({"observation": obs})
+
+		else:
+			child_observations = get_child_observations(obs)
+			obs_dict = return_child_observation_data_as_dict(child_observations, obs, obs_length)
+
+			if len(obs_dict) > 0:
+				out_data.append(obs_dict)
+
+	return out_data, obs_length
+
+
+def get_child_observations(obs):
+	return frappe.get_list(
+		"Observation",
+		fields=["*"],
+		filters={
+			"parent_observation": obs.get("name"),
+			"status": ["!=", "Cancelled"],
+			"docstatus": ["!=", 2],
+		},
+		order_by="observation_idx",
+	)
+
+
+def return_child_observation_data_as_dict(child_observations, obs, obs_length):
+	obs_list = []
+	has_result = False
+	obs_approved = False
+
+	for child in child_observations:
+		if child.get("permitted_data_type"):
+			obs_length += 1
+		if child.get("permitted_data_type") == "Select" and child.get("options"):
+			child["options_list"] = child.get("options").split("\n")
+		if child.get("specimen"):
+			child["received_time"] = frappe.get_value("Specimen", child.get("specimen"), "received_time")
+		observation_data = {"observation": child}
+		obs_list.append(observation_data)
+
+		if (
+			child.get("result_data")
+			or child.get("result_text")
+			or child.get("result_select") not in [None, "", "Null"]
+		):
+			has_result = True
+		if child.get("status") == "Approved":
+			obs_approved = True
+
+	obs_dict = {
+		"has_component": True,
+		"observation": obs.get("name"),
+		obs.get("name"): obs_list,
+		"display_name": obs.get("observation_template"),
+		"practitioner_name": obs.get("practitioner_name"),
+		"healthcare_practitioner": obs.get("healthcare_practitioner"),
+		"description": obs.get("description"),
+		"has_result": has_result,
+		"obs_approved": obs_approved,
+	}
+
+	return obs_dict
+
+
+def get_observation_reference(doc):
+	template_doc = frappe.get_doc("Observation Template", doc.observation_template)
+	display_reference = ""
+
+	for child in template_doc.observation_reference_range:
+		if not child.applies_to == "All":
+			if not child.applies_to == doc.gender:
+				continue
+		if child.age == "Range":
+			day_from = day_to = 0
+			if child.from_age_type == "Months":
+				day_from = float(child.age_from) * 30.436875
+			elif child.from_age_type == "Years":
+				day_from = float(child.age_from) * 365.2425
+			elif child.from_age_type == "Days":
+				day_from = float(child.age_from)
+
+			if child.to_age_type == "Months":
+				day_to = float(child.age_to) * 30.436875
+			elif child.to_age_type == "Years":
+				day_to = float(child.age_to) * 365.2425
+			elif child.to_age_type == "Days":
+				day_to = float(child.age_to)
+
+			if doc.days and float(day_from) <= float(doc.days) <= float(day_to):
+				display_reference += set_reference_string(child)
+
+		elif child.age == "All" or not doc.days:
+			display_reference += set_reference_string(child)
+
+	return display_reference
+
+
+def set_reference_string(child):
+	display_reference = ""
+	if (child.reference_from and child.reference_to) or child.conditions:
+		if child.reference_from and child.reference_to:
+			display_reference = f"{str(child.reference_from)} - {str(child.reference_to)}"
+		elif child.conditions:
+			display_reference = f"{str(child.conditions)}"
+
+		if child.short_interpretation:
+			display_reference = f"{display_reference}: {str(child.short_interpretation)}<br>"
+
+	elif child.short_interpretation or child.long_interpretation:
+		display_reference = f"{(child.short_interpretation if child.short_interpretation else child.long_interpretation)}<br>"
+
+	return display_reference
+
+
+@frappe.whitelist()
+def edit_observation(observation, data_type, result):
+	observation_doc = frappe.get_doc("Observation", observation)
+	if data_type in ["Range", "Ratio", "Quantity", "Numeric"]:
+		observation_doc.result_data = result
+	# elif data_type in ["Quantity", "Numeric"]:
+	# 	observation_doc.result_float = result
+	elif data_type == "Text":
+		observation_doc.result_text = result
+	observation_doc.save()
+
+
+@frappe.whitelist()
+def add_observation(**args):
+	observation_doc = frappe.new_doc("Observation")
+	observation_doc.posting_datetime = now_datetime()
+	observation_doc.patient = args.get("patient")
+	observation_doc.observation_template = args.get("template")
+	observation_doc.permitted_data_type = args.get("data_type")
+	observation_doc.reference_doctype = args.get("doc")
+	observation_doc.reference_docname = args.get("docname")
+	observation_doc.sales_invoice = args.get("invoice")
+	observation_doc.healthcare_practitioner = args.get("practitioner")
+	observation_doc.specimen = args.get("specimen")
+	if args.get("data_type") in ["Range", "Ratio", "Quantity", "Numeric"]:
+		observation_doc.result_data = args.get("result")
+	# elif data_type in ["Quantity", "Numeric"]:
+	# 	observation_doc.result_float = result
+	elif args.get("data_type") == "Text":
+		observation_doc.result_text = args.get("result")
+	if args.get("parent"):
+		observation_doc.parent_observation = args.get("parent")
+	observation_doc.sales_invoice_item = args.get("child") if args.get("child") else ""
+	observation_doc.insert(ignore_permissions=True)
+	return observation_doc.name
+
+
+@frappe.whitelist()
+def record_observation_result(values):
+	values = json.loads(values)
+	if values:
+		values = [dict(t) for t in {tuple(d.items()) for d in values}]
+		for val in values:
+			if not val.get("observation"):
+				return
+			observation_doc = frappe.get_doc("Observation", val["observation"])
+			if observation_doc.get("permitted_data_type") in [
+				"Range",
+				"Ratio",
+				"Quantity",
+				"Numeric",
+			]:
+				if (
+					observation_doc.get("permitted_data_type")
+					in [
+						"Quantity",
+						"Numeric",
+					]
+					and val.get("result")
+					and not is_numbers_with_exceptions(val.get("result"))
+				):
+					frappe.msgprint(
+						_("Non numeric result {0} is not allowed for Permitted Type {1}").format(
+							frappe.bold(val.get("result")),
+							frappe.bold(observation_doc.get("permitted_data_type")),
+						),
+						indicator="orange",
+						alert=True,
+					)
+					return
+
+				if val.get("result") != observation_doc.get("result_data"):
+					if val.get("result"):
+						observation_doc.result_data = val.get("result")
+					if val.get("note"):
+						observation_doc.note = val.get("note")
+					if observation_doc.docstatus == 0:
+						observation_doc.save()
+					elif observation_doc.docstatus == 1:
+						observation_doc.save("Update")
+			elif observation_doc.get("permitted_data_type") == "Text":
+				if val.get("result") != observation_doc.get("result_text"):
+					if val.get("result"):
+						observation_doc.result_text = val.get("result")
+					if val.get("note"):
+						observation_doc.note = val.get("note")
+					if observation_doc.docstatus == 0:
+						observation_doc.save()
+					elif observation_doc.docstatus == 1:
+						observation_doc.save("Update")
+			elif observation_doc.get("permitted_data_type") == "Select":
+				if val.get("result") != observation_doc.get("result_select"):
+					if val.get("result"):
+						observation_doc.result_select = val.get("result")
+					if val.get("note"):
+						observation_doc.note = val.get("note")
+					if observation_doc.docstatus == 0:
+						observation_doc.save()
+					elif observation_doc.docstatus == 1:
+						observation_doc.save("Update")
+
+			if observation_doc.get("observation_category") == "Imaging":
+				if val.get("result"):
+					observation_doc.result_text = val.get("result")
+				if val.get("interpretation"):
+					observation_doc.result_interpretation = val.get("interpretation")
+				if val.get("result") or val.get("interpretation"):
+					if val.get("note"):
+						observation_doc.note = val.get("note")
+					if observation_doc.docstatus == 0:
+						observation_doc.save()
+					elif observation_doc.docstatus == 1:
+						observation_doc.save("Update")
+
+			if not val.get("result") and val.get("note"):
+				observation_doc.note = val.get("note")
+				if observation_doc.docstatus == 0:
+					observation_doc.save()
+				elif observation_doc.docstatus == 1:
+					observation_doc.save("Update")
+
+
+@frappe.whitelist()
+def add_note(note, observation):
+	if note and observation:
+		frappe.db.set_value("Observation", observation, "note", note)
+
+
+def set_observation_idx(doc):
+	if doc.parent_observation:
+		parent_template = frappe.db.get_value(
+			"Observation", doc.parent_observation, "observation_template"
+		)
+		idx = frappe.db.get_value(
+			"Observation Component",
+			{"parent": parent_template, "observation_template": doc.observation_template},
+			"idx",
+		)
+		if idx:
+			doc.observation_idx = idx
+
+
+def is_numbers_with_exceptions(value):
+	pattern = r"^[0-9{}]+$".format(re.escape(".<>"))
+	return re.match(pattern, value) is not None
+
+
+@frappe.whitelist()
+def get_observation_result_template(template_name, observation):
+	if observation:
+		observation_doc = frappe.get_doc("Observation", observation)
+		patient_doc = frappe.get_doc("Patient", observation_doc.get("patient"))
+		observation_doc = json.loads(observation_doc.as_json())
+		patient_doc = json.loads(patient_doc.as_json())
+		# merged_dict = {"patient": patient_doc, "observation":observation_doc}
+		merged_dict = {**observation_doc, **patient_doc}
+		terms = get_terms_and_conditions(template_name, merged_dict)
+	return terms
+
+
+@frappe.whitelist()
+def set_observation_status(observation, status, reason=None):
+	observation_doc = frappe.get_doc("Observation", observation)
+	if observation_doc.has_result():
+		observation_doc.status = status
+		if reason:
+			observation_doc.disapproval_reason = reason
+		if status == "Approved":
+			observation_doc.submit()
+		if status == "Disapproved":
+			new_doc = frappe.copy_doc(observation_doc)
+			new_doc.status = ""
+			new_doc.insert()
+			observation_doc.cancel()
+	else:
+		frappe.throw(_("Please enter result to Approve."))
+
+
+def set_diagnostic_report_status(doc):
+	if doc.has_result() and doc.sales_invoice and not doc.has_component and doc.sales_invoice:
+		observations = frappe.db.get_all(
+			"Observation",
+			{
+				"sales_invoice": doc.sales_invoice,
+				"docstatus": 0,
+				"status": ["!=", "Approved"],
+				"has_component": 0,
+			},
+		)
+		diagnostic_report = frappe.db.get_value(
+			"Diagnostic Report",
+			{"ref_doctype": "Sales Invoice", "docname": doc.sales_invoice},
+			["name"],
+			as_dict=True,
+		)
+		if diagnostic_report:
+			workflow_name = get_workflow_name("Diagnostic Report")
+			workflow_state_field = get_workflow_state_field(workflow_name)
+			if observations and len(observations) > 0:
+				set_status = "Partially Approved"
+			else:
+				set_status = "Approved"
+			set_value_dict = {"status": set_status}
+			if workflow_state_field:
+				set_value_dict[workflow_state_field] = set_status
+			frappe.db.set_value(
+				"Diagnostic Report", diagnostic_report.get("name"), set_value_dict, update_modified=False
+			)
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation/test_observation.py
@@ -0,0 +1,226 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import getdate, nowtime
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+)
+from healthcare.healthcare.doctype.lab_test.test_lab_test import create_practitioner
+from healthcare.healthcare.doctype.observation_template.test_observation_template import (
+	create_grouped_observation_template,
+	create_observation_template,
+)
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_patient,
+)
+
+
+class TestObservation(FrappeTestCase):
+	def test_single_observation_from_invoice(self):
+		frappe.db.set_single_value("Healthcare Settings", "create_observation_on_si_submit", 1)
+		obs_name = "Total Cholesterol"
+		# observation without sample
+		patient = create_patient()
+		obs_template = create_observation_template(obs_name)
+		sales_invoice = create_sales_invoice(patient, obs_name)
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation",
+				{
+					"observation_template": obs_template.name,
+					"patient": patient,
+					"sales_invoice": sales_invoice.name,
+				},
+			)
+		)
+
+		self.assertTrue(
+			frappe.db.exists(
+				"Diagnostic Report",
+				{
+					"docname": sales_invoice.name,
+					"patient": patient,
+				},
+			)
+		)
+
+		# observation with sample
+		patient = create_patient()
+		idx = 1
+		obs_template = create_observation_template(obs_name, idx, True)
+		sales_invoice = create_sales_invoice(patient, obs_name + str(idx))
+
+		sample_docname = frappe.db.exists(
+			"Sample Collection",
+			{
+				"patient": patient,
+			},
+		)
+
+		self.assertTrue(sample_docname)
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation Sample Collection",
+				{
+					"parent": sample_docname,
+					"observation_template": obs_template.name,
+				},
+			)
+		)
+
+		self.assertTrue(
+			frappe.db.exists(
+				"Diagnostic Report",
+				{
+					"docname": sales_invoice.name,
+					"patient": patient,
+				},
+			)
+		)
+
+	def test_has_component_observation_from_invoice(self):
+		frappe.db.set_single_value("Healthcare Settings", "create_observation_on_si_submit", 1)
+		patient = create_patient()
+		idx = 2
+		obs_name = "Complete Blood Count (CBC)"
+		obs_template = create_grouped_observation_template(obs_name, idx)
+		sales_invoice = create_sales_invoice(patient, obs_name + str(idx))
+		# parent_observation
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation",
+				{
+					"observation_template": obs_template.name,
+					"patient": patient,
+					"sales_invoice": sales_invoice.name,
+				},
+			)
+		)
+
+		# child_observation
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation",
+				{
+					"observation_template": obs_name + str(idx + 1),
+					"patient": patient,
+					"sales_invoice": sales_invoice.name,
+				},
+			)
+		)
+
+		self.assertTrue(
+			frappe.db.exists(
+				"Diagnostic Report",
+				{
+					"docname": sales_invoice.name,
+					"patient": patient,
+				},
+			)
+		)
+
+		# observation with sample
+		patient = create_patient()
+		idx = 4  # since 3 is selected in previous grouped test
+		obs_template = create_grouped_observation_template(obs_name, idx, True)
+		sales_invoice = create_sales_invoice(patient, obs_name + str(idx))
+
+		# parent_observation
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation",
+				{
+					"observation_template": obs_template.name,
+					"patient": patient,
+					"sales_invoice": sales_invoice.name,
+				},
+			)
+		)
+
+		sample_docname = frappe.db.exists(
+			"Sample Collection",
+			{
+				"patient": patient,
+			},
+		)
+
+		self.assertTrue(sample_docname)
+		self.assertTrue(
+			frappe.db.exists(
+				"Observation Sample Collection",
+				{
+					"parent": sample_docname,
+					"observation_template": obs_template.name,
+				},
+			)
+		)
+
+		self.assertTrue(
+			frappe.db.exists(
+				"Diagnostic Report",
+				{
+					"docname": sales_invoice.name,
+					"patient": patient,
+				},
+			)
+		)
+
+	def test_observation_from_encounter(self):
+		observation_template = create_observation_template("Total Cholesterol")
+		patient = create_patient()
+		encounter = create_patient_encounter(patient, observation_template.name)
+		self.assertTrue(
+			frappe.db.exists(
+				"Service Request",
+				{
+					"patient": patient,
+					"template_dn": observation_template.name,
+					"order_group": encounter.name,
+				},
+			)
+		)
+
+
+def create_sales_invoice(patient, item):
+	sales_invoice = frappe.new_doc("Sales Invoice")
+	sales_invoice.patient = patient
+	sales_invoice.customer = frappe.db.get_value("Patient", patient, "customer")
+	sales_invoice.due_date = getdate()
+	sales_invoice.company = "_Test Company"
+	sales_invoice.debit_to = get_receivable_account("_Test Company")
+	sales_invoice.append(
+		"items",
+		{
+			"item_code": item,
+			"item_name": item,
+			"description": item,
+			"qty": 1,
+			"uom": "Nos",
+			"conversion_factor": 1,
+			"income_account": get_income_account(None, "_Test Company"),
+			"rate": 300,
+			"amount": 300,
+		},
+	)
+
+	sales_invoice.set_missing_values()
+
+	sales_invoice.submit()
+	return sales_invoice
+
+
+def create_patient_encounter(patient, observation_template):
+	patient_encounter = frappe.new_doc("Patient Encounter")
+	patient_encounter.patient = patient
+	patient_encounter.practitioner = create_practitioner()
+	patient_encounter.encounter_date = getdate()
+	patient_encounter.encounter_time = nowtime()
+
+	patient_encounter.append("lab_test_prescription", {"observation_template": observation_template})
+
+	patient_encounter.submit()
+	return patient_encounter
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_component/observation_component.json
@@ -0,0 +1,64 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2023-06-08 12:37:26.737683",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "observation_template",
+  "abbr",
+  "column_break_seht",
+  "based_on_formula",
+  "formula"
+ ],
+ "fields": [
+  {
+   "fieldname": "observation_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Observation Template",
+   "options": "Observation Template"
+  },
+  {
+   "fieldname": "column_break_seht",
+   "fieldtype": "Column Break"
+  },
+  {
+   "columns": 1,
+   "default": "0",
+   "fieldname": "based_on_formula",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Based On Formula"
+  },
+  {
+   "depends_on": "based_on_formula",
+   "fieldname": "formula",
+   "fieldtype": "Code",
+   "in_list_view": 1,
+   "label": "Formula"
+  },
+  {
+   "columns": 1,
+   "fetch_from": "observation_template.abbr",
+   "fieldname": "abbr",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Abbr",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2023-07-16 19:13:13.918443",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Observation Component",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_component/observation_component.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ObservationComponent(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_reference_range/observation_reference_range.json
@@ -0,0 +1,436 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2023-06-08 11:45:32.613055",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "permitted_data_type",
+  "reference_type",
+  "section_break_jkn1",
+  "applies_to",
+  "column_break_1wpd",
+  "age",
+  "section_break_dlfg",
+  "gestational_age",
+  "from_age_type",
+  "age_from",
+  "column_break_t4bi",
+  "to_age_type",
+  "age_to",
+  "section_break_d8yi",
+  "reference_from",
+  "datetime",
+  "from_duration",
+  "boolean_value",
+  "ratio",
+  "options",
+  "from_datetime",
+  "conditions",
+  "column_break_l8sr",
+  "reference_to",
+  "to_datetime",
+  "to_duration",
+  "short_interpretation",
+  "long_interpretation",
+  "section_break_ml0p",
+  "normal_boolean_value",
+  "normal_ratio",
+  "normal_from",
+  "normal_select",
+  "normal_condition",
+  "normal_interpretation",
+  "normal_to",
+  "normal_long_interpretation",
+  "abnormal_section",
+  "abnormal_boolean_value",
+  "abnormal_from",
+  "abnormal_ratio",
+  "abnormal_select",
+  "abnormal_condition",
+  "abnormal_interpretation",
+  "column_break_rdlf",
+  "abnormal_to",
+  "abnormal_long_interpretation",
+  "critical_section",
+  "critical_boolean_value",
+  "critical_from",
+  "critical_ratio",
+  "critical_select",
+  "critical_condition",
+  "critical_interpretation",
+  "column_break_uqpz",
+  "critical_to",
+  "critical_long_interpretation",
+  "section_break_jxbb",
+  "reference_text"
+ ],
+ "fields": [
+  {
+   "fieldname": "applies_to",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Applies To",
+   "options": "All\nMale\nFemale\nPregnant"
+  },
+  {
+   "fieldname": "reference_text",
+   "fieldtype": "Small Text",
+   "label": "Reference Text"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type!=\"Quantity\";",
+   "fieldname": "column_break_l8sr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_jkn1",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "section_break_jxbb",
+   "fieldtype": "Section Break"
+  },
+  {
+   "depends_on": "eval:doc.applies_to == \"Pregnant\"",
+   "description": "In Months",
+   "fieldname": "gestational_age",
+   "fieldtype": "Float",
+   "label": "Gestational Age"
+  },
+  {
+   "fieldname": "permitted_data_type",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Permitted Data Type",
+   "options": "Quantity\nSelect\nText\nBoolean\nNumeric\nRange\nRatio\nTime\nDateTime\nPeriod",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"DateTime\";",
+   "fieldname": "datetime",
+   "fieldtype": "Datetime",
+   "label": "Datetime"
+  },
+  {
+   "depends_on": "eval:doc.age == \"Range\"",
+   "fieldname": "age_from",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Age From"
+  },
+  {
+   "depends_on": "eval:doc.age == \"Range\"",
+   "fieldname": "age_to",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Age To"
+  },
+  {
+   "fieldname": "column_break_t4bi",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_rdlf",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "section_break_ml0p",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Normal"
+  },
+  {
+   "fieldname": "column_break_uqpz",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Boolean\";",
+   "fieldname": "normal_boolean_value",
+   "fieldtype": "Select",
+   "label": "Normal Value",
+   "options": "Yes\nNo"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "normal_from",
+   "fieldtype": "Float",
+   "label": "Normal From"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "normal_to",
+   "fieldtype": "Float",
+   "label": "Normal To"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Period\";",
+   "fieldname": "from_datetime",
+   "fieldtype": "Datetime",
+   "label": "From Datetime"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Period\";",
+   "fieldname": "to_datetime",
+   "fieldtype": "Datetime",
+   "label": "To"
+  },
+  {
+   "default": "Years",
+   "depends_on": "eval: doc.age == \"Range\"",
+   "fieldname": "from_age_type",
+   "fieldtype": "Select",
+   "label": "Age Type",
+   "options": "Years\nMonths\nDays"
+  },
+  {
+   "default": "Years",
+   "depends_on": "eval:doc.age == \"Range\"",
+   "fieldname": "to_age_type",
+   "fieldtype": "Select",
+   "label": "Age Type",
+   "options": "Years\nMonths\nDays"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "abnormal_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Abnormal"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Boolean\";",
+   "fieldname": "abnormal_boolean_value",
+   "fieldtype": "Select",
+   "label": "Abnormal Value",
+   "options": "Yes\nNo"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "abnormal_from",
+   "fieldtype": "Float",
+   "label": "Abnormal From"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "abnormal_to",
+   "fieldtype": "Float",
+   "label": "Abnormal To"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "critical_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Critical"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Boolean\";",
+   "fieldname": "critical_boolean_value",
+   "fieldtype": "Select",
+   "label": "Critical Value",
+   "options": "Yes\nNo"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "critical_from",
+   "fieldtype": "Float",
+   "label": "Critical From"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "critical_to",
+   "fieldtype": "Float",
+   "label": "Critical To"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Ratio\";",
+   "fieldname": "normal_ratio",
+   "fieldtype": "Data",
+   "label": "Ratio"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Ratio\";",
+   "fieldname": "abnormal_ratio",
+   "fieldtype": "Data",
+   "label": "Abnormal Ratio"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Ratio\";",
+   "fieldname": "critical_ratio",
+   "fieldtype": "Data",
+   "label": "Critical Ratio"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Time\";",
+   "fieldname": "from_duration",
+   "fieldtype": "Duration",
+   "label": "From Duration"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Time\";",
+   "fieldname": "to_duration",
+   "fieldtype": "Duration",
+   "label": "To Duration"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Select\";",
+   "fieldname": "normal_select",
+   "fieldtype": "Select",
+   "label": "Options"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Select\";",
+   "fieldname": "abnormal_select",
+   "fieldtype": "Select",
+   "label": "Options"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Select\";",
+   "fieldname": "critical_select",
+   "fieldtype": "Select",
+   "label": "Options"
+  },
+  {
+   "fieldname": "age",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Age",
+   "options": "All\nRange"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "normal_condition",
+   "fieldtype": "Code",
+   "label": "Normal Condition"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "abnormal_condition",
+   "fieldtype": "Code",
+   "label": "Abnormal Condition"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "critical_condition",
+   "fieldtype": "Code",
+   "label": "Critical Condition"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "normal_interpretation",
+   "fieldtype": "Data",
+   "label": "Normal Interpretation"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "abnormal_interpretation",
+   "fieldtype": "Data",
+   "label": "Abnormal Interpretation"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "critical_interpretation",
+   "fieldtype": "Data",
+   "label": "Critical Interpretation"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "normal_long_interpretation",
+   "fieldtype": "Text",
+   "label": "Normal Long Interpretation"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "abnormal_long_interpretation",
+   "fieldtype": "Text",
+   "label": "Abnormal Long Interpretation"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "critical_long_interpretation",
+   "fieldtype": "Text",
+   "label": "Critical Long Interpretation"
+  },
+  {
+   "fieldname": "section_break_d8yi",
+   "fieldtype": "Section Break"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Boolean\";",
+   "fieldname": "boolean_value",
+   "fieldtype": "Select",
+   "label": "Boolean Value",
+   "options": "\nYes\nNo"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Ratio\";",
+   "fieldname": "ratio",
+   "fieldtype": "Data",
+   "label": "Ratio"
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type==\"Select\";",
+   "fieldname": "options",
+   "fieldtype": "Select",
+   "label": "Options"
+  },
+  {
+   "fieldname": "conditions",
+   "fieldtype": "Code",
+   "label": "Conditions"
+  },
+  {
+   "fieldname": "short_interpretation",
+   "fieldtype": "Data",
+   "label": "Short Interpretation"
+  },
+  {
+   "fieldname": "long_interpretation",
+   "fieldtype": "Small Text",
+   "label": "Long Interpretation"
+  },
+  {
+   "fieldname": "column_break_1wpd",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval: doc.age == \"Range\" || doc.applies_to == \"Pregnant\"",
+   "fieldname": "section_break_dlfg",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "reference_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Reference Type",
+   "options": "Code Value"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "reference_from",
+   "fieldtype": "Data",
+   "label": "From"
+  },
+  {
+   "depends_on": "eval:[\"Numeric\", \"Range\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "reference_to",
+   "fieldtype": "Data",
+   "label": "To"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2023-07-07 11:10:53.335716",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Observation Reference Range",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_reference_range/observation_reference_range.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ObservationReferenceRange(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_sample_collection/observation_sample_collection.json
@@ -0,0 +1,240 @@
+{
+ "actions": [],
+ "autoname": "autoincrement",
+ "creation": "2023-06-23 10:23:56.317060",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "observation_template",
+  "has_component",
+  "sample",
+  "sample_type",
+  "uom",
+  "column_break_l1kf",
+  "status",
+  "container_closure_color",
+  "sample_qty",
+  "medical_department",
+  "section_break_tdtv",
+  "collection_date_time",
+  "collection_point",
+  "column_break_pj2o",
+  "collected_user",
+  "collected_by",
+  "references_section",
+  "reference_doctype",
+  "reference_docname",
+  "column_break_cpbc",
+  "reference_child",
+  "service_request",
+  "section_break_a5gx",
+  "show_components",
+  "specimen",
+  "component_observation_parent",
+  "component_observations"
+ ],
+ "fields": [
+  {
+   "columns": 2,
+   "default": "Urine",
+   "fetch_from": "observation_template.sample",
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Sample",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fetch_from": "sample.sample_type",
+   "fieldname": "sample_type",
+   "fieldtype": "Link",
+   "label": "Sample Type",
+   "options": "Sample Type",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "sample.sample_uom",
+   "fieldname": "uom",
+   "fieldtype": "Link",
+   "label": "UOM",
+   "options": "Lab Test UOM",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_l1kf",
+   "fieldtype": "Column Break"
+  },
+  {
+   "columns": 1,
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Status",
+   "options": "Open\nCollected",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "section_break_tdtv",
+   "fieldtype": "Section Break"
+  },
+  {
+   "columns": 2,
+   "fieldname": "observation_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Observation Template",
+   "options": "Observation Template"
+  },
+  {
+   "fieldname": "collection_date_time",
+   "fieldtype": "Datetime",
+   "in_list_view": 1,
+   "label": "Collection Date Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "references_section",
+   "fieldtype": "Section Break",
+   "label": "References"
+  },
+  {
+   "fieldname": "reference_doctype",
+   "fieldtype": "Link",
+   "label": "Reference Doctype",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_docname",
+   "fieldtype": "Dynamic Link",
+   "label": "Reference Docname",
+   "options": "reference_doctype",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.sample_qty",
+   "fetch_if_empty": 1,
+   "fieldname": "sample_qty",
+   "fieldtype": "Float",
+   "label": "Quantity"
+  },
+  {
+   "columns": 1,
+   "fetch_from": "sample.container_closure_color",
+   "fieldname": "container_closure_color",
+   "fieldtype": "Color",
+   "in_list_view": 1,
+   "label": "Color",
+   "read_only": 1
+  },
+  {
+   "columns": 2,
+   "depends_on": "eval:doc.has_component==1;",
+   "fieldname": "show_components",
+   "fieldtype": "Button",
+   "in_list_view": 1,
+   "label": "Show Components",
+   "read_only_depends_on": "eval:doc.has_component==0;"
+  },
+  {
+   "default": "0",
+   "fetch_from": "observation_template.has_component",
+   "fieldname": "has_component",
+   "fieldtype": "Check",
+   "label": "Has Component",
+   "read_only": 1
+  },
+  {
+   "fieldname": "specimen",
+   "fieldtype": "Data",
+   "label": "Specimen",
+   "read_only": 1
+  },
+  {
+   "fieldname": "component_observation_parent",
+   "fieldtype": "Data",
+   "label": "Component Observation Parent",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_a5gx",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "component_observations",
+   "fieldtype": "Small Text",
+   "hidden": 1,
+   "label": "Component Observations",
+   "read_only": 1
+  },
+  {
+   "fieldname": "specimen",
+   "fieldtype": "Data",
+   "label": "Specimen",
+   "read_only": 1
+  },
+  {
+   "fieldname": "collection_point",
+   "fieldtype": "Link",
+   "label": "Collection Point",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "column_break_pj2o",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "collected_user",
+   "fieldtype": "Link",
+   "label": "Collected User",
+   "options": "User",
+   "read_only": 1
+  },
+  {
+   "fieldname": "collected_by",
+   "fieldtype": "Data",
+   "label": "Collected By",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "observation_template.medical_department",
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_cpbc",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reference_child",
+   "fieldtype": "Data",
+   "label": "Reference Child",
+   "read_only": 1
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "label": "Service Request",
+   "options": "Service Request",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2023-10-13 10:40:30.086314",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Observation Sample Collection",
+ "naming_rule": "Autoincrement",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_sample_collection/observation_sample_collection.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ObservationSampleCollection(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_template/observation_template.js
@@ -0,0 +1,83 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Observation Template", {
+	onload: function(frm) {
+		set_select_field_options(frm);
+	},
+
+	observation: function(frm) {
+		if (!frm.doc.observation_code) {
+			frm.set_value('item_code', frm.doc.observation);
+		}
+		if (!frm.doc.has_component && !frm.doc.abbr) {
+			frm.set_value("abbr", frappe.get_abbr(frm.doc.observation).toUpperCase());
+		}
+	},
+
+	preferred_display_name: function(frm) {
+		if (!frm.doc.has_component && !frm.doc.abbr) {
+			frm.set_value("abbr", frappe.get_abbr(frm.doc.preferred_display_name).toUpperCase())
+		}
+	},
+
+	refresh: function(frm) {
+		frm.set_query("observation_template", "observation_component", function () {
+			return {
+				"filters": {
+					"has_component":  0,
+				}
+			};
+		});
+		frm.set_query("method", function () {
+			return {
+				"filters": {
+					"code_system": "Observation Method",
+				}
+			};
+		});
+		frm.set_query("reference_type", "observation_reference_range", function() {
+			return {
+				filters: {
+					"code_system": "Reference Type",
+				}
+			};
+		})
+	},
+
+	permitted_data_type: function(frm) {
+		set_observation_reference_range(frm);
+	},
+
+	observation_name: function(frm) {
+		frm.set_value("change_in_item", 1)
+	},
+
+	rate: function(frm) {
+		frm.set_value("change_in_item", 1)
+	},
+
+	item_group: function(frm) {
+		frm.set_value("change_in_item", 1)
+	},
+
+});
+
+frappe.ui.form.on("Observation Reference Range", {
+	observation_reference_range_add: function(frm) {
+		set_observation_reference_range(frm);
+	}
+})
+
+var set_observation_reference_range = function(frm) {
+	$.each(frm.doc.observation_reference_range, function(i, value) {
+		frappe.model.set_value(value.doctype, value.name, "permitted_data_type", frm.doc.permitted_data_type)
+	})
+}
+
+var set_select_field_options = function(frm) {
+	if (frm.doc.permitted_data_type == "Select") {
+		var normal_df = frappe.meta.get_docfield("Observation Reference Range", "options", frm.doc.name);
+		normal_df.options = frm.doc.options;
+	}
+}
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_template/observation_template.json
@@ -0,0 +1,429 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:observation",
+ "creation": "2023-06-08 11:36:30.350377",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "observation",
+  "observation_category",
+  "preferred_display_name",
+  "abbr",
+  "has_component",
+  "column_break_zeln",
+  "medical_department",
+  "description",
+  "section_break_q56o",
+  "method",
+  "method_value",
+  "column_break_vvc2",
+  "service_unit",
+  "section_break_eovt",
+  "result_template",
+  "column_break_ll27",
+  "interpretation_template",
+  "section_break_leuz",
+  "permitted_data_type",
+  "column_break_jsqz",
+  "permitted_unit",
+  "options",
+  "template",
+  "components_section",
+  "observation_component",
+  "sample_collection_section",
+  "sample_collection_required",
+  "sample_collection_section_section",
+  "sample",
+  "sample_qty",
+  "uom",
+  "column_break_tyze",
+  "sample_type",
+  "container_closure_color",
+  "sample_details",
+  "reference_ranges_tab",
+  "observation_reference_range",
+  "medical_codes_tab",
+  "codification_table",
+  "billing_tab",
+  "is_billable",
+  "link_existing_item",
+  "item",
+  "item_code",
+  "item_group",
+  "column_break_tktn",
+  "rate",
+  "change_in_item",
+  "conditions_tab",
+  "diagnosis",
+  "service_request_defaults_tab",
+  "patient_care_type",
+  "staff_role"
+ ],
+ "fields": [
+  {
+   "fieldname": "observation",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Observation",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "observation_category",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Observation Category",
+   "options": "\nSocial History\nVital Signs\nImaging\nLaboratory\nProcedure\nSurvey\nExam\nTherapy\nActivity",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_zeln",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Text Editor",
+   "label": "Description"
+  },
+  {
+   "depends_on": "eval: !doc.has_component;",
+   "fieldname": "section_break_q56o",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "permitted_data_type",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Permitted Data Type",
+   "mandatory_depends_on": "eval: doc.observation_category == \"Laboratory\" && !doc.has_component;",
+   "options": "\nQuantity\nSelect\nText\nBoolean\nNumeric\nRange\nRatio\nTime\nDateTime\nPeriod\nAttach"
+  },
+  {
+   "depends_on": "eval: [\"Text\", \"Quantity\"].includes(doc.permitted_data_type);",
+   "fieldname": "permitted_unit",
+   "fieldtype": "Link",
+   "label": "Permitted Unit",
+   "mandatory_depends_on": "eval:doc.permitted_data_type==\"Quantity\" && !doc.has_component;",
+   "options": "Lab Test UOM"
+  },
+  {
+   "fieldname": "column_break_jsqz",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval: [\"Laboratory\", \"Imaging\"].includes(doc.observation_category) && !doc.has_component",
+   "fieldname": "method",
+   "fieldtype": "Link",
+   "label": "Method",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "observation_reference_range",
+   "fieldtype": "Table",
+   "options": "Observation Reference Range"
+  },
+  {
+   "fieldname": "observation_component",
+   "fieldtype": "Table",
+   "label": "Observation Component",
+   "options": "Observation Component"
+  },
+  {
+   "fieldname": "medical_codes_tab",
+   "fieldtype": "Tab Break",
+   "label": "Medical Codes"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Code",
+   "options": "Codification Table"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.observation_category === \"Laboratory\"",
+   "fieldname": "has_component",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Has Component"
+  },
+  {
+   "depends_on": "eval:doc.has_component==1;",
+   "fieldname": "components_section",
+   "fieldtype": "Section Break",
+   "label": "Components"
+  },
+  {
+   "collapsible": 1,
+   "depends_on": "eval: doc.observation_category === \"Laboratory\" && !doc.has_component",
+   "fieldname": "reference_ranges_tab",
+   "fieldtype": "Tab Break",
+   "label": "Reference Ranges"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit Type",
+   "options": "Healthcare Service Unit Type"
+  },
+  {
+   "depends_on": "eval:doc.observation_category!=\"Imaging\" && !doc.has_component;",
+   "fieldname": "section_break_leuz",
+   "fieldtype": "Section Break",
+   "label": "Result Options"
+  },
+  {
+   "depends_on": "eval: doc.observation_category === \"Laboratory\" && !doc.has_component",
+   "fieldname": "sample_collection_section",
+   "fieldtype": "Tab Break",
+   "label": "Sample Collection"
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "label": "Sample",
+   "mandatory_depends_on": "eval:!doc.has_component && doc.sample_collection_required==1;",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fetch_from": "sample.sample_uom",
+   "fieldname": "uom",
+   "fieldtype": "Link",
+   "label": "UOM",
+   "options": "Lab Test UOM"
+  },
+  {
+   "fieldname": "sample_qty",
+   "fieldtype": "Float",
+   "label": "Quantity"
+  },
+  {
+   "fieldname": "column_break_tyze",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "sample_details",
+   "fieldtype": "Small Text",
+   "label": "Collection Details"
+  },
+  {
+   "fieldname": "column_break_vvc2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "preferred_display_name",
+   "fieldtype": "Data",
+   "label": "Preferred Display Name"
+  },
+  {
+   "depends_on": "eval:[\"Select\", 'Boolean'].includes(doc.permitted_data_type)",
+   "description": "These options will be available for selection in Observation. No need to add a blank space before the first option",
+   "fieldname": "options",
+   "fieldtype": "Small Text",
+   "label": "Options"
+  },
+  {
+   "depends_on": "eval:doc.observation_category==\"Imaging\";",
+   "fieldname": "section_break_eovt",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "result_template",
+   "fieldtype": "Link",
+   "label": "Result Template",
+   "options": "Terms and Conditions"
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fetch_from": "sample.sample_type",
+   "fieldname": "sample_type",
+   "fieldtype": "Link",
+   "label": "Sample Type",
+   "options": "Sample Type",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.permitted_data_type == \"Text\";",
+   "fieldname": "template",
+   "fieldtype": "Link",
+   "label": "Template",
+   "options": "Terms and Conditions"
+  },
+  {
+   "fetch_from": "sample.container_closure_color",
+   "fetch_if_empty": 1,
+   "fieldname": "container_closure_color",
+   "fieldtype": "Link",
+   "label": "Container Closure Color",
+   "options": "Color"
+  },
+  {
+   "fieldname": "billing_tab",
+   "fieldtype": "Tab Break",
+   "label": "Billing"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:doc.__islocal;",
+   "fieldname": "link_existing_item",
+   "fieldtype": "Check",
+   "label": "Link Existing Item"
+  },
+  {
+   "depends_on": "eval: (!doc.__islocal || doc.link_existing_item) && doc.is_billable;",
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "label": "Item",
+   "mandatory_depends_on": "eval:doc.link_existing_item",
+   "no_copy": 1,
+   "options": "Item",
+   "read_only_depends_on": "eval: !doc.__islocal",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_tktn",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:!doc.link_existing_item || !doc.__islocal;",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "label": "Is Billable",
+   "search_index": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Change In Item"
+  },
+  {
+   "depends_on": "eval:doc.is_billable && (!doc.link_existing_item || !doc.__islocal)",
+   "fieldname": "rate",
+   "fieldtype": "Currency",
+   "label": "Rate"
+  },
+  {
+   "depends_on": "eval:doc.is_billable;",
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "label": "Item Group",
+   "mandatory_depends_on": "eval:doc.is_billable;",
+   "options": "Item Group",
+   "read_only_depends_on": "eval:doc.link_existing_item"
+  },
+  {
+   "depends_on": "eval:doc.is_billable;",
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "label": "Item Code"
+  },
+  {
+   "fetch_from": "method.code_value",
+   "fieldname": "method_value",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Method Value"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:!doc.has_component",
+   "fieldname": "sample_collection_required",
+   "fieldtype": "Check",
+   "label": "Sample Collection Required"
+  },
+  {
+   "depends_on": "eval:doc.sample_collection_required==1;",
+   "fieldname": "sample_collection_section_section",
+   "fieldtype": "Section Break"
+  },
+  {
+   "depends_on": "eval: doc.observation_category === \"Laboratory\" && !doc.has_component",
+   "fieldname": "abbr",
+   "fieldtype": "Data",
+   "label": "Abbr",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_ll27",
+   "fieldtype": "Column Break"
+  },
+  {
+   "depends_on": "eval: doc.observation_category == \"Imaging\"",
+   "fieldname": "interpretation_template",
+   "fieldtype": "Link",
+   "label": "Interpretation Template",
+   "options": "Terms and Conditions"
+  },
+  {
+   "fieldname": "conditions_tab",
+   "fieldtype": "Tab Break",
+   "label": "Conditions"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Table MultiSelect",
+   "label": "Diagnosis",
+   "options": "Patient Encounter Diagnosis"
+  },
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "service_request_defaults_tab",
+   "fieldtype": "Tab Break",
+   "label": "Service Request Defaults"
+  },
+  {
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-12-06 14:40:08.511353",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Observation Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "import": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "select": 1,
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_template/observation_template.py
@@ -0,0 +1,126 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+
+from healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template import (
+	make_item_price,
+	update_item_and_item_price,
+)
+
+
+class ObservationTemplate(Document):
+	def after_insert(self):
+		if not self.item and not self.link_existing_item:
+			create_item_from_template(self)
+
+	def on_update(self):
+		# If change_in_item update Item and Price List
+		if self.change_in_item and self.is_billable:
+			update_item_and_item_price(self)
+		if not self.item and self.is_billable:
+			create_item_from_template(self)
+
+	def validate(self):
+		if self.has_component and self.sample_collection_required:
+			self.sample_collection_required = 0
+
+		if self.permitted_data_type == "Boolean":
+			if len(self.options.split("\n")) > 2:
+				frappe.throw(
+					_("You cannot provide more than 2 options for Boolean result"), frappe.ValidationError
+				)
+
+		if self.has_component:
+			self.abbr = ""
+		else:
+			self.validate_abbr()
+
+	def validate_abbr(self):
+		if not self.abbr:
+			self.abbr = frappe.utils.get_abbr(self.observation)
+		else:
+			self.abbr = self.abbr.strip()
+
+		if not self.abbr:
+			frappe.throw(_("Abbreviation is mandatory"))
+
+		ob_t = frappe.qb.DocType("Observation Template")
+		duplicate = (
+			frappe.qb.from_(ob_t)
+			.select("name")
+			.where(ob_t.abbr.eq(self.abbr) & ob_t.observation.ne(self.observation))
+		).run(as_dict=True)
+
+		if len(duplicate):
+			frappe.throw(_("Abbreviation already used for {0}").format(duplicate[0].name))
+
+
+def create_item_from_template(doc):
+	if doc.is_billable:
+		uom = frappe.db.exists("UOM", "Unit") or frappe.db.get_single_value(
+			"Stock Settings", "stock_uom"
+		)
+		# Insert item
+		item = frappe.get_doc(
+			{
+				"doctype": "Item",
+				"item_code": doc.item_code,
+				"item_name": doc.name,
+				"item_group": doc.item_group,
+				"description": doc.name,
+				"is_sales_item": 1,
+				"is_service_item": 1,
+				"is_purchase_item": 0,
+				"is_stock_item": 0,
+				"include_item_in_manufacturing": 0,
+				"show_in_website": 0,
+				"is_pro_applicable": 0,
+				"disabled": 0,
+				"stock_uom": uom,
+			}
+		).insert(ignore_permissions=True, ignore_mandatory=True)
+
+		if doc.rate:
+			make_item_price(item.name, doc.rate)
+		else:
+			make_item_price(item.name, 0.0)
+		# Set item in the template
+		frappe.db.set_value("Observation Template", doc.name, "item", item.name)
+
+	doc.reload()
+
+
+def get_observation_template_details(observation_template):
+	obs_comp = frappe.qb.DocType("Observation Component")
+	obs_temp = frappe.qb.DocType("Observation Template")
+	from pypika import Case
+
+	data = (
+		frappe.qb.from_(obs_comp)
+		.left_join(obs_temp)
+		.on(obs_comp.observation_template == obs_temp.name)
+		.select(
+			Case()
+			.when(obs_temp.sample_collection_required == 0, obs_temp.name)
+			.else_(None)
+			.as_("no_sample_reqd"),
+			Case()
+			.when(obs_temp.sample_collection_required == 1, obs_temp.name)
+			.else_(None)
+			.as_("sample_reqd"),
+		)
+		.where(obs_comp.parent == observation_template)
+	).run(as_dict=True)
+	sample_reqd_component_obs = []
+	non_sample_reqd_component_obs = []
+
+	for d in data:
+		if d.get("no_sample_reqd"):
+			non_sample_reqd_component_obs.append(d.get("no_sample_reqd"))
+		elif d.get("sample_reqd"):
+			sample_reqd_component_obs.append(d.get("sample_reqd"))
+
+	return sample_reqd_component_obs, non_sample_reqd_component_obs
--- /dev/null
+++ b/healthcare/healthcare/doctype/observation_template/test_observation_template.py
@@ -0,0 +1,58 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestObservationTemplate(FrappeTestCase):
+	def test_observation_item(self):
+		obs_template = create_observation_template("Total Cholesterol", sample_required=False)
+		self.assertTrue(frappe.db.exists("Item", obs_template.item_code))
+		self.assertEqual(
+			frappe.db.get_value("Item Price", {"item_code": obs_template.item_code}, "price_list_rate"),
+			obs_template.rate,
+		)
+
+
+def create_observation_template(obs_name, idx="", sample_required=None):
+	if frappe.db.exists("Observation Template", obs_name + str(idx)):
+		return frappe.get_doc("Observation Template", obs_name + str(idx))
+	template = frappe.new_doc("Observation Template")
+	template.observation = obs_name + str(idx)
+	template.item_code = obs_name + str(idx)
+	template.observation_category = "Laboratory"
+	template.permitted_data_type = "Quantity"
+	template.permitted_unit = "mg / dl"
+	template.item_group = "Services"
+	template.sample_collection_required = sample_required
+	template.rate = 300
+	template.abbr = "TC" + str(idx)
+	template.is_billable = 1
+	template.save()
+	return template
+
+
+def create_grouped_observation_template(obs_name, idx="", sample_required=None):
+	if frappe.db.exists("Observation Template", obs_name + str(idx)):
+		return frappe.get_doc("Observation Template", obs_name + str(idx))
+	template = frappe.new_doc("Observation Template")
+	template.observation = obs_name + str(idx)
+	template.item_code = obs_name + str(idx)
+	template.observation_category = "Laboratory"
+	template.item_group = "Services"
+	template.has_component = 1
+	template.rate = 300
+	template.abbr = "CBC" + str(idx)
+	template.is_billable = 1
+	child_idx = (idx if idx else 0) + 1
+	obs_template = create_observation_template(obs_name, child_idx, sample_required)
+	template.append(
+		"observation_component",
+		{
+			"observation_template": obs_template.name,
+			"abbr": "CBC" + str(child_idx),
+		},
+	)
+	template.save()
+	return template
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism/organism.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Organism', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism/organism.json
@@ -0,0 +1,152 @@
+{
+ "allow_copy": 0,
+ "allow_events_in_timeline": 0,
+ "allow_guest_to_view": 0,
+ "allow_import": 0,
+ "allow_rename": 0,
+ "autoname": "field:organism",
+ "beta": 0,
+ "creation": "2019-09-06 16:29:07.797960",
+ "custom": 0,
+ "docstatus": 0,
+ "doctype": "DocType",
+ "document_type": "",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "fields": [
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "organism",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Organism",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 1,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 1
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "abbr",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 0,
+   "in_standard_filter": 0,
+   "label": "Abbr",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 1
+  }
+ ],
+ "has_web_view": 0,
+ "hide_heading": 0,
+ "hide_toolbar": 0,
+ "idx": 0,
+ "image_view": 0,
+ "in_create": 0,
+ "is_submittable": 0,
+ "issingle": 0,
+ "istable": 0,
+ "max_attachments": 0,
+ "modified": "2019-10-04 19:45:33.353753",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Organism",
+ "name_case": "",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 0,
+   "cancel": 0,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "if_owner": 0,
+   "import": 0,
+   "permlevel": 0,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "set_user_permissions": 0,
+   "share": 1,
+   "submit": 0,
+   "write": 1
+  },
+  {
+   "amend": 0,
+   "cancel": 0,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "if_owner": 0,
+   "import": 0,
+   "permlevel": 0,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "set_user_permissions": 0,
+   "share": 1,
+   "submit": 0,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "read_only": 0,
+ "read_only_onload": 0,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "organism, abbr",
+ "show_name_in_global_search": 0,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "organism",
+ "track_changes": 0,
+ "track_seen": 0,
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism/organism.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class Organism(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism/test_organism.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestOrganism(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism_test_item/organism_test_item.json
@@ -0,0 +1,144 @@
+{
+ "allow_copy": 0,
+ "allow_events_in_timeline": 0,
+ "allow_guest_to_view": 0,
+ "allow_import": 0,
+ "allow_rename": 0,
+ "beta": 0,
+ "creation": "2019-09-06 16:37:59.698996",
+ "custom": 0,
+ "docstatus": 0,
+ "doctype": "DocType",
+ "document_type": "",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "fields": [
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "organism",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Organism",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Organism",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 1,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "colony_population",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Colony Population",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "colony_uom",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Colony UOM",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Lab Test UOM",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  }
+ ],
+ "has_web_view": 0,
+ "hide_heading": 0,
+ "hide_toolbar": 0,
+ "idx": 0,
+ "image_view": 0,
+ "in_create": 0,
+ "is_submittable": 0,
+ "issingle": 0,
+ "istable": 1,
+ "max_attachments": 0,
+ "modified": "2019-10-04 19:48:04.104234",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Organism Test Item",
+ "name_case": "",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 0,
+ "read_only": 0,
+ "read_only_onload": 0,
+ "show_name_in_global_search": 0,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 0,
+ "track_seen": 0,
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism_test_item/organism_test_item.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class OrganismTestItem(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism_test_result/organism_test_result.json
@@ -0,0 +1,144 @@
+{
+ "allow_copy": 0,
+ "allow_events_in_timeline": 0,
+ "allow_guest_to_view": 0,
+ "allow_import": 0,
+ "allow_rename": 0,
+ "beta": 0,
+ "creation": "2019-09-06 16:37:59.698996",
+ "custom": 0,
+ "docstatus": 0,
+ "doctype": "DocType",
+ "document_type": "",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "fields": [
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "organism",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Organism",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Organism",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 1,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "colony_population",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Colony Population",
+   "length": 0,
+   "no_copy": 0,
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_in_quick_entry": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fetch_if_empty": 0,
+   "fieldname": "colony_uom",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 0,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Colony UOM",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Lab Test UOM",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "translatable": 0,
+   "unique": 0
+  }
+ ],
+ "has_web_view": 0,
+ "hide_heading": 0,
+ "hide_toolbar": 0,
+ "idx": 0,
+ "image_view": 0,
+ "in_create": 0,
+ "is_submittable": 0,
+ "issingle": 0,
+ "istable": 1,
+ "max_attachments": 0,
+ "modified": "2019-10-04 19:48:04.104234",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Organism Test Result",
+ "name_case": "",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 0,
+ "read_only": 0,
+ "read_only_onload": 0,
+ "show_name_in_global_search": 0,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 0,
+ "track_seen": 0,
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/organism_test_result/organism_test_result.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2019, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class OrganismTestResult(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/patient.js
@@ -0,0 +1,147 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+{% include 'healthcare/regional/india/abdm/js/patient.js' %}
+
+frappe.ui.form.on('Patient', {
+	refresh: function (frm) {
+		frm.set_query('patient', 'patient_relation', function () {
+			return {
+				filters: [
+					['Patient', 'name', '!=', frm.doc.name]
+				]
+			};
+		});
+		frm.set_query('customer_group', {'is_group': 0});
+		frm.set_query('default_price_list', { 'selling': 1});
+
+		if (frappe.defaults.get_default('patient_name_by') != 'Naming Series') {
+			frm.toggle_display('naming_series', false);
+		} else {
+			erpnext.toggle_naming_series();
+		}
+
+		if (frappe.defaults.get_default('collect_registration_fee') && frm.doc.status == 'Disabled') {
+			frm.add_custom_button(__('Invoice Patient Registration'), function () {
+				invoice_registration(frm);
+			});
+		}
+
+		if (frm.doc.patient_name && frappe.user.has_role('Physician')) {
+			frm.add_custom_button(__('Patient Progress'), function() {
+				frappe.route_options = {'patient': frm.doc.name};
+				frappe.set_route('patient-progress');
+			}, __('View'));
+
+			frm.add_custom_button(__('Patient History'), function() {
+				frappe.route_options = {'patient': frm.doc.name};
+				frappe.set_route('patient_history');
+			}, __('View'));
+		}
+
+		frappe.dynamic_link = {doc: frm.doc, fieldname: 'name', doctype: 'Patient'};
+		frm.toggle_display(['address_html', 'contact_html'], !frm.is_new());
+
+		if (!frm.is_new()) {
+			if ((frappe.user.has_role('Nursing User') || frappe.user.has_role('Physician'))) {
+				frm.add_custom_button(__('Medical Record'), function () {
+					create_medical_record(frm);
+				}, __('Create'));
+				frm.toggle_enable(['customer'], 0);
+			}
+			frappe.contacts.render_address_and_contact(frm);
+			erpnext.utils.set_party_dashboard_indicators(frm);
+		} else {
+			frappe.contacts.clear_address_and_contact(frm);
+		}
+	},
+
+	onload: function (frm) {
+		if (frm.doc.dob) {
+			$(frm.fields_dict['age_html'].wrapper).html(`${__('AGE')} : ${get_age(frm.doc.dob)}`);
+		} else {
+			$(frm.fields_dict['age_html'].wrapper).html('');
+		}
+	}
+});
+
+frappe.ui.form.on('Patient', 'dob', function(frm) {
+	if (frm.doc.dob) {
+		let today = new Date();
+		let birthDate = new Date(frm.doc.dob);
+		if (today < birthDate) {
+			frappe.msgprint(__('Please select a valid Date'));
+			frappe.model.set_value(frm.doctype,frm.docname, 'dob', '');
+		} else {
+			let age_str = get_age(frm.doc.dob);
+			$(frm.fields_dict['age_html'].wrapper).html(`${__('AGE')} : ${age_str}`);
+		}
+	} else {
+		$(frm.fields_dict['age_html'].wrapper).html('');
+	}
+});
+
+frappe.ui.form.on('Patient Relation', {
+	patient_relation_add: function(frm){
+		frm.fields_dict['patient_relation'].grid.get_field('patient').get_query = function(doc){
+			let patient_list = [];
+			if(!doc.__islocal) patient_list.push(doc.name);
+			$.each(doc.patient_relation, function(idx, val){
+				if (val.patient) patient_list.push(val.patient);
+			});
+			return { filters: [['Patient', 'name', 'not in', patient_list]] };
+		};
+	}
+});
+
+let create_medical_record = function (frm) {
+	frappe.route_options = {
+		'patient': frm.doc.name,
+		'status': 'Open',
+		'reference_doctype': 'Patient Medical Record',
+		'reference_owner': frm.doc.owner
+	};
+	frappe.new_doc('Patient Medical Record');
+};
+
+let get_age = function (birth) {
+	let ageMS = Date.parse(Date()) - Date.parse(birth);
+	let age = new Date();
+	age.setTime(ageMS);
+	let years = age.getFullYear() - 1970;
+	return years + ' Year(s) ' + age.getMonth() + ' Month(s) ' + age.getDate() + ' Day(s)';
+};
+
+let create_vital_signs = function (frm) {
+	if (!frm.doc.name) {
+		frappe.throw(__('Please save the patient first'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.name,
+	};
+	frappe.new_doc('Vital Signs');
+};
+
+let create_encounter = function (frm) {
+	if (!frm.doc.name) {
+		frappe.throw(__('Please save the patient first'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.name,
+	};
+	frappe.new_doc('Patient Encounter');
+};
+
+let invoice_registration = function (frm) {
+	frappe.call({
+		doc: frm.doc,
+		method: 'invoice_patient_registration',
+		callback: function(data) {
+			if (!data.exc) {
+				if (data.message.invoice) {
+					frappe.set_route('Form', 'Sales Invoice', data.message.invoice);
+				}
+				cur_frm.reload_doc();
+			}
+		}
+	});
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/patient.json
@@ -0,0 +1,748 @@
+{
+ "actions": [],
+ "allow_events_in_timeline": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2017-01-23 14:03:49.084370",
+ "description": "Patient",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "details_tab",
+  "basic_info",
+  "naming_series",
+  "first_name",
+  "middle_name",
+  "last_name",
+  "family_name",
+  "mother_name",
+  "country",
+  "territory",
+  "sex",
+  "blood_group",
+  "dob",
+  "foreigner_\u0623\u062c\u0646\u0628\u064a",
+  "passport_no\u0631\u0642\u0645_\u062c\u0648\u0627\u0632_\u0627\u0644\u0633\u0641\u0631",
+  "image",
+  "national",
+  "contact_person_full_name_\u0627\u0633\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+  "contact_phone_number_\u0631\u0642\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+  "column_break_yjno",
+  "\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+  "\u0627\u0633\u0645_\u0627\u0644\u0627\u0628",
+  "\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+  "fourth_name",
+  "\u0627\u0644\u0644\u0642\u0628",
+  "\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+  "patient_name",
+  "ar_name",
+  "column_break_14",
+  "status",
+  "uid",
+  "no_id",
+  "\u0627\u0631\u0641\u0627\u0642_\u0645\u0644\u0641__attach_file",
+  "inpatient_record",
+  "occupation",
+  "marital_status",
+  "inpatient_status",
+  "report_preference",
+  "mobile",
+  "phone",
+  "email",
+  "invite_user",
+  "user_id",
+  "old_mrn",
+  "state",
+  "address_line",
+  "is_from_warith",
+  "customer_details_section",
+  "customer",
+  "customer_group",
+  "column_break_24",
+  "default_currency",
+  "default_price_list",
+  "language",
+  "more_info",
+  "patient_details",
+  "dashboard_tab",
+  "address_and_contact_tab",
+  "address_contacts",
+  "address_html",
+  "column_break_22",
+  "contact_html",
+  "sb_relation",
+  "patient_relation",
+  "medical_history_tab",
+  "allergy_medical_and_surgical_history",
+  "allergies",
+  "medication",
+  "column_break_20",
+  "medical_history",
+  "surgical_history",
+  "risk_factors",
+  "tobacco_past_use",
+  "tobacco_current_use",
+  "alcohol_past_use",
+  "alcohol_current_use",
+  "column_break_32",
+  "surrounding_factors",
+  "other_risk_factors",
+  "oncolgy_tab",
+  "cancer_type",
+  "symptoms_free_text",
+  "column_break_uhxw",
+  "diagnosis",
+  "diagnosis_date",
+  "stage"
+ ],
+ "fields": [
+  {
+   "fieldname": "basic_info",
+   "fieldtype": "Section Break",
+   "label": "Patient Demographics",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-user"
+  },
+  {
+   "fieldname": "inpatient_status",
+   "fieldtype": "Select",
+   "in_preview": 1,
+   "label": "Inpatient Status",
+   "no_copy": 1,
+   "options": "\nAdmission Scheduled\nAdmitted\nDischarge Scheduled",
+   "read_only": 1
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "no_copy": 1,
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "MRN",
+   "options": "WITC.######"
+  },
+  {
+   "bold": 1,
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Full Name",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "sex",
+   "fieldtype": "Link",
+   "in_preview": 1,
+   "label": "Gender",
+   "options": "Gender",
+   "reqd": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "blood_group",
+   "fieldtype": "Select",
+   "label": "Blood Group",
+   "no_copy": 1,
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "dob",
+   "fieldtype": "Date",
+   "in_preview": 1,
+   "label": "Date of birth",
+   "no_copy": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "in_filter": 1,
+   "in_list_view": 1,
+   "label": "Status",
+   "no_copy": 1,
+   "options": "Active\nDisabled",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "image",
+   "fieldtype": "Attach Image",
+   "hidden": 1,
+   "label": "IMAGE"
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "If \"Link Customer to Patient\" is checked in Healthcare Settings and an existing Customer is not selected then, a Customer will be created for this Patient for recording transactions in Accounts module.",
+   "fieldname": "customer",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Customer",
+   "no_copy": 1,
+   "options": "Customer",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "report_preference",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Report Preference",
+   "options": "\nEmail\nPrint"
+  },
+  {
+   "bold": 1,
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Mobile",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "bold": 1,
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "label": "Email",
+   "no_copy": 1,
+   "options": "Email"
+  },
+  {
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "in_filter": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Phone",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "fieldname": "sb_relation",
+   "fieldtype": "Section Break",
+   "label": "Patient Relation"
+  },
+  {
+   "fieldname": "patient_relation",
+   "fieldtype": "Table",
+   "label": "Patient Relation",
+   "options": "Patient Relation"
+  },
+  {
+   "fieldname": "allergy_medical_and_surgical_history",
+   "fieldtype": "Section Break",
+   "label": "Allergies, Medical and Surgical History"
+  },
+  {
+   "fieldname": "allergies",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Allergies",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medication",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_20",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "medical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "surgical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Surgical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "occupation",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Occupation \\ \u0627\u0644\u062a\u062e\u0635\u0635 \u0627\u0644\u0648\u0638\u064a\u0641\u064a",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "marital_status",
+   "fieldtype": "Select",
+   "label": "Marital Status",
+   "no_copy": 1,
+   "options": "\nSingle\nMarried\nDivorced\nWidow"
+  },
+  {
+   "fieldname": "risk_factors",
+   "fieldtype": "Section Break",
+   "label": "Risk Factors"
+  },
+  {
+   "fieldname": "tobacco_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "tobacco_current_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Alcohol Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_current_use",
+   "fieldtype": "Data",
+   "ignore_user_permissions": 1,
+   "label": "Alcohol Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_32",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "surrounding_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Occupational Hazards and Environmental Factors",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "other_risk_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Other Risk Factors",
+   "no_copy": 1
+  },
+  {
+   "collapsible_depends_on": "patient_details",
+   "fieldname": "more_info",
+   "fieldtype": "Section Break",
+   "label": "More Information",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-file-text"
+  },
+  {
+   "description": "Additional information regarding the patient",
+   "fieldname": "patient_details",
+   "fieldtype": "Text",
+   "ignore_xss_filter": 1,
+   "label": "Patient Details",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "default_currency",
+   "fieldtype": "Link",
+   "label": "Billing Currency",
+   "options": "Currency"
+  },
+  {
+   "fieldname": "last_name",
+   "fieldtype": "Data",
+   "label": "Middle Name",
+   "no_copy": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "first_name",
+   "fieldtype": "Data",
+   "label": "First Name",
+   "no_copy": 1,
+   "oldfieldtype": "Data",
+   "reqd": 1
+  },
+  {
+   "fieldname": "middle_name",
+   "fieldtype": "Data",
+   "label": "Father Name",
+   "no_copy": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "customer_details_section",
+   "fieldtype": "Section Break",
+   "label": "Customer Details"
+  },
+  {
+   "default": "Patients",
+   "fieldname": "customer_group",
+   "fieldtype": "Link",
+   "label": "Customer Group",
+   "options": "Customer Group"
+  },
+  {
+   "fieldname": "territory",
+   "fieldtype": "Link",
+   "label": "\u0627\u0644\u0645\u062d\u0627\u0641\u0638\u0647 / \u0627\u0644\u0642\u0636\u0627\u0621 / \u0627\u0644\u0646\u0627\u062d\u064a\u0629 / \u0627\u0644\u062d\u064a (\u0627\u0644\u0627\u062e\u062a\u064a\u0627\u0631 \u064a\u0628\u062f\u0623 \u0645\u0646 \u0627\u0644\u062d\u064a)",
+   "options": "Territory"
+  },
+  {
+   "fieldname": "column_break_24",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "default_price_list",
+   "fieldtype": "Link",
+   "label": "Default Price List",
+   "options": "Price List"
+  },
+  {
+   "fieldname": "language",
+   "fieldtype": "Link",
+   "label": "Print Language",
+   "options": "Language"
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_contacts",
+   "fieldtype": "Section Break",
+   "label": "Address and Contact",
+   "options": "fa fa-map-marker"
+  },
+  {
+   "fieldname": "address_html",
+   "fieldtype": "HTML",
+   "label": "Address HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_22",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "contact_html",
+   "fieldtype": "HTML",
+   "label": "Contact HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "1",
+   "fieldname": "invite_user",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Invite as User",
+   "no_copy": 1,
+   "read_only_depends_on": "eval: doc.user_id"
+  },
+  {
+   "fieldname": "user_id",
+   "fieldtype": "Read Only",
+   "label": "User ID",
+   "no_copy": 1,
+   "options": "User"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "uid",
+   "fieldtype": "Data",
+   "in_standard_filter": 1,
+   "label": "Identification Number (\u0627\u0644\u0628\u0637\u0627\u0642\u0629 \u0627\u0644\u0648\u0637\u0646\u064a\u0629)",
+   "length": 12,
+   "unique": 1
+  },
+  {
+   "fieldname": "dashboard_tab",
+   "fieldtype": "Tab Break",
+   "label": "Dashboard",
+   "show_dashboard": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_and_contact_tab",
+   "fieldtype": "Tab Break",
+   "label": "Address & Contact"
+  },
+  {
+   "fieldname": "medical_history_tab",
+   "fieldtype": "Tab Break",
+   "label": "Medical History"
+  },
+  {
+   "fieldname": "family_name",
+   "fieldtype": "Data",
+   "label": "Family Name"
+  },
+  {
+   "fieldname": "mother_name",
+   "fieldtype": "Data",
+   "label": "Mother Name"
+  },
+  {
+   "fieldname": "\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0627\u0648\u0644",
+   "reqd": 1
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u0627\u0628",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u0627\u0628"
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u062c\u062f"
+  },
+  {
+   "fieldname": "\u0627\u0644\u0644\u0642\u0628",
+   "fieldtype": "Data",
+   "label": "\u0627\u0644\u0644\u0642\u0628"
+  },
+  {
+   "fieldname": "\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+   "fieldtype": "Data",
+   "label": "\u0627\u0633\u0645 \u0627\u0644\u0627\u0645"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "country",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_preview": 1,
+   "label": "Country",
+   "options": "Country"
+  },
+  {
+   "depends_on": "eval:doc.no_id== true;",
+   "fieldname": "\u0627\u0631\u0641\u0627\u0642_\u0645\u0644\u0641__attach_file",
+   "fieldtype": "Attach",
+   "label": "\u0627\u0631\u0641\u0627\u0642 \u0645\u0644\u0641 / Attach file"
+  },
+  {
+   "default": "0",
+   "fieldname": "foreigner_\u0623\u062c\u0646\u0628\u064a",
+   "fieldtype": "Check",
+   "label": "Foreigner/ \u0623\u062c\u0646\u0628\u064a"
+  },
+  {
+   "depends_on": "foreigner_\u0623\u062c\u0646\u0628\u064a",
+   "fieldname": "passport_no\u0631\u0642\u0645_\u062c\u0648\u0627\u0632_\u0627\u0644\u0633\u0641\u0631",
+   "fieldtype": "Data",
+   "label": "Passport No/\u0631\u0642\u0645 \u062c\u0648\u0627\u0632 \u0627\u0644\u0633\u0641\u0631"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "national",
+   "fieldtype": "Select",
+   "label": "National",
+   "options": "Iraqi\nSyrian\nLebanese\nTurkish\nEgyptian",
+   "reqd": 1
+  },
+  {
+   "fieldname": "contact_person_full_name_\u0627\u0633\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+   "fieldtype": "Data",
+   "label": "Contact Person Full name/ \u0627\u0633\u0645 \u0627\u0644\u0634\u062e\u0635 \u0627\u0644\u0645\u0631\u0627\u0641\u0642"
+  },
+  {
+   "fieldname": "contact_phone_number_\u0631\u0642\u0645_\u0627\u0644\u0634\u062e\u0635_\u0627\u0644\u0645\u0631\u0627\u0641\u0642",
+   "fieldtype": "Phone",
+   "label": "Contact Phone number/ \u0631\u0642\u0645 \u0627\u0644\u0634\u062e\u0635 \u0627\u0644\u0645\u0631\u0627\u0641\u0642"
+  },
+  {
+   "fieldname": "column_break_yjno",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "0",
+   "fieldname": "no_id",
+   "fieldtype": "Check",
+   "label": "\u0644\u0627 \u062a\u0648\u062c\u062f \u0628\u0637\u0627\u0642\u0629 \u0648\u0637\u0646\u064a\u0629"
+  },
+  {
+   "fieldname": "old_mrn",
+   "fieldtype": "Data",
+   "label": "Old MRN (\u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0627\u0644\u0645\u0633\u0628\u0642)"
+  },
+  {
+   "fieldname": "state",
+   "fieldtype": "Data",
+   "label": "State / \u0627\u0644\u0645\u0646\u0637\u0642\u0629"
+  },
+  {
+   "fieldname": "address_line",
+   "fieldtype": "Data",
+   "label": "Address Line /\u0627\u0642\u0631\u0628 \u0646\u0642\u0637\u0629 \u062f\u0627\u0644\u0629"
+  },
+  {
+   "fieldname": "fourth_name",
+   "fieldtype": "Data",
+   "label": "\u0627\u0644\u0627\u0633\u0645 \u0627\u0644\u0631\u0627\u0628\u0639"
+  },
+  {
+   "fieldname": "ar_name",
+   "fieldtype": "Data",
+   "label": "Full Arabic Name",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "is_from_warith",
+   "fieldtype": "Check",
+   "label": "\u0647\u0644 \u0627\u0644\u0645\u0631\u064a\u0636 \u0645\u062d\u0648\u0644 \u0645\u0646 \u0648\u0627\u0631\u062b"
+  },
+  {
+   "fieldname": "oncolgy_tab",
+   "fieldtype": "Tab Break",
+   "label": "Oncolgy"
+  },
+  {
+   "fieldname": "cancer_type",
+   "fieldtype": "Data",
+   "label": "Cancer Type"
+  },
+  {
+   "fieldname": "symptoms_free_text",
+   "fieldtype": "Small Text",
+   "label": "Symptoms (free text)"
+  },
+  {
+   "fieldname": "column_break_uhxw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis"
+  },
+  {
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage"
+  },
+  {
+   "fieldname": "diagnosis_date",
+   "fieldtype": "Date",
+   "label": "Diagnosis Date"
+  },
+  {
+   "fieldname": "details_tab",
+   "fieldtype": "Tab Break",
+   "label": "Details"
+  }
+ ],
+ "icon": "fa fa-user",
+ "image_field": "image",
+ "links": [
+  {
+   "link_doctype": "Clinical Note",
+   "link_fieldname": "patient"
+  },
+  {
+   "group": "oncology",
+   "link_doctype": "Chemo Order",
+   "link_fieldname": "patient"
+  },
+  {
+   "group": "oncology",
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "patient"
+  }
+ ],
+ "max_attachments": 50,
+ "modified": "2024-09-16 22:10:41.940365",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient_name,mobile,email,phone",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "ASC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/patient.py
@@ -0,0 +1,398 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import dateutil
+
+import frappe
+from frappe import _
+from frappe.contacts.address_and_contact import load_address_and_contact
+from frappe.contacts.doctype.contact.contact import get_default_contact
+from frappe.model.document import Document
+from frappe.model.naming import set_name_by_naming_series
+from frappe.utils import cint, cstr, getdate
+from frappe.utils.nestedset import get_root_of
+
+from erpnext import get_default_currency
+from erpnext.accounts.party import get_dashboard_info
+from erpnext.selling.doctype.customer.customer import make_address
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+	send_registration_sms,
+)
+
+
+class Patient(Document):
+	def onload(self):
+		"""Load address and contacts in `__onload`"""
+		load_address_and_contact(self)
+		self.load_dashboard_info()
+
+	def validate(self):
+		self.set_full_name()
+		self.set_ar_full_name()
+		self.flags.is_new_doc = self.is_new()
+		self.flags.existing_customer = self.is_new() and bool(self.customer)
+
+	def before_insert(self):
+		self.set_missing_customer_details()
+
+	def after_insert(self):
+		if frappe.db.get_single_value("Healthcare Settings", "collect_registration_fee"):
+			frappe.db.set_value("Patient", self.name, "status", "Disabled")
+		else:
+			send_registration_sms(self)
+		self.reload()
+
+	def on_update(self):
+		if frappe.db.get_single_value("Healthcare Settings", "link_customer_to_patient"):
+			if self.customer:
+				if self.flags.existing_customer or frappe.db.exists(
+					{"doctype": "Patient", "name": ["!=", self.name], "customer": self.customer}
+				):
+					self.update_patient_based_on_existing_customer()
+				else:
+					self.update_linked_customer()
+
+			else:
+				create_customer(self)
+
+		self.set_contact()  # add or update contact
+
+		if self.flags.is_new_doc and self.get("address_line1"):
+			make_address(self)
+
+		if not self.user_id and self.email and self.invite_user:
+			self.create_website_user()
+
+	def load_dashboard_info(self):
+		if self.customer:
+
+			info = get_dashboard_info("Customer", self.customer, None)
+			self.set_onload("dashboard_info", info)
+# change the english name to arabic name
+#	def set_full_name(self):
+#		if self.last_name:
+#			self.patient_name = " ".join(filter(None, [self.first_name, self.last_name]))
+#		else:
+#			self.patient_name = self.first_name
+#
+	def set_full_name(self):
+		if self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ:
+			self.patient_name = " ".join(filter(None, [self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ, self.ÿßÿ≥ŸÖ_ÿßŸÑÿßÿ® ,self.ÿßÿ≥ŸÖ_ÿßŸÑÿ¨ÿØ , self.ÿßŸÑŸÑŸÇÿ®]))
+		else:
+			self.patient_name = self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ
+
+	def set_ar_full_name(self):
+		if self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ:
+			self.ar_name = " ".join(filter(None, [self.ÿßŸÑÿßÿ≥ŸÖ_ÿßŸÑÿßŸàŸÑ, self.ÿßÿ≥ŸÖ_ÿßŸÑÿßÿ® ,self.ÿßÿ≥ŸÖ_ÿßŸÑÿ¨ÿØ,self.fourth_name , self.ÿßŸÑŸÑŸÇÿ®]))
+
+
+	def set_missing_customer_details(self):
+		if not self.customer_group:
+			self.customer_group = frappe.db.get_single_value(
+				"Selling Settings", "customer_group"
+			) or get_root_of("Customer Group")
+		if not self.territory:
+			self.territory = frappe.db.get_single_value("Selling Settings", "territory") or get_root_of(
+				"Territory"
+			)
+		if not self.default_price_list:
+			self.default_price_list = frappe.db.get_single_value("Selling Settings", "selling_price_list")
+
+		if not self.customer_group or not self.territory or not self.default_price_list:
+			frappe.msgprint(
+				_(
+					"Please set defaults for Customer Group, Territory and Selling Price List in Selling Settings"
+				),
+				alert=True,
+			)
+
+		if not self.default_currency:
+			self.default_currency = get_default_currency()
+		if not self.language:
+			self.language = frappe.db.get_single_value("System Settings", "language")
+
+	def create_website_user(self):
+		users = frappe.db.get_all(
+			"User",
+			fields=["email", "mobile_no"],
+			or_filters={"email": self.email, "mobile_no": self.mobile},
+		)
+		if users and users[0]:
+			frappe.throw(
+				_(
+					"User exists with Email {}, Mobile {}<br>Please check email / mobile or disable 'Invite as User' to skip creating User"
+				).format(frappe.bold(users[0].email), frappe.bold(users[0].mobile_no)),
+				frappe.DuplicateEntryError,
+			)
+
+		user = frappe.get_doc(
+			{
+				"doctype": "User",
+				"first_name": self.first_name,
+				"last_name": self.last_name,
+				"email": self.email,
+				"user_type": "Website User",
+				"gender": self.sex,
+				"phone": self.phone,
+				"mobile_no": self.mobile,
+				"birth_date": self.dob,
+			}
+		)
+		user.flags.ignore_permissions = True
+		user.enabled = True
+		user.send_welcome_email = True
+		user.add_roles("Patient")
+		self.db_set("user_id", user.name)
+
+	def autoname(self):
+		patient_name_by = frappe.db.get_single_value("Healthcare Settings", "patient_name_by")
+		if patient_name_by == "Patient Name":
+			self.name = self.get_patient_name()
+		else:
+			set_name_by_naming_series(self)
+
+	def get_patient_name(self):
+		self.set_full_name()
+		name = self.patient_name
+		if frappe.db.get_value("Patient", name):
+			count = frappe.db.sql(
+				"""select ifnull(MAX(CAST(SUBSTRING_INDEX(name, ' ', -1) AS UNSIGNED)), 0) from tabPatient
+				 where name like %s""",
+				"%{0} - %".format(name),
+				as_list=1,
+			)[0][0]
+			count = cint(count) + 1
+			return "{0} - {1}".format(name, cstr(count))
+
+		return name
+
+	@property
+	def age(self):
+		if not self.dob:
+			return
+		dob = getdate(self.dob)
+		age = dateutil.relativedelta.relativedelta(getdate(), dob)
+		return age
+
+	def get_age(self):
+		age = self.age
+		if not age:
+			return
+		age_str = f'{str(age.years)} {_("Year(s)")} {str(age.months)} {_("Month(s)")} {str(age.days)} {_("Day(s)")}'
+		return age_str
+
+	@frappe.whitelist()
+	def invoice_patient_registration(self):
+		if frappe.db.get_single_value("Healthcare Settings", "registration_fee"):
+			company = frappe.defaults.get_user_default("company")
+			if not company:
+				company = frappe.db.get_single_value("Global Defaults", "default_company")
+
+			sales_invoice = make_invoice(self.name, company)
+			sales_invoice.save(ignore_permissions=True)
+			frappe.db.set_value("Patient", self.name, "status", "Active")
+			send_registration_sms(self)
+
+			return {"invoice": sales_invoice.name}
+
+	def set_contact(self):
+		contact = get_default_contact(self.doctype, self.name)
+
+		if contact:
+			old_doc = self.get_doc_before_save()
+			if not old_doc:
+				return
+
+			if old_doc.email != self.email or old_doc.mobile != self.mobile or old_doc.phone != self.phone:
+				self.update_contact(contact)
+		else:
+			if self.customer:
+				# customer contact exists, link patient
+				contact = get_default_contact("Customer", self.customer)
+
+			if contact:
+				self.update_contact(contact)
+			else:
+				self.reload()
+				if self.email or self.mobile or self.phone:
+					contact = frappe.get_doc(
+						{
+							"doctype": "Contact",
+							"first_name": self.first_name,
+							"middle_name": self.middle_name,
+							"last_name": self.last_name,
+							"gender": self.sex,
+							"is_primary_contact": 1,
+						}
+					)
+					contact.append("links", dict(link_doctype="Patient", link_name=self.name))
+					if self.customer:
+						contact.append("links", dict(link_doctype="Customer", link_name=self.customer))
+
+					contact.insert(ignore_permissions=True)
+					self.update_contact(contact.name)
+
+	def update_contact(self, contact):
+		contact = frappe.get_doc("Contact", contact)
+
+		if not contact.has_link(self.doctype, self.name):
+			contact.append("links", dict(link_doctype=self.doctype, link_name=self.name))
+
+		if self.email and self.email != contact.email_id:
+			for email in contact.email_ids:
+				email.is_primary = True if email.email_id == self.email else False
+			contact.add_email(self.email, is_primary=True)
+			contact.set_primary_email()
+
+		if self.mobile and self.mobile != contact.mobile_no:
+			for mobile in contact.phone_nos:
+				mobile.is_primary_mobile_no = True if mobile.phone == self.mobile else False
+			contact.add_phone(self.mobile, is_primary_mobile_no=True)
+			contact.set_primary("mobile_no")
+
+		if self.phone and self.phone != contact.phone:
+			for phone in contact.phone_nos:
+				phone.is_primary_phone = True if phone.phone == self.phone else False
+			contact.add_phone(self.phone, is_primary_phone=True)
+			contact.set_primary("phone")
+
+		contact.flags.skip_patient_update = True
+		contact.save(ignore_permissions=True)
+
+	def calculate_age(self, ref_date=None):
+		if self.dob:
+			if not ref_date:
+				ref_date = frappe.utils.nowdate()
+			diff = frappe.utils.date_diff(ref_date, self.dob)
+			years = diff // 365
+			months = (diff - (years * 365)) // 30
+			days = (diff - (years * 365)) - (months * 30)
+			return {
+				"age_in_string": f'{str(years)} {_("Year(s)")} {str(months)} {_("Month(s)")} {str(days)} {_("Day(s)")}',
+				"age_in_days": diff,
+			}
+
+	def update_linked_customer(self):
+		customer = frappe.get_doc("Customer", self.customer)
+		if self.customer_group:
+			customer.customer_group = self.customer_group
+		if self.territory:
+			customer.territory = self.territory
+		customer.customer_name = self.patient_name
+		customer.default_price_list = self.default_price_list
+		customer.default_currency = self.default_currency
+		customer.language = self.language
+		customer.image = self.image
+		customer.ignore_mandatory = True
+		customer.save(ignore_permissions=True)
+
+		frappe.msgprint(_("Customer {0} updated").format(customer.name), alert=True)
+
+	def update_patient_based_on_existing_customer(self):
+		customer = frappe.get_doc("Customer", self.customer)
+		self.db_set(
+			{
+				"customer_group": customer.customer_group,
+				"territory": customer.territory,
+				"default_price_list": customer.default_price_list,
+				"default_currency": customer.default_currency,
+				"language": customer.language,
+			}
+		)
+		self.notify_update()
+
+
+def create_customer(doc):
+	customer = frappe.get_doc(
+		{
+			"doctype": "Customer",
+			"customer_name": doc.patient_name,
+			"customer_group": doc.customer_group
+			or frappe.db.get_single_value("Selling Settings", "customer_group"),
+			"territory": doc.territory or frappe.db.get_single_value("Selling Settings", "territory"),
+			"customer_type": "Individual",
+			"default_currency": doc.default_currency,
+			"default_price_list": doc.default_price_list,
+			"language": doc.language,
+			"image": doc.image,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+	frappe.db.set_value("Patient", doc.name, "customer", customer.name)
+	frappe.msgprint(_("Customer {0} created and linked to Patient").format(customer.name), alert=True)
+
+
+def make_invoice(patient, company):
+	uom = frappe.db.exists("UOM", "Nos") or frappe.db.get_single_value("Stock Settings", "stock_uom")
+	sales_invoice = frappe.new_doc("Sales Invoice")
+	sales_invoice.customer = frappe.db.get_value("Patient", patient, "customer")
+	sales_invoice.due_date = getdate()
+	sales_invoice.company = company
+	sales_invoice.is_pos = 0
+	sales_invoice.debit_to = get_receivable_account(company)
+
+	item_line = sales_invoice.append("items")
+	item_line.item_name = "Registration Fee"
+	item_line.description = "Registration Fee"
+	item_line.qty = 1
+	item_line.uom = uom
+	item_line.conversion_factor = 1
+	item_line.income_account = get_income_account(None, company)
+	item_line.rate = frappe.db.get_single_value("Healthcare Settings", "registration_fee")
+	item_line.amount = item_line.rate
+	sales_invoice.set_missing_values()
+	return sales_invoice
+
+
+@frappe.whitelist()
+def get_patient_detail(patient):
+	patient_dict = frappe.db.sql("""select * from tabPatient where name=%s""", (patient), as_dict=1)
+	if not patient_dict:
+		frappe.throw(_("Patient not found"))
+	vital_sign = frappe.db.sql(
+		"""select * from `tabVital Signs` where patient=%s
+		order by signs_date desc limit 1""",
+		(patient),
+		as_dict=1,
+	)
+
+	details = patient_dict[0]
+	if vital_sign:
+		vital_sign[0].pop("inpatient_record")
+		details.update(vital_sign[0])
+	return details
+
+
+def get_timeline_data(doctype, name):
+	"""
+	Return Patient's timeline data from medical records
+	Also include the associated Customer timeline data
+	"""
+	patient_timeline_data = dict(
+		frappe.db.sql(
+			"""
+		SELECT
+			unix_timestamp(communication_date), count(*)
+		FROM
+			`tabPatient Medical Record`
+		WHERE
+			patient=%s
+			and `communication_date` > date_sub(curdate(), interval 1 year)
+		GROUP BY communication_date""",
+			name,
+		)
+	)
+
+	customer = frappe.db.get_value(doctype, name, "customer")
+	#if customer:
+#		from erpnext.accounts.party import get_timeline_data
+
+#		customer_timeline_data = get_timeline_data("Customer", customer)
+#		patient_timeline_data.update(customer_timeline_data)
+
+	return patient_timeline_data
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/patientOld.json
@@ -0,0 +1,556 @@
+{
+ "actions": [],
+ "allow_events_in_timeline": 1,
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "naming_series:",
+ "creation": "2017-01-23 14:03:49.084370",
+ "description": "Patient",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "basic_info",
+  "naming_series",
+  "first_name",
+  "middle_name",
+  "last_name",
+  "patient_name",
+  "sex",
+  "blood_group",
+  "dob",
+  "age_html",
+  "image",
+  "column_break_14",
+  "status",
+  "uid",
+  "inpatient_record",
+  "inpatient_status",
+  "report_preference",
+  "mobile",
+  "phone",
+  "email",
+  "invite_user",
+  "user_id",
+  "customer_details_section",
+  "customer",
+  "customer_group",
+  "territory",
+  "column_break_24",
+  "default_currency",
+  "default_price_list",
+  "language",
+  "more_info",
+  "patient_details",
+  "dashboard_tab",
+  "address_and_contact_tab",
+  "address_contacts",
+  "address_html",
+  "column_break_22",
+  "contact_html",
+  "sb_relation",
+  "patient_relation",
+  "medical_history_tab",
+  "personal_and_social_history",
+  "occupation",
+  "column_break_25",
+  "marital_status",
+  "allergy_medical_and_surgical_history",
+  "allergies",
+  "medication",
+  "column_break_20",
+  "medical_history",
+  "surgical_history",
+  "risk_factors",
+  "tobacco_past_use",
+  "tobacco_current_use",
+  "alcohol_past_use",
+  "alcohol_current_use",
+  "column_break_32",
+  "surrounding_factors",
+  "other_risk_factors"
+ ],
+ "fields": [
+  {
+   "fieldname": "basic_info",
+   "fieldtype": "Section Break",
+   "label": "Patient Demographics",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-user"
+  },
+  {
+   "fieldname": "inpatient_status",
+   "fieldtype": "Select",
+   "in_preview": 1,
+   "label": "Inpatient Status",
+   "no_copy": 1,
+   "options": "\nAdmission Scheduled\nAdmitted\nDischarge Scheduled",
+   "read_only": 1
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "no_copy": 1,
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-PAT-.YYYY.-",
+   "print_hide": 1,
+   "report_hide": 1,
+   "set_only_once": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_global_search": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Full Name",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "sex",
+   "fieldtype": "Link",
+   "in_preview": 1,
+   "label": "Gender",
+   "options": "Gender",
+   "reqd": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "blood_group",
+   "fieldtype": "Select",
+   "in_preview": 1,
+   "label": "Blood Group",
+   "no_copy": 1,
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative"
+  },
+  {
+   "bold": 1,
+   "fieldname": "dob",
+   "fieldtype": "Date",
+   "in_preview": 1,
+   "label": "Date of birth",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "age_html",
+   "fieldtype": "HTML",
+   "label": "Age",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_filter": 1,
+   "in_list_view": 1,
+   "label": "Status",
+   "no_copy": 1,
+   "options": "Active\nDisabled",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "image",
+   "fieldtype": "Attach Image",
+   "hidden": 1,
+   "in_preview": 1,
+   "label": "Image",
+   "no_copy": 1,
+   "print_hide": 1,
+   "width": "50%"
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "description": "If \"Link Customer to Patient\" is checked in Healthcare Settings and an existing Customer is not selected then, a Customer will be created for this Patient for recording transactions in Accounts module.",
+   "fieldname": "customer",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Customer",
+   "no_copy": 1,
+   "options": "Customer",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "report_preference",
+   "fieldtype": "Select",
+   "label": "Report Preference",
+   "options": "\nEmail\nPrint"
+  },
+  {
+   "bold": 1,
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Mobile",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "bold": 1,
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Email",
+   "no_copy": 1,
+   "options": "Email"
+  },
+  {
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "in_filter": 1,
+   "label": "Phone",
+   "no_copy": 1,
+   "options": "Phone"
+  },
+  {
+   "fieldname": "sb_relation",
+   "fieldtype": "Section Break",
+   "label": "Patient Relation"
+  },
+  {
+   "fieldname": "patient_relation",
+   "fieldtype": "Table",
+   "label": "Patient Relation",
+   "options": "Patient Relation"
+  },
+  {
+   "fieldname": "allergy_medical_and_surgical_history",
+   "fieldtype": "Section Break",
+   "label": "Allergies, Medical and Surgical History"
+  },
+  {
+   "fieldname": "allergies",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Allergies",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "medication",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medication",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_20",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "medical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Medical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "surgical_history",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Surgical History",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "personal_and_social_history",
+   "fieldtype": "Section Break",
+   "label": "Personal and Social History"
+  },
+  {
+   "fieldname": "occupation",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Occupation",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_25",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "marital_status",
+   "fieldtype": "Select",
+   "label": "Marital Status",
+   "no_copy": 1,
+   "options": "\nSingle\nMarried\nDivorced\nWidow"
+  },
+  {
+   "fieldname": "risk_factors",
+   "fieldtype": "Section Break",
+   "label": "Risk Factors"
+  },
+  {
+   "fieldname": "tobacco_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "tobacco_current_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Tobacco Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_past_use",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "label": "Alcohol Consumption (Past)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "alcohol_current_use",
+   "fieldtype": "Data",
+   "ignore_user_permissions": 1,
+   "label": "Alcohol Consumption (Present)",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_32",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "surrounding_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Occupational Hazards and Environmental Factors",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "other_risk_factors",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Other Risk Factors",
+   "no_copy": 1
+  },
+  {
+   "collapsible_depends_on": "patient_details",
+   "fieldname": "more_info",
+   "fieldtype": "Section Break",
+   "label": "More Information",
+   "oldfieldtype": "Section Break",
+   "options": "fa fa-file-text"
+  },
+  {
+   "description": "Additional information regarding the patient",
+   "fieldname": "patient_details",
+   "fieldtype": "Text",
+   "ignore_xss_filter": 1,
+   "label": "Patient Details",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "default_currency",
+   "fieldtype": "Link",
+   "label": "Billing Currency",
+   "options": "Currency"
+  },
+  {
+   "fieldname": "last_name",
+   "fieldtype": "Data",
+   "label": "Last Name",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "first_name",
+   "fieldtype": "Data",
+   "label": "First Name",
+   "no_copy": 1,
+   "oldfieldtype": "Data",
+   "reqd": 1
+  },
+  {
+   "fieldname": "middle_name",
+   "fieldtype": "Data",
+   "label": "Middle Name (optional)",
+   "no_copy": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "customer_details_section",
+   "fieldtype": "Section Break",
+   "label": "Customer Details"
+  },
+  {
+   "fieldname": "customer_group",
+   "fieldtype": "Link",
+   "label": "Customer Group",
+   "options": "Customer Group"
+  },
+  {
+   "fieldname": "territory",
+   "fieldtype": "Link",
+   "label": "Territory",
+   "options": "Territory"
+  },
+  {
+   "fieldname": "column_break_24",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "default_price_list",
+   "fieldtype": "Link",
+   "label": "Default Price List",
+   "options": "Price List"
+  },
+  {
+   "fieldname": "language",
+   "fieldtype": "Link",
+   "label": "Print Language",
+   "options": "Language"
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_contacts",
+   "fieldtype": "Section Break",
+   "label": "Address and Contact",
+   "options": "fa fa-map-marker"
+  },
+  {
+   "fieldname": "address_html",
+   "fieldtype": "HTML",
+   "label": "Address HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_22",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "contact_html",
+   "fieldtype": "HTML",
+   "label": "Contact HTML",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "default": "1",
+   "fieldname": "invite_user",
+   "fieldtype": "Check",
+   "label": "Invite as User",
+   "no_copy": 1,
+   "read_only_depends_on": "eval: doc.user_id"
+  },
+  {
+   "fieldname": "user_id",
+   "fieldtype": "Read Only",
+   "label": "User ID",
+   "no_copy": 1,
+   "options": "User"
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "bold": 1,
+   "fieldname": "uid",
+   "fieldtype": "Data",
+   "in_standard_filter": 1,
+   "label": "Identification Number (UID)",
+   "unique": 1
+  },
+  {
+   "fieldname": "dashboard_tab",
+   "fieldtype": "Tab Break",
+   "label": "Dashboard",
+   "show_dashboard": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "address_and_contact_tab",
+   "fieldtype": "Tab Break",
+   "label": "Address & Contact"
+  },
+  {
+   "fieldname": "medical_history_tab",
+   "fieldtype": "Tab Break",
+   "label": "Medical History"
+  }
+ ],
+ "icon": "fa fa-user",
+ "image_field": "image",
+ "links": [],
+ "max_attachments": 50,
+ "modified": "2023-01-13 17:48:59.069268",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient_name,mobile,email,phone,uid",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "ASC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/patient_dashboard.py
@@ -0,0 +1,26 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"heatmap": True,
+		"heatmap_message": _(
+			"This is based on transactions against this Patient. See timeline below for details"
+		),
+		"fieldname": "patient",
+		"non_standard_fieldnames": {"Payment Entry": "party"},
+		"transactions": [
+			{
+				"label": _("Appointments and Encounters"),
+				"items": ["Patient Appointment", "Vital Signs", "Patient Encounter"],
+			},
+			{"label": _("Lab Tests and Vital Signs"), "items": ["Lab Test", "Sample Collection"]},
+			{
+				"label": _("Rehab and Physiotherapy"),
+				"items": ["Patient Assessment", "Therapy Session", "Therapy Plan"],
+			},
+			{"label": _("Surgery"), "items": ["Clinical Procedure"]},
+			{"label": _("Admissions"), "items": ["Inpatient Record", "Inpatient Medication Order"]},
+			{"label": _("Billing and Payments"), "items": ["Sales Invoice", "Payment Entry"]},
+		],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient/test_patient.py
@@ -0,0 +1,133 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+import os
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_patient,
+)
+
+
+class TestPatient(FrappeTestCase):
+	def test_customer_created(self):
+		frappe.db.sql("""delete from `tabPatient`""")
+		frappe.db.set_value("Healthcare Settings", None, "link_customer_to_patient", 1)
+		patient = create_patient()
+		self.assertTrue(frappe.db.get_value("Patient", patient, "customer"))
+
+	def test_patient_registration(self):
+		frappe.db.sql("""delete from `tabPatient`""")
+		settings = frappe.get_single("Healthcare Settings")
+		settings.collect_registration_fee = 1
+		settings.registration_fee = 500
+		settings.save()
+
+		patient = create_patient()
+		patient = frappe.get_doc("Patient", patient)
+		self.assertEqual(patient.status, "Disabled")
+
+		# check sales invoice and patient status
+		result = patient.invoice_patient_registration()
+		self.assertTrue(frappe.db.exists("Sales Invoice", result.get("invoice")))
+		self.assertTrue(patient.status, "Active")
+
+		settings.collect_registration_fee = 0
+		settings.save()
+
+	def test_patient_contact(self):
+		frappe.db.sql("""delete from `tabPatient` where name like '_Test Patient%'""")
+		frappe.db.sql("""delete from `tabCustomer` where name like '_Test Patient%'""")
+		frappe.db.sql("""delete from `tabContact` where name like'_Test Patient%'""")
+		frappe.db.sql("""delete from `tabDynamic Link` where parent like '_Test Patient%'""")
+
+		patient = create_patient(
+			patient_name="_Test Patient Contact", email="test-patient@example.com", mobile="+91 0000000001"
+		)
+		customer = frappe.db.get_value("Patient", patient, "customer")
+		self.assertTrue(customer)
+		self.assertTrue(
+			frappe.db.exists(
+				"Dynamic Link", {"parenttype": "Contact", "link_doctype": "Patient", "link_name": patient}
+			)
+		)
+		self.assertTrue(
+			frappe.db.exists(
+				"Dynamic Link", {"parenttype": "Contact", "link_doctype": "Customer", "link_name": customer}
+			)
+		)
+
+		# a second patient linking with same customer
+		new_patient = create_patient(
+			email="test-patient@example.com", mobile="+91 0000000009", customer=customer
+		)
+		self.assertTrue(
+			frappe.db.exists(
+				"Dynamic Link", {"parenttype": "Contact", "link_doctype": "Patient", "link_name": new_patient}
+			)
+		)
+		self.assertTrue(
+			frappe.db.exists(
+				"Dynamic Link", {"parenttype": "Contact", "link_doctype": "Customer", "link_name": customer}
+			)
+		)
+
+	def test_patient_user(self):
+		frappe.db.sql("""delete from `tabUser` where email='test-patient-user@example.com'""")
+		frappe.db.sql("""delete from `tabDynamic Link` where parent like '_Test Patient%'""")
+		frappe.db.sql("""delete from `tabPatient` where name like '_Test Patient%'""")
+
+		patient = create_patient(
+			patient_name="_Test Patient User",
+			email="test-patient-user@example.com",
+			mobile="+91 0000000009",
+			create_user=True,
+		)
+		user = frappe.db.get_value("Patient", patient, "user_id")
+		self.assertTrue(frappe.db.exists("User", user))
+
+		new_patient = frappe.get_doc(
+			{
+				"doctype": "Patient",
+				"first_name": "_Test Patient Duplicate User",
+				"sex": "Male",
+				"email": "test-patient-user@example.com",
+				"mobile": "+91 0000000009",
+				"invite_user": 1,
+			}
+		)
+
+		self.assertRaises(frappe.exceptions.DuplicateEntryError, new_patient.insert)
+
+	def test_patient_image_update_should_update_customer_image(self):
+		settings = frappe.get_single("Healthcare Settings")
+		settings.link_customer_to_patient = 1
+		settings.save()
+
+		patient_name = create_patient()
+		patient = frappe.get_doc("Patient", patient_name)
+		patient.image = os.path.abspath("assets/frappe/images/default-avatar.png")
+		patient.save()
+
+		customer = frappe.get_doc("Customer", patient.customer)
+		self.assertEqual(customer.image, patient.image)
+
+	def test_multiple_paients_linked_with_same_customer(self):
+		frappe.db.sql("""delete from `tabPatient`""")
+		frappe.db.set_single_value("Healthcare Settings", "link_customer_to_patient", 1)
+
+		patient_name_1 = create_patient(patient_name="John Doe")
+		p1_customer_name = frappe.get_value("Patient", patient_name_1, "customer")
+		p1_customer = frappe.get_doc("Customer", p1_customer_name)
+		self.assertEqual(p1_customer.customer_name, "John Doe")
+
+		patient_name_2 = create_patient(patient_name="Jane Doe", customer=p1_customer.name)
+		p2_customer_name = frappe.get_value("Patient", patient_name_2, "customer")
+		p2_customer = frappe.get_doc("Customer", p2_customer_name)
+
+		self.assertEqual(p1_customer_name, p2_customer_name)
+		self.assertEqual(p2_customer.customer_name, "John Doe")
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment.js
@@ -0,0 +1,1076 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+frappe.provide('erpnext.queries');
+frappe.ui.form.on('Patient Appointment', {
+	setup: function(frm) {
+		frm.custom_make_buttons = {
+			'Vital Signs': 'Vital Signs',
+			'Patient Encounter': 'Patient Encounter'
+		};
+	},
+
+	onload: function(frm) {
+		if (frm.is_new()) {
+			frm.set_value('appointment_time', null);
+			frm.disable_save();
+		}
+	},
+
+	refresh: function(frm) {
+		frm.set_query('patient', function() {
+			return {
+				filters: { 'status': 'Active' }
+			};
+		});
+
+		frm.set_query('practitioner', function() {
+			if (frm.doc.department) {
+				return {
+					filters: {
+						'department': frm.doc.department
+					}
+				};
+			}
+		});
+
+		frm.set_query('service_unit', function() {
+			return {
+				query: 'healthcare.controllers.queries.get_healthcare_service_units',
+				filters: {
+					company: frm.doc.company,
+					inpatient_record: frm.doc.inpatient_record,
+					allow_appointments: 1,
+				}
+			};
+		});
+
+		frm.set_query('therapy_plan', function() {
+			return {
+				filters: {
+					'patient': frm.doc.patient
+				}
+			};
+		});
+
+		frm.set_query('service_request', function() {
+			return {
+				filters: {
+					'patient': frm.doc.patient,
+					'status': 'Active',
+					'docstatus': 1,
+					'template_dt': ['in', ['Clinical Procedure', 'Therapy Type']]
+				}
+			};
+		});
+
+		frm.trigger('set_therapy_type_filter');
+
+		if (frm.is_new()) {
+			frm.page.clear_primary_action();
+			if (frm.doc.appointment_for) {
+				frm.trigger('appointment_for');
+			}
+		} else {
+			frm.page.set_primary_action(__('Save'), () => frm.save());
+		}
+
+		if (frm.doc.patient) {
+			frm.add_custom_button(__('Patient History'), function() {
+				frappe.route_options = { 'patient': frm.doc.patient };
+				frappe.set_route('patient_history');
+			}, __('View'));
+		}
+
+		if (["Open", "Checked In"].includes(frm.doc.status) || (frm.doc.status == 'Scheduled' && !frm.doc.__islocal)) {
+			frm.add_custom_button(__('Cancel'), function() {
+				update_status(frm, 'Cancelled');
+			});
+			frm.add_custom_button(__('Reschedule'), function() {
+				check_and_set_availability(frm);
+			});
+
+			if (frm.doc.procedure_template) {
+				frm.add_custom_button(__('Clinical Procedure'), function() {
+					frappe.model.open_mapped_doc({
+						method: 'healthcare.healthcare.doctype.clinical_procedure.clinical_procedure.make_procedure',
+						frm: frm,
+					});
+				}, __('Create'));
+			} else if (frm.doc.therapy_type) {
+				frm.add_custom_button(__('Therapy Session'), function() {
+					frappe.model.open_mapped_doc({
+						method: 'healthcare.healthcare.doctype.therapy_session.therapy_session.create_therapy_session',
+						frm: frm,
+					})
+				}, 'Create');
+			} else {
+				frm.add_custom_button(__('Patient Encounter'), function() {
+					frappe.model.open_mapped_doc({
+						method: 'healthcare.healthcare.doctype.patient_appointment.patient_appointment.make_encounter',
+						frm: frm,
+					});
+				}, __('Create'));
+			}
+
+			frm.add_custom_button(__('Vital Signs'), function() {
+				create_vital_signs(frm);
+			}, __('Create'));
+		}
+
+		if (!frm.doc.__islocal && frm.doc.status=="Open" && frm.doc.appointment_based_on_check_in) {
+			frm.add_custom_button(__('Check In'), () => {
+				frm.set_value("status", "Checked In");
+				frm.save();
+			});
+		}
+
+		frm.trigger("make_invoice_button");
+	},
+
+	make_invoice_button: function (frm) {
+		// add button to invoice when show_payment_popup enabled
+		if (!frm.is_new() && !frm.doc.invoiced && frm.doc.status != "Cancelled") {
+			frappe.db.get_single_value("Healthcare Settings", "show_payment_popup").then(async val => {
+				let fee_validity = (await frappe.call(
+					"healthcare.healthcare.doctype.fee_validity.fee_validity.get_fee_validity",
+					{ "appointment_name": frm.doc.name, "date": frm.doc.appointment_date , "ignore_status": true })).message;
+
+				if (val && !fee_validity.length) {
+					frm.add_custom_button(__("Make Payment"), function () {
+						make_payment(frm, val);
+					});
+				}
+			});
+        }
+	},
+
+	appointment_for: function(frm) {
+		if (frm.doc.appointment_for == 'Practitioner') {
+			if (!frm.doc.practitioner) {
+				frm.set_value('department', '');
+			}
+			frm.set_value('service_unit', '');
+			frm.trigger('set_check_availability_action');
+		} else if (frm.doc.appointment_for == 'Service Unit') {
+			frm.set_value({
+				'practitioner': '',
+				'practitioner_name': '',
+				'department': '',
+			});
+			frm.trigger('set_book_action');
+		} else if (frm.doc.appointment_for == 'Department') {
+			frm.set_value({
+				'practitioner': '',
+				'practitioner_name': '',
+				'service_unit': '',
+			});
+			frm.trigger('set_book_action');
+		} else {
+			if (frm.doc.appointment_for == 'Department') {
+				frm.set_value('service_unit', '');
+			}
+			frm.set_value({
+				'practitioner': '',
+				'practitioner_name': '',
+				'department': '',
+				'service_unit': '',
+			});
+			frm.page.clear_primary_action();
+		}
+	},
+
+	set_book_action: function(frm) {
+		frm.page.set_primary_action(__('Book'), async function() {
+			frm.enable_save();
+			await frm.save();
+			if (!frm.is_new()) {
+				await frappe.db.get_single_value("Healthcare Settings", "show_payment_popup").then(val => {
+					frappe.call({
+						method: "healthcare.healthcare.doctype.fee_validity.fee_validity.check_fee_validity",
+						args: { "appointment": frm.doc },
+						callback: (r) => {
+							if (val && !r.message && !frm.doc.invoiced) {
+								make_payment(frm, val);
+							}
+						}
+					});
+				});
+			}
+		});
+	},
+
+	set_check_availability_action: function(frm) {
+		frm.page.set_primary_action(__('Check Availability'), function() {
+			if (!frm.doc.patient) {
+				frappe.msgprint({
+					title: __('Not Allowed'),
+					message: __('Please select Patient first'),
+					indicator: 'red'
+				});
+			} else {
+				check_and_set_availability(frm);
+			}
+		});
+	},
+
+	patient: function(frm) {
+		if (frm.doc.patient) {
+			frm.trigger('toggle_payment_fields');
+			frm.trigger('appointment_for');
+			frappe.call({
+				method: 'frappe.client.get',
+				args: {
+					doctype: 'Patient',
+					name: frm.doc.patient
+				},
+				callback: function(data) {
+					let age = null;
+					if (data.message.dob) {
+						age = calculate_age(data.message.dob);
+					}
+					frappe.model.set_value(frm.doctype, frm.docname, 'patient_age', age);
+				}
+			});
+		} else {
+			frm.set_value('patient_name', '');
+			frm.set_value('patient_sex', '');
+			frm.set_value('patient_age', '');
+			frm.set_value('inpatient_record', '');
+		}
+	},
+
+	practitioner: function(frm) {
+		if (frm.doc.practitioner) {
+			frm.events.set_payment_details(frm);
+		}
+	},
+
+	appointment_type: function(frm) {
+		if (frm.doc.appointment_type) {
+			if (frm.doc.appointment_for && frm.doc[frappe.scrub(frm.doc.appointment_for)]) {
+				frm.events.set_payment_details(frm);
+			}
+		}
+	},
+
+	department: function(frm) {
+		if (frm.doc.department && frm.doc.appointment_for == 'Department') {
+			frm.events.set_payment_details(frm);
+		}
+	},
+
+	service_unit: function(frm) {
+		if (frm.doc.service_unit && frm.doc.appointment_for == 'Service Unit') {
+			frm.events.set_payment_details(frm);
+		}
+	},
+
+	set_payment_details: function(frm) {
+		frappe.db.get_single_value('Healthcare Settings', 'show_payment_popup').then(val => {
+			if (val) {
+				frappe.call({
+					method: 'healthcare.healthcare.utils.get_appointment_billing_item_and_rate',
+					args: {
+						doc: frm.doc
+					},
+					callback: function(data) {
+						if (data.message) {
+							frappe.model.set_value(frm.doctype, frm.docname, 'paid_amount', data.message.practitioner_charge);
+							frappe.model.set_value(frm.doctype, frm.docname, 'billing_item', data.message.service_item);
+						}
+					}
+				});
+			}
+		});
+	},
+
+	therapy_plan: function(frm) {
+		frm.trigger('set_therapy_type_filter');
+	},
+
+	set_therapy_type_filter: function(frm) {
+		if (frm.doc.therapy_plan) {
+			frm.call('get_therapy_types').then(r => {
+				frm.set_query('therapy_type', function() {
+					return {
+						filters: {
+							'name': ['in', r.message]
+						}
+					};
+				});
+			});
+		}
+	},
+
+	therapy_type: function(frm) {
+		if (frm.doc.therapy_type) {
+			frappe.db.get_value('Therapy Type', frm.doc.therapy_type, 'default_duration', (r) => {
+				if (r.default_duration) {
+					frm.set_value('duration', r.default_duration)
+				}
+			});
+		}
+	},
+
+	get_procedure_from_encounter: function(frm) {
+		get_prescribed_procedure(frm);
+	},
+
+	toggle_payment_fields: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.patient_appointment.patient_appointment.check_payment_reqd',
+			args: { 'patient': frm.doc.patient },
+			callback: function(data) {
+				if (data.message.fee_validity) {
+					// if fee validity exists and show payment popup is enabled,
+					// show payment fields as non-mandatory
+					frm.toggle_display('mode_of_payment', 0);
+					frm.toggle_display('paid_amount', 0);
+					frm.toggle_display('billing_item', 0);
+					frm.toggle_reqd('paid_amount', 0);
+					frm.toggle_reqd('billing_item', 0);
+				} else if (data.message) {
+					frm.toggle_display('mode_of_payment', 1);
+					frm.toggle_display('paid_amount', 1);
+					frm.toggle_display('billing_item', 1);
+					frm.toggle_reqd('paid_amount', 1);
+					frm.toggle_reqd('billing_item', 1);
+				} else {
+					// if show payment popup is disabled, hide fields
+					frm.toggle_display('mode_of_payment', data.message ? 1 : 0);
+					frm.toggle_display('paid_amount', data.message ? 1 : 0);
+					frm.toggle_display('billing_item', data.message ? 1 : 0);
+					frm.toggle_reqd('paid_amount', data.message ? 1 : 0);
+					frm.toggle_reqd('billing_item', data.message ? 1 : 0);
+				}
+			}
+		});
+	},
+
+	get_prescribed_therapies: function(frm) {
+		if (frm.doc.patient) {
+			frappe.call({
+				method: "healthcare.healthcare.doctype.patient_appointment.patient_appointment.get_prescribed_therapies",
+				args: { patient: frm.doc.patient },
+				callback: function(r) {
+					if (r.message) {
+						show_therapy_types(frm, r.message);
+					} else {
+						frappe.msgprint({
+							title: __('Not Therapies Prescribed'),
+							message: __('There are no Therapies prescribed for Patient {0}', [frm.doc.patient.bold()]),
+							indicator: 'blue'
+						});
+					}
+				}
+			});
+		}
+	}
+});
+
+let check_and_set_availability = function(frm) {
+	let selected_slot = null;
+	let service_unit = null;
+	let duration = null;
+	let add_video_conferencing = null;
+	let overlap_appointments = null;
+	let appointment_based_on_check_in = false;
+
+	show_availability();
+
+	function show_empty_state(practitioner, appointment_date) {
+		frappe.msgprint({
+			title: __('Not Available'),
+			message: __('Healthcare Practitioner {0} not available on {1}', [practitioner.bold(), appointment_date.bold()]),
+			indicator: 'red'
+		});
+	}
+
+	function show_availability() {
+		let selected_practitioner = '';
+		let d = new frappe.ui.Dialog({
+			title: __('Available slots'),
+			fields: [
+				{ fieldtype: 'Link', options: 'Medical Department', reqd: 1, fieldname: 'department', label: 'Medical Department' },
+				{ fieldtype: 'Column Break' },
+				{ fieldtype: 'Link', options: 'Healthcare Practitioner', reqd: 1, fieldname: 'practitioner', label: 'Healthcare Practitioner' },
+				{ fieldtype: 'Column Break' },
+				{ fieldtype: 'Date', reqd: 1, fieldname: 'appointment_date', label: 'Date', min_date: new Date(frappe.datetime.get_today()) },
+				{ fieldtype: 'Section Break' },
+				{ fieldtype: 'HTML', fieldname: 'available_slots' },
+			],
+			primary_action_label: __('Book'),
+			primary_action: async function() {
+				frm.set_value('appointment_time', selected_slot);
+				add_video_conferencing = add_video_conferencing && !d.$wrapper.find(".opt-out-check").is(":checked")
+					&& !overlap_appointments
+
+				frm.set_value('add_video_conferencing', add_video_conferencing);
+				if (!frm.doc.duration) {
+					frm.set_value('duration', duration);
+				}
+				let practitioner = frm.doc.practitioner;
+
+				frm.set_value('practitioner', d.get_value('practitioner'));
+				frm.set_value('department', d.get_value('department'));
+				frm.set_value('appointment_date', d.get_value('appointment_date'));
+				frm.set_value('appointment_based_on_check_in', appointment_based_on_check_in)
+
+				if (service_unit) {
+					frm.set_value('service_unit', service_unit);
+				}
+
+				d.hide();
+				frm.enable_save();
+				await frm.save();
+				if (!frm.is_new() && (!practitioner || practitioner == d.get_value('practitioner'))) {
+					await frappe.db.get_single_value("Healthcare Settings", "show_payment_popup").then(val => {
+						frappe.call({
+							method: "healthcare.healthcare.doctype.fee_validity.fee_validity.check_fee_validity",
+							args: { "appointment": frm.doc },
+							callback: (r) => {
+								if (val && !r.message && !frm.doc.invoiced) {
+									make_payment(frm, val);
+								} else {
+									frappe.call({
+										method: "healthcare.healthcare.doctype.patient_appointment.patient_appointment.update_fee_validity",
+										args: { "appointment": frm.doc }
+									});
+								}
+							}
+						});
+					});
+				}
+				d.get_primary_btn().attr('disabled', true);
+			}
+		});
+
+		d.set_values({
+			'department': frm.doc.department,
+			'practitioner': frm.doc.practitioner,
+			'appointment_date': frm.doc.appointment_date,
+		});
+
+		let selected_department = frm.doc.department;
+
+		d.fields_dict['department'].df.onchange = () => {
+			if (selected_department != d.get_value('department')) {
+				d.set_values({
+					'practitioner': ''
+				});
+				selected_department = d.get_value('department');
+			}
+			if (d.get_value('department')) {
+				d.fields_dict.practitioner.get_query = function() {
+					return {
+						filters: {
+							'department': selected_department
+						}
+					};
+				};
+			}
+		};
+
+		// disable dialog action initially
+		d.get_primary_btn().attr('disabled', true);
+
+		// Field Change Handler
+
+		let fd = d.fields_dict;
+
+		d.fields_dict['appointment_date'].df.onchange = () => {
+			show_slots(d, fd);
+		};
+		d.fields_dict['practitioner'].df.onchange = () => {
+			if (d.get_value('practitioner') && d.get_value('practitioner') != selected_practitioner) {
+				selected_practitioner = d.get_value('practitioner');
+				show_slots(d, fd);
+			}
+		};
+
+		d.show();
+	}
+
+	function show_slots(d, fd) {
+		if (d.get_value('appointment_date') && d.get_value('practitioner')) {
+			fd.available_slots.html('');
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.patient_appointment.patient_appointment.get_availability_data',
+				args: {
+					practitioner: d.get_value('practitioner'),
+					date: d.get_value('appointment_date'),
+					appointment: frm.doc
+				},
+				callback: (r) => {
+					let data = r.message;
+					if (data.slot_details.length > 0) {
+						let $wrapper = d.fields_dict.available_slots.$wrapper;
+
+						// make buttons for each slot
+						let slot_html = get_slots(data.slot_details, data.fee_validity, d.get_value('appointment_date'));
+
+						$wrapper
+							.css('margin-bottom', 0)
+							.addClass('text-center')
+							.html(slot_html);
+
+						// highlight button when clicked
+						$wrapper.on('click', 'button', function() {
+							let $btn = $(this);
+							$wrapper.find('button').removeClass('btn-outline-primary');
+							$btn.addClass('btn-outline-primary');
+							selected_slot = $btn.attr('data-name');
+							service_unit = $btn.attr('data-service-unit');
+							appointment_based_on_check_in = $btn.attr('data-day-appointment');
+							duration = $btn.attr('data-duration');
+							add_video_conferencing = parseInt($btn.attr('data-tele-conf'));
+							overlap_appointments = parseInt($btn.attr('data-overlap-appointments'));
+							// show option to opt out of tele conferencing
+							if ($btn.attr('data-tele-conf') == 1) {
+								if (d.$wrapper.find(".opt-out-conf-div").length) {
+									d.$wrapper.find(".opt-out-conf-div").show();
+								} else {
+									overlap_appointments ?
+										d.footer.prepend(
+											`<div class="opt-out-conf-div ellipsis text-muted" style="vertical-align:text-bottom;">
+												<label>
+													<span class="label-area">
+													${__("Video Conferencing disabled for group consultations")}
+													</span>
+												</label>
+											</div>`
+										)
+									:
+										d.footer.prepend(
+											`<div class="opt-out-conf-div ellipsis" style="vertical-align:text-bottom;">
+											<label>
+												<input type="checkbox" class="opt-out-check"/>
+												<span class="label-area">
+												${__("Do not add Video Conferencing")}
+												</span>
+											</label>
+										</div>`
+										);
+								}
+							} else {
+								d.$wrapper.find(".opt-out-conf-div").hide();
+							}
+
+							// enable primary action 'Book'
+							d.get_primary_btn().attr('disabled', null);
+						});
+
+					} else {
+						//	fd.available_slots.html('Please select a valid date.'.bold())
+						show_empty_state(d.get_value('practitioner'), d.get_value('appointment_date'));
+					}
+				},
+				freeze: true,
+				freeze_message: __('Fetching Schedule...')
+			});
+		} else {
+			fd.available_slots.html(__('Appointment date and Healthcare Practitioner are Mandatory').bold());
+		}
+	}
+
+	function get_slots(slot_details, fee_validity, appointment_date) {
+		let slot_html = '';
+		let appointment_count = 0;
+		let disabled = false;
+		let start_str, slot_start_time, slot_end_time, interval, count, count_class, tool_tip, available_slots;
+
+		slot_details.forEach((slot_info) => {
+			slot_html += `<div class="slot-info">`;
+			if (fee_validity && fee_validity != 'Disabled') {
+				slot_html += `
+					<span style="color:green">
+					${__('Patient has fee validity till')} <b>${moment(fee_validity.valid_till).format('DD-MM-YYYY')}</b>
+					</span><br>`;
+			} else if (fee_validity != 'Disabled') {
+				slot_html += `
+					<span style="color:red">
+					${__('Patient has no fee validity')}
+					</span><br>`;
+			}
+
+			slot_html += `
+				<span><b>
+				${__('Practitioner Schedule: ')} </b> ${slot_info.slot_name}
+					${slot_info.tele_conf && !slot_info.allow_overlap ? '<i class="fa fa-video-camera fa-1x" aria-hidden="true"></i>' : ''}
+				</span><br>
+				<span><b> ${__('Service Unit: ')} </b> ${slot_info.service_unit}</span>`;
+				if (slot_info.service_unit_capacity) {
+					slot_html += `<br><span> <b> ${__('Maximum Capacity:')} </b> ${slot_info.service_unit_capacity} </span>`;
+				}
+
+				slot_html += '</div><br>';
+
+				slot_html += slot_info.avail_slot.map(slot => {
+						appointment_count = 0;
+						disabled = false;
+						count_class = tool_tip = '';
+						start_str = slot.from_time;
+						slot_start_time = moment(slot.from_time, 'HH:mm:ss');
+						slot_end_time = moment(slot.to_time, 'HH:mm:ss');
+						interval = (slot_end_time - slot_start_time) / 60000 | 0;
+
+						// restrict past slots based on the current time.
+						let now = moment();
+						let booked_moment = ""
+						if((now.format("YYYY-MM-DD") == appointment_date) && (slot_start_time.isBefore(now) && !slot.maximum_appointments)){
+							disabled = true;
+						} else {
+							// iterate in all booked appointments, update the start time and duration
+							slot_info.appointments.forEach((booked) => {
+								booked_moment = moment(booked.appointment_time, 'HH:mm:ss');
+								let end_time = booked_moment.clone().add(booked.duration, 'minutes');
+
+								// to get apointment count for all day appointments
+								if (slot.maximum_appointments) {
+									if (booked.appointment_date == appointment_date) {
+										appointment_count++;
+									}
+								}
+								// Deal with 0 duration appointments
+								if (booked_moment.isSame(slot_start_time) || booked_moment.isBetween(slot_start_time, slot_end_time)) {
+									if (booked.duration == 0) {
+										disabled = true;
+										return false;
+									}
+								}
+
+								// Check for overlaps considering appointment duration
+								if (slot_info.allow_overlap != 1) {
+									if (slot_start_time.isBefore(end_time) && slot_end_time.isAfter(booked_moment)) {
+										// There is an overlap
+										disabled = true;
+										return false;
+									}
+								} else {
+									if (slot_start_time.isBefore(end_time) && slot_end_time.isAfter(booked_moment)) {
+										appointment_count++;
+									}
+									if (appointment_count >= slot_info.service_unit_capacity) {
+										// There is an overlap
+										disabled = true;
+										return false;
+									}
+								}
+							});
+						}
+						if (slot_info.allow_overlap == 1 && slot_info.service_unit_capacity > 1) {
+							available_slots = slot_info.service_unit_capacity - appointment_count;
+							count = `${(available_slots > 0 ? available_slots : __('Full'))}`;
+							count_class = `${(available_slots > 0 ? 'badge-success' : 'badge-danger')}`;
+							tool_tip =`${available_slots} ${__('slots available for booking')}`;
+						}
+
+						if (slot.maximum_appointments) {
+							if (appointment_count >= slot.maximum_appointments) {
+								disabled = true;
+							}
+							else {
+								disabled = false;
+							}
+							available_slots = slot.maximum_appointments - appointment_count;
+							count = `${(available_slots > 0 ? available_slots : __('Full'))}`;
+							count_class = `${(available_slots > 0 ? 'badge-success' : 'badge-danger')}`;
+							return `<button class="btn btn-secondary" data-name=${start_str}
+								data-service-unit="${slot_info.service_unit || ''}"
+								data-day-appointment=${1}
+								data-duration=${slot.duration}
+								${disabled ? 'disabled="disabled"' : ""}>${slot.from_time} -
+								${slot.to_time} ${slot.maximum_appointments ?
+								`<br><span class='badge ${count_class}'>${count} </span>` : ''}</button>`
+						} else {
+
+						return `
+							<button class="btn btn-secondary" data-name=${start_str}
+								data-duration=${interval}
+								data-service-unit="${slot_info.service_unit || ''}"
+								data-tele-conf="${slot_info.tele_conf || 0}"
+								data-overlap-appointments="${slot_info.service_unit_capacity || 0}"
+								style="margin: 0 10px 10px 0; width: auto;" ${disabled ? 'disabled="disabled"' : ""}
+								data-toggle="tooltip" title="${tool_tip || ''}">
+								${start_str.substring(0, start_str.length - 3)}
+								${slot_info.service_unit_capacity ? `<br><span class='badge ${count_class}'> ${count} </span>` : ''}
+							</button>`;
+
+				}
+			}).join("");
+
+				if (slot_info.service_unit_capacity) {
+					slot_html += `<br/><small>${__('Each slot indicates the capacity currently available for booking')}</small>`;
+				}
+				slot_html += `<br/><br/>`;
+
+		});
+
+		return slot_html;
+	}
+};
+
+let get_prescribed_procedure = function(frm) {
+	if (frm.doc.patient) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.patient_appointment.patient_appointment.get_procedure_prescribed',
+			args: { patient: frm.doc.patient },
+			callback: function(r) {
+				if (r.message && r.message.length) {
+					show_procedure_templates(frm, r.message);
+				} else {
+					frappe.msgprint({
+						title: __('Not Found'),
+						message: __('No Prescribed Procedures found for the selected Patient')
+					});
+				}
+			}
+		});
+	} else {
+		frappe.msgprint({
+			title: __('Not Allowed'),
+			message: __('Please select a Patient first')
+		});
+	}
+};
+
+let show_procedure_templates = function(frm, result) {
+	let d = new frappe.ui.Dialog({
+		title: __('Prescribed Procedures'),
+		fields: [
+			{
+				fieldtype: 'HTML', fieldname: 'procedure_template'
+			}
+		]
+	});
+	let html_field = d.fields_dict.procedure_template.$wrapper;
+	html_field.empty();
+	$.each(result, function(x, y) {
+		let row = $(repl('<div class="col-xs-12" style="padding-top:12px; text-align:center;" >\
+		<div class="col-xs-5"> %(encounter)s <br> %(consulting_practitioner)s <br> %(encounter_date)s </div>\
+		<div class="col-xs-5"> %(procedure_template)s <br>%(practitioner)s  <br> %(date)s</div>\
+		<div class="col-xs-2">\
+		<a data-name="%(name)s" data-procedure-template="%(procedure_template)s"\
+		data-encounter="%(encounter)s" data-practitioner="%(practitioner)s"\
+		data-date="%(date)s"  data-department="%(department)s">\
+		<button class="btn btn-default btn-xs">Add\
+		</button></a></div></div><div class="col-xs-12"><hr/><div/>', {
+			name: y[0], procedure_template: y[1],
+			encounter: y[2], consulting_practitioner: y[3], encounter_date: y[4],
+			practitioner: y[5] ? y[5] : '', date: y[6] ? y[6] : '', department: y[7] ? y[7] : ''
+		})).appendTo(html_field);
+		row.find("a").click(function() {
+			frm.doc.procedure_template = $(this).attr('data-procedure-template');
+			frm.doc.procedure_prescription = $(this).attr('data-name');
+			frm.doc.practitioner = $(this).attr('data-practitioner');
+			frm.doc.appointment_date = $(this).attr('data-date');
+			frm.doc.department = $(this).attr('data-department');
+			refresh_field('procedure_template');
+			refresh_field('procedure_prescription');
+			refresh_field('appointment_date');
+			refresh_field('practitioner');
+			refresh_field('department');
+			d.hide();
+			return false;
+		});
+	});
+	if (!result) {
+		let msg = __('There are no procedure prescribed for ') + frm.doc.patient;
+		$(repl('<div class="col-xs-12" style="padding-top:20px;" >%(msg)s</div></div>', { msg: msg })).appendTo(html_field);
+	}
+	d.show();
+};
+
+let show_therapy_types = function(frm, result) {
+	var d = new frappe.ui.Dialog({
+		title: __('Prescribed Therapies'),
+		fields: [
+			{
+				fieldtype: 'HTML', fieldname: 'therapy_type'
+			}
+		]
+	});
+	var html_field = d.fields_dict.therapy_type.$wrapper;
+	$.each(result, function(x, y) {
+		var row = $(repl('<div class="col-xs-12" style="padding-top:12px; text-align:center;" >\
+		<div class="col-xs-5"> %(encounter)s <br> %(practitioner)s <br> %(date)s </div>\
+		<div class="col-xs-5"> %(therapy)s </div>\
+		<div class="col-xs-2">\
+		<a data-therapy="%(therapy)s" data-therapy-plan="%(therapy_plan)s" data-name="%(name)s"\
+		data-encounter="%(encounter)s" data-practitioner="%(practitioner)s"\
+		data-date="%(date)s"  data-department="%(department)s">\
+		<button class="btn btn-default btn-xs">Add\
+		</button></a></div></div><div class="col-xs-12"><hr/><div/>', {
+			therapy: y[0],
+			name: y[1], encounter: y[2], practitioner: y[3], date: y[4],
+			department: y[6] ? y[6] : '', therapy_plan: y[5]
+		})).appendTo(html_field);
+
+		row.find("a").click(function() {
+			frm.doc.therapy_type = $(this).attr("data-therapy");
+			frm.doc.practitioner = $(this).attr("data-practitioner");
+			frm.doc.department = $(this).attr("data-department");
+			frm.doc.therapy_plan = $(this).attr("data-therapy-plan");
+			frm.refresh_field("therapy_type");
+			frm.refresh_field("practitioner");
+			frm.refresh_field("department");
+			frm.refresh_field("therapy-plan");
+			frappe.db.get_value('Therapy Type', frm.doc.therapy_type, 'default_duration', (r) => {
+				if (r.default_duration) {
+					frm.set_value('duration', r.default_duration)
+				}
+			});
+			d.hide();
+			return false;
+		});
+	});
+	d.show();
+};
+
+let create_vital_signs = function(frm) {
+	if (!frm.doc.patient) {
+		frappe.throw(__('Please select patient'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.patient,
+		'appointment': frm.doc.name,
+		'company': frm.doc.company
+	};
+	frappe.new_doc('Vital Signs');
+};
+
+let update_status = function(frm, status) {
+	let doc = frm.doc;
+	frappe.confirm(__('Are you sure you want to cancel this appointment?'),
+		function() {
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.patient_appointment.patient_appointment.update_status',
+				args: { appointment_id: doc.name, status: status },
+				callback: function(data) {
+					if (!data.exc) {
+						frm.reload_doc();
+					}
+				}
+			});
+		}
+	);
+};
+
+let calculate_age = function(birth) {
+	let ageMS = Date.parse(Date()) - Date.parse(birth);
+	let age = new Date();
+	age.setTime(ageMS);
+	let years =  age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
+
+let make_payment = function (frm, automate_invoicing) {
+	if (automate_invoicing) {
+		make_registration (frm, automate_invoicing);
+	}
+
+	function make_registration (frm, automate_invoicing) {
+		if (automate_invoicing == true && !frm.doc.paid_amount) {
+			frappe.throw({
+				title: __("Not Allowed"),
+				message: __("Please set the Paid Amount first"),
+			});
+		}
+
+		let fields = [
+			{
+				label: "Patient",
+				fieldname: "patient",
+				fieldtype: "Data",
+				read_only: true,
+			},
+			{
+				label: "Mode of Payment",
+				fieldname: "mode_of_payment",
+				fieldtype: "Link",
+				options: "Mode of Payment",
+				reqd: 1,
+			},
+			{
+				fieldtype: "Column Break",
+			},
+			{
+				label: "Consultation Charge",
+				fieldname: "consultation_charge",
+				fieldtype: "Currency",
+				read_only: true,
+			},
+			{
+				label: "Total Payable",
+				fieldname: "total_payable",
+				fieldtype: "Currency",
+				read_only: true,
+			},
+			{
+				label: __("Additional Discount"),
+				fieldtype:"Section Break",
+				collapsible: 1,
+			},
+			{
+				label: "Discount Percentage",
+				fieldname: "discount_percentage",
+				fieldtype: "Percent",
+				default: 0,
+			},
+			{
+				fieldtype: "Column Break",
+			},
+			{
+				label: "Discount Amount",
+				fieldname: "discount_amount",
+				fieldtype: "Currency",
+				default: 0,
+			}
+		];
+
+		if (frm.doc.appointment_for == "Practitioner") {
+			let pract_dict = {
+				label: "Practitioner",
+				fieldname: "practitioner",
+				fieldtype: "Data",
+				read_only: true,
+			};
+			fields.splice(3, 0, pract_dict);
+		} else if (frm.doc.appointment_for == "Service Unit") {
+			let su_dict = {
+				label: "Service Unit",
+				fieldname: "service_unit",
+				fieldtype: "Data",
+				read_only: true,
+			};
+			fields.splice(3, 0, su_dict);
+		} else if (frm.doc.appointment_for == "Department") {
+			let dept_dict = {
+				label: "Department",
+				fieldname: "department",
+				fieldtype: "Data",
+				read_only: true,
+			};
+			fields.splice(3, 0, dept_dict);
+		}
+
+		if (automate_invoicing) {
+			show_payment_dialog(frm, fields);
+		}
+	}
+
+	function show_payment_dialog(frm, fields) {
+		let d = new frappe.ui.Dialog({
+			title: "Enter Payment Details",
+			fields: fields,
+			primary_action_label: "Create Invoice",
+			primary_action: async function(values) {
+				if (frm.is_dirty()) {
+					await frm.save();
+				}
+				frappe.call({
+					method: "healthcare.healthcare.doctype.patient_appointment.patient_appointment.invoice_appointment",
+					args: {
+						"appointment_name": frm.doc.name,
+						"discount_percentage": values.discount_percentage,
+						"discount_amount": values.discount_amount
+					},
+					callback: async function (data) {
+						if (!data.exc) {
+							await frm.reload_doc();
+							if (frm.doc.ref_sales_invoice) {
+								d.get_field("mode_of_payment").$input.prop("disabled", true);
+								d.get_field("discount_percentage").$input.prop("disabled", true);
+								d.get_field("discount_amount").$input.prop("disabled", true);
+								d.get_primary_btn().attr("disabled", true);
+								d.get_secondary_btn().attr("disabled", false);
+							}
+						}
+					}
+				});
+			},
+			secondary_action_label: __(`<svg class="icon  icon-sm" style="">
+				<use class="" href="#icon-printer"></use>
+			</svg>`),
+			secondary_action() {
+				window.open("/app/print/Sales Invoice/" + frm.doc.ref_sales_invoice, "_blank");
+				d.hide();
+			}
+		});
+		d.fields_dict["mode_of_payment"].df.onchange = () => {
+			if (d.get_value("mode_of_payment")) {
+				frm.set_value("mode_of_payment", d.get_value("mode_of_payment"));
+			}
+		};
+		d.get_secondary_btn().attr("disabled", true);
+		d.set_values({
+			"patient": frm.doc.patient_name,
+			"consultation_charge": frm.doc.paid_amount,
+			"total_payable": frm.doc.paid_amount,
+		});
+
+		if (frm.doc.appointment_for == "Practitioner") {
+			d.set_value("practitioner", frm.doc.practitioner_name);
+		} else if (frm.doc.appointment_for == "Service Unit") {
+			d.set_value("service_unit", frm.doc.service_unit);
+		} else if (frm.doc.appointment_for == "Department") {
+			d.set_value("department", frm.doc.department);
+		}
+
+		if (frm.doc.mode_of_payment) {
+			d.set_value("mode_of_payment", frm.doc.mode_of_payment);
+		}
+		d.show();
+
+		d.fields_dict["discount_percentage"].df.onchange = () => validate_discount("discount_percentage");
+		d.fields_dict["discount_amount"].df.onchange = () => validate_discount("discount_amount");
+
+		function validate_discount(field) {
+			let message = "";
+			let discount_percentage = d.get_value("discount_percentage");
+			let discount_amount = d.get_value("discount_amount");
+			let consultation_charge = d.get_value("consultation_charge");
+
+			if (field === "discount_percentage") {
+				if (discount_percentage > 100 || discount_percentage < 0) {
+					d.get_primary_btn().attr("disabled", true);
+					message = "Invalid discount percentage";
+				} else {
+					d.get_primary_btn().attr("disabled", false);
+					frm.via_discount_percentage = true;
+					if (discount_percentage && discount_amount) {
+						d.set_value("discount_amount", 0);
+					}
+					discount_amount = consultation_charge * (discount_percentage / 100);
+
+					d.set_values({
+						"discount_amount": discount_amount,
+						"total_payable": consultation_charge - discount_amount,
+					}).then(() => delete frm.via_discount_percentage);
+				}
+			} else if (field === "discount_amount") {
+				if (consultation_charge < discount_amount || discount_amount < 0) {
+					d.get_primary_btn().attr("disabled", true);
+					message = "Discount amount should not be more than Consultation Charge";
+				} else {
+					d.get_primary_btn().attr("disabled", false);
+					if (!frm.via_discount_percentage) {
+						discount_percentage = (discount_amount / consultation_charge) * 100;
+						d.set_values({
+							"discount_percentage": discount_percentage,
+							"total_payable": consultation_charge - discount_amount,
+						});
+					}
+				}
+			}
+			show_message(d, message, field);
+		}
+	}
+};
+
+let show_message = function(d, message, field) {
+	var field = d.get_field(field);
+	field.df.description = `<div style="color:red;
+		padding:5px 5px 5px 5px">${message}</div>`
+	field.refresh();
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment.json
@@ -0,0 +1,481 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2017-05-04 11:52:40.941507",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "title",
+  "status",
+  "appointment_type",
+  "appointment_for",
+  "column_break_1",
+  "company",
+  "practitioner",
+  "practitioner_name",
+  "department",
+  "service_unit",
+  "appointment_date",
+  "section_patient_details",
+  "patient",
+  "patient_name",
+  "inpatient_record",
+  "column_break_4pp7",
+  "patient_sex",
+  "patient_age",
+  "section_break_12",
+  "duration",
+  "service_request",
+  "procedure_template",
+  "get_procedure_from_encounter",
+  "procedure_prescription",
+  "therapy_plan",
+  "therapy_type",
+  "get_prescribed_therapies",
+  "column_break_17",
+  "appointment_time",
+  "appointment_datetime",
+  "add_video_conferencing",
+  "event",
+  "google_meet_link",
+  "section_break_16",
+  "mode_of_payment",
+  "billing_item",
+  "invoiced",
+  "column_break_2",
+  "paid_amount",
+  "ref_sales_invoice",
+  "section_break_3",
+  "referring_practitioner",
+  "position_in_queue",
+  "appointment_based_on_check_in",
+  "reminded",
+  "column_break_36",
+  "notes"
+ ],
+ "fields": [
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "appointment_type",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Appointment Type",
+   "options": "Appointment Type",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fetch_from": "appointment_type.default_duration",
+   "fieldname": "duration",
+   "fieldtype": "Int",
+   "in_filter": 1,
+   "label": "Duration (In Minutes)",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "column_break_1",
+   "fieldtype": "Column Break",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal",
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "in_filter": 1,
+   "in_list_view": 1,
+   "label": "Status",
+   "options": "\nScheduled\nOpen\nChecked In\nChecked Out\nClosed\nCancelled\nNo Show",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "depends_on": "eval:doc.patient",
+   "fieldname": "procedure_template",
+   "fieldtype": "Link",
+   "label": "Clinical Procedure Template",
+   "options": "Clinical Procedure Template",
+   "set_only_once": 1
+  },
+  {
+   "depends_on": "eval:doc.__islocal && doc.patient",
+   "fieldname": "get_procedure_from_encounter",
+   "fieldtype": "Button",
+   "label": "Get Prescribed Clinical Procedures"
+  },
+  {
+   "fieldname": "procedure_prescription",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Procedure Prescription",
+   "no_copy": 1,
+   "options": "Procedure Prescription",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "mandatory_depends_on": "eval:doc.appointment_for==\"Service Unit\"",
+   "options": "Healthcare Service Unit",
+   "read_only": 1,
+   "read_only_depends_on": "eval:doc.appointment_for!=\"Service Unit\""
+  },
+  {
+   "depends_on": "eval:!doc.__is_local",
+   "fieldname": "section_break_12",
+   "fieldtype": "Section Break",
+   "label": "Appointment Details"
+  },
+  {
+   "depends_on": "eval:doc.appointment_for==\"Practitioner\"",
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fetch_if_empty": 1,
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Department",
+   "mandatory_depends_on": "eval:doc.appointment_for==\"Department\"",
+   "options": "Medical Department",
+   "read_only_depends_on": "eval:doc.appointment_for!=\"Department\"",
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "column_break_17",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "appointment_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Date",
+   "read_only": 1,
+   "read_only_depends_on": "eval:doc.appointment_for==\"Practitioner\"",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "depends_on": "eval: doc.appointment_for == \"Practitioner\"",
+   "fieldname": "appointment_time",
+   "fieldtype": "Time",
+   "in_list_view": 1,
+   "label": "Time",
+   "mandatory_depends_on": "eval:doc.appointment_based_on_check_in == false && doc.appointment_for == \"Practitioner\";",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_16",
+   "fieldtype": "Section Break",
+   "label": "Payments"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "no_copy": 1,
+   "options": "Gender",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "appointment_datetime",
+   "fieldtype": "Datetime",
+   "hidden": 1,
+   "label": "Appointment Datetime",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "mode_of_payment",
+   "fieldtype": "Link",
+   "label": "Mode of Payment",
+   "options": "Mode of Payment",
+   "read_only_depends_on": "invoiced"
+  },
+  {
+   "fieldname": "paid_amount",
+   "fieldtype": "Currency",
+   "label": "Paid Amount",
+   "read_only_depends_on": "invoiced"
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "no_copy": 1,
+   "options": "Company",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "section_break_3",
+   "fieldtype": "Section Break",
+   "label": "More Info"
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Notes"
+  },
+  {
+   "fieldname": "referring_practitioner",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Referring Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "default": "0",
+   "fieldname": "reminded",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Reminded",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "depends_on": "eval:doc.patient && doc.therapy_plan;",
+   "fieldname": "therapy_type",
+   "fieldtype": "Link",
+   "label": "Therapy",
+   "options": "Therapy Type",
+   "set_only_once": 1
+  },
+  {
+   "depends_on": "eval:doc.patient && doc.therapy_plan && doc.__islocal;",
+   "fieldname": "get_prescribed_therapies",
+   "fieldtype": "Button",
+   "label": "Get Prescribed Therapies"
+  },
+  {
+   "depends_on": "eval: doc.patient;",
+   "fieldname": "therapy_plan",
+   "fieldtype": "Link",
+   "label": "Therapy Plan",
+   "options": "Therapy Plan",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "ref_sales_invoice",
+   "fieldtype": "Link",
+   "label": "Reference Sales Invoice",
+   "options": "Sales Invoice",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-APP-.YYYY.-",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "billing_item",
+   "fieldtype": "Link",
+   "label": "Billing Item",
+   "options": "Item",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_36",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "google_meet_link",
+   "fieldtype": "Data",
+   "label": "Google Meet Link",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.appointment_for == \"Practitioner\"",
+   "fieldname": "add_video_conferencing",
+   "fieldtype": "Check",
+   "label": "Add Video Conferencing"
+  },
+  {
+   "fieldname": "event",
+   "fieldtype": "Link",
+   "label": "Event",
+   "options": "Event",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "appointment_based_on_check_in",
+   "fieldtype": "Check",
+   "label": "Appointment Based On Check In",
+   "read_only": 1
+  },
+  {
+   "fieldname": "position_in_queue",
+   "fieldtype": "Int",
+   "label": "Position In Queue",
+   "non_negative": 1,
+   "read_only": 1
+  },
+  {
+   "fetch_from": "appointment_type.allow_booking_for",
+   "fieldname": "appointment_for",
+   "fieldtype": "Select",
+   "label": "Appointment For",
+   "options": "\nPractitioner\nDepartment\nService Unit",
+   "read_only": 1,
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "section_patient_details",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "column_break_4pp7",
+   "fieldtype": "Column Break"
+  },
+  {
+    "fieldname": "service_request",
+    "fieldtype": "Link",
+    "label": "Service Request",
+    "options": "Service Request",
+    "read_only": 1,
+    "search_index": 1
+  }
+ ],
+ "links": [],
+ "modified": "2023-06-10 13:39:03.455568",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Appointment",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, practitioner, department, appointment_date, appointment_time",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "title",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment.py
@@ -0,0 +1,906 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import datetime
+import json
+
+import frappe
+from frappe import _
+from frappe.core.doctype.sms_settings.sms_settings import send_sms
+from frappe.model.document import Document
+from frappe.model.mapper import get_mapped_doc
+from frappe.utils import flt, format_date, get_link_to_form, get_time, getdate
+
+from erpnext.setup.doctype.employee.employee import is_holiday
+
+from healthcare.healthcare.doctype.fee_validity.fee_validity import (
+	check_fee_validity,
+	get_fee_validity,
+	manage_fee_validity,
+)
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+)
+from healthcare.healthcare.utils import get_appointment_billing_item_and_rate
+
+
+class MaximumCapacityError(frappe.ValidationError):
+	pass
+
+
+class OverlapError(frappe.ValidationError):
+	pass
+
+
+class PatientAppointment(Document):
+	def validate(self):
+		self.validate_overlaps()
+		self.validate_based_on_appointments_for()
+		self.validate_service_unit()
+		self.set_appointment_datetime()
+		self.validate_customer_created()
+		self.set_status()
+		self.set_title()
+		self.update_event()
+		self.set_postition_in_queue()
+
+	def on_update(self):
+		if (
+			not frappe.db.get_single_value("Healthcare Settings", "show_payment_popup")
+			or not self.practitioner
+		):
+			update_fee_validity(self)
+
+	def after_insert(self):
+		self.update_prescription_details()
+		self.set_payment_details()
+		send_confirmation_msg(self)
+		self.insert_calendar_event()
+
+	def set_title(self):
+		if self.practitioner:
+			self.title = _("{0} with {1}").format(
+				self.patient_name or self.patient, self.practitioner_name or self.practitioner
+			)
+		else:
+			self.title = _("{0} at {1}").format(
+				self.patient_name or self.patient, self.get(frappe.scrub(self.appointment_for))
+			)
+
+	def set_status(self):
+		today = getdate()
+		appointment_date = getdate(self.appointment_date)
+
+		# If appointment is created for today set status as Open else Scheduled
+		if appointment_date == today:
+			if self.status not in ["Checked In", "Checked Out"]:
+				self.status = "Open"
+
+		elif appointment_date > today:
+			self.status = "Scheduled"
+
+		elif appointment_date < today:
+			if self.status == "Scheduled":
+				self.status = "No Show"
+
+	def validate_overlaps(self):
+		if self.appointment_based_on_check_in:
+			if frappe.db.exists(
+				{
+					"doctype": "Patient Appointment",
+					"patient": self.patient,
+					"appointment_date": self.appointment_date,
+					"appointment_time": self.appointment_time,
+					"appointment_based_on_check_in": True,
+					"name": ["!=", self.name],
+				}
+			):
+				frappe.throw(_("Patient already has an appointment booked for the same day!"), OverlapError)
+			return
+
+		if not self.practitioner:
+			return
+
+		end_time = datetime.datetime.combine(
+			getdate(self.appointment_date), get_time(self.appointment_time)
+		) + datetime.timedelta(minutes=flt(self.duration))
+
+		# all appointments for both patient and practitioner overlapping the duration of this appointment
+		overlapping_appointments = frappe.db.sql(
+			"""
+			SELECT
+				name, practitioner, patient, appointment_time, duration, service_unit
+			FROM
+				`tabPatient Appointment`
+			WHERE
+				appointment_date=%(appointment_date)s AND name!=%(name)s AND status NOT IN ("Closed", "Cancelled") AND
+				(practitioner=%(practitioner)s OR patient=%(patient)s) AND
+				((appointment_time<%(appointment_time)s AND appointment_time + INTERVAL duration MINUTE>%(appointment_time)s) OR
+				(appointment_time>%(appointment_time)s AND appointment_time<%(end_time)s) OR
+				(appointment_time=%(appointment_time)s))
+			""",
+			{
+				"appointment_date": self.appointment_date,
+				"name": self.name,
+				"practitioner": self.practitioner,
+				"patient": self.patient,
+				"appointment_time": self.appointment_time,
+				"end_time": end_time.time(),
+			},
+			as_dict=True,
+		)
+
+		if not overlapping_appointments:
+			return  # No overlaps, nothing to validate!
+
+		if self.service_unit:  # validate service unit capacity if overlap enabled
+			allow_overlap, service_unit_capacity = frappe.get_value(
+				"Healthcare Service Unit", self.service_unit, ["overlap_appointments", "service_unit_capacity"]
+			)
+			if allow_overlap:
+				service_unit_appointments = list(
+					filter(
+						lambda appointment: appointment["service_unit"] == self.service_unit
+						and appointment["patient"] != self.patient,
+						overlapping_appointments,
+					)
+				)  # if same patient already booked, it should be an overlap
+				if len(service_unit_appointments) >= (service_unit_capacity or 1):
+					frappe.throw(
+						_("Not allowed, {} cannot exceed maximum capacity {}").format(
+							frappe.bold(self.service_unit), frappe.bold(service_unit_capacity or 1)
+						),
+						MaximumCapacityError,
+					)
+				else:  # service_unit_appointments within capacity, remove from overlapping_appointments
+					overlapping_appointments = [
+						appointment
+						for appointment in overlapping_appointments
+						if appointment not in service_unit_appointments
+					]
+
+		if overlapping_appointments:
+			frappe.throw(
+				_("Not allowed, cannot overlap appointment {}").format(
+					frappe.bold(", ".join([appointment["name"] for appointment in overlapping_appointments]))
+				),
+				OverlapError,
+			)
+
+	def validate_based_on_appointments_for(self):
+		if self.appointment_for:
+			# fieldname: practitioner / department / service_unit
+			appointment_for_field = frappe.scrub(self.appointment_for)
+
+			# validate if respective field is set
+			if not self.get(appointment_for_field):
+				frappe.throw(
+					_("Please enter {}").format(frappe.bold(self.appointment_for)),
+					frappe.MandatoryError,
+				)
+
+			if self.appointment_for == "Practitioner":
+				# appointments for practitioner are validated separately,
+				# based on practitioner schedule
+				return
+
+			# validate if patient already has an appointment for the day
+			booked_appointment = frappe.db.exists(
+				"Patient Appointment",
+				{
+					"patient": self.patient,
+					"status": ["!=", "Cancelled"],
+					appointment_for_field: self.get(appointment_for_field),
+					"appointment_date": self.appointment_date,
+					"name": ["!=", self.name],
+				},
+			)
+
+			if booked_appointment:
+				frappe.throw(
+					_("Patient already has an appointment {} booked for {} on {}").format(
+						get_link_to_form("Patient Appointment", booked_appointment),
+						frappe.bold(self.get(appointment_for_field)),
+						frappe.bold(format_date(self.appointment_date)),
+					),
+					frappe.DuplicateEntryError,
+				)
+
+	def validate_service_unit(self):
+		if self.inpatient_record and self.service_unit:
+			from healthcare.healthcare.doctype.inpatient_medication_entry.inpatient_medication_entry import (
+				get_current_healthcare_service_unit,
+			)
+
+			is_inpatient_occupancy_unit = frappe.db.get_value(
+				"Healthcare Service Unit", self.service_unit, "inpatient_occupancy"
+			)
+			service_unit = get_current_healthcare_service_unit(self.inpatient_record)
+			if is_inpatient_occupancy_unit and service_unit != self.service_unit:
+				msg = (
+					_("Patient {0} is not admitted in the service unit {1}").format(
+						frappe.bold(self.patient), frappe.bold(self.service_unit)
+					)
+					+ "<br>"
+				)
+				msg += _(
+					"Appointment for service units with Inpatient Occupancy can only be created against the unit where patient has been admitted."
+				)
+				frappe.throw(msg, title=_("Invalid Healthcare Service Unit"))
+
+	def set_appointment_datetime(self):
+		self.appointment_datetime = "%s %s" % (
+			self.appointment_date,
+			self.appointment_time or "00:00:00",
+		)
+
+	def set_payment_details(self):
+		if frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+			details = get_appointment_billing_item_and_rate(self)
+			self.db_set("billing_item", details.get("service_item"))
+			if not self.paid_amount:
+				self.db_set("paid_amount", details.get("practitioner_charge"))
+
+	def validate_customer_created(self):
+		if frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+			if not frappe.db.get_value("Patient", self.patient, "customer"):
+				msg = _("Please set a Customer linked to the Patient")
+				msg += " <b><a href='/app/Form/Patient/{0}'>{0}</a></b>".format(self.patient)
+				frappe.throw(msg, title=_("Customer Not Found"))
+
+	def update_prescription_details(self):
+		if self.procedure_prescription:
+			frappe.db.set_value(
+				"Procedure Prescription", self.procedure_prescription, "appointment_booked", 1
+			)
+			if self.procedure_template:
+				comments = frappe.db.get_value(
+					"Procedure Prescription", self.procedure_prescription, "comments"
+				)
+				if comments:
+					frappe.db.set_value("Patient Appointment", self.name, "notes", comments)
+
+	def insert_calendar_event(self):
+		if not self.practitioner:
+			return
+
+		starts_on = datetime.datetime.combine(
+			getdate(self.appointment_date), get_time(self.appointment_time)
+		)
+		ends_on = starts_on + datetime.timedelta(minutes=flt(self.duration))
+		google_calendar = frappe.db.get_value(
+			"Healthcare Practitioner", self.practitioner, "google_calendar"
+		)
+		if not google_calendar:
+			google_calendar = frappe.db.get_single_value("Healthcare Settings", "default_google_calendar")
+
+		if self.appointment_type:
+			color = frappe.db.get_value("Appointment Type", self.appointment_type, "color")
+		else:
+			color = ""
+
+		event = frappe.get_doc(
+			{
+				"doctype": "Event",
+				"subject": f"{self.title} - {self.company}",
+				"event_type": "Private",
+				"color": color,
+				"send_reminder": 1,
+				"starts_on": starts_on,
+				"ends_on": ends_on,
+				"status": "Open",
+				"all_day": 0,
+				"sync_with_google_calendar": 1 if self.add_video_conferencing and google_calendar else 0,
+				"add_video_conferencing": 1 if self.add_video_conferencing and google_calendar else 0,
+				"google_calendar": google_calendar,
+				"description": f"{self.title} - {self.company}",
+				"pulled_from_google_calendar": 0,
+			}
+		)
+		participants = []
+
+		participants.append(
+			{"reference_doctype": "Healthcare Practitioner", "reference_docname": self.practitioner}
+		)
+		participants.append({"reference_doctype": "Patient", "reference_docname": self.patient})
+
+		event.update({"event_participants": participants})
+
+		event.insert(ignore_permissions=True)
+
+		event.reload()
+		if self.add_video_conferencing and not event.google_meet_link:
+			frappe.msgprint(
+				_("Could not add conferencing to this Appointment, please contact System Manager"),
+				indicator="error",
+				alert=True,
+			)
+
+		self.db_set({"event": event.name, "google_meet_link": event.google_meet_link})
+		self.notify_update()
+
+	@frappe.whitelist()
+	def get_therapy_types(self):
+		if not self.therapy_plan:
+			return
+
+		therapy_types = []
+		doc = frappe.get_doc("Therapy Plan", self.therapy_plan)
+		for entry in doc.therapy_plan_details:
+			therapy_types.append(entry.therapy_type)
+
+		return therapy_types
+
+	def update_event(self):
+		if self.event:
+			event_doc = frappe.get_doc("Event", self.event)
+			starts_on = datetime.datetime.combine(
+				getdate(self.appointment_date), get_time(self.appointment_time)
+			)
+			ends_on = starts_on + datetime.timedelta(minutes=flt(self.duration))
+			if (
+				starts_on != event_doc.starts_on
+				or self.add_video_conferencing != event_doc.add_video_conferencing
+			):
+				event_doc.starts_on = starts_on
+				event_doc.ends_on = ends_on
+				event_doc.add_video_conferencing = self.add_video_conferencing
+				event_doc.save()
+				event_doc.save(ignore_permissions=True)
+				event_doc.reload()
+				self.google_meet_link = event_doc.google_meet_link
+
+	def set_postition_in_queue(self):
+		from frappe.query_builder.functions import Max
+
+		if self.status == "Checked In" and not self.position_in_queue:
+			appointment = frappe.qb.DocType("Patient Appointment")
+			position = (
+				frappe.qb.from_(appointment)
+				.select(
+					Max(appointment.position_in_queue).as_("max_position"),
+				)
+				.where(
+					(appointment.status == "Checked In")
+					& (appointment.practitioner == self.practitioner)
+					& (appointment.service_unit == self.service_unit)
+					& (appointment.appointment_time == self.appointment_time)
+				)
+			).run(as_dict=True)[0]
+			position_in_queue = 1
+			if position and position.get("max_position"):
+				position_in_queue = position.get("max_position") + 1
+
+			self.position_in_queue = position_in_queue
+
+
+@frappe.whitelist()
+def check_payment_reqd(patient):
+	"""
+	return True if patient need to be invoiced when show_payment_popup enabled or have no fee validity
+	return False show_payment_popup is disabled
+	"""
+	show_payment_popup = frappe.db.get_single_value("Healthcare Settings", "show_payment_popup")
+	free_follow_ups = frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups")
+	if show_payment_popup:
+		if free_follow_ups:
+			fee_validity = frappe.db.exists("Fee Validity", {"patient": patient, "status": "Active"})
+			if fee_validity:
+				return {"fee_validity": fee_validity}
+		return True
+	return False
+
+
+@frappe.whitelist()
+def invoice_appointment(appointment_name, discount_percentage=0, discount_amount=0):
+	appointment_doc = frappe.get_doc("Patient Appointment", appointment_name)
+	settings = frappe.get_single("Healthcare Settings")
+
+	if settings.enable_free_follow_ups:
+		fee_validity = check_fee_validity(appointment_doc)
+
+		if fee_validity and fee_validity.status != "Active":
+			fee_validity = None
+		elif not fee_validity:
+			if get_fee_validity(appointment_doc.name, appointment_doc.appointment_date):
+				return
+	else:
+		fee_validity = None
+
+	if settings.show_payment_popup and not appointment_doc.invoiced and not fee_validity:
+		create_sales_invoice(appointment_doc, discount_percentage, discount_amount)
+	update_fee_validity(appointment_doc)
+
+
+def create_sales_invoice(appointment_doc, discount_percentage=0, discount_amount=0):
+	sales_invoice = frappe.new_doc("Sales Invoice")
+	sales_invoice.patient = appointment_doc.patient
+	sales_invoice.customer = frappe.get_value("Patient", appointment_doc.patient, "customer")
+	sales_invoice.appointment = appointment_doc.name
+	sales_invoice.due_date = getdate()
+	sales_invoice.company = appointment_doc.company
+	sales_invoice.debit_to = get_receivable_account(appointment_doc.company)
+
+	item = sales_invoice.append("items", {})
+	item = get_appointment_item(appointment_doc, item)
+
+	paid_amount = flt(appointment_doc.paid_amount)
+	# Set discount amount and percentage if entered in payment popup
+	if flt(discount_percentage):
+		sales_invoice.additional_discount_percentage = flt(discount_percentage)
+		paid_amount = flt(appointment_doc.paid_amount) - (
+			flt(appointment_doc.paid_amount) * (flt(discount_percentage) / 100)
+		)
+	if flt(discount_amount):
+		sales_invoice.discount_amount = flt(discount_amount)
+		paid_amount = flt(appointment_doc.paid_amount) - flt(discount_amount)
+
+	# Add payments if payment details are supplied else proceed to create invoice as Unpaid
+	if appointment_doc.mode_of_payment and appointment_doc.paid_amount:
+		sales_invoice.is_pos = 1
+		payment = sales_invoice.append("payments", {})
+		payment.mode_of_payment = appointment_doc.mode_of_payment
+		payment.amount = paid_amount
+
+	sales_invoice.set_missing_values(for_validate=True)
+	sales_invoice.flags.ignore_mandatory = True
+	sales_invoice.save(ignore_permissions=True)
+	sales_invoice.submit()
+	frappe.msgprint(_("Sales Invoice {0} created").format(sales_invoice.name), alert=True)
+	frappe.db.set_value(
+		"Patient Appointment",
+		appointment_doc.name,
+		{
+			"invoiced": 1,
+			"ref_sales_invoice": sales_invoice.name,
+			"paid_amount": paid_amount,
+		},
+	)
+	appointment_doc.notify_update()
+
+
+@frappe.whitelist()
+def update_fee_validity(appointment):
+	if isinstance(appointment, str):
+		appointment = json.loads(appointment)
+		appointment = frappe.get_doc(appointment)
+
+	if (
+		not frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups")
+		or not appointment.practitioner
+	):
+		return
+
+	fee_validity = manage_fee_validity(appointment)
+	if fee_validity:
+		frappe.msgprint(
+			_("{0} has fee validity till {1}").format(
+				frappe.bold(appointment.patient_name), format_date(fee_validity.valid_till)
+			),
+			alert=True,
+		)
+
+
+def check_is_new_patient(patient, name=None):
+	filters = {"patient": patient, "status": ("!=", "Cancelled")}
+	if name:
+		filters["name"] = ("!=", name)
+
+	has_previous_appointment = frappe.db.exists("Patient Appointment", filters)
+	return not has_previous_appointment
+
+
+def get_appointment_item(appointment_doc, item):
+	details = get_appointment_billing_item_and_rate(appointment_doc)
+	charge = appointment_doc.paid_amount or details.get("practitioner_charge")
+	item.item_code = details.get("service_item")
+	item.description = _("Consulting Charges: {0}").format(appointment_doc.practitioner)
+	item.income_account = get_income_account(appointment_doc.practitioner, appointment_doc.company)
+	item.cost_center = frappe.get_cached_value("Company", appointment_doc.company, "cost_center")
+	item.rate = charge
+	item.amount = charge
+	item.qty = 1
+	item.reference_dt = "Patient Appointment"
+	item.reference_dn = appointment_doc.name
+	return item
+
+
+def cancel_appointment(appointment_id):
+	appointment = frappe.get_doc("Patient Appointment", appointment_id)
+	if appointment.invoiced:
+		sales_invoice = check_sales_invoice_exists(appointment)
+		if sales_invoice and cancel_sales_invoice(sales_invoice):
+			msg = _("Appointment {0} and Sales Invoice {1} cancelled").format(
+				appointment.name, sales_invoice.name
+			)
+		else:
+			msg = _("Appointment Cancelled. Please review and cancel the invoice {0}").format(
+				sales_invoice.name
+			)
+		if frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups"):
+			fee_validity = frappe.db.get_value("Fee Validity", {"patient_appointment": appointment.name})
+			if fee_validity:
+				frappe.db.set_value("Fee Validity", fee_validity, "status", "Cancelled")
+
+	else:
+		fee_validity = manage_fee_validity(appointment)
+		msg = _("Appointment Cancelled.")
+		if fee_validity:
+			msg += _("Fee Validity {0} updated.").format(fee_validity.name)
+
+	if appointment.event:
+		event_doc = frappe.get_doc("Event", appointment.event)
+		event_doc.status = "Cancelled"
+		event_doc.save()
+
+	frappe.msgprint(msg)
+
+
+def cancel_sales_invoice(sales_invoice):
+	if frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+		if len(sales_invoice.items) == 1:
+			if sales_invoice.docstatus.is_submitted():
+				sales_invoice.cancel()
+			return True
+	return False
+
+
+def check_sales_invoice_exists(appointment):
+	sales_invoice = frappe.db.get_value(
+		"Sales Invoice Item",
+		{"reference_dt": "Patient Appointment", "reference_dn": appointment.name},
+		"parent",
+	)
+
+	if sales_invoice:
+		sales_invoice = frappe.get_doc("Sales Invoice", sales_invoice)
+		return sales_invoice
+	return False
+
+
+@frappe.whitelist()
+def get_availability_data(date, practitioner, appointment):
+	"""
+	Get availability data of 'practitioner' on 'date'
+	:param date: Date to check in schedule
+	:param practitioner: Name of the practitioner
+	:return: dict containing a list of available slots, list of appointments and time of appointments
+	"""
+
+	date = getdate(date)
+	weekday = date.strftime("%A")
+
+	practitioner_doc = frappe.get_doc("Healthcare Practitioner", practitioner)
+
+	check_employee_wise_availability(date, practitioner_doc)
+
+	if practitioner_doc.practitioner_schedules:
+		slot_details = get_available_slots(practitioner_doc, date)
+	else:
+		frappe.throw(
+			_(
+				"{0} does not have a Healthcare Practitioner Schedule. Add it in Healthcare Practitioner master"
+			).format(practitioner),
+			title=_("Practitioner Schedule Not Found"),
+		)
+
+	if not slot_details:
+		# TODO: return available slots in nearby dates
+		frappe.throw(
+			_("Healthcare Practitioner not available on {0}").format(weekday), title=_("Not Available")
+		)
+
+	if isinstance(appointment, str):
+		appointment = json.loads(appointment)
+		appointment = frappe.get_doc(appointment)
+
+	fee_validity = "Disabled"
+	if frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups"):
+		fee_validity = check_fee_validity(appointment, date, practitioner)
+		if not fee_validity and not appointment.get("__islocal"):
+			fee_validity = get_fee_validity(appointment.get("name"), date) or None
+
+	if appointment.invoiced:
+		fee_validity = "Disabled"
+
+	return {"slot_details": slot_details, "fee_validity": fee_validity}
+
+
+def check_employee_wise_availability(date, practitioner_doc):
+	employee = None
+	if practitioner_doc.employee:
+		employee = practitioner_doc.employee
+	elif practitioner_doc.user_id:
+		employee = frappe.db.get_value("Employee", {"user_id": practitioner_doc.user_id}, "name")
+
+	if employee:
+		# check holiday
+		if is_holiday(employee, date):
+			frappe.throw(_("{0} is a holiday".format(date)), title=_("Not Available"))
+
+		# check leave status
+		if "hrms" in frappe.get_installed_apps():
+			leave_record = frappe.db.sql(
+				"""select half_day from `tabLeave Application`
+				where employee = %s and %s between from_date and to_date
+				and docstatus = 1""",
+				(employee, date),
+				as_dict=True,
+			)
+			if leave_record:
+				if leave_record[0].half_day:
+					frappe.throw(
+						_("{0} is on a Half day Leave on {1}").format(practitioner_doc.name, date),
+						title=_("Not Available"),
+					)
+				else:
+					frappe.throw(
+						_("{0} is on Leave on {1}").format(practitioner_doc.name, date), title=_("Not Available")
+					)
+
+
+def get_available_slots(practitioner_doc, date):
+	available_slots = slot_details = []
+	weekday = date.strftime("%A")
+	practitioner = practitioner_doc.name
+
+	for schedule_entry in practitioner_doc.practitioner_schedules:
+		validate_practitioner_schedules(schedule_entry, practitioner)
+		practitioner_schedule = frappe.get_doc("Practitioner Schedule", schedule_entry.schedule)
+
+		if practitioner_schedule and not practitioner_schedule.disabled:
+			available_slots = []
+			for time_slot in practitioner_schedule.time_slots:
+				if weekday == time_slot.day:
+					available_slots.append(time_slot)
+
+			if available_slots:
+				appointments = []
+				allow_overlap = 0
+				service_unit_capacity = 0
+				# fetch all appointments to practitioner by service unit
+				filters = {
+					"practitioner": practitioner,
+					"service_unit": schedule_entry.service_unit,
+					"appointment_date": date,
+					"status": ["not in", ["Cancelled"]],
+				}
+
+				if schedule_entry.service_unit:
+					slot_name = f"{schedule_entry.schedule}"
+					allow_overlap, service_unit_capacity = frappe.get_value(
+						"Healthcare Service Unit",
+						schedule_entry.service_unit,
+						["overlap_appointments", "service_unit_capacity"],
+					)
+					if not allow_overlap:
+						# fetch all appointments to service unit
+						filters.pop("practitioner")
+				else:
+					slot_name = schedule_entry.schedule
+					# fetch all appointments to practitioner without service unit
+					filters["practitioner"] = practitioner
+					filters.pop("service_unit")
+
+				appointments = frappe.get_all(
+					"Patient Appointment",
+					filters=filters,
+					fields=["name", "appointment_time", "duration", "status", "appointment_date"],
+				)
+
+				slot_details.append(
+					{
+						"slot_name": slot_name,
+						"service_unit": schedule_entry.service_unit,
+						"avail_slot": available_slots,
+						"appointments": appointments,
+						"allow_overlap": allow_overlap,
+						"service_unit_capacity": service_unit_capacity,
+						"tele_conf": practitioner_schedule.allow_video_conferencing,
+					}
+				)
+	return slot_details
+
+
+def validate_practitioner_schedules(schedule_entry, practitioner):
+	if schedule_entry.schedule:
+		if not schedule_entry.service_unit:
+			frappe.throw(
+				_(
+					"Practitioner {0} does not have a Service Unit set against the Practitioner Schedule {1}."
+				).format(
+					get_link_to_form("Healthcare Practitioner", practitioner),
+					frappe.bold(schedule_entry.schedule),
+				),
+				title=_("Service Unit Not Found"),
+			)
+
+	else:
+		frappe.throw(
+			_("Practitioner {0} does not have a Practitioner Schedule assigned.").format(
+				get_link_to_form("Healthcare Practitioner", practitioner)
+			),
+			title=_("Practitioner Schedule Not Found"),
+		)
+
+
+@frappe.whitelist()
+def update_status(appointment_id, status):
+	frappe.db.set_value("Patient Appointment", appointment_id, "status", status)
+	appointment_booked = True
+	if status == "Cancelled":
+		appointment_booked = False
+		cancel_appointment(appointment_id)
+
+	procedure_prescription = frappe.db.get_value(
+		"Patient Appointment", appointment_id, "procedure_prescription"
+	)
+	if procedure_prescription:
+		frappe.db.set_value(
+			"Procedure Prescription", procedure_prescription, "appointment_booked", appointment_booked
+		)
+
+
+def send_confirmation_msg(doc):
+	if frappe.db.get_single_value("Healthcare Settings", "send_appointment_confirmation"):
+		message = frappe.db.get_single_value("Healthcare Settings", "appointment_confirmation_msg")
+		try:
+			send_message(doc, message)
+		except Exception:
+			frappe.log_error(frappe.get_traceback(), _("Appointment Confirmation Message Not Sent"))
+			frappe.msgprint(_("Appointment Confirmation Message Not Sent"), indicator="orange")
+
+
+@frappe.whitelist()
+def make_encounter(source_name, target_doc=None):
+	doc = get_mapped_doc(
+		"Patient Appointment",
+		source_name,
+		{
+			"Patient Appointment": {
+				"doctype": "Patient Encounter",
+				"field_map": [
+					["appointment", "name"],
+					["patient", "patient"],
+					["practitioner", "practitioner"],
+					["medical_department", "department"],
+					["patient_sex", "patient_sex"],
+					["invoiced", "invoiced"],
+					["company", "company"],
+				],
+			}
+		},
+		target_doc,
+	)
+	return doc
+
+
+def send_appointment_reminder():
+	if frappe.db.get_single_value("Healthcare Settings", "send_appointment_reminder"):
+		remind_before = datetime.datetime.strptime(
+			frappe.db.get_single_value("Healthcare Settings", "remind_before"), "%H:%M:%S"
+		)
+		reminder_dt = datetime.datetime.now() + datetime.timedelta(
+			hours=remind_before.hour, minutes=remind_before.minute, seconds=remind_before.second
+		)
+
+		appointment_list = frappe.db.get_all(
+			"Patient Appointment",
+			{
+				"appointment_datetime": ["between", (datetime.datetime.now(), reminder_dt)],
+				"reminded": 0,
+				"status": ["!=", "Cancelled"],
+			},
+		)
+
+		for appointment in appointment_list:
+			doc = frappe.get_doc("Patient Appointment", appointment.name)
+			message = frappe.db.get_single_value("Healthcare Settings", "appointment_reminder_msg")
+			send_message(doc, message)
+			frappe.db.set_value("Patient Appointment", doc.name, "reminded", 1)
+
+
+def send_message(doc, message):
+	patient_mobile = frappe.db.get_value("Patient", doc.patient, "mobile")
+	if patient_mobile:
+		context = {"doc": doc, "alert": doc, "comments": None}
+		if doc.get("_comments"):
+			context["comments"] = json.loads(doc.get("_comments"))
+
+		# jinja to string convertion happens here
+		message = frappe.render_template(message, context)
+		number = [patient_mobile]
+		try:
+			send_sms(number, message)
+		except Exception as e:
+			frappe.msgprint(_("SMS not sent, please check SMS Settings"), alert=True)
+
+
+@frappe.whitelist()
+def get_events(start, end, filters=None):
+	"""Returns events for Gantt / Calendar view rendering.
+
+	:param start: Start date-time.
+	:param end: End date-time.
+	:param filters: Filters (JSON).
+	"""
+	from frappe.desk.calendar import get_event_conditions
+
+	conditions = get_event_conditions("Patient Appointment", filters)
+
+	data = frappe.db.sql(
+		"""
+		select
+		`tabPatient Appointment`.name, `tabPatient Appointment`.patient,
+		`tabPatient Appointment`.practitioner, `tabPatient Appointment`.status,
+		`tabPatient Appointment`.duration,
+		timestamp(`tabPatient Appointment`.appointment_date, `tabPatient Appointment`.appointment_time) as 'start',
+		`tabAppointment Type`.color
+		from
+		`tabPatient Appointment`
+		left join `tabAppointment Type` on `tabPatient Appointment`.appointment_type=`tabAppointment Type`.name
+		where
+		(`tabPatient Appointment`.appointment_date between %(start)s and %(end)s)
+		and `tabPatient Appointment`.status != 'Cancelled' and `tabPatient Appointment`.docstatus < 2 {conditions}""".format(
+			conditions=conditions
+		),
+		{"start": start, "end": end},
+		as_dict=True,
+		update={"allDay": 0},
+	)
+
+	for item in data:
+		item.end = item.start + datetime.timedelta(minutes=item.duration)
+
+	return data
+
+
+@frappe.whitelist()
+def get_procedure_prescribed(patient):
+	return frappe.db.sql(
+		"""
+			SELECT
+				pp.name, pp.procedure, pp.parent, ct.practitioner,
+				ct.encounter_date, pp.practitioner, pp.date, pp.department
+			FROM
+				`tabPatient Encounter` ct, `tabProcedure Prescription` pp
+			WHERE
+				ct.patient=%(patient)s and pp.parent=ct.name and pp.appointment_booked=0
+			ORDER BY
+				ct.creation desc
+		""",
+		{"patient": patient},
+	)
+
+
+@frappe.whitelist()
+def get_prescribed_therapies(patient):
+	return frappe.db.sql(
+		"""
+			SELECT
+				t.therapy_type, t.name, t.parent, e.practitioner,
+				e.encounter_date, e.therapy_plan, e.medical_department
+			FROM
+				`tabPatient Encounter` e, `tabTherapy Plan Detail` t
+			WHERE
+				e.patient=%(patient)s and t.parent=e.name
+			ORDER BY
+				e.creation desc
+		""",
+		{"patient": patient},
+	)
+
+
+def update_appointment_status():
+	# update the status of appointments daily
+	appointments = frappe.get_all(
+		"Patient Appointment", {"status": ("not in", ["Closed", "Cancelled"])}
+	)
+
+	for appointment in appointments:
+		appointment_doc = frappe.get_doc("Patient Appointment", appointment.name)
+		appointment_doc.set_status()
+		appointment_doc.save()
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment_calendar.js
@@ -0,0 +1,14 @@
+
+frappe.views.calendar["Patient Appointment"] = {
+	field_map: {
+		"start": "start",
+		"end": "end",
+		"id": "name",
+		"title": "patient",
+		"allDay": "allDay",
+		"eventColor": "color"
+	},
+	order_by: "appointment_date",
+	gantt: true,
+	get_events_method: "healthcare.healthcare.doctype.patient_appointment.patient_appointment.get_events"
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment_dashboard.py
@@ -0,0 +1,14 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "appointment",
+		"non_standard_fieldnames": {"Patient Medical Record": "reference_name"},
+		"transactions": [
+			{
+				"label": _("Consultations"),
+				"items": ["Patient Encounter", "Vital Signs", "Patient Medical Record"],
+			}
+		],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/patient_appointment_list.js
@@ -0,0 +1,18 @@
+/*
+(c) ESS 2015-16
+*/
+frappe.listview_settings['Patient Appointment'] = {
+	filters: [["status", "=", "Open"]],
+	get_indicator: function(doc) {
+		var colors = {
+			"Open": "orange",
+			"Scheduled": "yellow",
+			"Closed": "green",
+			"Cancelled": "red",
+			"Expired": "grey",
+			"Checked In": "blue",
+			"Checked Out": "orange"
+		};
+		return [__(doc.status), colors[doc.status], "status,=," + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_appointment/test_patient_appointment.py
@@ -0,0 +1,810 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+import datetime
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, flt, get_time, getdate, now_datetime, nowdate
+
+from erpnext.accounts.doctype.pos_profile.test_pos_profile import make_pos_profile
+
+from healthcare.healthcare.doctype.patient_appointment.patient_appointment import (
+	check_is_new_patient,
+	check_payment_reqd,
+	invoice_appointment,
+	make_encounter,
+	update_status,
+)
+
+
+class TestPatientAppointment(FrappeTestCase):
+	def setUp(self):
+		frappe.db.sql("""delete from `tabPatient Appointment`""")
+		frappe.db.sql("""delete from `tabFee Validity`""")
+		frappe.db.sql("""delete from `tabPatient Encounter`""")
+		make_pos_profile()
+		frappe.db.sql("""delete from `tabHealthcare Service Unit` where name like '_Test %'""")
+		frappe.db.sql(
+			"""delete from `tabHealthcare Service Unit` where name like '_Test Service Unit Type%'"""
+		)
+
+	def test_status(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 0)
+		appointment = create_appointment(patient, practitioner, nowdate())
+		self.assertEqual(appointment.status, "Open")
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 2))
+		self.assertEqual(appointment.status, "Scheduled")
+		encounter = create_encounter(appointment)
+		self.assertEqual(
+			frappe.db.get_value("Patient Appointment", appointment.name, "status"), "Closed"
+		)
+		encounter.cancel()
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "status"), "Open")
+
+	def test_start_encounter(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 4), invoice=1)
+		appointment.reload()
+		self.assertEqual(appointment.invoiced, 1)
+		encounter = make_encounter(appointment.name)
+		self.assertTrue(encounter)
+		self.assertEqual(encounter.company, appointment.company)
+		self.assertEqual(encounter.practitioner, appointment.practitioner)
+		self.assertEqual(encounter.patient, appointment.patient)
+		# invoiced flag mapped from appointment
+		self.assertEqual(
+			encounter.invoiced, frappe.db.get_value("Patient Appointment", appointment.name, "invoiced")
+		)
+
+	def test_auto_invoicing(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 0)
+		appointment = create_appointment(patient, practitioner, nowdate())
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "invoiced"), 0)
+
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 2), invoice=1)
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "invoiced"), 1)
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "company"), appointment.company
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "patient"), appointment.patient
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "paid_amount"), appointment.paid_amount
+		)
+
+	def test_auto_invoicing_with_discount_amount(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), invoice=1, discount_amount=100
+		)
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "invoiced"), 1)
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "company"),
+			appointment.company,
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "patient"),
+			appointment.patient,
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "paid_amount"),
+			(appointment.paid_amount - 100),
+		)
+
+	def test_auto_invoicing_with_discount_percentage(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), invoice=1, discount_percentage=10
+		)
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "invoiced"), 1)
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "company"),
+			appointment.company,
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "patient"),
+			appointment.patient,
+		)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "paid_amount"),
+			(appointment.paid_amount - (appointment.paid_amount * (10 / 100))),
+		)
+
+	def test_auto_invoicing_based_on_practitioner_department(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_value(
+			"Healthcare Practitioner",
+			practitioner,
+			{
+				"op_consulting_charge": 0,
+				"inpatient_visit_charge": 0,
+			},
+		)
+		medical_department = create_medical_department()
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment_type = create_appointment_type(
+			{"medical_department": medical_department, "op_consulting_charge": 200}
+		)
+
+		appointment = create_appointment(
+			patient,
+			practitioner,
+			add_days(nowdate(), 2),
+			invoice=1,
+			appointment_type=appointment_type.name,
+			department=medical_department,
+		)
+		appointment.reload()
+
+		self.assertEqual(appointment.invoiced, 1)
+		self.assertEqual(appointment.billing_item, "HLC-SI-001")
+		self.assertEqual(appointment.paid_amount, 200)
+
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+		self.assertEqual(
+			frappe.db.get_value("Sales Invoice", sales_invoice_name, "paid_amount"), appointment.paid_amount
+		)
+
+	def test_auto_invoicing_based_on_department(self):
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 1)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		item = create_healthcare_service_items()
+		department_name = create_medical_department(id=111)  # "_Test Medical Department 111"
+		items = [
+			{
+				"dt": "Medical Department",
+				"dn": department_name,
+				"op_consulting_charge_item": item,
+				"op_consulting_charge": 1000,
+			}
+		]
+		appointment_type = create_appointment_type(
+			args={
+				"name": "_Test General OP",
+				"allow_booking_for": "Department",
+				"items": items,
+				"duration": 15,
+			}
+		)
+		appointment = frappe.new_doc("Patient Appointment")
+		appointment.patient = create_patient()
+		appointment.appointment_type = appointment_type.name
+		appointment.department = department_name
+		appointment.appointment_date = add_days(nowdate(), 2)
+		appointment.company = "_Test Company"
+
+		appointment.save(ignore_permissions=True)
+		if frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+			invoice_appointment(appointment.name)
+		appointment.reload()
+
+		self.assertEqual(appointment.invoiced, 1)
+		self.assertEqual(appointment.billing_item, item)
+		self.assertEqual(appointment.paid_amount, 1000)
+
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+
+	def test_auto_invoicing_based_on_service_unit(self):
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		item = create_healthcare_service_items()
+		service_unit_type = create_service_unit_type(id=11, allow_appointments=1)
+		service_unit = create_service_unit(
+			id=101,
+			service_unit_type=service_unit_type,
+		)
+		items = [
+			{
+				"dt": "Healthcare Service Unit",
+				"dn": service_unit,
+				"op_consulting_charge_item": item,
+				"op_consulting_charge": 2000,
+			}
+		]
+		appointment_type = create_appointment_type(
+			args={
+				"name": "_Test XRay Modality",
+				"allow_booking_for": "Service Unit",
+				"items": items,
+				"duration": 15,
+			}
+		)
+		appointment = frappe.new_doc("Patient Appointment")
+		appointment.patient = create_patient()
+		appointment.appointment_type = appointment_type.name
+		appointment.service_unit = service_unit
+		appointment.appointment_date = add_days(nowdate(), 3)
+		appointment.company = "_Test Company"
+
+		appointment.save(ignore_permissions=True)
+		if frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+			invoice_appointment(appointment.name)
+		appointment.reload()
+
+		self.assertEqual(appointment.invoiced, 1)
+		self.assertEqual(appointment.billing_item, item)
+		self.assertEqual(appointment.paid_amount, 2000)
+
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+
+	def test_auto_invoicing_according_to_appointment_type_charge(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_value(
+			"Healthcare Practitioner",
+			practitioner,
+			{
+				"op_consulting_charge": 0,
+				"inpatient_visit_charge": 0,
+			},
+		)
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+
+		item = create_healthcare_service_items()
+		items = [{"op_consulting_charge_item": item, "op_consulting_charge": 300}]
+		appointment_type = create_appointment_type(
+			args={"name": "Generic Appointment Type charge", "items": items}
+		)
+
+		appointment = create_appointment(
+			patient, practitioner, add_days(nowdate(), 2), invoice=1, appointment_type=appointment_type.name
+		)
+		appointment.reload()
+
+		self.assertEqual(appointment.invoiced, 1)
+		self.assertEqual(appointment.billing_item, item)
+		self.assertEqual(appointment.paid_amount, 300)
+
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertTrue(sales_invoice_name)
+
+	def test_appointment_cancel(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 1)
+		appointment = create_appointment(patient, practitioner, nowdate())
+		fee_validity = frappe.db.get_value(
+			"Fee Validity", {"patient": patient, "practitioner": practitioner}
+		)
+		# fee validity created
+		self.assertTrue(fee_validity)
+
+		# first follow up appointment
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 1))
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "visited"), 1)
+
+		update_status(appointment.name, "Cancelled")
+		# check fee validity updated
+		self.assertEqual(frappe.db.get_value("Fee Validity", fee_validity, "visited"), 0)
+
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		appointment = create_appointment(patient, practitioner, add_days(nowdate(), 1), invoice=1)
+		update_status(appointment.name, "Cancelled")
+		# check invoice cancelled
+		sales_invoice_name = frappe.db.get_value(
+			"Sales Invoice Item", {"reference_dn": appointment.name}, "parent"
+		)
+		self.assertEqual(frappe.db.get_value("Sales Invoice", sales_invoice_name, "status"), "Cancelled")
+
+	def test_appointment_booking_for_admission_service_unit(self):
+		from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+			admit_patient,
+			discharge_patient,
+			schedule_discharge,
+		)
+		from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+			create_inpatient,
+			get_healthcare_service_unit,
+			mark_invoiced_inpatient_occupancy,
+		)
+
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		patient = create_patient()
+		practitioner = create_practitioner()
+		# Schedule Admission
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+
+		# Admit
+		service_unit = get_healthcare_service_unit("_Test Service Unit Ip Occupancy")
+		admit_patient(ip_record, service_unit, now_datetime())
+
+		appointment = create_appointment(patient, practitioner, nowdate(), service_unit=service_unit)
+		self.assertEqual(appointment.service_unit, service_unit)
+
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": patient}))
+		ip_record1 = frappe.get_doc("Inpatient Record", ip_record.name)
+		mark_invoiced_inpatient_occupancy(ip_record1)
+		discharge_patient(ip_record1)
+
+	def test_invalid_healthcare_service_unit_validation(self):
+		from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+			admit_patient,
+			discharge_patient,
+			schedule_discharge,
+		)
+		from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+			create_inpatient,
+			get_healthcare_service_unit,
+			mark_invoiced_inpatient_occupancy,
+		)
+
+		frappe.db.sql("""delete from `tabInpatient Record`""")
+		patient, practitioner = create_healthcare_docs()
+		patient = create_patient()
+		# Schedule Admission
+		ip_record = create_inpatient(patient)
+		ip_record.expected_length_of_stay = 0
+		ip_record.save(ignore_permissions=True)
+
+		# Admit
+		service_unit = get_healthcare_service_unit("_Test Service Unit Ip Occupancy")
+		admit_patient(ip_record, service_unit, now_datetime())
+
+		appointment_service_unit = get_healthcare_service_unit(
+			"_Test Service Unit Ip Occupancy for Appointment"
+		)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), service_unit=appointment_service_unit, save=0
+		)
+		self.assertRaises(frappe.exceptions.ValidationError, appointment.save)
+
+		# Discharge
+		schedule_discharge(frappe.as_json({"patient": patient}))
+		ip_record1 = frappe.get_doc("Inpatient Record", ip_record.name)
+		mark_invoiced_inpatient_occupancy(ip_record1)
+		discharge_patient(ip_record1)
+
+	def test_payment_should_be_mandatory_for_new_patient_appointment(self):
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 1)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		frappe.db.set_single_value("Healthcare Settings", "max_visits", 3)
+		frappe.db.set_single_value("Healthcare Settings", "valid_days", 30)
+
+		patient = create_patient()
+		assert check_is_new_patient(patient)
+		payment_required = check_payment_reqd(patient)
+		assert payment_required is True
+
+	def test_sales_invoice_should_be_generated_for_new_patient_appointment(self):
+		patient, practitioner = create_healthcare_docs()
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		invoice_count = frappe.db.count("Sales Invoice")
+
+		assert check_is_new_patient(patient)
+		create_appointment(patient, practitioner, nowdate())
+		new_invoice_count = frappe.db.count("Sales Invoice")
+
+		assert new_invoice_count == invoice_count + 1
+
+	def test_patient_appointment_should_consider_permissions_while_fetching_appointments(self):
+		patient, practitioner = create_healthcare_docs()
+		create_appointment(patient, practitioner, nowdate())
+
+		patient, new_practitioner = create_healthcare_docs(id=5)
+		create_appointment(patient, new_practitioner, nowdate())
+
+		roles = [{"doctype": "Has Role", "role": "Physician"}]
+		user = create_user(roles=roles)
+		new_practitioner = frappe.get_doc("Healthcare Practitioner", new_practitioner)
+		new_practitioner.user_id = user.email
+		new_practitioner.save()
+
+		frappe.set_user(user.name)
+		appointments = frappe.get_list("Patient Appointment")
+		assert len(appointments) == 1
+
+		frappe.set_user("Administrator")
+		appointments = frappe.get_list("Patient Appointment")
+		assert len(appointments) == 2
+
+	def test_overlap_appointment(self):
+		from healthcare.healthcare.doctype.patient_appointment.patient_appointment import OverlapError
+
+		patient, practitioner = create_healthcare_docs(id=1)
+		patient_1, practitioner_1 = create_healthcare_docs(id=2)
+		service_unit = create_service_unit(id=0)
+		service_unit_1 = create_service_unit(id=1)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), service_unit=service_unit
+		)  # valid
+
+		# patient and practitioner cannot have overlapping appointments
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), service_unit=service_unit, save=0
+		)
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), service_unit=service_unit_1, save=0
+		)  # diff service unit
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), save=0
+		)  # with no service unit link
+		self.assertRaises(OverlapError, appointment.save)
+
+		# patient cannot have overlapping appointments with other practitioners
+		appointment = create_appointment(
+			patient, practitioner_1, nowdate(), service_unit=service_unit, save=0
+		)
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(
+			patient, practitioner_1, nowdate(), service_unit=service_unit_1, save=0
+		)
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(patient, practitioner_1, nowdate(), save=0)
+		self.assertRaises(OverlapError, appointment.save)
+
+		# practitioner cannot have overlapping appointments with other patients
+		appointment = create_appointment(
+			patient_1, practitioner, nowdate(), service_unit=service_unit, save=0
+		)
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(
+			patient_1, practitioner, nowdate(), service_unit=service_unit_1, save=0
+		)
+		self.assertRaises(OverlapError, appointment.save)
+		appointment = create_appointment(patient_1, practitioner, nowdate(), save=0)
+		self.assertRaises(OverlapError, appointment.save)
+
+	def test_service_unit_capacity(self):
+		from healthcare.healthcare.doctype.patient_appointment.patient_appointment import (
+			MaximumCapacityError,
+			OverlapError,
+		)
+
+		practitioner = create_practitioner()
+		capacity = 3
+		overlap_service_unit_type = create_service_unit_type(
+			id=10, allow_appointments=1, overlap_appointments=1
+		)
+		overlap_service_unit = create_service_unit(
+			id=100, service_unit_type=overlap_service_unit_type, service_unit_capacity=capacity
+		)
+
+		for i in range(0, capacity):
+			patient = create_patient(id=i)
+			create_appointment(patient, practitioner, nowdate(), service_unit=overlap_service_unit)  # valid
+			appointment = create_appointment(
+				patient, practitioner, nowdate(), service_unit=overlap_service_unit, save=0
+			)  # overlap
+			self.assertRaises(OverlapError, appointment.save)
+
+		patient = create_patient(id=capacity)
+		appointment = create_appointment(
+			patient, practitioner, nowdate(), service_unit=overlap_service_unit, save=0
+		)
+		self.assertRaises(MaximumCapacityError, appointment.save)
+
+	def test_teleconsultation(self):
+		patient, practitioner = create_healthcare_docs()
+		appointment = create_appointment(patient, practitioner, nowdate())
+		self.assertTrue(appointment.event)
+		test_appointment_reschedule(self, appointment)
+		test_appointment_cancel(self, appointment)
+
+	def test_appointment_based_on_check_in(self):
+		from healthcare.healthcare.doctype.patient_appointment.patient_appointment import OverlapError
+
+		patient, practitioner = create_healthcare_docs(id=1)
+		patient_1, practitioner_1 = create_healthcare_docs(id=2)
+
+		create_appointment(
+			patient,
+			practitioner,
+			nowdate(),
+			appointment_based_on_check_in=True,
+			appointment_time="09:00",
+		)
+		appointment_1 = create_appointment(
+			patient,
+			practitioner,
+			nowdate(),
+			save=0,
+			appointment_based_on_check_in=True,
+			appointment_time="09:00",
+		)
+		# same patient cannot have multiple appointments for same practitioner
+		self.assertRaises(OverlapError, appointment_1.save)
+
+		appointment_1 = create_appointment(
+			patient,
+			practitioner_1,
+			nowdate(),
+			save=0,
+			appointment_based_on_check_in=True,
+			appointment_time="09:00",
+		)
+		# same patient cannot have multiple appointments for different practitioners
+		self.assertRaises(OverlapError, appointment_1.save)
+
+		appointment_2 = create_appointment(
+			patient_1,
+			practitioner,
+			nowdate(),
+			appointment_based_on_check_in=True,
+			appointment_time="09:00",
+		)
+		# different pracititoner can have multiple same time and date appointments for different patients
+		self.assertTrue(appointment_2.name)
+
+
+def create_healthcare_docs(id=0):
+	patient = create_patient(id)
+	practitioner = create_practitioner(id)
+
+	return patient, practitioner
+
+
+def create_patient(
+	id=0, patient_name=None, email=None, mobile=None, customer=None, create_user=False
+):
+	if frappe.db.exists("Patient", {"firstname": f"_Test Patient {str(id)}"}):
+		patient = frappe.db.get_value("Patient", {"first_name": f"_Test Patient {str(id)}"}, ["name"])
+		return patient
+
+	patient = frappe.new_doc("Patient")
+	patient.first_name = patient_name if patient_name else f"_Test Patient {str(id)}"
+	patient.sex = "Female"
+	patient.mobile = mobile
+	patient.email = email
+	patient.customer = customer
+	patient.invite_user = create_user
+	patient.save(ignore_permissions=True)
+
+	return patient.name
+
+
+def create_medical_department(id=0):
+	if frappe.db.exists("Medical Department", f"_Test Medical Department {str(id)}"):
+		return f"_Test Medical Department {str(id)}"
+
+	medical_department = frappe.new_doc("Medical Department")
+	medical_department.department = f"_Test Medical Department {str(id)}"
+	medical_department.save(ignore_permissions=True)
+	return medical_department.name
+
+
+def create_practitioner(id=0, medical_department=None):
+	if frappe.db.exists(
+		"Healthcare Practitioner", {"firstname": f"_Test Healthcare Practitioner {str(id)}"}
+	):
+		practitioner = frappe.db.get_value(
+			"Healthcare Practitioner", {"firstname": f"_Test Healthcare Practitioner {str(id)}"}, ["name"]
+		)
+		return practitioner
+
+	practitioner = frappe.new_doc("Healthcare Practitioner")
+	practitioner.first_name = f"_Test Healthcare Practitioner {str(id)}"
+	practitioner.gender = "Female"
+	practitioner.department = medical_department or create_medical_department(id)
+	practitioner.op_consulting_charge = 500
+	practitioner.inpatient_visit_charge = 500
+	practitioner.save(ignore_permissions=True)
+
+	return practitioner.name
+
+
+def create_encounter(appointment):
+	if appointment:
+		encounter = frappe.new_doc("Patient Encounter")
+		encounter.appointment = appointment.name
+		encounter.patient = appointment.patient
+		encounter.practitioner = appointment.practitioner
+		encounter.encounter_date = appointment.appointment_date
+		encounter.encounter_time = appointment.appointment_time
+		encounter.company = appointment.company
+		encounter.save()
+		encounter.submit()
+
+		return encounter
+
+
+def create_appointment(
+	patient,
+	practitioner,
+	appointment_date,
+	invoice=0,
+	procedure_template=0,
+	service_unit=None,
+	appointment_type=None,
+	save=1,
+	department=None,
+	appointment_based_on_check_in=None,
+	appointment_time=None,
+	discount_percentage=0,
+	discount_amount=0,
+):
+	item = create_healthcare_service_items()
+	frappe.db.set_single_value("Healthcare Settings", "inpatient_visit_charge_item", item)
+	frappe.db.set_single_value("Healthcare Settings", "op_consulting_charge_item", item)
+	appointment = frappe.new_doc("Patient Appointment")
+	appointment.patient = patient
+	appointment.practitioner = practitioner
+	appointment.department = department or create_medical_department()
+	appointment.appointment_date = appointment_date
+	appointment.company = "_Test Company"
+	appointment.duration = 15
+	appointment.appointment_type = appointment_type or create_appointment_type().name
+
+	if service_unit:
+		appointment.service_unit = service_unit
+	if invoice:
+		appointment.mode_of_payment = "Cash"
+	if procedure_template:
+		appointment.procedure_template = create_clinical_procedure_template().get("name")
+	if appointment_based_on_check_in:
+		appointment.appointment_based_on_check_in = True
+	if appointment_time:
+		appointment.appointment_time = appointment_time
+	if save:
+		appointment.save(ignore_permissions=True)
+		if invoice or frappe.db.get_single_value("Healthcare Settings", "show_payment_popup"):
+			invoice_appointment(appointment.name, discount_percentage, discount_amount)
+
+	return appointment
+
+
+def create_healthcare_service_items():
+	if frappe.db.exists("Item", "HLC-SI-001"):
+		return "HLC-SI-001"
+
+	item = frappe.new_doc("Item")
+	item.item_code = "HLC-SI-001"
+	item.item_name = "Consulting Charges"
+	item.item_group = "Services"
+	item.is_stock_item = 0
+	item.stock_uom = "Nos"
+	item.save()
+
+	return item.name
+
+
+def create_clinical_procedure_template():
+	if frappe.db.exists("Clinical Procedure Template", "Knee Surgery and Rehab"):
+		return frappe.get_doc("Clinical Procedure Template", "Knee Surgery and Rehab")
+
+	template = frappe.new_doc("Clinical Procedure Template")
+	template.template = "Knee Surgery and Rehab"
+	template.item_code = "Knee Surgery and Rehab"
+	template.item_group = "Services"
+	template.is_billable = 1
+	template.description = "Knee Surgery and Rehab"
+	template.rate = 50000
+	template.save()
+
+	return template
+
+
+def create_appointment_type(args=None):  # nosemgrep
+	if not args:
+		args = frappe.local.form_dict
+
+	name = args.get("name", "_Test Appointment Type")
+
+	if frappe.db.exists("Appointment Type", name):
+		return frappe.get_doc("Appointment Type", name)
+
+	else:
+		item = create_healthcare_service_items()
+		items = [
+			{
+				"medical_department": args.get("medical_department") or "_Test Medical Department",
+				"op_consulting_charge_item": item,
+				"op_consulting_charge": args.get("op_consulting_charge", 200),
+			}
+		]
+		return frappe.get_doc(
+			{
+				"doctype": "Appointment Type",
+				"appointment_type": name,
+				"allow_booking_for": args.get("allow_booking_for", "Practitioner"),
+				"default_duration": args.get("default_duration", 20),
+				"color": args.get("color", "#7575ff"),
+				"price_list": args.get("price_list") or frappe.db.get_value("Price List", {"selling": 1}),
+				"items": args.get("items") or items,
+			}
+		).insert()
+
+
+def create_user(email=None, roles=None):
+	if not email:
+		email = "{}@frappe.com".format(frappe.utils.random_string(10))
+	user = frappe.db.exists("User", email)
+	if not user:
+		user = frappe.get_doc(
+			{
+				"doctype": "User",
+				"email": email,
+				"first_name": "test_user",
+				"password": "password",
+				"roles": roles,
+			}
+		).insert()
+	return user
+
+
+def create_service_unit_type(id=0, allow_appointments=1, overlap_appointments=0):
+	if frappe.db.exists("Healthcare Service Unit Type", f"_Test Service Unit Type {str(id)}"):
+		return f"_Test Service Unit Type {str(id)}"
+
+	service_unit_type = frappe.new_doc("Healthcare Service Unit Type")
+	service_unit_type.service_unit_type = f"_Test Service Unit Type {str(id)}"
+	service_unit_type.allow_appointments = allow_appointments
+	service_unit_type.overlap_appointments = overlap_appointments
+	service_unit_type.save(ignore_permissions=True)
+
+	return service_unit_type.name
+
+
+def create_service_unit(id=0, service_unit_type=None, service_unit_capacity=0):
+	if frappe.db.exists("Healthcare Service Unit", f"_Test Service Unit {str(id)}"):
+		return f"_Test service_unit {str(id)}"
+
+	service_unit = frappe.new_doc("Healthcare Service Unit")
+	service_unit.is_group = 0
+	service_unit.healthcare_service_unit_name = f"_Test Service Unit {str(id)}"
+	service_unit.service_unit_type = service_unit_type or create_service_unit_type(id)
+	service_unit.service_unit_capacity = service_unit_capacity
+	service_unit.save(ignore_permissions=True)
+
+	return service_unit.name
+
+
+def test_appointment_reschedule(self, appointment):
+	appointment_datetime = datetime.datetime.combine(
+		getdate(appointment.appointment_date), get_time(appointment.appointment_time)
+	)
+	new_appointment_datetime = appointment_datetime + datetime.timedelta(
+		minutes=flt(appointment.duration)
+	)
+	appointment.appointment_time = new_appointment_datetime.time()
+	appointment.appointment_date = new_appointment_datetime.date()
+	appointment.save()
+	self.assertTrue(
+		frappe.db.exists("Event", {"name": appointment.event, "starts_on": new_appointment_datetime})
+	)
+
+
+def test_appointment_cancel(self, appointment):
+	update_status(appointment.name, "Cancelled")
+	self.assertTrue(frappe.db.exists("Event", {"name": appointment.event, "status": "Cancelled"}))
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment/patient_assessment.js
@@ -0,0 +1,88 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Assessment', {
+	refresh: function(frm) {
+		if (frm.doc.assessment_template) {
+			frm.trigger('set_score_range');
+		}
+
+		if (!frm.doc.__islocal) {
+			frm.trigger('show_patient_progress');
+		}
+	},
+
+	assessment_template: function(frm) {
+		if (frm.doc.assessment_template) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Patient Assessment Template',
+					name: frm.doc.assessment_template
+				},
+				callback: function(data) {
+					frm.doc.assessment_sheet = [];
+					$.each(data.message.parameters, function(_i, e) {
+						let entry = frm.add_child('assessment_sheet');
+						entry.parameter = e.assessment_parameter;
+					});
+
+					frm.set_value('scale_min', data.message.scale_min);
+					frm.set_value('scale_max', data.message.scale_max);
+					frm.set_value('assessment_description', data.message.assessment_description);
+					frm.set_value('total_score', data.message.scale_max * data.message.parameters.length);
+					frm.trigger('set_score_range');
+					refresh_field('assessment_sheet');
+				}
+			});
+		}
+	},
+
+	set_score_range: function(frm) {
+		let options = [''];
+		for(let i = frm.doc.scale_min; i <= frm.doc.scale_max; i++) {
+			options.push(i);
+		}
+		frm.fields_dict.assessment_sheet.grid.update_docfield_property(
+			'score', 'options', options
+		);
+	},
+
+	calculate_total_score: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		let total_score = 0;
+		$.each(frm.doc.assessment_sheet || [], function(_i, item) {
+			if (item.score) {
+				total_score += parseInt(item.score);
+			}
+		});
+
+		frm.set_value('total_score_obtained', total_score);
+	},
+
+	show_patient_progress: function(frm) {
+		let bars = [];
+		let message = '';
+		let added_min = false;
+
+		let title = __('{0} out of {1}', [frm.doc.total_score_obtained, frm.doc.total_score]);
+
+		bars.push({
+			'title': title,
+			'width': (frm.doc.total_score_obtained / frm.doc.total_score * 100) + '%',
+			'progress_class': 'progress-bar-success'
+		});
+		if (bars[0].width == '0%') {
+			bars[0].width = '0.5%';
+			added_min = 0.5;
+		}
+		message = title;
+		frm.dashboard.add_progress(__('Status'), bars, message);
+	},
+});
+
+frappe.ui.form.on('Patient Assessment Sheet', {
+	score: function(frm, cdt, cdn) {
+		frm.events.calculate_total_score(frm, cdt, cdn);
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment/patient_assessment.json
@@ -0,0 +1,181 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2020-04-19 22:45:12.356209",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "therapy_session",
+  "patient",
+  "assessment_template",
+  "column_break_4",
+  "company",
+  "healthcare_practitioner",
+  "assessment_datetime",
+  "assessment_description",
+  "section_break_7",
+  "assessment_sheet",
+  "section_break_9",
+  "total_score_obtained",
+  "column_break_11",
+  "total_score",
+  "scale_min",
+  "scale_max",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fetch_from": "therapy_session.patient",
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fieldname": "assessment_template",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Assessment Template",
+   "options": "Patient Assessment Template",
+   "reqd": 1
+  },
+  {
+   "fieldname": "therapy_session",
+   "fieldtype": "Link",
+   "label": "Therapy Session",
+   "options": "Therapy Session"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "therapy_session.practitioner",
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "assessment_datetime",
+   "fieldtype": "Datetime",
+   "label": "Assessment Datetime",
+   "reqd": 1
+  },
+  {
+   "fieldname": "section_break_7",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "assessment_sheet",
+   "fieldtype": "Table",
+   "label": "Assessment Sheet",
+   "options": "Patient Assessment Sheet"
+  },
+  {
+   "fieldname": "section_break_9",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "total_score",
+   "fieldtype": "Int",
+   "label": "Total Score",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_11",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "total_score_obtained",
+   "fieldtype": "Int",
+   "label": "Total Score Obtained",
+   "read_only": 1
+  },
+  {
+   "fieldname": "scale_min",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Scale Min",
+   "read_only": 1
+  },
+  {
+   "fieldname": "scale_max",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Scale Max",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming Series",
+   "options": "HLC-PA-.YYYY.-"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Patient Assessment",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "assessment_description",
+   "fieldtype": "Small Text",
+   "label": "Assessment Description"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company"
+  }
+ ],
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2020-06-25 00:25:13.208400",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Assessment",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "cancel": 1,
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "patient",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment/patient_assessment.py
@@ -0,0 +1,40 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+from frappe.model.mapper import get_mapped_doc
+
+
+class PatientAssessment(Document):
+	def validate(self):
+		self.set_total_score()
+
+	def set_total_score(self):
+		total_score = 0
+		for entry in self.assessment_sheet:
+			total_score += int(entry.score)
+		self.total_score_obtained = total_score
+
+
+@frappe.whitelist()
+def create_patient_assessment(source_name, target_doc=None):
+	doc = get_mapped_doc(
+		"Therapy Session",
+		source_name,
+		{
+			"Therapy Session": {
+				"doctype": "Patient Assessment",
+				"field_map": [
+					["therapy_session", "name"],
+					["patient", "patient"],
+					["practitioner", "practitioner"],
+				],
+			}
+		},
+		target_doc,
+	)
+
+	return doc
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment/test_patient_assessment.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPatientAssessment(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_detail/patient_assessment_detail.json
@@ -0,0 +1,32 @@
+{
+ "actions": [],
+ "creation": "2020-04-19 19:33:00.115395",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "assessment_parameter"
+ ],
+ "fields": [
+  {
+   "fieldname": "assessment_parameter",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Assessment Parameter",
+   "options": "Patient Assessment Parameter",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-04-19 19:33:00.115395",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Assessment Detail",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_detail/patient_assessment_detail.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientAssessmentDetail(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_parameter/patient_assessment_parameter.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Assessment Parameter', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_parameter/patient_assessment_parameter.json
@@ -0,0 +1,45 @@
+{
+ "actions": [],
+ "autoname": "field:assessment_parameter",
+ "creation": "2020-04-15 14:34:46.551042",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "assessment_parameter"
+ ],
+ "fields": [
+  {
+   "fieldname": "assessment_parameter",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Assessment Parameter",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2020-04-20 09:22:19.135196",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Assessment Parameter",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_parameter/patient_assessment_parameter.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientAssessmentParameter(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_parameter/test_patient_assessment_parameter.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPatientAssessmentParameter(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_sheet/patient_assessment_sheet.json
@@ -0,0 +1,59 @@
+{
+ "actions": [],
+ "creation": "2020-04-19 23:07:02.220244",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "parameter",
+  "score",
+  "time",
+  "column_break_4",
+  "comments"
+ ],
+ "fields": [
+  {
+   "fieldname": "parameter",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Parameter",
+   "options": "Patient Assessment Parameter",
+   "reqd": 1
+  },
+  {
+   "fieldname": "score",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Score",
+   "reqd": 1
+  },
+  {
+   "default": "Now",
+   "fieldname": "time",
+   "fieldtype": "Time",
+   "label": "Time"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "comments",
+   "fieldtype": "Small Text",
+   "label": "Comments"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-01-14 19:17:54.771495",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Assessment Sheet",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_sheet/patient_assessment_sheet.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientAssessmentSheet(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_template/patient_assessment_template.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Assessment Template', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_template/patient_assessment_template.json
@@ -0,0 +1,109 @@
+{
+ "actions": [],
+ "autoname": "field:assessment_name",
+ "creation": "2020-04-19 19:33:13.204707",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "assessment_name",
+  "section_break_2",
+  "parameters",
+  "assessment_scale_details_section",
+  "scale_min",
+  "scale_max",
+  "column_break_8",
+  "assessment_description"
+ ],
+ "fields": [
+  {
+   "fieldname": "parameters",
+   "fieldtype": "Table",
+   "label": "Parameters",
+   "options": "Patient Assessment Detail"
+  },
+  {
+   "fieldname": "assessment_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Assessment Name",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "section_break_2",
+   "fieldtype": "Section Break",
+   "label": "Assessment Parameters"
+  },
+  {
+   "fieldname": "assessment_scale_details_section",
+   "fieldtype": "Section Break",
+   "label": "Assessment Scale"
+  },
+  {
+   "fieldname": "scale_min",
+   "fieldtype": "Int",
+   "label": "Scale Minimum"
+  },
+  {
+   "fieldname": "scale_max",
+   "fieldtype": "Int",
+   "label": "Scale Maximum"
+  },
+  {
+   "fieldname": "column_break_8",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "assessment_description",
+   "fieldtype": "Small Text",
+   "label": "Assessment Description"
+  }
+ ],
+ "links": [],
+ "modified": "2020-04-21 13:14:19.075167",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Assessment Template",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_template/patient_assessment_template.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientAssessmentTemplate(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_assessment_template/test_patient_assessment_template.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPatientAssessmentTemplate(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_care_type/patient_care_type.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2018, earthians and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Care Type', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_care_type/patient_care_type.json
@@ -0,0 +1,79 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:patient_care_type",
+ "beta": 1,
+ "creation": "2018-11-18 14:18:25.167468",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient_care_type"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Care Type",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2021-03-14 18:40:14.533239",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Care Type",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_care_type/patient_care_type.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, earthians and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientCareType(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_care_type/test_patient_care_type.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, earthians and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+# import frappe
+import unittest
+
+
+class TestPatientCareType(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/patient_encounter.js
@@ -0,0 +1,694 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Encounter', {
+	onload: function(frm) {
+		if (!frm.doc.__islocal && frm.doc.docstatus === 1 &&
+			frm.doc.inpatient_status == 'Admission Scheduled') {
+				frappe.db.get_value('Inpatient Record', frm.doc.inpatient_record,
+					['admission_encounter', 'status']).then(r => {
+						if (r.message) {
+							if (r.message.admission_encounter == frm.doc.name &&
+								r.message.status == 'Admission Scheduled') {
+									frm.add_custom_button(__('Cancel Admission'), function() {
+										cancel_ip_order(frm);
+									});
+								}
+							if (r.message.status == 'Admitted') {
+								frm.add_custom_button(__('Schedule Discharge'), function() {
+									schedule_discharge(frm);
+								});
+							}
+						}
+				})
+		}
+		//show_clinical_notes(frm);
+		show_orders(frm);
+	},
+
+	setup: function(frm) {
+		frm.get_field('therapies').grid.editable_fields = [
+			{fieldname: 'therapy_type', columns: 8},
+			{fieldname: 'no_of_sessions', columns: 2}
+		];
+		frm.get_field('drug_prescription').grid.editable_fields = [
+			{fieldname: 'drug_code', columns: 2},
+			{fieldname: 'drug_name', columns: 2},
+			{fieldname: 'dosage', columns: 2},
+			{fieldname: 'period', columns: 2},
+			{fieldname: 'dosage_form', columns: 2}
+		];
+		if (frappe.meta.get_docfield('Drug Prescription', 'medication').in_list_view === 1) {
+			frm.get_field('drug_prescription').grid.editable_fields.splice(0, 0, {fieldname: 'medication', columns: 3});
+			frm.get_field('drug_prescription').grid.editable_fields.splice(2, 1); // remove item description
+		}
+	},
+
+	refresh: function(frm) {
+		refresh_field('drug_prescription');
+		refresh_field('lab_test_prescription');
+		// TODO change the order where the show clinical notes appears
+		show_clinical_notes(frm);
+
+		if (!frm.doc.__islocal) {
+			if (frm.doc.docstatus === 1) {
+				if(!['Discharge Scheduled', 'Admission Scheduled', 'Admitted'].includes(frm.doc.inpatient_status)) {
+					frm.add_custom_button(__('Schedule Admission'), function() {
+						schedule_inpatient(frm);
+					});
+				}
+			}
+
+			frm.add_custom_button(__('Patient History'), function() {
+				if (frm.doc.patient) {
+					frappe.route_options = {'patient': frm.doc.patient};
+					frappe.set_route('patient_history');
+				} else {
+					frappe.msgprint(__('Please select Patient'));
+				}
+			},__('View'));
+
+			if (frm.doc.docstatus == 1 && frm.doc.drug_prescription && frm.doc.drug_prescription.length>0) {
+				frm.add_custom_button(__('Medication Request'), function() {
+					create_medication_request(frm);
+				},__('Create'));
+			}
+
+			if (frm.doc.docstatus == 1 && (
+				(frm.doc.lab_test_prescription && frm.doc.lab_test_prescription.length>0) ||
+				(frm.doc.procedure_prescription && frm.doc.procedure_prescription.length>0) ||
+				(frm.doc.therapies && frm.doc.therapies.length>0)
+				)) {
+				frm.add_custom_button(__('Service Request'), function() {
+					create_service_request(frm);
+				},__('Create'));
+			}
+
+			frm.add_custom_button(__('Vital Signs'), function() {
+				create_vital_signs(frm);
+			},__('Create'));
+
+			frm.add_custom_button(__('Medical Record'), function() {
+				create_medical_record(frm);
+			},__('Create'));
+
+			frm.add_custom_button(__('Clinical Procedure'), function() {
+				create_procedure(frm);
+			},__('Create'));
+
+			frm.add_custom_button(__("Clinical Note"), function() {
+				frappe.route_options = {
+					"patient": frm.doc.patient,
+					"reference_doc": "Patient Encounter",
+					"reference_name": frm.doc.name,
+					"practitioner": frm.doc.practitioner
+				}
+				frappe.new_doc("Clinical Note");
+			},__('Create'));
+
+
+			if (frm.doc.drug_prescription && frm.doc.inpatient_record && frm.doc.inpatient_status === "Admitted") {
+				frm.add_custom_button(__('Inpatient Medication Order'), function() {
+					frappe.model.open_mapped_doc({
+						method: 'healthcare.healthcare.doctype.patient_encounter.patient_encounter.make_ip_medication_order',
+						frm: frm
+					});
+				},__('Create'));
+			}
+
+			frm.add_custom_button(__('Nursing Tasks'), function() {
+				create_nursing_tasks(frm);
+			},__('Create'));
+		}
+
+		frm.set_query('patient', function() {
+			return {
+				filters: {'status': 'Active'}
+			};
+		});
+
+		frm.set_query('drug_code', 'drug_prescription', function() {
+			return {
+				filters: {
+					is_stock_item: 1
+				}
+			};
+		});
+
+		frm.set_query('lab_test_code', 'lab_test_prescription', function() {
+			return {
+				filters: {
+					is_billable: 1
+				}
+			};
+		});
+
+		frm.set_query('appointment', function() {
+			return {
+				filters: {
+					//	Scheduled filter for demo ...
+					status:['in',['Open','Scheduled']]
+				}
+			};
+		});
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+
+		frm.set_query("medication", "drug_prescription", function() {
+			return {
+				filters: {
+					disabled: false
+				}
+			};
+		})
+
+		frm.set_df_property('patient', 'read_only', frm.doc.appointment ? 1 : 0);
+
+		if (frm.doc.google_meet_link && frappe.datetime.now_date() <= frm.doc.encounter_date) {
+			frm.dashboard.set_headline(
+				__("Join video conference with {0}", [
+					`<a target='_blank' href='${frm.doc.google_meet_link}'>Google Meet</a>`,
+				])
+			);
+		}
+		if (frappe.meta.get_docfield('Drug Prescription', 'medication').in_list_view === 1) {
+			frm.set_query('drug_code', 'drug_prescription', function(doc, cdt, cdn) {
+				let row = frappe.get_doc(cdt, cdn);
+				if (row.medication) {
+					return {
+						query: 'healthcare.healthcare.doctype.patient_encounter.patient_encounter.get_medications_query',
+						filters: { name: row.medication }
+					};
+				} else {
+					return {
+						filters: {
+							is_stock_item: 1
+						}
+					};
+				}
+			});
+		}
+		var table_list =  ["drug_prescription", "lab_test_prescription", "procedure_prescription", "therapies"]
+		apply_code_sm_filter_to_child(frm, "priority", table_list, "Priority")
+		apply_code_sm_filter_to_child(frm, "intent", table_list, "Intent")
+	},
+
+	appointment: function(frm) {
+		frm.events.set_appointment_fields(frm);
+	},
+
+	patient: function(frm) {
+		frm.events.set_patient_info(frm);
+	},
+
+	practitioner: function(frm) {
+		if (!frm.doc.practitioner) {
+			frm.set_value('practitioner_name', '');
+		}
+	},
+	set_appointment_fields: function(frm) {
+		if (frm.doc.appointment) {
+			frappe.call({
+				method: 'frappe.client.get',
+				args: {
+					doctype: 'Patient Appointment',
+					name: frm.doc.appointment
+				},
+				callback: function(data) {
+					let values = {
+						'patient':data.message.patient,
+						'type': data.message.appointment_type,
+						'practitioner': data.message.practitioner,
+						'invoiced': data.message.invoiced,
+						'company': data.message.company
+					};
+					frm.set_value(values);
+					frm.set_df_property('patient', 'read_only', 1);
+				}
+			});
+		}
+		else {
+			let values = {
+				'patient': '',
+				'patient_name': '',
+				'type': '',
+				'practitioner': '',
+				'invoiced': 0,
+				'patient_sex': '',
+				'patient_age': '',
+				'inpatient_record': '',
+				'inpatient_status': ''
+			};
+			frm.set_value(values);
+			frm.set_df_property('patient', 'read_only', 0);
+		}
+	},
+
+	set_patient_info: async function(frm) {
+		if (frm.doc.patient) {
+			let me = frm
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+				args: {
+					patient: frm.doc.patient
+				},
+				callback: function(data) {
+					let age = '';
+					if (data.message.dob) {
+						age = calculate_age(data.message.dob);
+					}
+					let values = {
+						'patient_age': age,
+						'patient_name':data.message.patient_name,
+						'patient_sex': data.message.sex,
+						'inpatient_record': data.message.inpatient_record,
+						'inpatient_status': data.message.inpatient_status
+					};
+
+					frappe.run_serially([
+						()=>frm.set_value(values),
+						()=>show_clinical_notes(frm),
+						()=>show_orders(frm),
+					]);
+				}
+			});
+		} else {
+			let values = {
+				'patient_age': '',
+				'patient_name':'',
+				'patient_sex': '',
+				'inpatient_record': '',
+				'inpatient_status': ''
+			};
+			frm.set_value(values);
+		}
+	},
+
+	get_applicable_treatment_plans: function(frm) {
+		frappe.call({
+			method: 'get_applicable_treatment_plans',
+			doc: frm.doc,
+			args: {'encounter': frm.doc},
+			freeze: true,
+			freeze_message: __('Fetching Treatment Plans'),
+			callback: function() {
+				new frappe.ui.form.MultiSelectDialog({
+					doctype: "Treatment Plan Template",
+					target: this.cur_frm,
+					setters: {
+						medical_department: "",
+					},
+					action(selections) {
+						frappe.call({
+							method: 'set_treatment_plans',
+							doc: frm.doc,
+							args: selections,
+						}).then(() => {
+							frm.refresh_fields();
+							frm.dirty();
+						});
+						cur_dialog.hide();
+					}
+				});
+
+
+			}
+		});
+	},
+
+});
+
+var schedule_inpatient = function(frm) {
+	var dialog = new frappe.ui.Dialog({
+		title: 'Patient Admission',
+		fields: [
+			{fieldtype: 'Link', label: 'Medical Department', fieldname: 'medical_department', options: 'Medical Department', reqd: 1},
+			{fieldtype: 'Link', label: 'Healthcare Practitioner (Primary)', fieldname: 'primary_practitioner', options: 'Healthcare Practitioner', reqd: 1},
+			{fieldtype: 'Link', label: 'Healthcare Practitioner (Secondary)', fieldname: 'secondary_practitioner', options: 'Healthcare Practitioner'},
+			{fieldtype: 'Link', label: 'Nursing Checklist Template', fieldname: 'admission_nursing_checklist_template', options: 'Nursing Checklist Template'},
+			{fieldtype: 'Column Break'},
+			{fieldtype: 'Date', label: 'Admission Ordered For', fieldname: 'admission_ordered_for', default: 'Today'},
+			{fieldtype: 'Link', label: 'Service Unit Type', fieldname: 'service_unit_type', options: 'Healthcare Service Unit Type'},
+			{fieldtype: 'Int', label: 'Expected Length of Stay', fieldname: 'expected_length_of_stay'},
+			{fieldtype: 'Section Break'},
+			{fieldtype: 'Long Text', label: 'Admission Instructions', fieldname: 'admission_instruction'}
+		],
+		primary_action_label: __('Order Admission'),
+		primary_action : function() {
+			var args = {
+				patient: frm.doc.patient,
+				admission_encounter: frm.doc.name,
+				referring_practitioner: frm.doc.practitioner,
+				company: frm.doc.company,
+				medical_department: dialog.get_value('medical_department'),
+				primary_practitioner: dialog.get_value('primary_practitioner'),
+				secondary_practitioner: dialog.get_value('secondary_practitioner'),
+				admission_ordered_for: dialog.get_value('admission_ordered_for'),
+				admission_service_unit_type: dialog.get_value('service_unit_type'),
+				expected_length_of_stay: dialog.get_value('expected_length_of_stay'),
+				admission_instruction: dialog.get_value('admission_instruction'),
+				admission_nursing_checklist_template: dialog.get_value('admission_nursing_checklist_template')
+			}
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.schedule_inpatient',
+				args: {
+					args: args
+				},
+				callback: function(data) {
+					if (!data.exc) {
+						frm.reload_doc();
+					}
+				},
+				freeze: true,
+				freeze_message: __('Scheduling Patient Admission')
+			});
+			frm.refresh_fields();
+			dialog.hide();
+		}
+	});
+
+	dialog.set_values({
+		'medical_department': frm.doc.medical_department,
+		'primary_practitioner': frm.doc.practitioner,
+	});
+
+	dialog.fields_dict['service_unit_type'].get_query = function() {
+		return {
+			filters: {
+				'inpatient_occupancy': 1,
+				'allow_appointments': 0
+			}
+		};
+	};
+
+	dialog.show();
+	dialog.$wrapper.find('.modal-dialog').css('width', '800px');
+};
+
+var schedule_discharge = function(frm) {
+	var dialog = new frappe.ui.Dialog ({
+		title: 'Inpatient Discharge',
+		fields: [
+			{fieldtype: 'Date', label: 'Discharge Ordered Date', fieldname: 'discharge_ordered_date', default: 'Today', read_only: 1},
+			{fieldtype: 'Date', label: 'Followup Date', fieldname: 'followup_date'},
+			{fieldtype: 'Link', label: 'Nursing Checklist Template', options: 'Nursing Checklist Template', fieldname: 'discharge_nursing_checklist_template'},
+			{fieldtype: 'Column Break'},
+			{fieldtype: 'Small Text', label: 'Discharge Instructions', fieldname: 'discharge_instructions'},
+			{fieldtype: 'Section Break', label:'Discharge Summary'},
+			{fieldtype: 'Long Text', label: 'Discharge Note', fieldname: 'discharge_note'}
+		],
+		primary_action_label: __('Order Discharge'),
+		primary_action : function() {
+			var args = {
+				patient: frm.doc.patient,
+				discharge_encounter: frm.doc.name,
+				discharge_practitioner: frm.doc.practitioner,
+				discharge_ordered_date: dialog.get_value('discharge_ordered_date'),
+				followup_date: dialog.get_value('followup_date'),
+				discharge_instructions: dialog.get_value('discharge_instructions'),
+				discharge_note: dialog.get_value('discharge_note'),
+				discharge_nursing_checklist_template: dialog.get_value('discharge_nursing_checklist_template')
+			}
+			frappe.call ({
+				method: 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.schedule_discharge',
+				args: {args},
+				callback: function(data) {
+					if(!data.exc){
+						frm.reload_doc();
+					}
+				},
+				freeze: true,
+				freeze_message: 'Scheduling Inpatient Discharge'
+			});
+			frm.refresh_fields();
+			dialog.hide();
+		}
+	});
+
+	dialog.show();
+	dialog.$wrapper.find('.modal-dialog').css('width', '800px');
+};
+
+let create_medical_record = function(frm) {
+	if (!frm.doc.patient) {
+		frappe.throw(__('Please select patient'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.patient,
+		'status': 'Open',
+		'reference_doctype': 'Patient Medical Record',
+		'reference_owner': frm.doc.owner
+	};
+	frappe.new_doc('Patient Medical Record');
+};
+
+let create_vital_signs = function(frm) {
+	if (!frm.doc.patient) {
+		frappe.throw(__('Please select patient'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.patient,
+		'encounter': frm.doc.name,
+		'company': frm.doc.company
+	};
+	frappe.new_doc('Vital Signs');
+};
+
+let create_procedure = function(frm) {
+	if (!frm.doc.patient) {
+		frappe.throw(__('Please select patient'));
+	}
+	frappe.route_options = {
+		'patient': frm.doc.patient,
+		'medical_department': frm.doc.medical_department,
+		'company': frm.doc.company
+	};
+	frappe.new_doc('Clinical Procedure');
+};
+
+let create_nursing_tasks = function(frm) {
+	const d = new frappe.ui.Dialog({
+
+		title: __('Create Nursing Tasks'),
+
+		fields: [
+			{
+				label: __('Nursing Checklist Template'),
+				fieldtype: 'Link',
+				options: 'Nursing Checklist Template',
+				fieldname: 'template',
+				reqd: 1,
+			},
+			{
+				label: __('Start Time'),
+				fieldtype: 'Datetime',
+				fieldname: 'start_time',
+				default: frappe.datetime.now_datetime(),
+				reqd: 1,
+			},
+		],
+
+		primary_action_label: __('Create Nursing Tasks'),
+
+		primary_action: () => {
+
+			let values = d.get_values();
+			frappe.call({
+				method: 'healthcare.healthcare.doctype.nursing_task.nursing_task.create_nursing_tasks_from_template',
+				args: {
+					'template': values.template,
+					'doc': frm.doc,
+					'start_time': values.start_time
+				},
+				callback: (r) => {
+					if (r && !r.exc) {
+						frappe.show_alert({
+							message: __('Nursing Tasks Created'),
+							indicator: 'success'
+						});
+					}
+				}
+			});
+
+			d.hide();		frm.set_query('lab_test_code', 'lab_test_prescription', function() {
+				return {
+					filters: {
+						is_billable: 1
+					}
+				};
+			});
+		}
+	});
+
+	d.show();
+};
+
+let calculate_age = function(birth) {
+	let ageMS = Date.parse(Date()) - Date.parse(birth);
+	let age = new Date();
+	age.setTime(ageMS);
+	let years =  age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
+
+let cancel_ip_order = function(frm) {
+	frappe.prompt([
+		{
+			fieldname: 'reason_for_cancellation',
+			label: __('Reason for Cancellation'),
+			fieldtype: 'Small Text',
+			reqd: 1
+		}
+	],
+	function(data) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.inpatient_record.inpatient_record.set_ip_order_cancelled',
+			async: false,
+			freeze: true,
+			args: {
+				inpatient_record: frm.doc.inpatient_record,
+				reason: data.reason_for_cancellation,
+				encounter: frm.doc.name
+			},
+			callback: function(r) {
+				if (!r.exc) {
+					frm.reload_doc();
+				}
+			}
+		});
+	}, __('Reason for Cancellation'), __('Submit'));
+}
+
+let create_service_request = function(frm) {
+	frappe.call({
+		method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_service_request",
+		freeze: true,
+		args: {
+			encounter: frm.doc.name
+		},
+		callback: function(r) {
+			if (r && !r.exc) {
+				frm.reload_doc();
+				frappe.show_alert({
+					message: __('Service Request(s) Created'),
+					indicator: 'success'
+				});
+			}
+		}
+	});
+};
+
+let create_medication_request = function(frm) {
+	frappe.call({
+		method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_medication_request",
+		freeze: true,
+		args: {
+			encounter: frm.doc.name
+		},
+		callback: function(r) {
+			if (r && !r.exc) {
+				frm.reload_doc();
+				frappe.show_alert({
+					message: __('Medicaiton Request(s) Created'),
+					indicator: 'success'
+				});
+			}
+		}
+	});
+};
+
+
+frappe.ui.form.on('Drug Prescription', {
+	dosage: function(frm, cdt, cdn){
+		frappe.model.set_value(cdt, cdn, 'update_schedule', 1);
+		let child = locals[cdt][cdn];
+		if (child.dosage) {
+			frappe.model.set_value(cdt, cdn, 'interval_uom', 'Day');
+			frappe.model.set_value(cdt, cdn, 'interval', 1);
+		}
+	},
+
+	period: function(frm, cdt, cdn) {
+		frappe.model.set_value(cdt, cdn, 'update_schedule', 1);
+	},
+
+	interval_uom: function(frm, cdt, cdn) {
+		frappe.model.set_value(cdt, cdn, 'update_schedule', 1);
+		let child = locals[cdt][cdn];
+		if (child.interval_uom == 'Hour') {
+			frappe.model.set_value(cdt, cdn, 'dosage', null);
+		}
+	},
+
+	medication:function(frm, cdt, cdn) {
+		// to set drug_code(item) if Medication Item table have only one item
+		let child = locals[cdt][cdn];
+		if (!child.medication) {
+			return;
+		}
+
+		frappe.call({
+			method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.get_medications",
+			freeze: true,
+			args: {
+				medication: child.medication
+			},
+			callback: function(r) {
+				if (r && !r.exc && r.message) {
+					let data = r.message
+					if (data.length == 1) {
+						if (data[0].item) {
+							frappe.model.set_value(cdt, cdn, 'drug_code', data[0].item);
+						}
+					} else {
+						frappe.model.set_value(cdt, cdn, 'drug_code', "");
+					}
+				}
+			}
+		});
+	}
+});
+
+
+var apply_code_sm_filter_to_child = function(frm, field, table_list, code_system) {
+	table_list.forEach(function(table) {
+		frm.set_query(field, table, function() {
+			return {
+				filters: {
+					code_system: code_system
+				}
+			};
+		});
+	});
+};
+
+var show_clinical_notes = async function(frm) {
+	if (frm.doc.docstatus == 0 && frm.doc.patient) {
+		const clinical_notes = new healthcare.ClinicalNotes({
+			frm: frm,
+			notes_wrapper: $(frm.fields_dict.clinical_notes.wrapper),
+		});
+		clinical_notes.refresh();
+	}
+}
+
+var show_orders = async function(frm) {
+	if (frm.doc.docstatus == 0 && frm.doc.patient) {
+		const orders = new healthcare.Orders({
+			frm: frm,
+			open_activities_wrapper: $(frm.fields_dict.order_history_html.wrapper),
+			form_wrapper: $(frm.wrapper),
+			create_orders: true,
+		});
+		orders.refresh();
+	}
+}
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/patient_encounter.json
@@ -0,0 +1,542 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2016-04-21 10:53:44.637684",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "title",
+  "appointment",
+  "appointment_type",
+  "patient",
+  "patient_name",
+  "patient_english_name",
+  "patient_sex",
+  "patient_age",
+  "date",
+  "practitioner_name",
+  "invoiced",
+  "inpatient_record",
+  "inpatient_status",
+  "patient_governorate",
+  "state",
+  "address",
+  "column_break_axxe",
+  "symptoms",
+  "symptoms_free_text",
+  "symptoms_in_print",
+  "get_applicable_treatment_plans",
+  "service_unit",
+  "physical_examination",
+  "diagnosis",
+  "dig_free",
+  "diagnosis_in_print",
+  "practitioner",
+  "codification",
+  "column_break_6",
+  "company",
+  "status",
+  "encounter_date",
+  "encounter_time",
+  "medical_department",
+  "google_meet_link",
+  "submit_orders_on_save",
+  "phone",
+  "column_break_ejdk",
+  "codification_table",
+  "sb_drug_prescription",
+  "drug_prescription",
+  "sb_test_prescription",
+  "lab_test_prescription",
+  "sb_procedures",
+  "procedure_prescription",
+  "rehabilitation_section",
+  "therapy_plan",
+  "therapies",
+  "section_break_33",
+  "encounter_comment",
+  "sb_refs",
+  "amended_from",
+  "encounter_details_tab",
+  "order_history_html",
+  "encounter_details",
+  "notes_tab",
+  "clinical_notes"
+ ],
+ "fields": [
+  {
+   "allow_on_submit": 1,
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "no_copy": 1,
+   "options": "HLC-ENC-.YYYY.-",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "appointment",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Appointment",
+   "options": "Patient Appointment",
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Company",
+   "options": "Company"
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break",
+   "hidden": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  },
+  {
+   "default": "Today",
+   "fieldname": "encounter_date",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "in_list_view": 1,
+   "label": "Encounter Date",
+   "reqd": 1
+  },
+  {
+   "default": "Now",
+   "fieldname": "encounter_time",
+   "fieldtype": "Time",
+   "hidden": 1,
+   "label": "Encounter Time",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "symptoms",
+   "fieldtype": "Table MultiSelect",
+   "ignore_xss_filter": 1,
+   "label": "Chief complains",
+   "no_copy": 1,
+   "options": "Patient Encounter Symptom"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.symptoms != ''",
+   "fieldname": "symptoms_in_print",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "In print",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "physical_examination",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Table MultiSelect",
+   "ignore_xss_filter": 1,
+   "label": "Diagnosis",
+   "no_copy": 1,
+   "options": "Patient Encounter Diagnosis"
+  },
+  {
+   "default": "1",
+   "depends_on": "eval: doc.diagnosis != ''",
+   "fieldname": "diagnosis_in_print",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "In print",
+   "no_copy": 1,
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "codification",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "sb_drug_prescription",
+   "fieldtype": "Section Break",
+   "label": "Medications"
+  },
+  {
+   "fieldname": "drug_prescription",
+   "fieldtype": "Table",
+   "label": "Drug Prescription",
+   "options": "Drug Prescription"
+  },
+  {
+   "fieldname": "sb_test_prescription",
+   "fieldtype": "Section Break",
+   "label": "Investigations"
+  },
+  {
+   "fieldname": "lab_test_prescription",
+   "fieldtype": "Table",
+   "label": "Lab Tests",
+   "options": "Lab Prescription"
+  },
+  {
+   "fieldname": "sb_procedures",
+   "fieldtype": "Section Break",
+   "label": "Procedures, Imagaing"
+  },
+  {
+   "fieldname": "procedure_prescription",
+   "fieldtype": "Table",
+   "label": "Clinical Procedures",
+   "no_copy": 1,
+   "options": "Procedure Prescription"
+  },
+  {
+   "fieldname": "encounter_comment",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Review Details",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Patient Encounter",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "rehabilitation_section",
+   "fieldtype": "Section Break",
+   "label": "Rehabilitation, Radiation Therapy"
+  },
+  {
+   "fieldname": "therapies",
+   "fieldtype": "Table",
+   "label": "Therapies",
+   "options": "Therapy Plan Detail"
+  },
+  {
+   "fieldname": "section_break_33",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "therapy_plan",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "label": "Therapy Plan",
+   "options": "Therapy Plan",
+   "read_only": 1
+  },
+  {
+   "fieldname": "appointment_type",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Appointment Type",
+   "no_copy": 1,
+   "options": "Appointment Type",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "inpatient_status",
+   "fieldtype": "Data",
+   "label": "Inpatient Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sb_refs",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fetch_from": "practitioner.practitioner_name",
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "in_list_view": 1,
+   "label": "Practitioner Name",
+   "read_only": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.patient",
+   "fieldname": "get_applicable_treatment_plans",
+   "fieldtype": "Button",
+   "hidden": 1,
+   "label": "Get Applicable Treatment Plans"
+  },
+  {
+   "fetch_from": "appointment.google_meet_link",
+   "fieldname": "google_meet_link",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Google Meet Link",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.__islocal && doc.docstatus == 0;",
+   "fieldname": "encounter_details_tab",
+   "fieldtype": "Tab Break",
+   "label": "Encounter Details"
+  },
+  {
+   "fieldname": "encounter_details",
+   "fieldtype": "HTML"
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "hidden": 1,
+   "label": "Status",
+   "options": "\nOpen\nOrdered\nCompleted\nCancelled",
+   "read_only": 1
+  },
+  {
+   "default": "1",
+   "depends_on": "eval:!doc.__islocal;",
+   "fieldname": "submit_orders_on_save",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Submit Orders on Save"
+  },
+  {
+   "depends_on": "eval:!doc.__islocal && doc.docstatus == 0;",
+   "fieldname": "notes_tab",
+   "fieldtype": "Tab Break",
+   "label": "Notes"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "clinical_notes",
+   "fieldtype": "HTML",
+   "label": "Clinical Notes"
+  },
+  {
+   "fieldname": "order_history_html",
+   "fieldtype": "HTML",
+   "label": "Order History"
+  },
+  {
+   "fieldname": "symptoms_free_text",
+   "fieldtype": "Small Text",
+   "label": "Chief Complains (free text)"
+  },
+  {
+   "fieldname": "dig_free",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis ( free text)"
+  },
+  {
+   "fetch_from": "patient.first_name",
+   "fieldname": "patient_english_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "in_list_view": 1,
+   "label": "Patient English Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.territory",
+   "fieldname": "patient_governorate",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "governorate",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.state",
+   "fieldname": "state",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Region",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.phone",
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Phone",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.address_line",
+   "fieldname": "address",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "ignore_user_permissions": 1,
+   "label": "Address",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_axxe",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "column_break_ejdk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "date"
+  }
+ ],
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Clinical Note",
+   "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Chemo Order",
+   "link_fieldname": "reference_name"
+  }
+ ],
+ "modified": "2024-08-20 12:06:36.412303",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Encounter",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 1,
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, practitioner, medical_department, encounter_date, encounter_time",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [
+  {
+   "color": "Orange",
+   "title": "Ordered"
+  },
+  {
+   "color": "Blue",
+   "title": "Completed"
+  },
+  {
+   "color": "Red",
+   "title": "Cancelled"
+  }
+ ],
+ "title_field": "title",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/patient_encounter.py
@@ -0,0 +1,536 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.mapper import get_mapped_doc
+from frappe.utils import add_days, getdate
+
+from healthcare.healthcare.utils import get_medical_codes
+
+
+class PatientEncounter(Document):
+	def validate(self):
+		self.set_title()
+		self.validate_medications()
+		self.validate_therapies()
+		self.validate_observations()
+		set_codification_table_from_diagnosis(self)
+		if not self.is_new() and self.submit_orders_on_save:
+			self.make_service_request()
+			self.make_medication_request()
+			self.status = "Ordered"
+
+	def on_update(self):
+		if self.appointment:
+			frappe.db.set_value("Patient Appointment", self.appointment, "status", "Closed")
+
+	def on_submit(self):
+		if self.therapies:
+			create_therapy_plan(self)
+		self.make_service_request()
+		self.make_medication_request()
+		# to save service_request name in prescription
+		self.save("Update")
+		self.db_set("status", "Completed")
+
+	def before_cancel(self):
+		orders = frappe.get_all("Service Request", {"order_group": self.name})
+		for order in orders:
+			order_doc = frappe.get_doc("Service Request", order.name)
+			if order_doc.docstatus == 1:
+				order_doc.cancel()
+
+	def on_cancel(self):
+		self.db_set("status", "Cancelled")
+
+		if self.appointment:
+			frappe.db.set_value("Patient Appointment", self.appointment, "status", "Open")
+
+		if self.inpatient_record and self.drug_prescription:
+			delete_ip_medication_order(self)
+
+	def set_title(self):
+		self.title = _("{0} with {1}").format(
+			self.patient_name or self.patient, self.practitioner_name or self.practitioner
+		)[:100]
+
+	@staticmethod
+	@frappe.whitelist()
+	def get_applicable_treatment_plans(encounter):
+		patient = frappe.get_doc("Patient", encounter["patient"])
+
+		plan_filters = {}
+		plan_filters["name"] = ["in", []]
+
+		age = patient.age
+		if age:
+			plan_filters["patient_age_from"] = ["<=", age.years]
+			plan_filters["patient_age_to"] = [">=", age.years]
+
+		gender = patient.sex
+		if gender:
+			plan_filters["gender"] = ["in", [gender, None]]
+
+		diagnosis = encounter.get("diagnosis")
+		if diagnosis:
+			diagnosis = [_diagnosis["diagnosis"] for _diagnosis in encounter["diagnosis"]]
+			filters = [
+				["diagnosis", "in", diagnosis],
+				["parenttype", "=", "Treatment Plan Template"],
+			]
+			diagnosis = frappe.db.get_all("Patient Encounter Diagnosis", filters=filters, fields="*")
+			plan_names = [_diagnosis["parent"] for _diagnosis in diagnosis]
+			plan_filters["name"][1].extend(plan_names)
+
+		symptoms = encounter.get("symptoms")
+		if symptoms:
+			symptoms = [symptom["complaint"] for symptom in encounter["symptoms"]]
+			filters = [
+				["complaint", "in", symptoms],
+				["parenttype", "=", "Treatment Plan Template"],
+			]
+			symptoms = frappe.db.get_all("Patient Encounter Symptom", filters=filters, fields="*")
+			plan_names = [symptom["parent"] for symptom in symptoms]
+			plan_filters["name"][1].extend(plan_names)
+
+		if not plan_filters["name"][1]:
+			plan_filters.pop("name")
+
+		plans = frappe.get_list("Treatment Plan Template", fields="*", filters=plan_filters)
+
+		return plans
+
+	@frappe.whitelist()
+	def set_treatment_plans(self, treatment_plans=None):
+		for treatment_plan in treatment_plans:
+			self.set_treatment_plan(treatment_plan)
+
+	def set_treatment_plan(self, plan):
+		plan_doc = frappe.get_doc("Treatment Plan Template", plan)
+
+		for plan_item in plan_doc.items:
+			self.set_treatment_plan_item(plan_item)
+
+		for drug in plan_doc.drugs:
+			self.append("drug_prescription", (frappe.copy_doc(drug)).as_dict())
+
+	def set_treatment_plan_item(self, plan_item):
+		if plan_item.type == "Clinical Procedure Template":
+			self.append("procedure_prescription", {"procedure": plan_item.template})
+
+		if plan_item.type == "Lab Test Template":
+			self.append("lab_test_prescription", {"lab_test_code": plan_item.template})
+
+		if plan_item.type == "Therapy Type":
+			self.append(
+				"therapies",
+				{"therapy_type": plan_item.template, "no_of_sessions": plan_item.qty},
+			)
+
+		if plan_item.type == "Observation Template":
+			self.append("lab_test_prescription", {"observation_template": plan_item.template})
+
+	def validate_medications(self):
+		if not self.drug_prescription:
+			return
+
+		for item in self.drug_prescription:
+			if not item.drug_code:
+				frappe.throw(_("Row #{0} (Drug Prescription): Drug Code is mandatory").format(item.idx))
+			else:
+				if not item.medication:
+					medication = frappe.db.get_value(
+						"Medication Linked Item",
+						{"item": item.drug_code},
+						"parent",
+					)
+					if medication:
+						item.medication = medication
+
+	def validate_therapies(self):
+		if not self.therapies:
+			return
+
+		for therapy in self.therapies:
+			if therapy.no_of_sessions <= 0:
+				frappe.throw(
+					_("Row #{0} (Therapies): Number of Sessions should be at least 1").format(therapy.idx)
+				)
+
+	def validate_observations(self):
+		if not self.lab_test_prescription:
+			return
+
+		for observation in self.lab_test_prescription:
+			if not observation.observation_template and not observation.lab_test_code:
+				frappe.throw(
+					_("Row #{0} (Lab Tests): Observation Template or Lab Test Template is mandatory").format(
+						observation.idx
+					)
+				)
+
+	def make_service_request(self):
+		if self.lab_test_prescription:
+			for lab_test in self.lab_test_prescription:
+				if lab_test.observation_template:
+					template_doc = "Observation Template"
+					template = "observation_template"
+				elif lab_test.lab_test_code:
+					template_doc = "Lab Test Template"
+					template = "lab_test_code"
+				else:
+					continue
+				if not lab_test.service_request:
+					lab_template = frappe.get_doc(template_doc, lab_test.get(template))
+					order = self.get_order_details(lab_template, lab_test)
+					order.insert(ignore_permissions=True, ignore_mandatory=True)
+					order.submit()
+					lab_test.service_request = order.name
+
+		if self.procedure_prescription:
+			for procedure in self.procedure_prescription:
+				if not procedure.service_request:
+					procedure_template = frappe.get_doc("Clinical Procedure Template", procedure.procedure)
+					order = self.get_order_details(procedure_template, procedure)
+					order.insert(ignore_permissions=True, ignore_mandatory=True)
+					order.submit()
+					procedure.service_request = order.name
+
+		if self.therapies:
+			for therapy in self.therapies:
+				if not therapy.service_request:
+					therapy_type = frappe.get_doc("Therapy Type", therapy.therapy_type)
+					order = self.get_order_details(therapy_type, therapy)
+					order.insert(ignore_permissions=True, ignore_mandatory=True)
+					order.submit()
+					therapy.service_request = order.name
+
+	def make_medication_request(self):
+		if self.drug_prescription:
+			# make_medication_request
+			for drug in self.drug_prescription:
+				if (drug.medication or drug.drug_code) and not drug.medication_request:
+					medication = ""
+					if drug.medication:
+						medication = frappe.get_doc("Medication", drug.medication)
+					order = self.get_order_details(medication, drug, True)
+					order.insert(ignore_permissions=True, ignore_mandatory=True)
+					order.submit()
+					drug.medication_request = order.name
+
+	def get_order_details(self, template_doc, line_item, medication_request=False):
+		order = frappe.get_doc(
+			{
+				"doctype": "Medication Request" if medication_request else "Service Request",
+				"order_date": self.encounter_date,
+				"order_time": self.encounter_time,
+				"company": self.company,
+				"status": "draft-Medication Request Status" if medication_request else "draft-Request Status",
+				"patient": self.get("patient"),
+				"practitioner": self.practitioner,
+				"source_doc": "Patient Encounter",
+				"order_group": self.name,
+				"sequence": line_item.get("sequence"),
+				"intent": line_item.get("intent"),
+				"priority": line_item.get("priority"),
+				"quantity": line_item.get_quantity() if line_item.get("doctype") == "Drug Prescription" else 1,
+				"dosage": line_item.get("dosage"),
+				"dosage_form": line_item.get("dosage_form"),
+				"period": line_item.get("period"),
+				"expected_date": line_item.get("expected_date"),
+				"as_needed": line_item.get("as_needed"),
+				"staff_role": template_doc.get("staff_role") if template_doc else "",
+				"note": line_item.get("note"),
+				"patient_instruction": line_item.get("patient_instruction"),
+			}
+		)
+
+		description = ""
+		if not line_item.get("description"):
+			if template_doc:
+				if template_doc.get("doctype") == "Lab Test Template":
+					description = template_doc.get("lab_test_description")
+				else:
+					description = template_doc.get("description")
+		else:
+			description = line_item.get("description")
+
+		if template_doc and template_doc.get("doctype") == "Clinical Procedure Template":
+			order.update(
+				{
+					"referred_to_practitioner": line_item.get("practitioner"),
+					"ordered_for": line_item.get("date"),
+				}
+			)
+
+		if medication_request:
+			order.update(
+				{
+					"medication": template_doc.get("name") if template_doc else "",
+					"number_of_repeats_allowed": line_item.get("number_of_repeats_allowed"),
+					"medication_item": line_item.get("drug_code") if line_item.get("drug_code") else "",
+				}
+			)
+		else:
+			order.update(
+				{
+					"template_dt": template_doc.get("doctype"),
+					"template_dn": template_doc.get("name"),
+					# "patient_care_type": line_item.patient_care_type
+					# if line_item.patient_care_type
+					# else template_doc.get("patient_care_type"),
+				}
+			)
+
+		order.update({"order_description": description})
+		return order
+
+	@frappe.whitelist()
+	def add_clinical_note(self, note, note_type=None):
+		clinical_note_doc = frappe.new_doc("Clinical Note")
+		clinical_note_doc.patient = self.patient
+		clinical_note_doc.reference_doc = "Patient Encounter"
+		clinical_note_doc.reference_name = self.name
+		clinical_note_doc.note = note
+		clinical_note_doc.clinical_note_type = note_type
+		clinical_note_doc.practitioner = self.practitioner
+		clinical_note_doc.insert()
+
+	@frappe.whitelist()
+	def edit_clinical_note(self, note, note_name):
+		clinical_note_doc = frappe.get_doc("Clinical Note", note_name)
+		clinical_note_doc.note = note
+		clinical_note_doc.save()
+
+	@frappe.whitelist()
+	def delete_clinical_note(self, note_name):
+		if frappe.db.exists("Clinical Note", note_name):
+			frappe.delete_doc("Clinical Note", note_name)
+
+	@frappe.whitelist()
+	def get_clinical_notes(self, patient):
+		return frappe.get_all(
+			"Clinical Note",
+			{
+				"patient": patient,
+			},
+			["posting_date", "note", "name", "practitioner", "user", "clinical_note_type"],
+		)
+
+	@frappe.whitelist()
+	def get_encounter_details(self):
+		medication_requests = []
+		service_requests = []
+		filters = {"patient": self.patient, "docstatus": 1}
+		medication_requests = frappe.get_all("Medication Request", filters, ["*"])
+		service_requests = frappe.get_all("Service Request", filters, ["*"])
+		for service_request in service_requests:
+			if service_request.template_dt == "Lab Test Template":
+				lab_test = frappe.db.get_value("Lab Test", {"service_request": service_request.name}, "name")
+				if lab_test:
+					subject = frappe.db.get_value(
+						"Patient Medical Record", {"reference_name": lab_test}, "subject"
+					)
+					if subject:
+						service_request["lab_details"] = subject
+		clinical_notes = frappe.get_all(
+			"Clinical Note",
+			{
+				"patient": self.patient,
+			},
+			["posting_date", "note"],
+		)
+
+		return medication_requests, service_requests, clinical_notes
+
+
+@frappe.whitelist()
+def make_ip_medication_order(source_name, target_doc=None):
+	def set_missing_values(source, target):
+		target.start_date = source.encounter_date
+		for entry in source.drug_prescription:
+			if entry.drug_code:
+				dosage = frappe.get_doc("Prescription Dosage", entry.dosage)
+				dates = get_prescription_dates(entry.period, target.start_date)
+				for date in dates:
+					for dose in dosage.dosage_strength:
+						order = target.append("medication_orders")
+						order.drug = entry.drug_code
+						order.drug_name = entry.drug_name
+						order.dosage = dose.strength
+						order.instructions = entry.comment
+						order.dosage_form = entry.dosage_form
+						order.date = date
+						order.time = dose.strength_time
+				target.end_date = dates[-1]
+
+	doc = get_mapped_doc(
+		"Patient Encounter",
+		source_name,
+		{
+			"Patient Encounter": {
+				"doctype": "Inpatient Medication Order",
+				"field_map": {
+					"name": "patient_encounter",
+					"patient": "patient",
+					"patient_name": "patient_name",
+					"patient_age": "patient_age",
+					"inpatient_record": "inpatient_record",
+					"practitioner": "practitioner",
+					"start_date": "encounter_date",
+				},
+			}
+		},
+		target_doc,
+		set_missing_values,
+	)
+
+	return doc
+
+
+def get_prescription_dates(period, start_date):
+	prescription_duration = frappe.get_doc("Prescription Duration", period)
+	days = prescription_duration.get_days()
+	dates = [start_date]
+	for i in range(1, days):
+		dates.append(add_days(getdate(start_date), i))
+	return dates
+
+
+def create_therapy_plan(encounter):
+	if len(encounter.therapies):
+		doc = frappe.new_doc("Therapy Plan")
+		doc.patient = encounter.patient
+		doc.start_date = encounter.encounter_date
+		for entry in encounter.therapies:
+			doc.append(
+				"therapy_plan_details",
+				{"therapy_type": entry.therapy_type, "no_of_sessions": entry.no_of_sessions},
+			)
+		doc.save(ignore_permissions=True)
+		if doc.get("name"):
+			encounter.db_set("therapy_plan", doc.name)
+			frappe.msgprint(
+				_("Therapy Plan {0} created successfully.").format(frappe.bold(doc.name)), alert=True
+			)
+
+
+def delete_ip_medication_order(encounter):
+	record = frappe.db.exists("Inpatient Medication Order", {"patient_encounter": encounter.name})
+	if record:
+		frappe.delete_doc("Inpatient Medication Order", record, force=1)
+
+
+def set_codification_table_from_diagnosis(doc):
+	if doc.diagnosis and not doc.codification_table:
+		for diag in doc.diagnosis:
+			medical_code_details = get_medical_codes("Diagnosis", diag.diagnosis)
+			if medical_code_details and len(medical_code_details) > 0:
+				for m_code in medical_code_details:
+					doc.append(
+						"codification_table",
+						{
+							"code_value": m_code.get("code_value"),
+							"code_system": m_code.get("code_system"),
+							"code": m_code.get("code"),
+							"definition": m_code.get("definition"),
+							"system": m_code.get("system"),
+						},
+					)
+
+
+@frappe.whitelist()
+def create_service_request(encounter):
+	encounter_doc = frappe.get_doc("Patient Encounter", encounter)
+	if not frappe.db.exists("Service Request", {"order_group": encounter}):
+		encounter_doc.make_service_request()
+
+		for lab_presc in encounter_doc.lab_test_prescription:
+			if lab_presc.invoiced:
+				frappe.db.set_value(
+					"Service Request",
+					{"order_group": encounter, "template_dn": lab_presc.lab_test_code},
+					{"docstatus": 1, "invoiced": 1, "status": "active-Request Status"},
+				)
+
+		for proc_presc in encounter_doc.procedure_prescription:
+			if proc_presc.invoiced:
+				frappe.db.set_value(
+					"Service Request",
+					{"order_group": encounter, "template_dn": proc_presc.procedure},
+					{"docstatus": 1, "invoiced": 1, "status": "active-Request Status"},
+				)
+
+
+@frappe.whitelist()
+def create_medication_request(encounter):
+	encounter_doc = frappe.get_doc("Patient Encounter", encounter)
+	if not frappe.db.exists("Medication Request", {"order_group": encounter}):
+		encounter_doc.make_medication_request()
+
+
+@frappe.whitelist()
+@frappe.validate_and_sanitize_search_inputs
+def get_medications_query(doctype, txt, searchfield, start, page_len, filters):
+	medication_name = filters.get("name")
+	medication_child = frappe.qb.DocType("Medication Linked Item")
+	medication = frappe.qb.DocType("Medication")
+	item = frappe.qb.DocType("Item")
+	data = (
+		frappe.qb.select(medication_child.brand, medication_child.manufacturer, medication_child.item)
+		.from_(medication_child)
+		.left_join(medication)
+		.on(medication.name == medication_child.parent)
+		.left_join(item)
+		.on(item.name == medication_child.item)
+		.where((medication.name == medication_name) & (item.disabled == 0))
+	).run(as_dict=True)
+	data_list = []
+	for d in data:
+		display_list = []
+		if d.get("item"):
+			display_list.append(d.get("item"))
+		if d.get("brand"):
+			display_list.append(d.get("brand"))
+		if d.get("manufacturer"):
+			display_list.append(d.get("manufacturer"))
+		default_warehouse = frappe.get_cached_value("Stock Settings", None, "default_warehouse")
+		if default_warehouse:
+			actual_qty = frappe.db.get_value(
+				"Bin", {"warehouse": default_warehouse, "item_code": d.get("name")}, "actual_qty"
+			)
+			display_list.append("Qty:" + str(actual_qty) if actual_qty else "0")
+		data_list.append(display_list)
+	res = tuple(tuple(sub) for sub in data_list)
+	return res
+
+
+@frappe.whitelist()
+def get_medications(medication):
+	return frappe.get_all("Medication Linked Item", {"parent": medication}, ["item"])
+
+
+@frappe.whitelist()
+def cancel_request(doctype, request):
+	request_doc = frappe.get_doc(doctype, request)
+	request_doc.cancel()
+
+
+@frappe.whitelist()
+def create_service_request_from_widget(encounter, data, medication_request=False):
+	data = json.loads(data)
+	encounter_doc = frappe.get_doc("Patient Encounter", encounter)
+	if medication_request:
+		template = frappe.get_doc("Medication", data.get("medication"))
+		order = encounter_doc.get_order_details(template, data, True)
+	else:
+		template = frappe.get_doc(data.get("order_template_type"), data.get("order_template"))
+		order = encounter_doc.get_order_details(template, data)
+	order.insert(ignore_permissions=True, ignore_mandatory=True)
+	order.submit()
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/patient_encounter_dashboard.py
@@ -0,0 +1,27 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "encounter",
+		"non_standard_fieldnames": {
+			"Patient Medical Record": "reference_name",
+			"Inpatient Medication Order": "patient_encounter",
+			"Nursing Task": "reference_name",
+			"Service Request": "order_group",
+			"Medication Request": "order_group",
+		},
+		"transactions": [
+			{"label": _("Records"), "items": ["Vital Signs", "Patient Medical Record"]},
+			{
+				"label": _("Orders"),
+				"items": [
+					"Inpatient Medication Order",
+					"Nursing Task",
+					"Service Request",
+					"Medication Request",
+				],
+			},
+		],
+		"disable_create_buttons": ["Inpatient Medication Order"],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/patient_encounter_list.js
@@ -0,0 +1,6 @@
+/*
+(c) ESS 2015-16
+*/
+frappe.listview_settings['Patient Encounter'] = {
+	filters:[["docstatus","!=","2"]]
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter/test_patient_encounter.py
@@ -0,0 +1,92 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+from healthcare.healthcare.doctype.patient_encounter.patient_encounter import PatientEncounter
+
+
+class TestPatientEncounter(FrappeTestCase):
+	def setUp(self):
+		try:
+			gender_m = frappe.get_doc({"doctype": "Gender", "gender": "MALE"}).insert()
+			gender_f = frappe.get_doc({"doctype": "Gender", "gender": "FEMALE"}).insert()
+		except frappe.exceptions.DuplicateEntryError:
+			gender_m = frappe.get_doc({"doctype": "Gender", "gender": "MALE"})
+			gender_f = frappe.get_doc({"doctype": "Gender", "gender": "FEMALE"})
+
+		self.patient_male = frappe.get_doc(
+			{
+				"doctype": "Patient",
+				"first_name": "John",
+				"sex": gender_m.gender,
+			}
+		).insert()
+		self.patient_female = frappe.get_doc(
+			{
+				"doctype": "Patient",
+				"first_name": "Curie",
+				"sex": gender_f.gender,
+			}
+		).insert()
+		self.practitioner = frappe.get_doc(
+			{
+				"doctype": "Healthcare Practitioner",
+				"first_name": "Doc",
+				"sex": "MALE",
+			}
+		).insert()
+		try:
+			self.care_plan_male = frappe.get_doc(
+				{
+					"doctype": "Treatment Plan Template",
+					"template_name": "test plan - m",
+					"gender": gender_m.gender,
+				}
+			).insert()
+			self.care_plan_female = frappe.get_doc(
+				{
+					"doctype": "Treatment Plan Template",
+					"template_name": "test plan - f",
+					"gender": gender_f.gender,
+				}
+			).insert()
+		except frappe.exceptions.DuplicateEntryError:
+			self.care_plan_male = frappe.get_doc(
+				{
+					"doctype": "Treatment Plan Template",
+					"template_name": "test plan - m",
+					"gender": gender_m.gender,
+				}
+			)
+			self.care_plan_female = frappe.get_doc(
+				{
+					"doctype": "Treatment Plan Template",
+					"template_name": "test plan - f",
+					"gender": gender_f.gender,
+				}
+			)
+
+	def test_treatment_plan_template_filter(self):
+		encounter = frappe.get_doc(
+			{
+				"doctype": "Patient Encounter",
+				"patient": self.patient_male.name,
+				"practitioner": self.practitioner.name,
+			}
+		).insert()
+		plans = PatientEncounter.get_applicable_treatment_plans(encounter.as_dict())
+		self.assertEqual(plans[0]["name"], self.care_plan_male.template_name)
+
+		encounter = frappe.get_doc(
+			{
+				"doctype": "Patient Encounter",
+				"patient": self.patient_female.name,
+				"practitioner": self.practitioner.name,
+			}
+		).insert()
+		plans = PatientEncounter.get_applicable_treatment_plans(encounter.as_dict())
+		self.assertEqual(plans[0]["name"], self.care_plan_female.template_name)
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter_diagnosis/patient_encounter_diagnosis.json
@@ -0,0 +1,33 @@
+{
+ "actions": [],
+ "beta": 0,
+ "creation": "2020-02-26 16:48:16.835105",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "diagnosis"
+ ],
+ "fields": [
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Diagnosis",
+   "options": "Diagnosis",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-02-26 16:58:16.480583",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Encounter Diagnosis",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter_diagnosis/patient_encounter_diagnosis.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientEncounterDiagnosis(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter_symptom/patient_encounter_symptom.json
@@ -0,0 +1,33 @@
+{
+ "actions": [],
+ "beta": 0,
+ "creation": "2020-02-26 16:47:00.525657",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "complaint"
+ ],
+ "fields": [
+  {
+   "fieldname": "complaint",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Complaint",
+   "options": "Complaint",
+   "reqd": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-02-26 16:57:37.997481",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Encounter Symptom",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_encounter_symptom/patient_encounter_symptom.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientEncounterSymptom(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_custom_document_type/patient_history_custom_document_type.json
@@ -0,0 +1,55 @@
+{
+ "actions": [],
+ "creation": "2020-11-25 13:40:23.054469",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "document_type",
+  "date_fieldname",
+  "add_edit_fields",
+  "selected_fields"
+ ],
+ "fields": [
+  {
+   "fieldname": "document_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Document Type",
+   "options": "DocType",
+   "reqd": 1
+  },
+  {
+   "fieldname": "selected_fields",
+   "fieldtype": "Code",
+   "label": "Selected Fields",
+   "read_only": 1
+  },
+  {
+   "fieldname": "add_edit_fields",
+   "fieldtype": "Button",
+   "in_list_view": 1,
+   "label": "Add / Edit Fields"
+  },
+  {
+   "fieldname": "date_fieldname",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Date Fieldname",
+   "reqd": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2020-11-30 13:54:37.474671",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient History Custom Document Type",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_custom_document_type/patient_history_custom_document_type.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientHistoryCustomDocumentType(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_settings/patient_history_settings.js
@@ -0,0 +1,133 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient History Settings', {
+	refresh: function(frm) {
+		frm.set_query('document_type', 'custom_doctypes', () => {
+			return {
+				filters: {
+					custom: 1,
+					is_submittable: 1,
+					module: 'Healthcare',
+				}
+			};
+		});
+	},
+
+	field_selector: function(frm, doc, standard=1) {
+		let document_fields = [];
+		if (doc.selected_fields)
+			document_fields = (JSON.parse(doc.selected_fields)).map(f => f.fieldname);
+
+		frm.call({
+			method: 'get_doctype_fields',
+			doc: frm.doc,
+			args: {
+				document_type: doc.document_type,
+				fields: document_fields
+			},
+			freeze: true,
+			callback: function(r) {
+				if (r.message) {
+					let doctype = 'Patient History Custom Document Type';
+					if (standard)
+						doctype = 'Patient History Standard Document Type';
+
+					frm.events.show_field_selector_dialog(frm, doc, doctype, r.message);
+				}
+			}
+		});
+	},
+
+	show_field_selector_dialog: function(frm, doc, doctype, doc_fields) {
+		let d = new frappe.ui.Dialog({
+			title: __('{0} Fields', [__(doc.document_type)]),
+			fields: [
+				{
+					label: __('Select Fields'),
+					fieldtype: 'MultiCheck',
+					fieldname: 'fields',
+					options: doc_fields,
+					columns: 2
+				}
+			]
+		});
+
+		d.$body.prepend(`
+			<div class="columns-search">
+				<input type="text" placeholder="${__('Search')}" data-element="search" class="form-control input-xs">
+			</div>`
+		);
+
+		frappe.utils.setup_search(d.$body, '.unit-checkbox', '.label-area');
+
+		d.set_primary_action(__('Save'), () => {
+			let values = d.get_values().fields;
+
+			let selected_fields = [];
+
+			frappe.model.with_doctype(doc.document_type, function() {
+				for (let idx in values) {
+					let value = values[idx];
+
+					let field = frappe.get_meta(doc.document_type).fields.filter((df) => df.fieldname == value)[0];
+					if (field) {
+						selected_fields.push({
+							label: field.label,
+							fieldname: field.fieldname,
+							fieldtype: field.fieldtype
+						});
+					}
+				}
+
+				d.refresh();
+				frappe.model.set_value(doctype, doc.name, 'selected_fields', JSON.stringify(selected_fields));
+			});
+
+			d.hide();
+		});
+
+		d.show();
+	},
+
+	get_date_field_for_dt: function(frm, row) {
+		frm.call({
+			method: 'get_date_field_for_dt',
+			doc: frm.doc,
+			args: {
+				document_type: row.document_type
+			},
+			callback: function(data) {
+				if (data.message) {
+					frappe.model.set_value('Patient History Custom Document Type',
+						row.name, 'date_fieldname', data.message);
+				}
+			}
+		});
+	}
+});
+
+frappe.ui.form.on('Patient History Custom Document Type', {
+	document_type: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		if (row.document_type) {
+			frm.events.get_date_field_for_dt(frm, row);
+		}
+	},
+
+	add_edit_fields: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		if (row.document_type) {
+			frm.events.field_selector(frm, row, 0);
+		}
+	}
+});
+
+frappe.ui.form.on('Patient History Standard Document Type', {
+	add_edit_fields: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		if (row.document_type) {
+			frm.events.field_selector(frm, row);
+		}
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_settings/patient_history_settings.json
@@ -0,0 +1,55 @@
+{
+ "actions": [],
+ "creation": "2020-11-25 13:41:37.675518",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "standard_doctypes",
+  "section_break_2",
+  "custom_doctypes"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_2",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "custom_doctypes",
+   "fieldtype": "Table",
+   "label": "Custom Document Types",
+   "options": "Patient History Custom Document Type"
+  },
+  {
+   "fieldname": "standard_doctypes",
+   "fieldtype": "Table",
+   "label": "Standard Document Types",
+   "options": "Patient History Standard Document Type",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "issingle": 1,
+ "links": [],
+ "modified": "2020-11-25 13:43:38.511771",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient History Settings",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "print": 1,
+   "read": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_settings/patient_history_settings.py
@@ -0,0 +1,215 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import cint, cstr
+
+from healthcare.healthcare.page.patient_history.patient_history import get_patient_history_doctypes
+
+
+class PatientHistorySettings(Document):
+	def validate(self):
+		self.validate_submittable_doctypes()
+		self.validate_date_fieldnames()
+
+	def validate_submittable_doctypes(self):
+		for entry in self.custom_doctypes:
+			if not cint(frappe.db.get_value("DocType", entry.document_type, "is_submittable")):
+				msg = _("Row #{0}: Document Type {1} is not submittable.").format(
+					entry.idx, frappe.bold(entry.document_type)
+				)
+				msg += _("Patient Medical Record can only be created for submittable document types.")
+				frappe.throw(msg)
+
+	def validate_date_fieldnames(self):
+		for entry in self.custom_doctypes:
+			field = frappe.get_meta(entry.document_type).get_field(entry.date_fieldname)
+			if not field:
+				frappe.throw(
+					_("Row #{0}: No such Field named {1} found in the Document Type {2}.").format(
+						entry.idx, frappe.bold(entry.date_fieldname), frappe.bold(entry.document_type)
+					)
+				)
+
+			if field.fieldtype not in ["Date", "Datetime"]:
+				frappe.throw(
+					_("Row #{0}: Field {1} in Document Type {2} is not a Date / Datetime field.").format(
+						entry.idx, frappe.bold(entry.date_fieldname), frappe.bold(entry.document_type)
+					)
+				)
+
+	@frappe.whitelist()
+	def get_doctype_fields(self, document_type, fields):
+		multicheck_fields = []
+		doc_fields = frappe.get_meta(document_type).fields
+
+		for field in doc_fields:
+			if (
+				field.fieldtype not in frappe.model.no_value_fields
+				or field.fieldtype in frappe.model.table_fields
+				and not field.hidden
+			):
+				multicheck_fields.append(
+					{
+						"label": field.label,
+						"value": field.fieldname,
+						"checked": 1 if field.fieldname in fields else 0,
+					}
+				)
+
+		return multicheck_fields
+
+	@frappe.whitelist()
+	def get_date_field_for_dt(self, document_type):
+		meta = frappe.get_meta(document_type)
+		date_fields = meta.get("fields", {"fieldtype": ["in", ["Date", "Datetime"]]})
+
+		if date_fields:
+			return date_fields[0].get("fieldname")
+
+
+def create_medical_record(doc, method=None):
+	medical_record_required = validate_medical_record_required(doc)
+	if not medical_record_required:
+		return
+
+	if frappe.db.exists("Patient Medical Record", {"reference_name": doc.name}):
+		return
+
+	subject = set_subject_field(doc)
+	date_field = get_date_field(doc.doctype)
+	medical_record = frappe.new_doc("Patient Medical Record")
+	medical_record.patient = doc.patient
+	medical_record.subject = subject
+	medical_record.status = "Open"
+	medical_record.communication_date = doc.get(date_field)
+	medical_record.reference_doctype = doc.doctype
+	medical_record.reference_name = doc.name
+	medical_record.reference_owner = doc.owner
+	medical_record.save(ignore_permissions=True)
+
+
+def update_medical_record(doc, method=None):
+	medical_record_required = validate_medical_record_required(doc)
+	if not medical_record_required:
+		return
+
+	medical_record_id = frappe.db.exists("Patient Medical Record", {"reference_name": doc.name})
+
+	if medical_record_id:
+		subject = set_subject_field(doc)
+		frappe.db.set_value("Patient Medical Record", medical_record_id[0][0], "subject", subject)
+	else:
+		create_medical_record(doc)
+
+
+def delete_medical_record(doc, method=None):
+	medical_record_required = validate_medical_record_required(doc)
+	if not medical_record_required:
+		return
+
+	record = frappe.db.exists("Patient Medical Record", {"reference_name": doc.name})
+	if record:
+		frappe.delete_doc("Patient Medical Record", record, force=1)
+
+
+def set_subject_field(doc):
+	from frappe.utils.formatters import format_value
+
+	meta = frappe.get_meta(doc.doctype)
+	subject = ""
+	patient_history_fields = get_patient_history_fields(doc)
+
+	for entry in patient_history_fields:
+		fieldname = entry.get("fieldname")
+		if entry.get("fieldtype") == "Table" and doc.get(fieldname):
+			formatted_value = get_formatted_value_for_table_field(
+				doc.get(fieldname), meta.get_field(fieldname)
+			)
+			subject += frappe.bold(_(entry.get("label")) + ":") + "<br>" + cstr(formatted_value) + "<br>"
+
+		else:
+			if doc.get(fieldname):
+				formatted_value = format_value(doc.get(fieldname), meta.get_field(fieldname), doc)
+				subject += frappe.bold(_(entry.get("label")) + ":") + cstr(formatted_value) + "<br>"
+
+	return subject
+
+
+def get_date_field(doctype):
+	dt = get_patient_history_config_dt(doctype)
+
+	return frappe.db.get_value(dt, {"document_type": doctype}, "date_fieldname")
+
+
+def get_patient_history_fields(doc):
+	dt = get_patient_history_config_dt(doc.doctype)
+	patient_history_fields = frappe.db.get_value(
+		dt, {"document_type": doc.doctype}, "selected_fields"
+	)
+
+	if patient_history_fields:
+		return json.loads(patient_history_fields)
+
+
+def get_formatted_value_for_table_field(items, df):
+	child_meta = frappe.get_meta(df.options)
+
+	table_head = ""
+	table_row = ""
+	html = ""
+	create_head = True
+	for item in items:
+		table_row += "<tr>"
+		for cdf in child_meta.fields:
+			if cdf.in_list_view:
+				if create_head:
+					table_head += "<td>" + cdf.label + "</td>"
+				if item.get(cdf.fieldname):
+					table_row += "<td>" + str(item.get(cdf.fieldname)) + "</td>"
+				else:
+					table_row += "<td></td>"
+		create_head = False
+		table_row += "</tr>"
+
+	html += (
+		"<table class='table table-condensed table-bordered'>" + table_head + table_row + "</table>"
+	)
+
+	return html
+
+
+def get_patient_history_config_dt(doctype):
+	if frappe.db.get_value("DocType", doctype, "custom"):
+		return "Patient History Custom Document Type"
+	else:
+		return "Patient History Standard Document Type"
+
+
+def validate_medical_record_required(doc):
+	if (
+		frappe.flags.in_patch
+		or frappe.flags.in_install
+		or frappe.flags.in_setup_wizard
+		or get_module(doc) != "Healthcare"
+	):
+		return False
+
+	if doc.doctype not in get_patient_history_doctypes():
+		return False
+
+	return True
+
+
+def get_module(doc):
+	module = doc.meta.module
+	if not module:
+		module = frappe.db.get_value("DocType", doc.doctype, "module")
+
+	return module
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_settings/test_patient_history_settings.py
@@ -0,0 +1,92 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import json
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import getdate, strip_html
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_patient,
+)
+
+
+class TestPatientHistorySettings(FrappeTestCase):
+	def setUp(self):
+		dt = create_custom_doctype()
+		settings = frappe.get_single("Patient History Settings")
+		settings.append(
+			"custom_doctypes",
+			{
+				"document_type": dt.name,
+				"date_fieldname": "date",
+				"selected_fields": json.dumps(
+					[
+						{"label": "Date", "fieldname": "date", "fieldtype": "Date"},
+						{"label": "Rating", "fieldname": "rating", "fieldtype": "Rating"},
+						{"label": "Feedback", "fieldname": "feedback", "fieldtype": "Small Text"},
+					]
+				),
+			},
+		)
+		settings.save()
+
+	def test_custom_doctype_medical_record(self):
+		# tests for medical record creation of standard doctypes in test_patient_medical_record.py
+		patient = create_patient()
+		doc = create_doc(patient)
+		# check for medical record
+		medical_rec = frappe.db.exists(
+			"Patient Medical Record", {"status": "Open", "reference_name": doc.name}
+		)
+		self.assertTrue(medical_rec)
+
+		medical_rec = frappe.get_doc("Patient Medical Record", medical_rec)
+		expected_subject = "Date:{0}Rating:0.3Feedback:Test Patient History Settings".format(
+			frappe.utils.format_date(getdate())
+		)
+		self.assertEqual(strip_html(medical_rec.subject), expected_subject)
+		self.assertEqual(medical_rec.patient, patient)
+		self.assertEqual(medical_rec.communication_date, getdate())
+
+
+def create_custom_doctype():
+	if not frappe.db.exists("DocType", "Test Patient Feedback"):
+		doc = frappe.get_doc(
+			{
+				"doctype": "DocType",
+				"module": "Healthcare",
+				"custom": 1,
+				"is_submittable": 1,
+				"fields": [
+					{"label": "Date", "fieldname": "date", "fieldtype": "Date"},
+					{"label": "Patient", "fieldname": "patient", "fieldtype": "Link", "options": "Patient"},
+					{"label": "Rating", "fieldname": "rating", "fieldtype": "Rating"},
+					{"label": "Feedback", "fieldname": "feedback", "fieldtype": "Small Text"},
+				],
+				"permissions": [{"role": "System Manager", "read": 1}],
+				"name": "Test Patient Feedback",
+			}
+		)
+		doc.insert()
+		return doc
+	else:
+		return frappe.get_doc("DocType", "Test Patient Feedback")
+
+
+def create_doc(patient):
+	doc = frappe.get_doc(
+		{
+			"doctype": "Test Patient Feedback",
+			"patient": patient,
+			"date": getdate(),
+			"rating": 0.3,
+			"feedback": "Test Patient History Settings",
+		}
+	).insert()
+	doc.submit()
+
+	return doc
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_standard_document_type/patient_history_standard_document_type.json
@@ -0,0 +1,57 @@
+{
+ "actions": [],
+ "creation": "2020-11-25 13:39:36.014814",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "document_type",
+  "date_fieldname",
+  "add_edit_fields",
+  "selected_fields"
+ ],
+ "fields": [
+  {
+   "fieldname": "document_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Document Type",
+   "options": "DocType",
+   "read_only": 1,
+   "reqd": 1
+  },
+  {
+   "fieldname": "selected_fields",
+   "fieldtype": "Code",
+   "label": "Selected Fields",
+   "read_only": 1
+  },
+  {
+   "fieldname": "add_edit_fields",
+   "fieldtype": "Button",
+   "in_list_view": 1,
+   "label": "Add / Edit Fields"
+  },
+  {
+   "fieldname": "date_fieldname",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Date Fieldname",
+   "read_only": 1,
+   "reqd": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2020-11-30 13:54:56.773325",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient History Standard Document Type",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_history_standard_document_type/patient_history_standard_document_type.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientHistoryStandardDocumentType(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_medical_record/patient_medical_record.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Patient Medical Record', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_medical_record/patient_medical_record.json
@@ -0,0 +1,177 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2016-06-09 11:30:44.972056",
+ "doctype": "DocType",
+ "document_type": "Setup",
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "patient",
+  "title",
+  "status",
+  "column_break_2",
+  "attach",
+  "section_break_4",
+  "subject",
+  "section_break_8",
+  "communication_date",
+  "reference_doctype",
+  "reference_name",
+  "column_break_9",
+  "reference_owner",
+  "user"
+ ],
+ "fields": [
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-PMR-.YYYY.-",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "attach",
+   "fieldtype": "Attach",
+   "label": "Attach Medical Record"
+  },
+  {
+   "fieldname": "section_break_4",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "subject",
+   "fieldtype": "Text Editor",
+   "ignore_xss_filter": 1,
+   "label": "Subject"
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Open\nClose",
+   "read_only": 1
+  },
+  {
+   "default": "Today",
+   "fieldname": "communication_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Datetime",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_doctype",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Reference DocType",
+   "options": "DocType",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Dynamic Link",
+   "in_list_view": 1,
+   "label": "Reference Name",
+   "options": "reference_doctype",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "reference_name.owner",
+   "fieldname": "reference_owner",
+   "fieldtype": "Data",
+   "label": "Reference Owner",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "default": "__user",
+   "fieldname": "user",
+   "fieldtype": "Link",
+   "label": "User",
+   "options": "User",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "column_break_9",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_8",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Record Title"
+  }
+ ],
+ "in_create": 1,
+ "links": [],
+ "modified": "2024-08-19 11:09:34.130862",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Medical Record",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Patient Medical Record - cancel",
+   "select": 1,
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, subject, communication_date, reference_doctype, reference_name",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_medical_record/patient_medical_record.py
@@ -0,0 +1,13 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+
+
+class PatientMedicalRecord(Document):
+	def after_insert(self):
+		if self.reference_doctype == "Patient Medical Record":
+			frappe.db.set_value("Patient Medical Record", self.name, "reference_name", self.name)
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_medical_record/test_patient_medical_record.py
@@ -0,0 +1,114 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, nowdate
+
+from erpnext.accounts.doctype.pos_profile.test_pos_profile import make_pos_profile
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_appointment,
+	create_encounter,
+	create_healthcare_docs,
+	create_medical_department,
+)
+
+
+class TestPatientMedicalRecord(FrappeTestCase):
+	def setUp(self):
+		frappe.db.set_single_value("Healthcare Settings", "enable_free_follow_ups", 0)
+		frappe.db.set_single_value("Healthcare Settings", "show_payment_popup", 1)
+		make_pos_profile()
+
+	def test_medical_record(self):
+		patient, practitioner = create_healthcare_docs()
+		medical_department = create_medical_department()
+		appointment = create_appointment(patient, practitioner, nowdate(), invoice=1)
+		encounter = create_encounter(appointment)
+
+		# check for encounter
+		medical_rec = frappe.db.exists(
+			"Patient Medical Record", {"status": "Open", "reference_name": encounter.name}
+		)
+		self.assertTrue(medical_rec)
+
+		vital_signs = create_vital_signs(appointment)
+		# check for vital signs
+		medical_rec = frappe.db.exists(
+			"Patient Medical Record", {"status": "Open", "reference_name": vital_signs.name}
+		)
+		self.assertTrue(medical_rec)
+
+		appointment = create_appointment(
+			patient, practitioner, add_days(nowdate(), 1), invoice=1, procedure_template=1
+		)
+		procedure = create_procedure(appointment)
+		procedure.start_procedure()
+		procedure.complete_procedure()
+		# check for clinical procedure
+		medical_rec = frappe.db.exists(
+			"Patient Medical Record", {"status": "Open", "reference_name": procedure.name}
+		)
+		self.assertTrue(medical_rec)
+
+		template = create_lab_test_template(medical_department)
+		lab_test = create_lab_test(template.name, patient)
+		# check for lab test
+		medical_rec = frappe.db.exists(
+			"Patient Medical Record", {"status": "Open", "reference_name": lab_test.name}
+		)
+		self.assertTrue(medical_rec)
+
+
+def create_procedure(appointment):
+	if appointment:
+		procedure = frappe.new_doc("Clinical Procedure")
+		procedure.procedure_template = appointment.procedure_template
+		procedure.appointment = appointment.name
+		procedure.patient = appointment.patient
+		procedure.practitioner = appointment.practitioner
+		procedure.medical_department = appointment.department
+		procedure.start_dt = appointment.appointment_date
+		procedure.start_time = appointment.appointment_time
+		procedure.save()
+		procedure.submit()
+		return procedure
+
+
+def create_vital_signs(appointment):
+	vital_signs = frappe.new_doc("Vital Signs")
+	vital_signs.patient = appointment.patient
+	vital_signs.signs_date = appointment.appointment_date
+	vital_signs.signs_time = appointment.appointment_time
+	vital_signs.temperature = 38.5
+	vital_signs.save()
+	vital_signs.submit()
+	return vital_signs
+
+
+def create_lab_test_template(medical_department):
+	if frappe.db.exists("Lab Test Template", "Blood Test"):
+		return frappe.get_doc("Lab Test Template", "Blood Test")
+
+	template = frappe.new_doc("Lab Test Template")
+	template.lab_test_name = "Blood Test"
+	template.lab_test_code = "Blood Test"
+	template.lab_test_group = "Services"
+	template.department = medical_department
+	template.is_billable = 1
+	template.lab_test_rate = 2000
+	template.save()
+	return template
+
+
+def create_lab_test(template, patient):
+	lab_test = frappe.new_doc("Lab Test")
+	lab_test.patient = patient
+	lab_test.patient_sex = frappe.db.get_value("Patient", patient, "sex")
+	lab_test.template = template
+	lab_test.save()
+	lab_test.submit()
+	return lab_test
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_relation/patient_relation.json
@@ -0,0 +1,52 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "beta": 0,
+ "creation": "2017-04-26 15:40:11.561855",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "patient",
+  "relation",
+  "description"
+ ],
+ "fields": [
+  {
+   "fieldname": "relation",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Relation",
+   "options": "\nFather\nMother\nSpouse\nSiblings\nFamily\nOther",
+   "search_index": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Description"
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-01-29 12:45:40.081899",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Relation",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patient_relation/patient_relation.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class PatientRelation(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patients_paid/patients_paid.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Patients Paid", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/patients_paid/patients_paid.json
@@ -0,0 +1,97 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-06-01 07:51:46.274998",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "info_section",
+  "patient_info",
+  "f_name",
+  "s_name",
+  "t_name",
+  "paid_status",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "info_section",
+   "fieldtype": "Section Break",
+   "label": "Info"
+  },
+  {
+   "fieldname": "patient_info",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient ",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fieldname": "paid_status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "paid\nfinal paid"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Patients Paid",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644",
+   "fieldname": "f_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "First Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0633\u0645_\u0627\u0644\u0627\u0645",
+   "fieldname": "s_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Second Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient_info.\u0627\u0633\u0645_\u0627\u0644\u062c\u062f",
+   "fieldname": "t_name",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Third Name",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-06-03 07:05:38.368972",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patients Paid",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/patients_paid/patients_paid.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PatientsPaid(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/patients_paid/test_patients_paid.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPatientsPaid(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_schedule/practitioner_schedule.js
@@ -0,0 +1,194 @@
+// Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Practitioner Schedule', {
+	refresh: function(frm) {
+		cur_frm.fields_dict["time_slots"].grid.wrapper.find('.grid-add-row').hide();
+		cur_frm.fields_dict["time_slots"].grid.add_custom_button(__('Add Time Slots'), () => {
+			let d = new frappe.ui.Dialog({
+				fields: [
+					{
+						fieldname: 'days', label: __('Select Days'), fieldtype: 'MultiSelect',
+						options:[
+							{value:'Sunday', label:__('Sunday')},
+							{value:'Monday', label:__('Monday')},
+							{value:'Tuesday', label:__('Tuesday')},
+							{value:'Wednesday', label:__('Wednesday')},
+							{value:'Thursday', label:__('Thursday')},
+							{value:'Friday', label:__('Friday')},
+							{value:'Saturday', label:__('Saturday')},
+						], reqd: 1
+					},
+					{
+						fieldname: 'from_time', label: __('From'), fieldtype: 'Time',
+						'default': '09:00:00', reqd: 1
+					},
+					{
+						fieldname: 'to_time', label: __('To'), fieldtype: 'Time',
+						'default': '12:00:00', reqd: 1
+					},
+					{
+						fieldname: 'duration', label: __('Appointment Duration (mins)'),
+						fieldtype:'Int', 'default': 15,
+					},
+					{
+						fieldname: 'create_slots', label: __('Create Slots'), fieldtype: 'Check',
+						'default': 1
+					},
+					{
+						fieldname: 'maximum_appointments', label: __('Maximum Number of Appointments (Nos)'),
+						fieldtype:'Int', mandatory_depends_on: "eval:doc.create_slots==0",
+						depends_on: "eval:doc.create_slots==0"
+					},
+				],
+				primary_action_label: __('Add'),
+				primary_action: () => {
+					let values = d.get_values();
+					if (values) {
+						let slot_added = false;
+						values.days.split(',').forEach(function(day){
+							day = $.trim(day);
+							if (['Sunday', 'Monday', 'Tuesday', 'Wednesday',
+							'Thursday', 'Friday', 'Saturday'].includes(day)){
+								add_slots(day);
+							}
+						});
+
+						function check_overlap_or_add_slot(week_day, cur_time, end_time, add_slots_to_child){
+							let overlap = false;
+							if (values.create_slots) {
+								while (cur_time < end_time) {
+										let add_to_child = true;
+										let to_time = cur_time.clone().add(values.duration, 'minutes');
+										if (to_time <= end_time) {
+											if (frm.doc.time_slots){
+												frm.doc.time_slots.forEach(function(slot) {
+													if (slot.day == week_day){
+														let slot_from_moment = moment(slot.from_time, 'HH:mm:ss');
+														let slot_to_moment = moment(slot.to_time, 'HH:mm:ss');
+														if (cur_time.isSame(slot_from_moment)	||	cur_time.isBetween(slot_from_moment, slot_to_moment)	||
+														to_time.isSame(slot_to_moment)	||	to_time.isBetween(slot_from_moment, slot_to_moment)) {
+															overlap = true;
+															if (add_slots_to_child) {
+																frappe.show_alert({
+																	message:__('Time slot skiped, the slot {0} to {1} overlap exisiting slot {2} to {3}',
+																		[cur_time.format('HH:mm:ss'),	to_time.format('HH:mm:ss'),	slot.from_time,	slot.to_time]),
+																	indicator:'orange'
+																});
+																add_to_child = false;
+															}
+														}
+													}
+												});
+											}
+											// add a new timeslot
+											if (add_to_child && add_slots_to_child) {
+												frm.add_child('time_slots', {
+													from_time: cur_time.format('HH:mm:ss'),
+													to_time: to_time.format('HH:mm:ss'),
+													day: week_day
+												});
+												slot_added = true;
+											}
+										}
+										cur_time = to_time;
+								}
+							} else {
+								// appointment for day
+								let add_to_child = true;
+								if (add_slots_to_child && frm.doc.time_slots){
+									frm.doc.time_slots.forEach(function(slot) {
+										if (slot.day == week_day){
+											let slot_from_moment = moment(slot.from_time, 'HH:mm:ss');
+											let slot_to_moment = moment(slot.to_time, 'HH:mm:ss');
+											if (cur_time.isSame(slot_from_moment)	||	cur_time.isBetween(slot_from_moment, slot_to_moment)	||
+											end_time.isSame(slot_to_moment)	||	end_time.isBetween(slot_from_moment, slot_to_moment)) {
+												overlap = true;
+												if (add_slots_to_child) {
+													frappe.show_alert({
+														message:__('Time slot skiped, the slot {0} to {1} overlap exisiting slot {2} to {3}',
+															[cur_time.format('HH:mm:ss'),	end_time.format('HH:mm:ss'),	slot.from_time,	slot.to_time]),
+														indicator:'orange'
+													});
+													add_to_child = false;
+												}
+											}
+										}
+									});
+								}
+								if (add_slots_to_child && add_to_child) {
+									frm.add_child('time_slots', {
+										from_time: cur_time.format('HH:mm:ss'),
+										to_time: end_time.format('HH:mm:ss'),
+										day: week_day,
+										maximum_appointments: values.maximum_appointments,
+										duration: values.duration,
+									});
+								}
+							}
+							return overlap;
+						}
+
+						function add_slots(week_day) {
+							let cur_time = moment(values.from_time, 'HH:mm:ss');
+							let end_time = moment(values.to_time, 'HH:mm:ss');
+							if (check_overlap_or_add_slot(week_day, cur_time, end_time, false)) {
+								frappe.confirm(__('Schedules for {0} overlaps, do you want to proceed after skipping overlapped slots ?',	[week_day]),
+									function() {
+										// if Yes
+										check_overlap_or_add_slot(week_day, cur_time, end_time, true);
+									},
+									function() {
+										// if No
+										frappe.show_alert({
+											message: __('Slots for {0} are not added to the schedule',	[week_day]),
+											indicator: 'red'
+										});
+									}
+								);
+							} else {
+								check_overlap_or_add_slot(week_day, cur_time, end_time, true);
+							}
+						}
+
+						frm.refresh_field('time_slots');
+
+						if (slot_added) {
+							frappe.show_alert({
+								message: __('Time slots added'),
+								indicator: 'green'
+							});
+						}
+					}
+				},
+			});
+			d.fields_dict['create_slots'].df.onchange = () => {
+				set_maximum_no_of_appointments(d)
+			}
+			d.fields_dict['from_time'].df.onchange = () => {
+				set_maximum_no_of_appointments(d)
+			}
+			d.fields_dict['to_time'].df.onchange = () => {
+				set_maximum_no_of_appointments(d)
+			}
+			d.fields_dict['duration'].df.onchange = () => {
+				set_maximum_no_of_appointments(d)
+			}
+			d.show();
+		});
+	}
+});
+
+var set_maximum_no_of_appointments = function(d) {
+	if (!d.get_value("create_slots")) {
+		let interval = 0;
+		let max_apps = 0;
+		if (d.get_value("from_time") && d.get_value("to_time")) {
+			interval = (moment(d.get_value("from_time"), 'HH:mm:ss') - moment(d.get_value("to_time"), 'HH:mm:ss')) / 60000 | 0;
+			max_apps = Math.abs(interval) / d.get_value("duration")
+			d.set_value("maximum_appointments", Math.floor(max_apps))
+		}
+	} else {
+		d.set_value("maximum_appointments", 0)
+	}
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_schedule/practitioner_schedule.json
@@ -0,0 +1,84 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:schedule_name",
+ "creation": "2017-05-03 17:28:03.926787",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "disabled",
+  "column_break_2",
+  "allow_video_conferencing",
+  "schedule_details_section",
+  "schedule_name",
+  "time_slots"
+ ],
+ "fields": [
+  {
+   "fieldname": "schedule_name",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Schedule Name",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "time_slots",
+   "fieldtype": "Table",
+   "label": "Time Slots",
+   "options": "Healthcare Schedule Time Slot"
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled",
+   "print_hide": 1
+  },
+  {
+   "fieldname": "schedule_details_section",
+   "fieldtype": "Section Break",
+   "label": "Schedule Details"
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "allow_video_conferencing",
+   "fieldtype": "Check",
+   "label": "Allow Video Conferencing"
+  }
+ ],
+ "links": [],
+ "modified": "2024-09-14 22:34:24.578369",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Practitioner Schedule",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_schedule/practitioner_schedule.py
@@ -0,0 +1,27 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.utils import time_diff
+
+
+class PractitionerSchedule(Document):
+	def autoname(self):
+		self.name = self.schedule_name
+
+	def validate(self):
+		if self.time_slots:
+			for slots in self.time_slots:
+				if slots.get("from_time") and slots.get("to_time") and slots.get("duration"):
+					time_diff_in_mins = (
+						time_diff(slots.get("from_time"), slots.get("to_time")).total_seconds() / 60
+					)
+					maximum_apps = int(abs(time_diff_in_mins) / slots.get("duration"))
+					if slots.get("maximum_appointments") > maximum_apps:
+						msg = _("Maximum appointments cannot be more than {0} in row #{1}").format(
+							maximum_apps, slots.get("idx")
+						)
+						frappe.throw(msg)
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_schedule/test_practitioner_schedule.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPractitionerSchedule(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_service_unit_schedule/practitioner_service_unit_schedule.json
@@ -0,0 +1,110 @@
+{
+ "allow_copy": 0, 
+ "allow_events_in_timeline": 0, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 0, 
+ "allow_rename": 0, 
+ "beta": 0,
+ "creation": "2017-11-16 12:19:17.163786", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "", 
+ "editable_grid": 1, 
+ "engine": "InnoDB", 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_in_quick_entry": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "schedule", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Schedule", 
+   "length": 0, 
+   "no_copy": 0, 
+   "options": "Practitioner Schedule", 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "translatable": 0, 
+   "unique": 0
+  }, 
+  {
+   "allow_bulk_edit": 0, 
+   "allow_in_quick_entry": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "service_unit", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Service Unit", 
+   "length": 0, 
+   "no_copy": 0, 
+   "options": "Healthcare Service Unit", 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 0, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "translatable": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 1, 
+ "max_attachments": 0, 
+ "modified": "2018-11-04 03:33:07.936958", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Practitioner Service Unit Schedule", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "track_changes": 1, 
+ "track_seen": 0, 
+ "track_views": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/practitioner_service_unit_schedule/practitioner_service_unit_schedule.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class PractitionerServiceUnitSchedule(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/pre_medication_sheet/pre_medication_sheet.json
@@ -0,0 +1,96 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "creation": "2024-07-02 04:51:09.498302",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "pre_medication_section",
+  "pre_medicatuib",
+  "dose",
+  "cdose",
+  "duration",
+  "date_time",
+  "column_break_fopx",
+  "route",
+  "dilute",
+  "vol",
+  "day"
+ ],
+ "fields": [
+  {
+   "fieldname": "pre_medicatuib",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Pre Med",
+   "reqd": 1
+  },
+  {
+   "fieldname": "dose",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Dose",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cdose",
+   "fieldtype": "Data",
+   "label": "C.Dose"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Data",
+   "label": "Route"
+  },
+  {
+   "fieldname": "dilute",
+   "fieldtype": "Data",
+   "label": "Dilute"
+  },
+  {
+   "fieldname": "vol",
+   "fieldtype": "Data",
+   "label": "vol"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Data",
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Duration",
+   "reqd": 1
+  },
+  {
+   "fieldname": "day",
+   "fieldtype": "Data",
+   "label": "Day"
+  },
+  {
+   "fieldname": "pre_medication_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medication"
+  },
+  {
+   "fieldname": "date_time",
+   "fieldtype": "Datetime",
+   "label": "Date / Time"
+  },
+  {
+   "fieldname": "column_break_fopx",
+   "fieldtype": "Column Break"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2024-07-06 07:51:28.295924",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Pre Medication Sheet",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/pre_medication_sheet/pre_medication_sheet.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class PreMedicationSheet(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_dosage/prescription_dosage.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Prescription Dosage', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_dosage/prescription_dosage.json
@@ -0,0 +1,145 @@
+{
+ "allow_copy": 0, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "field:dosage", 
+ "beta": 0,
+ "creation": "2016-09-16 15:49:25.327610", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "Document", 
+ "editable_grid": 0, 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "dosage", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Dosage", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }, 
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "dosage_strength", 
+   "fieldtype": "Table", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 0, 
+   "in_standard_filter": 0, 
+   "length": 0, 
+   "no_copy": 0, 
+   "options": "Dosage Strength", 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 0, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2017-10-05 11:20:47.558464", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Prescription Dosage", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }, 
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Physician", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }
+ ], 
+ "quick_entry": 0, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "search_fields": "dosage", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "title_field": "", 
+ "track_changes": 1, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_dosage/prescription_dosage.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class PrescriptionDosage(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_dosage/test_prescription_dosage.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPrescriptionDosage(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_duration/prescription_duration.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Prescription Duration', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_duration/prescription_duration.json
@@ -0,0 +1,145 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "", 
+ "beta": 0,
+ "creation": "2016-09-16 15:50:28.895789", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "Document", 
+ "editable_grid": 0, 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "number", 
+   "fieldtype": "Int", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Number", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }, 
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "period", 
+   "fieldtype": "Select", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 0, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Period", 
+   "length": 0, 
+   "no_copy": 0, 
+   "options": "Hour\nDay\nWeek\nMonth", 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2017-08-31 13:42:51.325725", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Prescription Duration", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }, 
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Physician", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }
+ ], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "search_fields": "", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "", 
+ "sort_order": "ASC", 
+ "track_changes": 1, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_duration/prescription_duration.py
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+from frappe.utils import cstr
+
+
+class PrescriptionDuration(Document):
+	def autoname(self):
+		self.name = " ".join(filter(None, [cstr(self.get(f)).strip() for f in ["number", "period"]]))
+
+	def get_days(self):
+		days = 0
+		duration = self
+		if duration.period == "Day":
+			days = duration.number
+		if duration.period == "Hour":
+			days = (duration.number) / 24
+		if duration.period == "Week":
+			days = duration.number * 7
+		if duration.period == "Month":
+			days = duration.number * 30
+		return days
+
+	def get_weeks(self):
+		weeks = 0
+		duration = self
+		if duration.period == "Day":
+			weeks = (duration.number) / 7
+		# if(duration.period == 'Hour'):
+		# 	weeks = (duration.number)/x
+		if duration.period == "Week":
+			weeks = duration.number
+		if duration.period == "Month":
+			weeks = duration.number * 4
+		return weeks
+
+	def get_months(self):
+		months = 0
+		duration = self
+		if duration.period == "Day":
+			months = (duration.number) / 30
+		# if(duration.period == 'Hour'):
+		# 	months = (duration.number)/x
+		if duration.period == "Week":
+			months = (duration.number) / 4
+		if duration.period == "Month":
+			months = duration.number
+		return months
+
+	def get_hours(self):
+		hours = 0
+		duration = self
+		if duration.period == "Day":
+			hours = duration.number * 24
+		if duration.period == "Hour":
+			hours = duration.number
+		if duration.period == "Week":
+			hours = (duration.number * 24) * 7
+		if duration.period == "Month":
+			hours = (duration.number * 24) * 30
+		return hours
+
+	def get_minutes(self):
+		minutes = 0
+		duration = self
+		if duration.period == "Day":
+			minutes = duration.number * 1440
+		if duration.period == "Hour":
+			minutes = duration.number * 60
+		if duration.period == "Week":
+			minutes = duration.number * 10080
+		if duration.period == "Month":
+			minutes = duration.number * 43800
+		return minutes
--- /dev/null
+++ b/healthcare/healthcare/doctype/prescription_duration/test_prescription_duration.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestPrescriptionDuration(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/procedure_prescription/procedure_prescription.json
@@ -0,0 +1,145 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "creation": "2017-11-17 15:52:48.324157",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "procedure",
+  "procedure_name",
+  "department",
+  "practitioner",
+  "service_request",
+  "column_break_ky11",
+  "date",
+  "comments",
+  "appointment_booked",
+  "procedure_created",
+  "invoiced",
+  "section_break_ggcp",
+  "patient_care_type",
+  "column_break_ld7o",
+  "intent",
+  "priority"
+ ],
+ "fields": [
+  {
+   "fieldname": "procedure",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Clinical Procedure",
+   "options": "Clinical Procedure Template",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "procedure.template",
+   "fieldname": "procedure_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Procedure Name"
+  },
+  {
+   "fetch_from": "procedure.medical_department",
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Referring Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Date"
+  },
+  {
+   "fieldname": "comments",
+   "fieldtype": "Small Text",
+   "label": "Comments",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "appointment_booked",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Appointment Booked",
+   "search_index": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "procedure_created",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Procedure Created",
+   "no_copy": 1,
+   "search_index": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "section_break_ggcp",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "column_break_ld7o",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "column_break_ky11",
+   "fieldtype": "Column Break"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "service_request",
+   "fieldtype": "Data",
+   "label": "Service Request",
+   "no_copy": 1,
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2024-07-30 19:20:15.592380",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Procedure Prescription",
+ "owner": "Administrator",
+ "permissions": [],
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/procedure_prescription/procedure_prescription.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class ProcedurePrescription(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_collection/sample_collection.js
@@ -0,0 +1,384 @@
+// Copyright (c) 2016, ESS and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Sample Collection', {
+	onload: function(frm) {
+		frappe.realtime.on("observation_creation_progress", (status) => {
+			if (status == "Completed") {
+				frm.reload_doc();
+				frappe.dom.unfreeze();
+			}
+		})
+	},
+	refresh: function(frm) {
+		frm.fields_dict.observation_sample_collection.grid.add_custom_button(__("Mark Collected"), () => {
+			selected_child = frm.fields_dict.observation_sample_collection.grid.get_selected_children()
+			if (selected_child.length > 0) {
+				frappe.confirm(__("Are you sure you want to mark selected samples as Collected"), function () {
+					frappe.dom.freeze(__('Creating Observations! Please Wait...'));
+					frappe.call({
+						"method": "healthcare.healthcare.doctype.sample_collection.sample_collection.create_observation",
+						args: {
+							selected: selected_child,
+							sample_collection: frm.doc.name
+						},
+						freeze: true,
+						freeze_message: __("Marking Collected..."),
+						callback: function (r) {
+							if (!r.exc) {
+								frm.reload_doc();
+							}
+						}
+					});
+				});
+			} else {
+				frappe.show_alert({
+					"message": "Select atleast one Sample",
+					"indicator": "orange",
+				});
+			}
+		}).addClass("btn-mark-collected");
+
+		if (frappe.defaults.get_default('create_sample_collection_for_lab_test')) {
+			frm.add_custom_button(__('View Lab Tests'), function() {
+				frappe.route_options = {'sample': frm.doc.name};
+				frappe.set_route('List', 'Lab Test');
+			});
+		}
+
+		frm.set_query("healthcare_service_unit", "observation_sample_collection", function() {
+			return {
+				filters: {
+					"is_group": 0
+				}
+			};
+		})
+
+		if(!frm.doc.__islocal) {
+			frm.add_custom_button(__(`Print Barcode`), function () {
+				print_barcode(frm);
+			});
+		}
+	},
+
+	patient: function(frm) {
+		if(frm.doc.patient){
+			frappe.call({
+				'method': 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+				args: {
+					patient: frm.doc.patient
+				},
+				callback: function (data) {
+					var age = null;
+					if (data.message.dob){
+						age = calculate_age(data.message.dob);
+					}
+					frappe.model.set_value(frm.doctype,frm.docname, 'patient_age', age);
+					frappe.model.set_value(frm.doctype,frm.docname, 'patient_sex', data.message.sex);
+				}
+			});
+		}
+	}
+});
+
+frappe.ui.form.on("Observation Sample Collection", {
+	sample: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		frappe.db.get_value("Lab Test Sample", row.sample, ["sample_type", "sample_uom", "container_closure_color"])
+			.then(r => {
+				let values = r.message;
+				frappe.model.set_value(cdt, cdn, 'sample_type', values.sample_type);
+				frappe.model.set_value(cdt, cdn, 'uom', values.base_billing_amount);
+				frappe.model.set_value(cdt, cdn, 'container_closure_color', values.container_closure_color);
+			})
+	},
+	show_components: function(frm, cdt, cdn) {
+		var row = locals[cdt][cdn];
+		if (row.has_component) {
+			let d = new frappe.ui.Dialog({
+				title: 'Collect Samples',
+				fields: [
+					{
+						label: 'Component Observations',
+						fieldname: 'items',
+						fieldtype: 'Table',
+						cannot_add_rows: false,
+						is_editable_grid: true,
+						data: [],
+						in_place_edit: true,
+						fields: [
+							{
+								"fetch_from": "sample.sample_type",
+								"fieldname": "sample_type",
+								"fieldtype": "Link",
+								"label": "Sample Type",
+								"options": "Sample Type",
+								"read_only": 1
+							},
+							{
+								"fetch_from": "sample.sample_uom",
+								"fieldname": "uom",
+								"fieldtype": "Link",
+								"label": "UOM",
+								"options": "Lab Test UOM",
+								"read_only": 1
+							},
+							{
+								"columns": 2,
+								"fieldname": "observation_template",
+								"fieldtype": "Link",
+								"in_list_view": 1,
+								"label": "Observation Template",
+								"options": "Observation Template"
+							},
+							{
+								"columns": 2,
+								"fieldname": "status",
+								"fieldtype": "Select",
+								"in_list_view": 1,
+								"default": "Open",
+								"label": "Status",
+								"options": "Open\nCollected",
+								"read_only": 1
+							},
+							{
+								"columns": 2,
+								"default": "Urine",
+								"fetch_from": "observation_template.sample",
+								"fieldname": "sample",
+								"fieldtype": "Link",
+								"in_list_view": 1,
+								"label": "Sample",
+								"options": "Lab Test Sample"
+							},
+							{
+								"fieldname": "collection_date_time",
+								"fieldtype": "Datetime",
+								"in_list_view": 1,
+								"label": "Collection Date Time",
+								"read_only": 1
+							},
+							{
+								"fieldname": "reference_doctype",
+								"fieldtype": "Link",
+								"label": "Reference Doctype",
+								"options": "DocType",
+								"read_only": 1
+							},
+							{
+								"fieldname": "reference_docname",
+								"fieldtype": "Dynamic Link",
+								"label": "Reference Docname",
+								"options": "reference_doctype",
+								"read_only": 1
+							},
+							{
+								"fetch_from": "observation_template.sample_qty",
+								"fetch_if_empty": 1,
+								"fieldname": "sample_qty",
+								"fieldtype": "Float",
+								"label": "Quantity"
+							},
+							{
+								"columns": 1,
+								"fetch_from": "sample.container_closure_color",
+								"fieldname": "container_closure_color",
+								"fieldtype": "Color",
+								"in_list_view": 1,
+								"label": "Color",
+								"read_only": 1
+							},
+							{
+								"columns": 1,
+								"fieldname": "component_observation_parent",
+								"fieldtype": "Link",
+								"label": "component_observation_parent",
+								"read_only": 1
+							},
+							{
+								"default": "0",
+								"fetch_from": "observation_template.has_component",
+								"fieldname": "has_component",
+								"fieldtype": "Check",
+								"label": "Has Component",
+								"read_only": 1
+							},
+							{
+								"fieldname": "specimen",
+								"fieldtype": "Data",
+								"label": "Specimen",
+								"read_only": 1
+							},
+						],
+					},
+				],
+			});
+			if (row.component_observations) {
+				$.each(JSON.parse(row.component_observations), function (k, item) {
+					// if (item.status == "Open") {
+						d.fields_dict.items.df.data.push(item);
+					// }
+				});
+				// if (d.fields_dict.items.df.data.length==0) {
+				// 	frappe.show_alert({
+				// 		indicator: 'red',
+				// 		message: __('Sample Already Collected')
+				// 	});
+				// }
+			}
+			d.fields_dict.items.grid.refresh();
+			d.fields_dict.items.$wrapper.find('.grid-add-row').remove();
+
+			d.fields_dict.items.grid.add_custom_button(__("Mark Collected"), () => {
+				let selected_row = d.fields_dict.items.grid.get_selected_children();
+				if (selected_row.length > 0) {
+					frappe.confirm(__("Are you sure you want to mark selected samples as Collected"), function () {
+						frappe.dom.freeze(__('Creating Observations! Please Wait...'));
+						frappe.call({
+							"method": "healthcare.healthcare.doctype.sample_collection.sample_collection.create_observation",
+							args: {
+								selected: selected_row,
+								sample_collection: frm.doc.name,
+								component_observations: row.component_observations,
+								child_name: row.name
+							},
+							freeze: true,
+							freeze_message: __("Marking Collected..."),
+							callback: function (r) {
+								if (!r.exc) {
+									d.hide()
+									frm.reload_doc();
+								}
+							}
+						});
+					});
+				} else {
+					frappe.show_alert({
+						"message": "Select atleast one Sample",
+						"indicator": "orange",
+					});
+				}
+			});
+
+			d.show();
+			d.$wrapper.find('.modal-content').css("width", "800px");
+		}
+	}
+})
+
+var calculate_age = function(birth) {
+	var	ageMS = Date.parse(Date()) - Date.parse(birth);
+	var	age = new Date();
+	age.setTime(ageMS);
+	var	years =  age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
+
+var print_barcode = function(frm) {
+	let d = new frappe.ui.Dialog({
+		 title: 'Collect Samples',
+		 fields: [
+			 {
+				 label: 'Specimen Barcodes',
+				 fieldname: 'items',
+				 fieldtype: 'Table',
+				 cannot_add_rows: true,
+				 is_editable_grid: true,
+				 data: [],
+				 fields: [
+					{
+						"fieldname": "specimen",
+						"fieldtype": "Link",
+						"label": "Specimen",
+						"options": "Specimen",
+						"read_only": 1,
+						"in_list_view": 1,
+					},
+					{
+						"fieldname": "sample_type",
+						"fieldtype": "Link",
+						"label": "Sample Type",
+						"options": "Sample Type",
+						"read_only": 1,
+						"in_list_view": 1,
+					},
+					{
+						"fieldname": "barcode",
+						"fieldtype": "Barcode",
+						"label": "Barcode",
+					},
+				],
+			},
+		],
+	});
+	d.set_primary_action(__("Print"), (args) => {
+		let selected_list = [];
+		let selected_row = d.fields_dict.items.grid.get_selected_children();
+		$.each(selected_row, function (k, val) {
+			selected_list.push(val.barcode);
+		});
+			if (!selected_list.length ) {
+			    frappe.show_alert({
+                    message:__('Please select atleast one specimen!'),
+                    indicator:'orange'
+                }, 5);
+			    return;
+			}
+			const default_print_format = frappe.get_meta(frm.doc.doctype).default_print_format;
+			const print_format = "Specimen Barcode";
+			const doc_names = JSON.stringify(selected_list);
+			const letterhead = args.letter_sel;
+
+			let pdf_options = JSON.stringify({
+				"page-height": "25mm",
+				"page-width": "50mm",
+			});
+
+			const w = window.open(
+				"/api/method/frappe.utils.print_format.download_multi_pdf?" +
+					"doctype=" +
+					encodeURIComponent("Specimen") +
+					"&name=" +
+					encodeURIComponent(doc_names) +
+					"&format=" +
+					encodeURIComponent(print_format) +
+					"&no_letterhead=1" +
+					"&options=" +
+					encodeURIComponent(pdf_options)
+			);
+
+			if (!w) {
+				frappe.msgprint(__("Please enable pop-ups"));
+				return;
+			}
+		});
+	if (frm.doc.observation_sample_collection) {
+		let samples = [];
+		$.each(frm.doc.observation_sample_collection, function (k, val) {
+			if (val.has_component === 0 && val.specimen) {
+				if (!samples.includes(val.specimen)) {
+					d.fields_dict.items.df.data.push({
+						"specimen": val.specimen,
+						"barcode": val.specimen,
+						"sample_type": val.sample_type,
+					});
+					samples.push(val.specimen);
+				}
+			} else if (val.has_component === 1 && JSON.parse(val.component_observations).length > 0) {
+				$.each(JSON.parse(val.component_observations), function (j, comp) {
+					if (comp.specimen && !samples.includes(comp.specimen)) {
+						d.fields_dict.items.df.data.push({
+							"specimen": comp.specimen,
+							"barcode": comp.specimen,
+							"sample_type": comp.sample_type,
+						});
+						samples.push(comp.specimen);
+					}
+				});
+			}
+		});
+	}
+	d.fields_dict.items.grid.refresh();
+	d.show();
+	d.$wrapper.find('.modal-content').css("width", "800px");
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_collection/sample_collection.json
@@ -0,0 +1,341 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2016-04-05 15:58:18.076977",
+ "doctype": "DocType",
+ "document_type": "Document",
+ "engine": "InnoDB",
+ "field_order": [
+  "patient_details_section",
+  "naming_series",
+  "patient",
+  "patient_name",
+  "patient_age",
+  "patient_sex",
+  "referring_practitioner",
+  "column_break_4",
+  "company",
+  "status",
+  "inpatient_record",
+  "collection_point",
+  "invoiced",
+  "section_break_6",
+  "sample",
+  "sample_uom",
+  "sample_qty",
+  "column_break_10",
+  "collected_by",
+  "collected_time",
+  "num_print",
+  "section_break_xap8",
+  "observation_sample_collection",
+  "sample_html",
+  "section_break_15",
+  "sample_details",
+  "section_break_put4",
+  "service_request",
+  "reference_doc",
+  "reference_name"
+ ],
+ "fields": [
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "bold": 1,
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Series",
+   "no_copy": 1,
+   "options": "HLC-SC-.YYYY.-",
+   "print_hide": 1,
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Invoiced",
+   "no_copy": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": ".patient",
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "read_only_depends_on": "eval:[\"Partly Collected\", \"Collected\"].includes(doc.status);",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break",
+   "hide_days": 1,
+   "hide_seconds": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "read_only_depends_on": "eval:[\"Partly Collected\", \"Collected\"].includes(doc.status);"
+  },
+  {
+   "depends_on": "!doc.observation_sample_collection",
+   "fieldname": "section_break_6",
+   "fieldtype": "Section Break",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Sample Details"
+  },
+  {
+   "fieldname": "sample",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Sample",
+   "options": "Lab Test Sample",
+   "search_index": 1
+  },
+  {
+   "fetch_from": "sample.sample_uom",
+   "fieldname": "sample_uom",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "UOM",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break",
+   "hide_days": 1,
+   "hide_seconds": 1
+  },
+  {
+   "fieldname": "collected_by",
+   "fieldtype": "Link",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_user_permissions": 1,
+   "label": "Collected By",
+   "options": "User"
+  },
+  {
+   "fieldname": "collected_time",
+   "fieldtype": "Datetime",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Collected On"
+  },
+  {
+   "allow_on_submit": 1,
+   "default": "1",
+   "description": "Number of prints required for labelling the samples",
+   "fieldname": "num_print",
+   "fieldtype": "Int",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "No. of prints",
+   "print_hide": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "section_break_15",
+   "fieldtype": "Section Break",
+   "hide_days": 1,
+   "hide_seconds": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "sample_qty",
+   "fieldtype": "Float",
+   "hidden": 1,
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "in_list_view": 1,
+   "label": "Quantity"
+  },
+  {
+   "fieldname": "sample_details",
+   "fieldtype": "Long Text",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "ignore_xss_filter": 1,
+   "label": "Collection Details"
+  },
+  {
+   "fieldname": "patient_details_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Pending\nPartly Collected\nCollected",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_xap8",
+   "fieldtype": "Section Break",
+   "label": "Samples"
+  },
+  {
+   "fieldname": "observation_sample_collection",
+   "fieldtype": "Table",
+   "label": "Observation Sample Collection",
+   "options": "Observation Sample Collection"
+  },
+  {
+   "fieldname": "section_break_put4",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "label": "Service Request",
+   "options": "Service Request",
+   "read_only": 1
+  },
+  {
+   "fieldname": "collection_point",
+   "fieldtype": "Link",
+   "label": "Collection Point",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "label": "Reference Doc",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Dynamic Link",
+   "label": "Reference Name",
+   "options": "reference_doc",
+   "read_only": 1
+  },
+  {
+   "fieldname": "sample_html",
+   "fieldtype": "HTML",
+   "label": "Sample HTML"
+  },
+  {
+   "fieldname": "referring_practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Referring Practitioner",
+   "options": "Healthcare Practitioner",
+   "read_only_depends_on": "referring_practitioner"
+  }
+ ],
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Diagnostic Report",
+   "link_fieldname": "sample_collection"
+  }
+ ],
+ "modified": "2023-10-13 06:57:29.989715",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Sample Collection",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "amend": 1,
+   "cancel": 1,
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Laboratory User",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, sample",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_collection/sample_collection.py
@@ -0,0 +1,270 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe.model.document import Document
+from frappe.utils import now_datetime
+
+from healthcare.healthcare.doctype.observation.observation import add_observation
+from healthcare.healthcare.doctype.observation_template.observation_template import (
+	get_observation_template_details,
+)
+
+
+class SampleCollection(Document):
+	def after_insert(self):
+		if self.observation_sample_collection:
+			for obs in self.observation_sample_collection:
+				if obs.get("has_component"):
+					data = set_component_observation_data(obs.get("observation_template"))
+					if data and len(data) > 0:
+						frappe.db.set_value(
+							"Observation Sample Collection",
+							obs.get("name"),
+							{
+								"component_observations": json.dumps(data),
+							},
+						)
+
+	def validate(self):
+		if self.observation_sample_collection:
+			for obs in self.observation_sample_collection:
+				if obs.get("has_component") and obs.get("component_observations"):
+					component_observations = json.loads(obs.get("component_observations"))
+					if not any((comp["status"] == "Open") for comp in component_observations):
+						obs.status = "Collected"
+
+		if not any((obs.get("status") == "Open") for obs in self.observation_sample_collection):
+			self.status = "Collected"
+		else:
+			self.status = "Partly Collected"
+
+	# def before_submit(self):
+	# 	if [sample for sample in self.observation_sample_collection if sample.status != "Collected"]:
+	# 		frappe.throw(
+	# 			msg=_("Cannot Submit, not all samples are marked as 'Collected'."), title=_("Not Allowed")
+	# 		)
+
+	def on_submit(self):
+		if self.observation_sample_collection:
+			for obs in self.observation_sample_collection:
+				if obs.get("service_request"):
+					frappe.db.set_value(
+						"Service Request", obs.get("service_request"), "status", "completed-Request Status"
+					)
+
+	def on_cancel(self):
+		if self.observation_sample_collection:
+			for obs in self.observation_sample_collection:
+				if obs.get("service_request"):
+					frappe.db.set_value(
+						"Service Request", obs.get("service_request"), "status", "active-Request Status"
+					)
+
+		exist_diagnostic_report = frappe.db.exists(
+			"Diagnostic Report",
+			{"sample_collection": self.name},
+		)
+		if exist_diagnostic_report:
+			frappe.delete_doc("Diagnostic Report", exist_diagnostic_report)
+
+
+@frappe.whitelist()
+def create_observation(selected, sample_collection, component_observations=None, child_name=None):
+	frappe.enqueue(
+		"healthcare.healthcare.doctype.sample_collection.sample_collection.insert_observation",
+		selected=selected,
+		sample_collection=sample_collection,
+		component_observations=component_observations,
+		child_name=child_name,
+	)
+
+
+def insert_observation(selected, sample_collection, component_observations=None, child_name=None):
+	try:
+		sample_col_doc = frappe.db.get_value(
+			"Sample Collection",
+			sample_collection,
+			["reference_name", "patient", "referring_practitioner"],
+			as_dict=1,
+		)
+		selected = json.loads(selected)
+		if component_observations and len(component_observations) > 0:
+			component_observations = json.loads(component_observations)
+		comp_obs_ref = create_specimen(sample_col_doc.get("patient"), selected, component_observations)
+		for i, obs in enumerate(selected):
+			parent_observation = obs.get("component_observation_parent")
+
+			if child_name:
+				parent_observation = frappe.db.get_value(
+					"Observation Sample Collection", child_name, "component_observation_parent"
+				)
+
+			if obs.get("status") == "Open":
+				# non has_component templates
+				if not obs.get("has_component") or obs.get("has_component") == 0:
+					observation = add_observation(
+						patient=sample_col_doc.get("patient"),
+						template=obs.get("observation_template"),
+						doc="Sample Collection",
+						docname=sample_collection,
+						parent=parent_observation,
+						specimen=comp_obs_ref.get(obs.get("name"))
+						or comp_obs_ref.get(i + 1)
+						or comp_obs_ref.get(obs.get("idx")),
+						invoice=sample_col_doc.get("reference_name"),
+						practitioner=sample_col_doc.get("referring_practitioner"),
+						child=obs.get("reference_child") if obs.get("reference_child") else "",
+						service_request=obs.get("service_request"),
+					)
+					if observation:
+						frappe.db.set_value(
+							"Observation Sample Collection",
+							obs.get("name"),
+							{
+								"status": "Collected",
+								"collection_date_time": now_datetime(),
+								"specimen": comp_obs_ref.get(obs.get("name")),
+							},
+						)
+				else:
+					# to deal the component template checked from main table and collected
+					if obs.get("component_observations"):
+						component_observations = json.loads(obs.get("component_observations"))
+						for j, comp in enumerate(component_observations):
+							observation = add_observation(
+								patient=sample_col_doc.get("patient"),
+								template=comp.get("observation_template"),
+								doc="Sample Collection",
+								docname=sample_collection,
+								parent=obs.get("component_observation_parent"),
+								specimen=comp_obs_ref.get(j + 1) or comp_obs_ref.get(obs.get("name")),
+								invoice=sample_col_doc.get("reference_name"),
+								practitioner=sample_col_doc.get("referring_practitioner"),
+								child=obs.get("reference_child") if obs.get("reference_child") else "",
+								service_request=obs.get("service_request"),
+							)
+							if observation:
+								comp["status"] = "Collected"
+								comp["collection_date_time"] = now_datetime()
+								comp["specimen"] = comp_obs_ref.get(j + 1) or comp_obs_ref.get(obs.get("name"))
+
+						frappe.db.set_value(
+							"Observation Sample Collection",
+							obs.get("name"),
+							{
+								"collection_date_time": now_datetime(),
+								"component_observations": json.dumps(component_observations, default=str),
+								"status": "Collected",
+								"specimen": comp_obs_ref.get(j + 1) or comp_obs_ref.get(obs.get("name")),
+							},
+						)
+			# to deal individually checked from component dialog
+			if component_observations:
+				for j, comp in enumerate(component_observations):
+					if comp.get("observation_template") == obs.get("observation_template"):
+						comp["status"] = "Collected"
+						comp["collection_date_time"] = now_datetime()
+						comp["specimen"] = comp_obs_ref.get(j + 1)
+
+		child_db_set_dict = {"component_observations": json.dumps(component_observations, default=str)}
+		# to set child table status Collected if all childs are Collected
+		if component_observations and not any(
+			(comp["status"] == "Open") for comp in component_observations
+		):
+			child_db_set_dict["status"] = "Collected"
+
+		if child_name:
+			frappe.db.set_value(
+				"Observation Sample Collection",
+				child_name,
+				child_db_set_dict,
+			)
+		if sample_collection:
+			non_collected_samples = frappe.db.get_all(
+				"Observation Sample Collection", {"parent": sample_collection, "status": ["!=", "Collected"]}
+			)
+			if non_collected_samples and len(non_collected_samples) > 0:
+				set_status = "Partly Collected"
+			else:
+				set_status = "Collected"
+
+			frappe.db.set_value("Sample Collection", sample_collection, "status", set_status)
+
+	except Exception as e:
+		frappe.log_error(message=e, title="Failed to mark Collected!")
+
+	frappe.publish_realtime(
+		event="observation_creation_progress",
+		message="Completed",
+		doctype="Sample Collection",
+		docname=sample_collection,
+	)
+
+
+def create_specimen(patient, selected, component_observations):
+	groups = {}
+	# to group by
+	for sel in selected:
+		if not sel.get("has_component") or sel.get("has_component") == 0:
+			key = (sel.get("medical_department"), sel.get("sample"), sel.get("container_closure_color"))
+			if key in groups:
+				groups[key].append(sel)
+			else:
+				groups[key] = [sel]
+		else:
+			if sel.get("component_observations"):
+				comp_observations = json.loads(sel.get("component_observations"))
+				for comp in comp_observations:
+					comp["name"] = sel.get("name")
+					key = (
+						comp.get("medical_department"),
+						comp.get("sample"),
+						comp.get("container_closure_color"),
+					)
+					if key in groups:
+						groups[key].append(comp)
+					else:
+						groups[key] = [comp]
+	obs_ref = {}
+	for gr in groups:
+		specimen = frappe.new_doc("Specimen")
+		specimen.received_time = now_datetime()
+		specimen.patient = patient
+		specimen.specimen_type = groups[gr][0].get("sample_type")
+		specimen.save()
+		for sub_grp in groups[gr]:
+			if component_observations:
+				obs_ref[sub_grp.get("idx")] = specimen.name
+			else:
+				obs_ref[sub_grp.get("name")] = specimen.name
+
+	return obs_ref
+
+
+def set_component_observation_data(observation_template):
+	sample_reqd_component_obs, non_sample_reqd_component_obs = get_observation_template_details(
+		observation_template
+	)
+	data = []
+	for d in sample_reqd_component_obs:
+		obs_temp = frappe.get_value(
+			"Observation Template",
+			d,
+			[
+				"sample_type",
+				"sample",
+				"medical_department",
+				"container_closure_color",
+				"name as observation_template",
+				"sample_qty",
+			],
+			as_dict=True,
+		)
+		obs_temp["status"] = "Open"
+		data.append(obs_temp)
+	return data
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_collection/sample_collection_list.js
@@ -0,0 +1,10 @@
+frappe.listview_settings['Sample Collection'] = {
+	get_indicator: function(doc) {
+		var colors = {
+            "Pending": "red",
+            "Partly Collected": "orange",
+            "Collected": "green",
+		};
+		return [__(doc.status), colors[doc.status], "status,=," + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_collection/test_sample_collection.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Sample Collection')
+
+
+class TestSampleCollection(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_type/sample_type.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Sample Type", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_type/sample_type.json
@@ -0,0 +1,48 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "field:sample_type",
+ "creation": "2023-06-15 13:12:49.591668",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "sample_type"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "sample_type",
+   "fieldtype": "Data",
+   "label": "Sample Type",
+   "unique": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-06-15 14:10:44.305408",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Sample Type",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": []
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_type/sample_type.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class SampleType(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sample_type/test_sample_type.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestSampleType(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity/sensitivity.js
@@ -0,0 +1,5 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Sensitivity', {
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity/sensitivity.json
@@ -0,0 +1,115 @@
+{
+ "allow_copy": 1, 
+ "allow_guest_to_view": 0, 
+ "allow_import": 1, 
+ "allow_rename": 1, 
+ "autoname": "field:sensitivity", 
+ "beta": 0,
+ "creation": "2016-02-23 11:12:54.623249", 
+ "custom": 0, 
+ "docstatus": 0, 
+ "doctype": "DocType", 
+ "document_type": "Setup", 
+ "editable_grid": 0, 
+ "fields": [
+  {
+   "allow_bulk_edit": 0, 
+   "allow_on_submit": 0, 
+   "bold": 0, 
+   "collapsible": 0, 
+   "columns": 0, 
+   "fieldname": "sensitivity", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "ignore_user_permissions": 0, 
+   "ignore_xss_filter": 1, 
+   "in_filter": 0, 
+   "in_global_search": 0, 
+   "in_list_view": 1, 
+   "in_standard_filter": 0, 
+   "label": "Sensitivity", 
+   "length": 0, 
+   "no_copy": 0, 
+   "permlevel": 0, 
+   "precision": "", 
+   "print_hide": 0, 
+   "print_hide_if_no_value": 0, 
+   "read_only": 0, 
+   "remember_last_selected_value": 0, 
+   "report_hide": 0, 
+   "reqd": 1, 
+   "search_index": 0, 
+   "set_only_once": 0, 
+   "unique": 0
+  }
+ ], 
+ "has_web_view": 0, 
+ "hide_heading": 0, 
+ "hide_toolbar": 0, 
+ "idx": 0, 
+ "image_view": 0, 
+ "in_create": 0, 
+ "is_submittable": 0, 
+ "issingle": 0, 
+ "istable": 0, 
+ "max_attachments": 0, 
+ "modified": "2017-10-05 11:19:12.110308", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "Sensitivity", 
+ "name_case": "", 
+ "owner": "Administrator", 
+ "permissions": [
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 0, 
+   "delete": 0, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Laboratory User", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 0
+  }, 
+  {
+   "amend": 0, 
+   "apply_user_permissions": 0, 
+   "cancel": 0, 
+   "create": 1, 
+   "delete": 1, 
+   "email": 1, 
+   "export": 1, 
+   "if_owner": 0, 
+   "import": 0, 
+   "permlevel": 0, 
+   "print": 1, 
+   "read": 1, 
+   "report": 1, 
+   "role": "Healthcare Administrator", 
+   "set_user_permissions": 0, 
+   "share": 1, 
+   "submit": 0, 
+   "write": 1
+  }
+ ], 
+ "quick_entry": 1, 
+ "read_only": 0, 
+ "read_only_onload": 0, 
+ "restrict_to_domain": "Healthcare", 
+ "search_fields": "sensitivity", 
+ "show_name_in_global_search": 0, 
+ "sort_field": "modified", 
+ "sort_order": "DESC", 
+ "title_field": "sensitivity", 
+ "track_changes": 1, 
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity/sensitivity.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class Sensitivity(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity/test_sensitivity.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Sensitivity')
+
+
+class TestSensitivity(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity_test_result/sensitivity_test_result.json
@@ -0,0 +1,103 @@
+{
+ "allow_copy": 1,
+ "allow_guest_to_view": 0,
+ "allow_import": 0,
+ "allow_rename": 0,
+ "beta": 0,
+ "creation": "2016-02-22 15:18:01.769903",
+ "custom": 0,
+ "docstatus": 0,
+ "doctype": "DocType",
+ "document_type": "Document",
+ "editable_grid": 1,
+ "fields": [
+  {
+   "allow_bulk_edit": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fieldname": "antibiotic",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 1,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Antibiotic",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Antibiotic",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "unique": 0
+  },
+  {
+   "allow_bulk_edit": 0,
+   "allow_on_submit": 0,
+   "bold": 0,
+   "collapsible": 0,
+   "columns": 0,
+   "fieldname": "antibiotic_sensitivity",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "ignore_user_permissions": 1,
+   "ignore_xss_filter": 0,
+   "in_filter": 0,
+   "in_global_search": 0,
+   "in_list_view": 1,
+   "in_standard_filter": 0,
+   "label": "Sensitivity",
+   "length": 0,
+   "no_copy": 0,
+   "options": "Sensitivity",
+   "permlevel": 0,
+   "precision": "",
+   "print_hide": 0,
+   "print_hide_if_no_value": 0,
+   "read_only": 0,
+   "remember_last_selected_value": 0,
+   "report_hide": 0,
+   "reqd": 0,
+   "search_index": 0,
+   "set_only_once": 0,
+   "unique": 0
+  }
+ ],
+ "has_web_view": 0,
+ "hide_heading": 0,
+ "hide_toolbar": 0,
+ "idx": 0,
+ "image_view": 0,
+ "in_create": 0,
+ "is_submittable": 0,
+ "issingle": 0,
+ "istable": 1,
+ "max_attachments": 0,
+ "modified": "2017-10-05 11:08:06.327972",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Sensitivity Test Result",
+ "name_case": "",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 0,
+ "read_only": 0,
+ "read_only_onload": 0,
+ "restrict_to_domain": "Healthcare",
+ "show_name_in_global_search": 0,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 0,
+ "track_seen": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/sensitivity_test_result/sensitivity_test_result.py
@@ -0,0 +1,10 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS and contributors
+# For license information, please see license.txt
+
+
+from frappe.model.document import Document
+
+
+class SensitivityTestResult(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request/service_request.js
@@ -0,0 +1,164 @@
+// Copyright (c) 2020, earthians and contributors
+// For license information, please see license.txt
+// {% include "healthcare/public/js/service_request.js" %}
+
+frappe.ui.form.on('Service Request', {
+	refresh: function(frm) {
+		frm.set_query('template_dt', function() {
+			let order_template_doctypes = [
+				"Therapy Type",
+				"Lab Test Template",
+				"Clinical Procedure Template",
+				"Appointment Type",
+				"Observation Template",
+				"Healthcare Activity"];
+			return {
+				filters: {
+					name: ['in', order_template_doctypes]
+				}
+			};
+		});
+
+		frm.set_query("status", function () {
+			return {
+				"filters": {
+					"code_system": "Request Status",
+				}
+			};
+		});
+
+		frm.trigger('setup_create_buttons');
+	},
+
+
+	setup_create_buttons: function(frm) {
+		if (frm.doc.docstatus !== 1 || frm.doc.status === 'Completed') return;
+
+		if (frm.doc.template_dt === 'Clinical Procedure Template') {
+
+			frm.add_custom_button(__('Clinical Procedure'), function() {
+				frappe.db.get_value("Clinical Procedure", {"service_request": frm.doc.name, "docstatus":["!=", 2]}, "name")
+				.then(r => {
+					if (Object.keys(r.message).length == 0) {
+						frm.trigger('make_clinical_procedure');
+					} else {
+						if (r.message && r.message.name) {
+							frappe.set_route("Form", "Clinical Procedure", r.message.name);
+							frappe.show_alert({
+								message: __(`Clinical Procedure is already created`),
+								indicator: "info",
+							});
+						}
+					}
+				})
+			}, __('Create'));
+
+
+		} else if (frm.doc.template_dt === 'Lab Test Template') {
+			frm.add_custom_button(__('Lab Test'), function() {
+				frappe.db.get_value("Lab Test", {"service_request": frm.doc.name, "docstatus":["!=", 2]}, "name")
+				.then(r => {
+					if (Object.keys(r.message).length == 0) {
+						frm.trigger('make_lab_test');
+					} else {
+						if (r.message && r.message.name) {
+							frappe.set_route("Form", "Lab Test", r.message.name);
+							frappe.show_alert({
+								message: __(`Lab Test is already created`),
+								indicator: "info",
+							});
+						}
+					}
+				})
+			}, __('Create'));
+
+
+		} else if (frm.doc.template_dt === 'Therapy Type') {
+			frm.add_custom_button(__("Therapy Session"), function() {
+				frappe.db.get_value("Therapy Session", {"service_request": frm.doc.name, "docstatus":["!=", 2]}, "name")
+				.then(r => {
+					if (Object.keys(r.message).length == 0) {
+						frm.trigger('make_therapy_session');
+					} else {
+						if (r.message && r.message.name) {
+							frappe.set_route("Form", "Therapy Session", r.message.name);
+							frappe.show_alert({
+								message: __(`Therapy Session is already created`),
+								indicator: "info",
+							});
+						}
+					}
+				})
+			}, __('Create'));
+
+		} else if (frm.doc.template_dt === "Observation Template") {
+			frm.add_custom_button(__('Observation'), function() {
+				frm.trigger('make_observation');
+			}, __('Create'));
+
+		}
+
+		frm.page.set_inner_btn_group_as_primary(__('Create'));
+	},
+
+	make_clinical_procedure: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.service_request.service_request.make_clinical_procedure',
+			args: { service_request: frm.doc },
+			freeze: true,
+			callback: function(r) {
+				var doclist = frappe.model.sync(r.message);
+				frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+			}
+		});
+	},
+
+	make_lab_test: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.service_request.service_request.make_lab_test',
+			args: { service_request: frm.doc },
+			freeze: true,
+			callback: function(r) {
+				var doclist = frappe.model.sync(r.message);
+				frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+			}
+		});
+	},
+
+	make_therapy_session: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.service_request.service_request.make_therapy_session',
+			args: { service_request: frm.doc },
+			freeze: true,
+			callback: function(r) {
+				var doclist = frappe.model.sync(r.message);
+				frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+			}
+		});
+	},
+
+	make_observation: function(frm) {
+		frappe.call({
+			method: 'healthcare.healthcare.doctype.service_request.service_request.make_observation',
+			args: { service_request: frm.doc },
+			freeze: true,
+			callback: function(r) {
+				if (r.message) {
+					var title = "";
+					var indicator =  "info";
+					if (r.message[2]) {
+						title = `${r.message[0]} is already created`
+					} else {
+						title = `${r.message[0]} is created`
+						indicator = "green"
+					}
+					frappe.show_alert({
+						message: __("{0}", [title]),
+						indicator: indicator,
+					});
+					frappe.set_route('Form', r.message[1], r.message[0]);
+				}
+			}
+		});
+	},
+});
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request/service_request.json
@@ -0,0 +1,606 @@
+{
+ "actions": [],
+ "allow_auto_repeat": 1,
+ "autoname": "naming_series:",
+ "beta": 1,
+ "creation": "2022-01-26 15:57:18.825681",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "title",
+  "naming_series",
+  "order_date",
+  "order_time",
+  "column_break_4",
+  "status",
+  "company",
+  "expected_date",
+  "patient_detail_section",
+  "patient",
+  "patient_name",
+  "patient_gender",
+  "patient_birth_date",
+  "patient_age_data",
+  "patient_age",
+  "patient_blood_group",
+  "column_break_16",
+  "patient_email",
+  "patient_mobile",
+  "inpatient_record",
+  "inpatient_status",
+  "order_source_section",
+  "practitioner",
+  "practitioner_email",
+  "medical_department",
+  "referred_to_practitioner",
+  "column_break_10",
+  "source_doc",
+  "order_group",
+  "sequence",
+  "order_details",
+  "staff_role",
+  "item_code",
+  "patient_care_type",
+  "column_break_14",
+  "intent",
+  "priority",
+  "order_specs_section",
+  "quantity",
+  "dosage_form",
+  "as_needed",
+  "dosage",
+  "period",
+  "occurrence_date",
+  "occurrence_time",
+  "healthcare_service_unit_type",
+  "column_break_91",
+  "order_description",
+  "patient_instructions",
+  "medical_code_section",
+  "codification_table",
+  "origin_section",
+  "order_reference_doctype",
+  "order_reference_name",
+  "column_break_9",
+  "source",
+  "referring_practitioner",
+  "reason_reference_doctype",
+  "reason_reference",
+  "order_group_doctype",
+  "amended_from",
+  "service_details_section",
+  "template_dt",
+  "template_dn",
+  "sample_collection_required",
+  "qty_invoiced",
+  "billing_status"
+ ],
+ "fields": [
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HSR-",
+   "reqd": 1
+  },
+  {
+   "depends_on": "order_group",
+   "fieldname": "sequence",
+   "fieldtype": "Int",
+   "label": "Sequence in Order Group"
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Today",
+   "fieldname": "order_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Order Date",
+   "reqd": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "origin_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Order Group Reference",
+   "read_only": 1
+  },
+  {
+   "fieldname": "order_group",
+   "fieldtype": "Dynamic Link",
+   "label": "Order Group",
+   "options": "source_doc"
+  },
+  {
+   "fieldname": "column_break_9",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "order_reference_doctype",
+   "fieldtype": "Link",
+   "label": "Order Reference DocType",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "order_reference_name",
+   "fieldtype": "Dynamic Link",
+   "label": "Order Reference Name",
+   "options": "order_reference_doctype"
+  },
+  {
+   "fieldname": "column_break_91",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "expected_date",
+   "fieldtype": "Date",
+   "label": "Expected By"
+  },
+  {
+   "description": "The role responsible for performing the service",
+   "fetch_from": "order_template.staff_role",
+   "fetch_if_empty": 1,
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  },
+  {
+   "fetch_from": "order_template.patient_care_type",
+   "fetch_if_empty": 1,
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "status",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Status",
+   "options": "Code Value",
+   "reqd": 1
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_code_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "default": "1",
+   "fieldname": "quantity",
+   "fieldtype": "Int",
+   "label": "Quantity"
+  },
+  {
+   "default": "0",
+   "description": "Perform the service only if there is a need. For example \"pain\", \"on flare-up\", etc.",
+   "fieldname": "as_needed",
+   "fieldtype": "Check",
+   "label": "Occurrence As Needed"
+  },
+  {
+   "fieldname": "healthcare_service_unit_type",
+   "fieldtype": "Link",
+   "label": "Healthcare Service Unit Type",
+   "options": "Healthcare Service Unit Type"
+  },
+  {
+   "fieldname": "reason_reference_doctype",
+   "fieldtype": "Link",
+   "label": "Reason Reference DocType",
+   "options": "DocType",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reason_reference",
+   "fieldtype": "Dynamic Link",
+   "label": "Reason Reference",
+   "options": "reason_reference_doctype",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "order_description",
+   "fieldtype": "Small Text",
+   "label": "Order Description"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_16",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "source",
+   "fieldtype": "Select",
+   "label": "Source",
+   "options": "Direct\nReferral\nExternal Referral",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "referring_practitioner",
+   "fieldtype": "Link",
+   "label": "Referring Practitioner",
+   "options": "Healthcare Practitioner",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Service Request",
+   "read_only": 1
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Ordered by Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "column_break_10",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "order_source_section",
+   "fieldtype": "Section Break",
+   "label": "Order Source"
+  },
+  {
+   "fetch_from": "practitioner.department",
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Int",
+   "hidden": 1,
+   "label": "Age",
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:doc.order_doctype===\"Medication\";",
+   "fieldname": "dosage_form",
+   "fieldtype": "Link",
+   "label": "Dosage Form",
+   "mandatory_depends_on": "eval:doc.order_doctype===\"Medication\";",
+   "options": "Dosage Form"
+  },
+  {
+   "depends_on": "eval:!doc.as_needed && doc.order_doctype===\"Medication\";",
+   "fieldname": "dosage",
+   "fieldtype": "Link",
+   "label": "Dosage",
+   "mandatory_depends_on": "eval:doc.order_doctype===\"Medication\";",
+   "options": "Prescription Dosage"
+  },
+  {
+   "fieldname": "referred_to_practitioner",
+   "fieldtype": "Link",
+   "label": "Referred to Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "depends_on": "order_template",
+   "fetch_from": "order_template.item",
+   "fieldname": "item_code",
+   "fieldtype": "Read Only",
+   "label": "Order Item Code",
+   "options": "Item"
+  },
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.inpatient_status",
+   "fieldname": "inpatient_status",
+   "fieldtype": "Data",
+   "label": "Inpatient Status",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_instructions",
+   "fieldtype": "Small Text",
+   "label": "Patient Instructions"
+  },
+  {
+   "default": "Patient Encounter",
+   "fieldname": "order_group_doctype",
+   "fieldtype": "Link",
+   "label": "Order Group Type",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "order_time",
+   "fieldtype": "Time",
+   "label": "Order Time",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.blood_group",
+   "fieldname": "patient_blood_group",
+   "fieldtype": "Select",
+   "label": "Blood Group",
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.email",
+   "fieldname": "patient_email",
+   "fieldtype": "Data",
+   "label": "Email",
+   "options": "Email",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.mobile",
+   "fieldname": "patient_mobile",
+   "fieldtype": "Data",
+   "label": "Mobile",
+   "options": "Phone",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "patient_birth_date",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "order_details",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "fieldname": "patient_detail_section",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "order_specs_section",
+   "fieldtype": "Section Break",
+   "label": "Order Specifications"
+  },
+  {
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "depends_on": "eval:!doc.as_needed && doc.order_doctype===\"Medication\";",
+   "fieldname": "period",
+   "fieldtype": "Link",
+   "label": "Period",
+   "options": "Prescription Duration"
+  },
+  {
+   "depends_on": "eval:!doc.as_needed && doc.order_doctype!==\"Medication\";",
+   "fieldname": "occurrence_date",
+   "fieldtype": "Date",
+   "label": "Occurrence Date"
+  },
+  {
+   "depends_on": "eval:!doc.as_needed && doc.order_doctype!==\"Medication\";",
+   "fieldname": "occurrence_time",
+   "fieldtype": "Time",
+   "label": "Occurrence Time"
+  },
+  {
+   "fieldname": "service_details_section",
+   "fieldtype": "Section Break",
+   "label": "Service Details"
+  },
+  {
+   "fieldname": "template_dt",
+   "fieldtype": "Link",
+   "label": "Order Template Type",
+   "options": "DocType",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "template_dn",
+   "fieldtype": "Dynamic Link",
+   "label": "Order Template",
+   "options": "template_dt",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "patient_age_data",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "qty_invoiced",
+   "fieldtype": "Float",
+   "label": "Quantity Invoiced",
+   "read_only": 1
+  },
+  {
+   "default": "Pending",
+   "fieldname": "billing_status",
+   "fieldtype": "Select",
+   "label": "Billing Status",
+   "options": "Pending\nPartly Invoiced\nInvoiced",
+   "read_only": 1
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "source_doc",
+   "fieldtype": "Link",
+   "label": "Source Doc",
+   "options": "DocType"
+  },
+  {
+   "default": "0",
+   "fieldname": "sample_collection_required",
+   "fieldtype": "Check",
+   "label": "Sample Collection Required",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "practitioner.user_id",
+   "fieldname": "practitioner_email",
+   "fieldtype": "Data",
+   "label": "Practitioner Email",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Lab Test",
+   "link_fieldname": "service_request"
+  },
+  {
+   "link_doctype": "Clinical Procedure",
+   "link_fieldname": "service_request"
+  },
+  {
+   "link_doctype": "Therapy Session",
+   "link_fieldname": "service_request"
+  }
+ ],
+ "modified": "2024-01-09 13:03:51.377653",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Service Request",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, order_group",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "title",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request/service_request.py
@@ -0,0 +1,405 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+import json
+
+from six import string_types
+
+import frappe
+from frappe import _
+from frappe.utils import now_datetime
+
+from healthcare.controllers.service_request_controller import ServiceRequestController
+from healthcare.healthcare.doctype.observation.observation import add_observation
+from healthcare.healthcare.doctype.observation_template.observation_template import (
+	get_observation_template_details,
+)
+from healthcare.healthcare.doctype.sample_collection.sample_collection import (
+	set_component_observation_data,
+)
+
+
+class ServiceRequest(ServiceRequestController):
+	def validate(self):
+		super().validate()
+		if self.template_dt and self.template_dn and not self.codification_table:
+			template_doc = frappe.get_doc(self.template_dt, self.template_dn)
+			for mcode in template_doc.codification_table:
+				self.append("codification_table", (frappe.copy_doc(mcode)).as_dict())
+
+	def set_title(self):
+		if frappe.flags.in_import and self.title:
+			return
+		self.title = f"{self.patient_name} - {self.template_dn}"
+
+	def before_insert(self):
+		self.status = "draft-Request Status"
+
+		if self.amended_from:
+			frappe.db.set_value("Service Request", self.amended_from, "status", "revoked-Request Status")
+
+		if self.template_dt == "Observation Template" and self.template_dn:
+			self.sample_collection_required = frappe.db.get_value(
+				"Observation Template", self.template_dn, "sample_collection_required"
+			)
+
+	def set_order_details(self):
+		if not self.template_dt and not self.template_dn:
+			frappe.throw(
+				_("Order Template Type and Order Template are mandatory to create Service Request"),
+				title=_("Missing Mandatory Fields"),
+			)
+
+		template = frappe.get_doc(self.template_dt, self.template_dn)
+		# set item code
+		self.item_code = template.get("item")
+
+		if not self.patient_care_type and template.get("patient_care_type"):
+			self.patient_care_type = template.patient_care_type
+
+		if not self.staff_role and template.get("staff_role"):
+			self.staff_role = template.staff_role
+
+		if not self.intent:
+			self.intent = frappe.db.get_single_value("Healthcare Settings", "default_intent")
+
+		if not self.priority:
+			self.priority = frappe.db.get_single_value("Healthcare Settings", "default_priority")
+
+	def update_invoice_details(self, qty):
+		"""
+		updates qty_invoiced and set  billing status
+		"""
+		qty_invoiced = self.qty_invoiced + qty
+		invoiced = 0
+		if qty_invoiced == 0:
+			status = "Pending"
+		if qty_invoiced < self.quantity:
+			status = "Partly Invoiced"
+		else:
+			invoiced = 1
+			status = "Invoiced"
+
+		self.db_set({"qty_invoiced": qty_invoiced, "billing_status": status})
+		if self.template_dt == "Lab Test Template":
+			dt = "Lab Test"
+		elif self.template_dt == "Clinical Procedure Template":
+			dt = "Clinical Procedure"
+		elif self.template_dt == "Therapy Type":
+			dt = "Therapy Session"
+		elif self.template_dt == "Observation Template":
+			dt = "Observation"
+		dt_name = frappe.db.get_value(dt, {"service_request": self.name})
+		frappe.db.set_value(dt, dt_name, "invoiced", invoiced)
+
+
+def update_service_request_status(service_request, service_dt, service_dn, status=None, qty=1):
+	# TODO: fix status updates from linked docs
+	set_service_request_status(service_request, status)
+
+
+@frappe.whitelist()
+def set_service_request_status(service_request, status):
+	frappe.db.set_value("Service Request", service_request, "status", status)
+
+
+@frappe.whitelist()
+def make_clinical_procedure(service_request):
+	if isinstance(service_request, string_types):
+		service_request = json.loads(service_request)
+		service_request = frappe._dict(service_request)
+
+	if (
+		frappe.db.get_single_value("Healthcare Settings", "process_service_request_only_if_paid")
+		and service_request.billing_status != "Invoiced"
+	):
+		frappe.throw(
+			_("Service Request need to be invoiced before proceeding"),
+			title=_("Payment Required"),
+		)
+
+	doc = frappe.new_doc("Clinical Procedure")
+	doc.procedure_template = service_request.template_dn
+	doc.service_request = service_request.name
+	doc.company = service_request.company
+	doc.patient = service_request.patient
+	doc.patient_name = service_request.patient_name
+	doc.patient_sex = service_request.patient_gender
+	doc.patient_age = service_request.patient_age_data
+	doc.inpatient_record = service_request.inpatient_record
+	doc.practitioner = service_request.practitioner
+	doc.start_date = service_request.occurrence_date
+	doc.start_time = service_request.occurrence_time
+	doc.medical_department = service_request.medical_department
+
+	return doc
+
+
+@frappe.whitelist()
+def make_lab_test(service_request):
+	if isinstance(service_request, string_types):
+		service_request = json.loads(service_request)
+		service_request = frappe._dict(service_request)
+
+	if (
+		frappe.db.get_single_value("Healthcare Settings", "process_service_request_only_if_paid")
+		and service_request.billing_status != "Invoiced"
+	):
+		frappe.throw(
+			_("Service Request need to be invoiced before proceeding"),
+			title=_("Payment Required"),
+		)
+
+	doc = frappe.new_doc("Lab Test")
+	doc.template = service_request.template_dn
+	doc.service_request = service_request.name
+	doc.company = service_request.company
+	doc.patient = service_request.patient
+	doc.patient_name = service_request.patient_name
+	doc.patient_sex = service_request.patient_gender
+	doc.patient_age = service_request.patient_age_data
+	doc.inpatient_record = service_request.inpatient_record
+	doc.email = service_request.patient_email
+	doc.mobile = service_request.patient_mobile
+	doc.practitioner = service_request.practitioner
+	doc.requesting_department = service_request.medical_department
+	doc.date = service_request.occurrence_date
+	doc.time = service_request.occurrence_time
+	doc.invoiced = service_request.invoiced
+
+	return doc
+
+
+@frappe.whitelist()
+def make_therapy_session(service_request):
+	if isinstance(service_request, string_types):
+		service_request = json.loads(service_request)
+		service_request = frappe._dict(service_request)
+
+	if (
+		frappe.db.get_single_value("Healthcare Settings", "process_service_request_only_if_paid")
+		and service_request.billing_status != "Invoiced"
+	):
+		frappe.throw(
+			_("Service Request need to be invoiced before proceeding"),
+			title=_("Payment Required"),
+		)
+
+	doc = frappe.new_doc("Therapy Session")
+	doc.therapy_type = service_request.template_dn
+	doc.service_request = service_request.name
+	doc.company = service_request.company
+	doc.patient = service_request.patient
+	doc.patient_name = service_request.patient_name
+	doc.gender = service_request.patient_gender
+	doc.patient_age = service_request.patient_age_data
+	doc.practitioner = service_request.practitioner
+	doc.department = service_request.medical_department
+	doc.start_date = service_request.occurrence_date
+	doc.start_time = service_request.occurrence_time
+	doc.invoiced = service_request.invoiced
+
+	return doc
+
+
+@frappe.whitelist()
+def make_observation(service_request):
+	if isinstance(service_request, string_types):
+		service_request = json.loads(service_request)
+		service_request = frappe._dict(service_request)
+
+	if (
+		frappe.db.get_single_value("Healthcare Settings", "process_service_request_only_if_paid")
+		and service_request.billing_status != "Invoiced"
+	):
+		frappe.throw(
+			_("Service Request need to be invoiced before proceeding"),
+			title=_("Payment Required"),
+		)
+
+	patient = frappe.get_doc("Patient", service_request.patient)
+	template = frappe.get_doc("Observation Template", service_request.template_dn)
+
+	sample_collection = ""
+	name_ref_in_child = check_observation_sample_exist(service_request)
+
+	if name_ref_in_child:
+		return name_ref_in_child[0], name_ref_in_child[1], "New"
+	else:
+		exist_sample_collection = frappe.db.exists(
+			"Sample Collection",
+			{
+				"reference_name": service_request.order_group,
+				"docstatus": 0,
+				"patient": service_request.patient,
+			},
+		)
+
+	if template.has_component:
+		if exist_sample_collection:
+			sample_collection = frappe.get_doc("Sample Collection", exist_sample_collection)
+		else:
+			sample_collection = create_sample_collection(patient, service_request)
+
+		# parent
+		observation = create_observation(service_request)
+
+		save_sample_collection = False
+		(
+			sample_reqd_component_obs,
+			non_sample_reqd_component_obs,
+		) = get_observation_template_details(service_request.template_dn)
+		if len(non_sample_reqd_component_obs) > 0:
+			for comp in non_sample_reqd_component_obs:
+				add_observation(
+					patient=service_request.patient,
+					template=comp,
+					doc="Patient Encounter",
+					docname=service_request.order_group,
+					parent=observation.name,
+				)
+
+		if len(sample_reqd_component_obs) > 0:
+			save_sample_collection = True
+			obs_template = frappe.get_doc("Observation Template", service_request.template_dn)
+			data = set_component_observation_data(service_request.template_dn)
+			# append parent template
+			sample_collection.append(
+				"observation_sample_collection",
+				{
+					"observation_template": service_request.template_dn,
+					"sample": obs_template.sample,
+					"sample_type": obs_template.sample_type,
+					"container_closure_color": frappe.db.get_value(
+						"Observation Template",
+						service_request.template_dn,
+						"container_closure_color",
+					),
+					"component_observations": json.dumps(data),
+					"uom": obs_template.uom,
+					"status": "Open",
+					"sample_qty": obs_template.sample_qty,
+					"component_observation_parent": observation.name,
+					"service_request": service_request.name,
+				},
+			)
+
+		if save_sample_collection:
+			sample_collection.save(ignore_permissions=True)
+
+	else:
+		if template.get("sample_collection_required"):
+			if exist_sample_collection:
+				sample_collection = frappe.get_doc("Sample Collection", exist_sample_collection)
+				sample_collection.append(
+					"observation_sample_collection",
+					{
+						"observation_template": service_request.template_dn,
+						"sample": template.sample,
+						"sample_type": template.sample_type,
+						"container_closure_color": frappe.db.get_value(
+							"Observation Template",
+							service_request.template_dn,
+							"container_closure_color",
+						),
+						"uom": template.uom,
+						"status": "Open",
+						"sample_qty": template.sample_qty,
+						"service_request": service_request.name,
+					},
+				)
+				sample_collection.save(ignore_permissions=True)
+			else:
+				sample_collection = create_sample_collection(patient, service_request, template)
+				sample_collection.save(ignore_permissions=True)
+		else:
+			observation = create_observation(service_request)
+
+	diagnostic_report = frappe.db.exists(
+		"Diagnostic Report", {"reference_name": service_request.order_group}
+	)
+	if not diagnostic_report:
+		insert_diagnostic_report(service_request, sample_collection)
+
+	if sample_collection:
+		return sample_collection.name, "Sample Collection"
+	elif observation:
+		return observation.name, "Observation"
+
+
+def create_sample_collection(patient, service_request, template=None):
+	sample_collection = frappe.new_doc("Sample Collection")
+	sample_collection.patient = patient.name
+	sample_collection.patient_age = patient.get_age()
+	sample_collection.patient_sex = patient.sex
+	sample_collection.company = service_request.company
+	sample_collection.reference_doc = service_request.source_doc
+	sample_collection.reference_name = service_request.order_group
+	if template:
+		sample_collection.append(
+			"observation_sample_collection",
+			{
+				"observation_template": service_request.template_dn,
+				"sample": template.sample,
+				"sample_type": template.sample_type,
+				"container_closure_color": frappe.db.get_value(
+					"Observation Template", service_request.template_dn, "container_closure_color"
+				),
+				"uom": template.uom,
+				"sample_qty": template.sample_qty,
+				"service_request": service_request.name,
+			},
+		)
+		sample_collection.save(ignore_permissions=True)
+	return sample_collection
+
+
+def create_observation(service_request):
+	doc = frappe.new_doc("Observation")
+	doc.posting_datetime = now_datetime()
+	doc.patient = service_request.patient
+	doc.observation_template = service_request.template_dn
+	doc.reference_doctype = "Patient Encounter"
+	doc.reference_docname = service_request.order_group
+	doc.service_request = service_request.name
+	doc.insert()
+	return doc
+
+
+def insert_diagnostic_report(doc, sample_collection=None):
+	diagnostic_report = frappe.new_doc("Diagnostic Report")
+	diagnostic_report.company = doc.company
+	diagnostic_report.patient = doc.patient
+	diagnostic_report.ref_doctype = doc.source_doc
+	diagnostic_report.docname = doc.order_group
+	diagnostic_report.practitioner = doc.practitioner
+	diagnostic_report.sample_collection = sample_collection
+	diagnostic_report.save(ignore_permissions=True)
+
+
+def check_observation_sample_exist(service_request):
+	name_ref_in_child = frappe.db.get_value(
+		"Observation Sample Collection",
+		{
+			"service_request": service_request.name,
+			"parenttype": "Sample Collection",
+			"docstatus": ["!=", 2],
+		},
+		"parent",
+	)
+	if name_ref_in_child:
+		return name_ref_in_child, "Sample Collection"
+	else:
+		exist_observation = frappe.db.exists(
+			"Observation",
+			{
+				"service_request": service_request.name,
+				"parent_observation": "",
+				"docstatus": ["!=", 2],
+			},
+		)
+		if exist_observation:
+			return exist_observation, "Observation"
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request/service_request_list.js
@@ -0,0 +1,17 @@
+frappe.listview_settings['Service Request'] = {
+	add_fields: ['name', 'status'],
+	filters: [['docstatus', '=', '1']],
+	has_indicator_for_cancelled: 1,
+	get_indicator: function (doc) {
+		return [__(doc.status), {
+			'draft-Request Status': 'orange',
+			'active-Request Status': 'green',
+			'on-hold-Request Status': 'yellow',
+			'completed-Request Status': 'blue',
+			'revoked-Request Status': 'grey',
+			'replaced-Request Status': 'grey',
+			'unknown-Request Status': 'grey',
+			'entered-in-error-Request Status': 'red',
+		}[doc.status], 'status,=,' + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request/test_service_request.py
@@ -0,0 +1,225 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+import unittest
+
+import frappe
+from frappe.utils import getdate, nowtime
+
+import erpnext
+
+from healthcare.healthcare.doctype.clinical_procedure.test_clinical_procedure import (
+	create_procedure,
+)
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+)
+from healthcare.healthcare.doctype.lab_test.test_lab_test import (
+	create_lab_test,
+	create_lab_test_template,
+)
+from healthcare.healthcare.doctype.observation_template.test_observation_template import (
+	create_observation_template,
+)
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_clinical_procedure_template,
+	create_healthcare_docs,
+)
+from healthcare.healthcare.doctype.service_request.service_request import make_clinical_procedure
+
+
+class TestServiceRequest(unittest.TestCase):
+	def test_creation_on_encounter_submission(self):
+		patient, practitioner = create_healthcare_docs()
+		insulin_resistance_template = create_lab_test_template()
+		procedure_template = create_clinical_procedure_template()
+		procedure_template.allow_stock_consumption = 1
+		encounter = create_encounter(
+			patient,
+			practitioner,
+			"lab_test_prescription",
+			insulin_resistance_template,
+			procedure_template,
+			submit=True,
+		)
+		self.assertTrue(frappe.db.exists("Service Request", {"order_group": encounter.name}))
+		service_request = frappe.db.get_all(
+			"Service Request", {"order_group": encounter.name}, ["name", "template_dt"]
+		)
+		if service_request:
+			for serv in service_request:
+				service_request_doc = frappe.get_doc("Service Request", serv.get("name"))
+				service_request_doc.submit()
+				if serv.get("name"):
+					if serv.get("template_dt") == "Lab Test Template":
+						template = insulin_resistance_template
+						type = "lab_test_prescription"
+						doc = "Lab Test"
+						test = create_lab_test(template)
+						test.service_request = serv.get("name")
+						test.descriptive_test_items[0].result_value = 1
+						test.descriptive_test_items[1].result_value = 2
+						test.descriptive_test_items[2].result_value = 3
+						test.submit()
+					elif serv.get("template_dt") == "Clinical Procedure Template":
+						test = make_clinical_procedure(service_request_doc)
+						test.submit()
+						doc = "Clinical Procedure"
+						template = procedure_template
+						type = "procedure_prescription"
+
+					# create sales invoice with service request and check service request and lab test is marked as invoiced
+					create_sales_invoice(patient, service_request_doc, template, type)
+					self.assertEqual(
+						frappe.db.get_value("Service Request", serv.get("name"), "billing_status"), "Invoiced"
+					)
+					self.assertEqual(
+						frappe.db.get_value("Service Request", serv.get("name"), "status"),
+						"completed-Request Status",
+					)
+					self.assertTrue(frappe.db.get_value(doc, test.name, "invoiced"))
+
+	def test_creation_on_encounter_with_create_order_on_save_checked(self):
+		patient, practitioner = create_healthcare_docs()
+		insulin_resistance_template = create_lab_test_template()
+		encounter = create_encounter(
+			patient, practitioner, "lab_test_prescription", insulin_resistance_template
+		)
+		encounter.submit_orders_on_save = True
+		encounter.save()
+		self.assertTrue(frappe.db.exists("Service Request", {"order_group": encounter.name}))
+		encounter.submit()
+
+		# to check if submit creates order
+		self.assertEqual(
+			frappe.db.count(
+				"Service Request",
+				filters={"order_group": encounter.name},
+			),
+			1,
+		)
+
+	def test_mark_observation_as_invoiced(self):
+		obs_template = create_observation_template("Total Cholesterol")
+		patient, practitioner = create_healthcare_docs()
+		encounter = create_encounter(
+			patient, practitioner, "lab_test_prescription", obs_template, submit=True, obs=True
+		)
+		service_request = frappe.db.get_value("Service Request", {"order_group": encounter.name}, "name")
+		if service_request:
+			service_request_doc = frappe.get_doc("Service Request", service_request)
+			observation = create_observation(patient, service_request, obs_template.name)
+			create_sales_invoice(patient, service_request_doc, obs_template, "observation")
+			self.assertEqual(frappe.db.get_value("Observation", observation.name, "invoiced"), 1)
+
+
+def create_encounter(
+	patient, practitioner, type, template, procedure_template=False, submit=False, obs=False
+):
+	patient_encounter = frappe.new_doc("Patient Encounter")
+	patient_encounter.patient = patient
+	patient_encounter.practitioner = practitioner
+	patient_encounter.encounter_date = getdate()
+	patient_encounter.encounter_time = nowtime()
+	if not obs:
+		if type == "lab_test_prescription":
+			patient_encounter.append(
+				type, {"lab_test_code": template.item, "lab_test_name": template.lab_test_name}
+			)
+		elif type == "drug_prescription":
+			patient_encounter.append(
+				type, {"medication": template.name, "drug_code": template.linked_items[0].get("item")}
+			)
+	else:
+		patient_encounter.append(type, {"observation_template": template.name})
+
+	if procedure_template:
+		patient_encounter.append(
+			"procedure_prescription",
+			{"procedure": procedure_template.template, "procedure_name": procedure_template.item_code},
+		)
+
+	if submit:
+		patient_encounter.submit()
+	else:
+		patient_encounter.save()
+
+	return patient_encounter
+
+
+def create_sales_invoice(patient, service_request, template, type):
+	sales_invoice = frappe.new_doc("Sales Invoice")
+	sales_invoice.patient = patient
+	sales_invoice.customer = frappe.db.get_value("Patient", patient, "customer")
+	sales_invoice.due_date = getdate()
+	sales_invoice.currency = "INR"
+	sales_invoice.company = "_Test Company"
+	sales_invoice.debit_to = get_receivable_account("_Test Company")
+	if type == "lab_test_prescription":
+		sales_invoice.append(
+			"items",
+			{
+				"qty": 1,
+				"uom": "Nos",
+				"conversion_factor": 1,
+				"income_account": get_income_account(None, "_Test Company"),
+				"rate": template.lab_test_rate,
+				"amount": template.lab_test_rate,
+				"reference_dt": service_request.doctype,
+				"reference_dn": service_request.name,
+				"cost_center": erpnext.get_default_cost_center("_Test Company"),
+				"item_code": template.item,
+				"item_name": template.lab_test_name,
+				"description": template.lab_test_description,
+			},
+		)
+	elif type == "drug_prescription":
+		sales_invoice.append(
+			"items",
+			{
+				"qty": 1,
+				"uom": "Nos",
+				"conversion_factor": 1,
+				"income_account": get_income_account(None, "_Test Company"),
+				"reference_dt": service_request.doctype,
+				"reference_dn": service_request.name,
+				"cost_center": erpnext.get_default_cost_center("_Test Company"),
+				"item_name": template.name,
+				"description": template.name,
+			},
+		)
+	elif type in ["observation", "procedure_prescription"]:
+		sales_invoice.append(
+			"items",
+			{
+				"qty": 1,
+				"uom": "Nos",
+				"conversion_factor": 1,
+				"income_account": get_income_account(None, "_Test Company"),
+				"rate": template.rate,
+				"amount": template.rate,
+				"reference_dt": service_request.doctype,
+				"reference_dn": service_request.name,
+				"cost_center": erpnext.get_default_cost_center("_Test Company"),
+				"item_code": template.item,
+				"item_name": template.item_code,
+				"description": template.description,
+			},
+		)
+
+	sales_invoice.set_missing_values()
+
+	sales_invoice.submit()
+	return sales_invoice
+
+
+def create_observation(patient, service_request, obs_template):
+	observation = frappe.new_doc("Observation")
+	observation.patient = patient
+	observation.service_request = service_request
+	observation.observation_template = obs_template
+	observation.insert()
+	return observation
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_category/service_request_category.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, earthians and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Service Request Category', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_category/service_request_category.json
@@ -0,0 +1,94 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:category",
+ "beta": 1,
+ "creation": "2020-07-20 16:52:53.440961",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "category",
+  "patient_care_type"
+ ],
+ "fields": [
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient Care Type",
+   "options": "Patient Care Type",
+   "search_index": 1
+  },
+  {
+   "allow_in_quick_entry": 1,
+   "fieldname": "category",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Category",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2021-12-23 07:11:16.134902",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Service Request Category",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "category,patient_care_type",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "title_field": "category",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_category/service_request_category.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ServiceRequestCategory(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_category/test_service_request_category.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+# import frappe
+import unittest
+
+
+class TestServiceRequestCategory(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_reason/service_request_reason.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2020, earthians and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Service Request Reason', {
+	// refresh: function(frm) {
+
+	// }
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_reason/service_request_reason.json
@@ -0,0 +1,81 @@
+{
+ "actions": [],
+ "allow_import": 1,
+ "allow_rename": 1,
+ "autoname": "field:service_request_reason",
+ "beta": 1,
+ "creation": "2020-07-20 16:49:29.504052",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "service_request_reason"
+ ],
+ "fields": [
+  {
+   "fieldname": "service_request_reason",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Service Request Reason ",
+   "reqd": 1,
+   "unique": 1
+  }
+ ],
+ "links": [],
+ "modified": "2021-12-23 07:09:19.212113",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Service Request Reason",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1
+  },
+  {
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "restrict_to_domain": "Healthcare",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_reason/service_request_reason.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and contributors
+# For license information, please see license.txt
+
+from __future__ import unicode_literals
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ServiceRequestReason(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/service_request_reason/test_service_request_reason.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, earthians and Contributors
+# See license.txt
+from __future__ import unicode_literals
+
+# import frappe
+import unittest
+
+
+class TestServiceRequestReason(unittest.TestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/specimen/specimen.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Specimen", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/specimen/specimen.json
@@ -0,0 +1,160 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{YY}{MM}{DD}{#####}",
+ "creation": "2023-07-02 07:19:59.158538",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "specimen_type",
+  "received_time",
+  "spec_status",
+  "department",
+  "column_break_wyhn",
+  "status",
+  "operator",
+  "barcode",
+  "section_break_auky",
+  "patient",
+  "patient_name",
+  "column_break_1kvr",
+  "patient_age",
+  "patient_gender",
+  "patient_date_of_birth",
+  "section_break_aas5",
+  "note"
+ ],
+ "fields": [
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Available\nUnavailable\nUnsatisfactory\nEntered In Error"
+  },
+  {
+   "fieldname": "column_break_wyhn",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_aas5",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "note",
+   "fieldtype": "Text Editor",
+   "label": "Note"
+  },
+  {
+   "fieldname": "received_time",
+   "fieldtype": "Datetime",
+   "label": "Received Time",
+   "print_width": "1"
+  },
+  {
+   "fieldname": "barcode",
+   "fieldtype": "Barcode",
+   "label": "Barcode"
+  },
+  {
+   "fieldname": "specimen_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Specimen Type",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fieldname": "section_break_auky",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_1kvr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_gender",
+   "fieldtype": "Link",
+   "label": "Patient Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "spec_status",
+   "fieldtype": "Select",
+   "label": "Speciment Status",
+   "options": "Requested\nCollected\nTrasnsmiting\nTransmited\nRejected\nApproved\nCenterfusion\nProcessing\nResult"
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "operator",
+   "fieldtype": "Autocomplete",
+   "label": "\u0633\u0627\u062d\u0628 \u0627\u0644\u062f\u0645",
+   "length": 11,
+   "options": "\n\u0627\u0643\u062a\u0641\u0627\u0621 \u0645\u062d\u0645\u062f\n\u0632\u064a\u0646\u0628 \u0631\u0627\u0626\u062f\n\u0632\u0647\u0631\u0627\u0621\u0627\u0644\u0645\u0638\u0641\u0631"
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "patient_date_of_birth",
+   "fieldtype": "Date",
+   "hidden": 1,
+   "label": "Patient date of birth"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-09-11 15:49:58.397767",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Specimen",
+ "naming_rule": "Expression",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1,
+ "track_views": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/specimen/specimen.py
@@ -0,0 +1,15 @@
+# Copyright (c) 2023, healthcare and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe.model.document import Document
+
+
+class Specimen(Document):
+	def before_insert(self):
+		patient_doc = frappe.get_doc("Patient", self.patient)
+		if patient_doc.dob:
+			self.patient_age = patient_doc.calculate_age().get("age_in_string")
+
+	def after_insert(self):
+		self.db_set("barcode", self.name)
--- /dev/null
+++ b/healthcare/healthcare/doctype/specimen/test_specimen.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2023, healthcare and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestSpecimen(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/spic__test_2/spic__test_2.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("spic- test 2", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/healthcare/doctype/spic__test_2/spic__test_2.json
@@ -0,0 +1,152 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{YY}{MM}{DD}{#####}",
+ "creation": "2024-08-14 11:06:38.190428",
+ "default_view": "List",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "specimen_type",
+  "received_time",
+  "spec_status",
+  "department",
+  "column_break_wyhn",
+  "status",
+  "operator",
+  "barcode",
+  "section_break_auky",
+  "patient",
+  "patient_name",
+  "column_break_1kvr",
+  "patient_age",
+  "patient_gender",
+  "section_break_aas5",
+  "note"
+ ],
+ "fields": [
+  {
+   "fieldname": "specimen_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Specimen Type",
+   "options": "Lab Test Sample"
+  },
+  {
+   "fieldname": "received_time",
+   "fieldtype": "Datetime",
+   "label": "Received Time",
+   "print_width": "1"
+  },
+  {
+   "fieldname": "spec_status",
+   "fieldtype": "Select",
+   "label": "Speciment Status",
+   "options": "Requested\nCollected\nTrasnsmiting\nTransmited\nRejected\nApproved\nCenterfusion\nProcessing\nResult"
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "label": "Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "column_break_wyhn",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Available\nUnavailable\nUnsatisfactory\nEntered In Error"
+  },
+  {
+   "fieldname": "operator",
+   "fieldtype": "Autocomplete",
+   "label": "\u0633\u0627\u062d\u0628 \u0627\u0644\u062f\u0645",
+   "length": 11,
+   "options": "\u0647\u0627\u0644\u0629 \u0641\u0627\u0631\u0633\n\u0627\u0643\u062a\u0641\u0627\u0621 \u0645\u062d\u0645\u062f\n\u0632\u064a\u0646\u0628 \u0631\u0627\u0626\u062f\nother"
+  },
+  {
+   "fieldname": "barcode",
+   "fieldtype": "Barcode",
+   "label": "Barcode"
+  },
+  {
+   "fieldname": "section_break_auky",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_1kvr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "patient_gender",
+   "fieldtype": "Link",
+   "label": "Patient Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_aas5",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "note",
+   "fieldtype": "Text Editor",
+   "label": "Note"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2024-08-14 11:06:38.190428",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "spic- test 2",
+ "naming_rule": "Expression",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1,
+ "track_views": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/spic__test_2/spic__test_2.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class spictest2(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/spic__test_2/test_spic__test_2.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class Testspictest2(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/test_therapy_plan.py
@@ -0,0 +1,118 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import flt, getdate, nowdate
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_appointment,
+	create_healthcare_docs,
+	create_medical_department,
+	create_patient,
+)
+from healthcare.healthcare.doctype.therapy_plan.therapy_plan import (
+	make_sales_invoice,
+	make_therapy_session,
+)
+from healthcare.healthcare.doctype.therapy_type.test_therapy_type import create_therapy_type
+
+
+class TestTherapyPlan(FrappeTestCase):
+	def test_creation_on_encounter_submission(self):
+		patient, practitioner = create_healthcare_docs()
+		medical_department = create_medical_department()
+		encounter = create_encounter(patient, medical_department, practitioner)
+		self.assertTrue(frappe.db.exists("Therapy Plan", encounter.therapy_plan))
+
+	def test_status(self):
+		plan = create_therapy_plan()
+		self.assertEqual(plan.status, "Not Started")
+
+		session = make_therapy_session(plan.name, plan.patient, "Basic Rehab", "_Test Company")
+		frappe.get_doc(session).submit()
+		self.assertEqual(frappe.db.get_value("Therapy Plan", plan.name, "status"), "In Progress")
+
+		session = make_therapy_session(plan.name, plan.patient, "Basic Rehab", "_Test Company")
+		frappe.get_doc(session).submit()
+		self.assertEqual(frappe.db.get_value("Therapy Plan", plan.name, "status"), "Completed")
+
+		patient, practitioner = create_healthcare_docs()
+		appointment = create_appointment(patient, practitioner, nowdate())
+
+		session = make_therapy_session(
+			plan.name, plan.patient, "Basic Rehab", "_Test Company", appointment.name
+		)
+		session = frappe.get_doc(session)
+		session.submit()
+		self.assertEqual(
+			frappe.db.get_value("Patient Appointment", appointment.name, "status"), "Closed"
+		)
+		session.cancel()
+		self.assertEqual(frappe.db.get_value("Patient Appointment", appointment.name, "status"), "Open")
+
+	def test_therapy_plan_from_template(self):
+		patient = create_patient()
+		template = create_therapy_plan_template()
+		# check linked item
+		self.assertTrue(frappe.db.exists("Therapy Plan Template", {"linked_item": "Complete Rehab"}))
+
+		plan = create_therapy_plan(template)
+		# invoice
+		si = make_sales_invoice(plan.name, patient, "_Test Company", template)
+		si.save()
+
+		therapy_plan_template_amt = frappe.db.get_value(
+			"Therapy Plan Template", template, "total_amount"
+		)
+		self.assertEqual(si.items[0].amount, therapy_plan_template_amt)
+
+
+def create_therapy_plan(template=None, patient=None):
+	if not patient:
+		patient = create_patient()
+	therapy_type = create_therapy_type()
+	plan = frappe.new_doc("Therapy Plan")
+	plan.patient = patient
+	plan.start_date = getdate()
+
+	if template:
+		plan.therapy_plan_template = template
+		plan = plan.set_therapy_details_from_template()
+	else:
+		plan.append("therapy_plan_details", {"therapy_type": therapy_type.name, "no_of_sessions": 2})
+
+	plan.save()
+	return plan
+
+
+def create_encounter(patient, medical_department, practitioner):
+	encounter = frappe.new_doc("Patient Encounter")
+	encounter.patient = patient
+	encounter.practitioner = practitioner
+	encounter.medical_department = medical_department
+	therapy_type = create_therapy_type()
+	encounter.append("therapies", {"therapy_type": therapy_type.name, "no_of_sessions": 2})
+	encounter.save()
+	encounter.submit()
+	return encounter
+
+
+def create_therapy_plan_template():
+	template_name = frappe.db.exists("Therapy Plan Template", "Complete Rehab")
+	if not template_name:
+		therapy_type = create_therapy_type()
+		template = frappe.new_doc("Therapy Plan Template")
+		template.plan_name = template.item_code = template.item_name = "Complete Rehab"
+		template.item_group = "Services"
+		rate = frappe.db.get_value("Therapy Type", therapy_type.name, "rate")
+		template.append(
+			"therapy_types",
+			{"therapy_type": therapy_type.name, "no_of_sessions": 2, "rate": rate, "amount": 2 * flt(rate)},
+		)
+		template.save()
+		template_name = template.name
+
+	return template_name
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/therapy_plan.js
@@ -0,0 +1,133 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Therapy Plan', {
+	setup: function(frm) {
+		frm.get_field('therapy_plan_details').grid.editable_fields = [
+			{fieldname: 'therapy_type', columns: 6},
+			{fieldname: 'no_of_sessions', columns: 2},
+			{fieldname: 'sessions_completed', columns: 2}
+		];
+	},
+
+	refresh: function(frm) {
+		if (!frm.doc.__islocal) {
+			frm.trigger('show_progress_for_therapies');
+			if (frm.doc.status != 'Completed') {
+				let therapy_types = (frm.doc.therapy_plan_details || []).map(function(d){ return d.therapy_type; });
+				const fields = [{
+					fieldtype: 'Link',
+					label: __('Therapy Type'),
+					fieldname: 'therapy_type',
+					options: 'Therapy Type',
+					reqd: 1,
+					get_query: function() {
+						return {
+							filters: { 'therapy_type': ['in', therapy_types]}
+						};
+					}
+				}];
+
+				frm.add_custom_button(__('Therapy Session'), function() {
+					frappe.prompt(fields, data => {
+						frappe.call({
+							method: 'healthcare.healthcare.doctype.therapy_plan.therapy_plan.make_therapy_session',
+							args: {
+								therapy_plan: frm.doc.name,
+								patient: frm.doc.patient,
+								therapy_type: data.therapy_type,
+								company: frm.doc.company
+							},
+							freeze: true,
+							callback: function(r) {
+								if (r.message) {
+									frappe.model.sync(r.message);
+									frappe.set_route('Form', r.message.doctype, r.message.name);
+								}
+							}
+						});
+					}, __('Select Therapy Type'), __('Create'));
+				}, __('Create'));
+			}
+
+			if (frm.doc.therapy_plan_template && !frm.doc.invoiced) {
+				frm.add_custom_button(__('Sales Invoice'), function() {
+					frm.trigger('make_sales_invoice');
+				}, __('Create'));
+			}
+		}
+
+		if (frm.doc.therapy_plan_template) {
+			frm.fields_dict.therapy_plan_details.grid.update_docfield_property(
+				'therapy_type', 'read_only', 1
+			);
+			frm.fields_dict.therapy_plan_details.grid.update_docfield_property(
+				'no_of_sessions', 'read_only', 1
+			);
+		}
+	},
+
+	make_sales_invoice: function(frm) {
+		frappe.call({
+			args: {
+				'reference_name': frm.doc.name,
+				'patient': frm.doc.patient,
+				'company': frm.doc.company,
+				'therapy_plan_template': frm.doc.therapy_plan_template
+			},
+			method: 'healthcare.healthcare.doctype.therapy_plan.therapy_plan.make_sales_invoice',
+			callback: function(r) {
+				var doclist = frappe.model.sync(r.message);
+				frappe.set_route('Form', doclist[0].doctype, doclist[0].name);
+			}
+		});
+	},
+
+	therapy_plan_template: function(frm) {
+		if (frm.doc.therapy_plan_template) {
+			frappe.call({
+				method: 'set_therapy_details_from_template',
+				doc: frm.doc,
+				freeze: true,
+				freeze_message: __('Fetching Template Details'),
+				callback: function() {
+					refresh_field('therapy_plan_details');
+				}
+			});
+		}
+	},
+
+	show_progress_for_therapies: function(frm) {
+		let bars = [];
+		let message = '';
+
+		// completed sessions
+		let title = __('{0} sessions completed', [frm.doc.total_sessions_completed]);
+		if (frm.doc.total_sessions_completed === 1) {
+			title = __('{0} session completed', [frm.doc.total_sessions_completed]);
+		}
+		title += __(' out of {0}', [frm.doc.total_sessions]);
+
+		bars.push({
+			'title': title,
+			'width': (frm.doc.total_sessions_completed / frm.doc.total_sessions * 100) + '%',
+			'progress_class': 'progress-bar-success'
+		});
+		if (bars[0].width == '0%') {
+			bars[0].width = '0.5%';
+		}
+		message = title;
+		frm.dashboard.add_progress(__('Status'), bars, message);
+	},
+});
+
+frappe.ui.form.on('Therapy Plan Detail', {
+	no_of_sessions: function(frm) {
+		let total = 0;
+		$.each(frm.doc.therapy_plan_details, function(_i, e) {
+			total += e.no_of_sessions;
+		});
+		frm.set_value('total_sessions', total);
+		refresh_field('total_sessions');
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/therapy_plan.json
@@ -0,0 +1,526 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2020-03-29 20:56:49.758602",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "patient",
+  "patient_name",
+  "invoiced",
+  "column_break_4",
+  "company",
+  "status",
+  "start_date",
+  "section_break_3",
+  "therapy_plan_template",
+  "therapy_plan_details",
+  "title",
+  "section_break_9",
+  "total_sessions",
+  "column_break_11",
+  "total_sessions_completed",
+  "treatment_plan_check_list_tab",
+  "planning_technique_section",
+  "3d",
+  "column_break_vowa",
+  "imrt",
+  "column_break_eprl",
+  "vmat",
+  "structures_set_defined_section",
+  "aa",
+  "column_break_gyub",
+  "ctv",
+  "column_break_nntv",
+  "gtv",
+  "column_break_axvv",
+  "oars",
+  "rt_treatment_accessories_section",
+  "bolus",
+  "column_break_pduf",
+  "applicator",
+  "column_break_hols",
+  "compensator",
+  "section_break_rydl",
+  "gating",
+  "column_break_zzfw",
+  "insert_couch_and_immobilization",
+  "section_break_dyay",
+  "user_origin_correctly",
+  "column_break_lbde",
+  "prescription_doesgy",
+  "section_break_owpn",
+  "plan_normalization",
+  "column_break_micj",
+  "beams_group_have_the_same_iscenter",
+  "section_break_zuwp",
+  "setup_field_and_correct_drr_image",
+  "column_break_qabw",
+  "does_distributions",
+  "section_break_ifto",
+  "beam_geometry",
+  "column_break_beqt",
+  "dmax_in_patient",
+  "section_break_sgri",
+  "reference_dose_coveragedx__vx",
+  "column_break_zywc",
+  "oars_doses_met_criteria",
+  "section_break_hwyy",
+  "prescription_dose_at_the_reference_point",
+  "column_break_hzrr",
+  "patient_shifts_in_treatment_preparation",
+  "section_break_pqct",
+  "reference_point_check",
+  "column_break_wbwl",
+  "signed_planning_approvaleclipse",
+  "section_break_vyxt",
+  "signed_treatment_approvaleclipse"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "start_date",
+   "fieldtype": "Date",
+   "in_list_view": 1,
+   "label": "Start Date",
+   "reqd": 1
+  },
+  {
+   "fieldname": "section_break_3",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "therapy_plan_details",
+   "fieldtype": "Table",
+   "label": "Therapy Plan Details",
+   "options": "Therapy Plan Detail",
+   "read_only_depends_on": "therapy_plan_template",
+   "reqd": 1
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Naming Series",
+   "options": "HLC-THP-.YYYY.-"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "default": "{patient_name}",
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "no_copy": 1
+  },
+  {
+   "fieldname": "column_break_4",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_9",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "total_sessions",
+   "fieldtype": "Int",
+   "label": "Total Sessions",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_11",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "total_sessions_completed",
+   "fieldtype": "Int",
+   "label": "Total Sessions Completed",
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Not Started\nIn Progress\nCompleted\nCancelled",
+   "read_only": 1
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "fieldname": "therapy_plan_template",
+   "fieldtype": "Link",
+   "label": "Therapy Plan Template",
+   "options": "Therapy Plan Template",
+   "set_only_once": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "treatment_plan_check_list_tab",
+   "fieldtype": "Tab Break",
+   "label": "Treatment plan check list"
+  },
+  {
+   "fieldname": "planning_technique_section",
+   "fieldtype": "Section Break",
+   "label": "Planning Technique"
+  },
+  {
+   "default": "0",
+   "fieldname": "3d",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "3D"
+  },
+  {
+   "fieldname": "column_break_vowa",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "imrt",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "IMRT"
+  },
+  {
+   "fieldname": "column_break_eprl",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "vmat",
+   "fieldtype": "Check",
+   "label": "VMAT"
+  },
+  {
+   "fieldname": "structures_set_defined_section",
+   "fieldtype": "Section Break",
+   "label": "Structures set defined"
+  },
+  {
+   "default": "0",
+   "fieldname": "aa",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "PVT"
+  },
+  {
+   "fieldname": "column_break_gyub",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "ctv",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "CTV"
+  },
+  {
+   "fieldname": "column_break_nntv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "gtv",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "GTV"
+  },
+  {
+   "fieldname": "column_break_axvv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "oars",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "OARs"
+  },
+  {
+   "fieldname": "rt_treatment_accessories_section",
+   "fieldtype": "Section Break",
+   "label": "RT treatment accessories"
+  },
+  {
+   "default": "0",
+   "fieldname": "bolus",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Bolus"
+  },
+  {
+   "fieldname": "column_break_pduf",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "applicator",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Applicator"
+  },
+  {
+   "fieldname": "column_break_hols",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "compensator",
+   "fieldtype": "Check",
+   "in_list_view": 1,
+   "label": "Compensator"
+  },
+  {
+   "fieldname": "section_break_rydl",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "gating",
+   "fieldtype": "Select",
+   "in_list_view": 1,
+   "label": "Gating"
+  },
+  {
+   "fieldname": "column_break_zzfw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "insert_couch_and_immobilization",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "insert couch and immobilization"
+  },
+  {
+   "fieldname": "section_break_dyay",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "user_origin_correctly",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "User origin correctly"
+  },
+  {
+   "fieldname": "column_break_lbde",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "prescription_doesgy",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Prescription Does(Gy)"
+  },
+  {
+   "fieldname": "section_break_owpn",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "plan_normalization",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Plan normalization"
+  },
+  {
+   "fieldname": "column_break_micj",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "beams_group_have_the_same_iscenter",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Beams group have the same ISCENTER"
+  },
+  {
+   "fieldname": "section_break_zuwp",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "setup_field_and_correct_drr_image",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Setup Field and correct DRR image"
+  },
+  {
+   "fieldname": "column_break_qabw",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "does_distributions",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Does Distributions"
+  },
+  {
+   "fieldname": "section_break_ifto",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "beam_geometry",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Beam geometry"
+  },
+  {
+   "fieldname": "column_break_beqt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "dmax_in_patient",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Dmax in Patient"
+  },
+  {
+   "fieldname": "section_break_sgri",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "reference_dose_coveragedx__vx",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Reference dose coverage(DX % VX%)"
+  },
+  {
+   "fieldname": "column_break_zywc",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "oars_doses_met_criteria",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "OARs doses met criteria"
+  },
+  {
+   "fieldname": "section_break_hwyy",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "prescription_dose_at_the_reference_point",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "prescription dose at the reference point"
+  },
+  {
+   "fieldname": "column_break_hzrr",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_shifts_in_treatment_preparation",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "patient shifts in treatment preparation"
+  },
+  {
+   "fieldname": "section_break_pqct",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "reference_point_check",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Reference point check"
+  },
+  {
+   "fieldname": "column_break_wbwl",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "signed_planning_approvaleclipse",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Signed planning approval(Eclipse)"
+  },
+  {
+   "fieldname": "section_break_vyxt",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "signed_treatment_approvaleclipse",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Signed treatment approval(Eclipse)"
+  }
+ ],
+ "links": [],
+ "modified": "2024-08-31 08:22:10.952224",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Plan",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "patient_name",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/therapy_plan.py
@@ -0,0 +1,115 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+from frappe.utils import flt, today
+
+from healthcare.healthcare.utils import validate_nursing_tasks
+
+
+class TherapyPlan(Document):
+	def validate(self):
+		self.set_totals()
+		self.set_status()
+
+	def on_submit(self):
+		validate_nursing_tasks(self)
+
+	def set_status(self):
+		if not self.total_sessions_completed:
+			self.status = "Not Started"
+		else:
+			if self.total_sessions_completed < self.total_sessions:
+				self.status = "In Progress"
+			elif self.total_sessions_completed == self.total_sessions:
+				self.status = "Completed"
+
+	def set_totals(self):
+		total_sessions = 0
+		total_sessions_completed = 0
+		for entry in self.therapy_plan_details:
+			if entry.no_of_sessions:
+				total_sessions += entry.no_of_sessions
+			if entry.sessions_completed:
+				total_sessions_completed += entry.sessions_completed
+
+		self.db_set("total_sessions", total_sessions)
+		self.db_set("total_sessions_completed", total_sessions_completed)
+
+	@frappe.whitelist()
+	def set_therapy_details_from_template(self):
+		# Add therapy types in the child table
+		self.set("therapy_plan_details", [])
+		therapy_plan_template = frappe.get_doc("Therapy Plan Template", self.therapy_plan_template)
+
+		for data in therapy_plan_template.therapy_types:
+			self.append(
+				"therapy_plan_details",
+				{"therapy_type": data.therapy_type, "no_of_sessions": data.no_of_sessions},
+			)
+		return self
+
+
+@frappe.whitelist()
+def make_therapy_session(therapy_plan, patient, therapy_type, company, appointment=None):
+	therapy_type = frappe.get_doc("Therapy Type", therapy_type)
+
+	therapy_session = frappe.new_doc("Therapy Session")
+	therapy_session.therapy_plan = therapy_plan
+	therapy_session.company = company
+	therapy_session.patient = patient
+	therapy_session.therapy_type = therapy_type.name
+	therapy_session.duration = therapy_type.default_duration
+	therapy_session.rate = therapy_type.rate
+	if not therapy_session.exercises and therapy_type.exercises:
+		for exercise in therapy_type.exercises:
+			therapy_session.append(
+				"exercises",
+				(frappe.copy_doc(exercise)).as_dict(),
+			)
+	therapy_session.appointment = appointment
+
+	if frappe.flags.in_test:
+		therapy_session.start_date = today()
+	return therapy_session.as_dict()
+
+
+@frappe.whitelist()
+def make_sales_invoice(reference_name, patient, company, therapy_plan_template):
+	from erpnext.stock.get_item_details import get_item_details
+
+	si = frappe.new_doc("Sales Invoice")
+	si.company = company
+	si.patient = patient
+	si.customer = frappe.db.get_value("Patient", patient, "customer")
+
+	item = frappe.db.get_value("Therapy Plan Template", therapy_plan_template, "linked_item")
+	price_list, price_list_currency = frappe.db.get_values(
+		"Price List", {"selling": 1}, ["name", "currency"]
+	)[0]
+	args = {
+		"doctype": "Sales Invoice",
+		"item_code": item,
+		"company": company,
+		"customer": si.customer,
+		"selling_price_list": price_list,
+		"price_list_currency": price_list_currency,
+		"plc_conversion_rate": 1.0,
+		"conversion_rate": 1.0,
+	}
+
+	item_line = si.append("items", {})
+	item_details = get_item_details(args)
+	item_line.item_code = item
+	item_line.qty = 1
+	item_line.rate = item_details.price_list_rate
+	item_line.amount = flt(item_line.rate) * flt(item_line.qty)
+	item_line.reference_dt = "Therapy Plan"
+	item_line.reference_dn = reference_name
+	item_line.description = item_details.description
+
+	si.set_missing_values(for_validate=True)
+	return si
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/therapy_plan_dashboard.py
@@ -0,0 +1,13 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "therapy_plan",
+		"non_standard_fieldnames": {"Sales Invoice": "reference_dn"},
+		"transactions": [
+			{"label": _("Therapy Sessions"), "items": ["Therapy Session"]},
+			{"label": _("Billing"), "items": ["Sales Invoice"]},
+		],
+		"disable_create_buttons": ["Sales Invoice"],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan/therapy_plan_list.js
@@ -0,0 +1,11 @@
+frappe.listview_settings['Therapy Plan'] = {
+	get_indicator: function(doc) {
+		var colors = {
+			'Completed': 'green',
+			'In Progress': 'orange',
+			'Not Started': 'red',
+			'Cancelled': 'grey'
+		};
+		return [__(doc.status), colors[doc.status], 'status,=,' + doc.status];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_detail/therapy_plan_detail.json
@@ -0,0 +1,90 @@
+{
+ "actions": [],
+ "creation": "2020-03-29 20:52:57.068731",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "therapy_type",
+  "no_of_sessions",
+  "sessions_completed",
+  "service_request",
+  "section_break_hywn",
+  "patient_care_type",
+  "column_break_eawy",
+  "intent",
+  "priority"
+ ],
+ "fields": [
+  {
+   "fieldname": "therapy_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Therapy Type",
+   "options": "Therapy Type",
+   "reqd": 1
+  },
+  {
+   "fieldname": "no_of_sessions",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "label": "No of Sessions"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval:doc.parenttype=='Therapy Plan';",
+   "fieldname": "sessions_completed",
+   "fieldtype": "Int",
+   "label": "Sessions Completed",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_hywn",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "column_break_eawy",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "intent",
+   "fieldtype": "Link",
+   "label": "Intent",
+   "options": "Code Value"
+  },
+  {
+   "fieldname": "priority",
+   "fieldtype": "Link",
+   "label": "Priority",
+   "options": "Code Value"
+  },
+  {
+   "allow_on_submit": 1,
+   "fieldname": "service_request",
+   "fieldtype": "Data",
+   "label": "Service Request",
+   "no_copy": 1,
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2023-11-01 23:10:20.015399",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Plan Detail",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_detail/therapy_plan_detail.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class TherapyPlanDetail(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template/test_therapy_plan_template.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestTherapyPlanTemplate(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template/therapy_plan_template.js
@@ -0,0 +1,87 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Therapy Plan Template', {
+	refresh: function(frm) {
+		frm.set_query('therapy_type', 'therapy_types', () => {
+			return {
+				filters: {
+					'is_billable': 1
+				}
+			};
+		});
+
+		frm.set_query('linked_item', function() {
+			return {
+				filters: {
+					'disabled': false,
+					'is_stock_item': false
+				}
+			};
+		});
+	},
+
+	set_totals: function (frm) {
+		let total_sessions = 0;
+		let total_amount = 0.0;
+		frm.doc.therapy_types.forEach((d) => {
+			if (d.no_of_sessions) total_sessions += cint(d.no_of_sessions);
+			if (d.amount) total_amount += flt(d.amount);
+		});
+		frm.set_value('total_sessions', total_sessions);
+		frm.set_value('total_amount', total_amount);
+		frm.refresh_fields();
+	},
+
+	link_existing_item: function (frm) {
+		if (frm.doc.link_existing_item) {
+			frm.set_value('item_code', '');
+		} else {
+			frm.set_value('linked_item', '');
+		}
+	},
+
+	linked_item: function (frm) {
+		if (frm.doc.linked_item) {
+			frappe.db.get_value('Item', frm.doc.linked_item, ['item_group', 'description', 'item_name'])
+			.then(r => {
+				frm.set_value({
+					'item_group': r.message.item_group,
+					'description': r.message.description,
+					'item_name': r.message.item_name
+				});
+			})
+		}
+	}
+});
+
+frappe.ui.form.on('Therapy Plan Template Detail', {
+	therapy_type: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		frappe.call('frappe.client.get', {
+			doctype: 'Therapy Type',
+			name: row.therapy_type
+		}).then((res) => {
+			row.rate = res.message.rate;
+			if (!row.no_of_sessions)
+				row.no_of_sessions = 1;
+			row.amount = flt(row.rate) * cint(row.no_of_sessions);
+			frm.refresh_field('therapy_types');
+			frm.trigger('set_totals');
+		});
+	},
+
+	no_of_sessions: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		row.amount = flt(row.rate) * cint(row.no_of_sessions);
+		frm.refresh_field('therapy_types');
+		frm.trigger('set_totals');
+	},
+
+	rate: function(frm, cdt, cdn) {
+		let row = locals[cdt][cdn];
+		row.amount = flt(row.rate) * cint(row.no_of_sessions);
+		frm.refresh_field('therapy_types');
+		frm.trigger('set_totals');
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template/therapy_plan_template.json
@@ -0,0 +1,149 @@
+{
+ "actions": [],
+ "autoname": "field:plan_name",
+ "creation": "2022-01-21 19:58:31.906990",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "plan_name",
+  "linked_item_details_section",
+  "link_existing_item",
+  "linked_item",
+  "item_code",
+  "item_name",
+  "item_group",
+  "column_break_6",
+  "description",
+  "therapy_types_section",
+  "therapy_types",
+  "section_break_11",
+  "total_sessions",
+  "column_break_13",
+  "total_amount"
+ ],
+ "fields": [
+  {
+   "fieldname": "plan_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Plan Name",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "therapy_types_section",
+   "fieldtype": "Section Break",
+   "label": "Therapy Types"
+  },
+  {
+   "fieldname": "therapy_types",
+   "fieldtype": "Table",
+   "label": "Therapy Types",
+   "options": "Therapy Plan Template Detail",
+   "reqd": 1
+  },
+  {
+   "depends_on": "eval: !doc.__islocal || doc.link_existing_item",
+   "fieldname": "linked_item",
+   "fieldtype": "Link",
+   "label": "Item",
+   "mandatory_depends_on": "eval:doc.link_existing_item",
+   "options": "Item",
+   "read_only_depends_on": "eval: !doc.__islocal"
+  },
+  {
+   "fieldname": "linked_item_details_section",
+   "fieldtype": "Section Break",
+   "label": "Linked Item Details"
+  },
+  {
+   "depends_on": "eval:!doc.link_existing_item || !doc.__islocal",
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "label": "Item Code",
+   "mandatory_depends_on": "eval:!doc.link_existing_item",
+   "read_only_depends_on": "eval: !doc.__islocal",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "item_name",
+   "fieldtype": "Data",
+   "label": "Item Name",
+   "read_only_depends_on": "eval:doc.link_existing_item",
+   "reqd": 1
+  },
+  {
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "label": "Item Group",
+   "options": "Item Group",
+   "read_only_depends_on": "eval:doc.link_existing_item",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_6",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Item Description",
+   "read_only_depends_on": "eval:doc.link_existing_item"
+  },
+  {
+   "fieldname": "total_amount",
+   "fieldtype": "Currency",
+   "label": "Total Amount",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_11",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "total_sessions",
+   "fieldtype": "Int",
+   "label": "Total Sessions",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_13",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "depends_on": "eval: doc.__islocal",
+   "fieldname": "link_existing_item",
+   "fieldtype": "Check",
+   "label": "Link existing Item"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2022-05-31 16:37:04.658515",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Plan Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template/therapy_plan_template.py
@@ -0,0 +1,84 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe.model.document import Document
+from frappe.utils import cint, flt
+
+from healthcare.healthcare.doctype.therapy_type.therapy_type import make_item_price
+
+
+class TherapyPlanTemplate(Document):
+	def after_insert(self):
+		if not self.link_existing_item:
+			self.create_item_from_template()
+		elif self.linked_item and self.total_amount:
+			make_item_price(self.linked_item, self.total_amount)
+
+	def validate(self):
+		self.set_totals()
+
+	def on_update(self):
+		doc_before_save = self.get_doc_before_save()
+		if not doc_before_save:
+			return
+		if (
+			doc_before_save.item_name != self.item_name
+			or doc_before_save.item_group != self.item_group
+			or doc_before_save.description != self.description
+		):
+			self.update_item()
+
+		if doc_before_save.therapy_types != self.therapy_types:
+			self.update_item_price()
+
+	def set_totals(self):
+		total_sessions = 0
+		total_amount = 0
+
+		for entry in self.therapy_types:
+			total_sessions += cint(entry.no_of_sessions)
+			total_amount += flt(entry.amount)
+
+		self.total_sessions = total_sessions
+		self.total_amount = total_amount
+
+	def create_item_from_template(self):
+		uom = frappe.db.exists("UOM", "Nos") or frappe.db.get_single_value("Stock Settings", "stock_uom")
+
+		item = frappe.get_doc(
+			{
+				"doctype": "Item",
+				"item_code": self.item_code,
+				"item_name": self.item_name,
+				"item_group": self.item_group,
+				"description": self.description,
+				"is_sales_item": 1,
+				"is_service_item": 1,
+				"is_purchase_item": 0,
+				"is_stock_item": 0,
+				"show_in_website": 0,
+				"is_pro_applicable": 0,
+				"stock_uom": uom,
+			}
+		).insert(ignore_permissions=True, ignore_mandatory=True)
+
+		make_item_price(item.name, self.total_amount)
+		self.db_set("linked_item", item.name)
+
+	def update_item(self):
+		item_doc = frappe.get_doc("Item", {"item_code": self.linked_item})
+		item_doc.item_name = self.item_name
+		item_doc.item_group = self.item_group
+		item_doc.description = self.description
+		item_doc.ignore_mandatory = True
+		item_doc.save(ignore_permissions=True)
+
+	def update_item_price(self):
+		item_price = frappe.get_doc("Item Price", {"item_code": self.linked_item})
+		item_price.item_name = self.item_name
+		item_price.price_list_rate = self.total_amount
+		item_price.ignore_mandatory = True
+		item_price.save(ignore_permissions=True)
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template/therapy_plan_template_dashboard.py
@@ -0,0 +1,8 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "therapy_plan_template",
+		"transactions": [{"label": _("Therapy Plans"), "items": ["Therapy Plan"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template_detail/therapy_plan_template_detail.json
@@ -0,0 +1,54 @@
+{
+ "actions": [],
+ "creation": "2020-10-07 23:04:44.373381",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "therapy_type",
+  "no_of_sessions",
+  "rate",
+  "amount"
+ ],
+ "fields": [
+  {
+   "fieldname": "therapy_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Therapy Type",
+   "options": "Therapy Type",
+   "reqd": 1
+  },
+  {
+   "fieldname": "no_of_sessions",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "label": "No of Sessions"
+  },
+  {
+   "fieldname": "rate",
+   "fieldtype": "Currency",
+   "in_list_view": 1,
+   "label": "Rate"
+  },
+  {
+   "fieldname": "amount",
+   "fieldtype": "Currency",
+   "in_list_view": 1,
+   "label": "Amount",
+   "read_only": 1
+  }
+ ],
+ "istable": 1,
+ "links": [],
+ "modified": "2020-10-07 23:46:54.296322",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Plan Template Detail",
+ "owner": "Administrator",
+ "permissions": [],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_plan_template_detail/therapy_plan_template_detail.py
@@ -0,0 +1,11 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+# import frappe
+from frappe.model.document import Document
+
+
+class TherapyPlanTemplateDetail(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_session/test_therapy_session.py
@@ -0,0 +1,36 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import nowdate
+
+from healthcare.healthcare.doctype.therapy_plan.test_therapy_plan import create_therapy_plan
+
+
+class TestTherapySession(FrappeTestCase):
+	def test_exercise_set_from_therapy_type(self):
+		plan = create_therapy_plan()
+		session = create_therapy_session(plan.patient, "Basic Rehab", plan.name)
+		if plan.therapy_plan_details:
+			therapy_type = frappe.get_doc("Therapy Type", plan.therapy_plan_details[0].therapy_type)
+			self.assertEqual(
+				session.exercises[0].exercise_type,
+				therapy_type.exercises[0].exercise_type,
+			)
+
+
+def create_therapy_session(patient, therapy_type, therapy_plan, duration=0, start_date=None):
+	if not start_date:
+		start_date = nowdate()
+	therapy_session = frappe.new_doc("Therapy Session")
+	therapy_session.patient = patient
+	therapy_session.therapy_type = therapy_type
+	therapy_session.therapy_plan = therapy_plan
+	therapy_session.duration = duration
+	therapy_session.start_date = start_date
+	therapy_session.save()
+
+	return therapy_session
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_session/therapy_session.js
@@ -0,0 +1,208 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Therapy Session', {
+	setup: function(frm) {
+		frm.get_field('exercises').grid.editable_fields = [
+			{fieldname: 'exercise_type', columns: 7},
+			{fieldname: 'counts_target', columns: 1},
+			{fieldname: 'counts_completed', columns: 1},
+			{fieldname: 'assistance_level', columns: 1}
+		];
+
+		frm.set_query('service_unit', function() {
+			return {
+				filters: {
+					'is_group': false,
+					'allow_appointments': true,
+					'company': frm.doc.company
+				}
+			};
+		});
+
+		frm.set_query('appointment', function() {
+
+			return {
+				filters: {
+					'status': ['in', ['Open', 'Scheduled']]
+				}
+			};
+		});
+
+		frm.set_query('service_request', function() {
+			return {
+				filters: {
+					'patient': frm.doc.patient,
+					'status': 'Active',
+					'docstatus': 1,
+					'template_dt': 'Therapy Type'
+				}
+			};
+		});
+	},
+
+	refresh: function(frm) {
+		if (frm.doc.therapy_plan) {
+			frm.trigger('filter_therapy_types');
+		}
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		});
+
+		if (!frm.doc.__islocal) {
+			frm.dashboard.add_indicator(__('Counts Targeted: {0}', [frm.doc.total_counts_targeted]), 'blue');
+			frm.dashboard.add_indicator(__('Counts Completed: {0}', [frm.doc.total_counts_completed]),
+				(frm.doc.total_counts_completed < frm.doc.total_counts_targeted) ? 'orange' : 'green');
+		}
+
+		if (frm.doc.docstatus === 1) {
+			frm.add_custom_button(__('Patient Assessment'), function() {
+				frappe.model.open_mapped_doc({
+					method: 'healthcare.healthcare.doctype.patient_assessment.patient_assessment.create_patient_assessment',
+					frm: frm,
+				})
+			}, 'Create');
+
+			frappe.db.get_value('Therapy Plan', {'name': frm.doc.therapy_plan}, 'therapy_plan_template', (r) => {
+				if (r && !r.therapy_plan_template) {
+					frm.add_custom_button(__('Sales Invoice'), function() {
+						frappe.model.open_mapped_doc({
+							method: 'healthcare.healthcare.doctype.therapy_session.therapy_session.invoice_therapy_session',
+							frm: frm,
+						});
+					}, 'Create');
+				}
+			});
+		}
+	},
+
+	therapy_plan: function(frm) {
+		if (frm.doc.therapy_plan) {
+			frm.trigger('filter_therapy_types');
+		}
+	},
+
+	filter_therapy_types: function(frm) {
+		frappe.call({
+			'method': 'frappe.client.get',
+			args: {
+				doctype: 'Therapy Plan',
+				name: frm.doc.therapy_plan
+			},
+			callback: function(data) {
+				let therapy_types = (data.message.therapy_plan_details || []).map(function(d){ return d.therapy_type; });
+				frm.set_query('therapy_type', function() {
+					return {
+						filters: { 'therapy_type': ['in', therapy_types]}
+					};
+				});
+			}
+		});
+	},
+
+	patient: function(frm) {
+		if (frm.doc.patient) {
+			frappe.call({
+				'method': 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+				args: {
+					patient: frm.doc.patient
+				},
+				callback: function (data) {
+					let age = '';
+					if (data.message.dob) {
+						age = calculate_age(data.message.dob);
+					} else if (data.message.age) {
+						age = data.message.age;
+						if (data.message.age_as_on) {
+							age = __('{0} as on {1}', [age, data.message.age_as_on]);
+						}
+					}
+					frm.set_value('patient_age', age);
+					frm.set_value('gender', data.message.sex);
+					frm.set_value('patient_name', data.message.patient_name);
+				}
+			});
+		} else {
+			frm.set_value('patient_age', '');
+			frm.set_value('gender', '');
+			frm.set_value('patient_name', '');
+		}
+	},
+
+	appointment: function(frm) {
+		if (frm.doc.appointment) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Patient Appointment',
+					name: frm.doc.appointment
+				},
+				callback: function(data) {
+					let values = {
+						'patient':data.message.patient,
+						'therapy_type': data.message.therapy_type,
+						'therapy_plan': data.message.therapy_plan,
+						'practitioner': data.message.practitioner,
+						'department': data.message.department,
+						'start_date': data.message.appointment_date,
+						'start_time': data.message.appointment_time,
+						'service_unit': data.message.service_unit,
+						'company': data.message.company,
+						'duration': data.message.duration
+					};
+					frm.set_value(values);
+				}
+			});
+		}
+	},
+
+	therapy_type: function(frm) {
+		if (frm.doc.therapy_type) {
+			frappe.call({
+				'method': 'frappe.client.get',
+				args: {
+					doctype: 'Therapy Type',
+					name: frm.doc.therapy_type
+				},
+				callback: function(data) {
+					frm.set_value('duration', data.message.default_duration);
+					frm.set_value('rate', data.message.rate);
+					frm.set_value('service_unit', data.message.healthcare_service_unit);
+					frm.set_value('department', data.message.medical_department);
+					frm.doc.exercises = [];
+					$.each(data.message.exercises, function(_i, e) {
+						let exercise = frm.add_child('exercises');
+						exercise.exercise_type = e.exercise_type;
+						exercise.difficulty_level = e.difficulty_level;
+						exercise.counts_target = e.counts_target;
+						exercise.assistance_level = e.assistance_level;
+					});
+					frm.clear_table("codification_table")
+					$.each(data.message.codification_table, function(k, val) {
+						if (val.code_value) {
+							let mcode = frm.add_child("codification_table");
+							mcode.code_value = val.code_value
+							mcode.code_system = val.code_system
+							mcode.code = val.code
+							mcode.description = val.description
+							mcode.system = val.system
+						}
+					});
+					refresh_field("codification_table");
+					refresh_field('exercises');
+				}
+			});
+		} else {
+			frm.clear_table("codification_table")
+			frm.refresh_field("codification_table");
+		}
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_session/therapy_session.json
@@ -0,0 +1,300 @@
+{
+ "actions": [],
+ "autoname": "naming_series:",
+ "creation": "2022-01-25 14:05:27.763033",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "appointment",
+  "therapy_plan",
+  "patient",
+  "patient_name",
+  "patient_age",
+  "gender",
+  "column_break_5",
+  "company",
+  "therapy_type",
+  "practitioner",
+  "department",
+  "details_section",
+  "duration",
+  "rate",
+  "location",
+  "column_break_12",
+  "service_unit",
+  "start_date",
+  "start_time",
+  "exercises_section",
+  "exercises",
+  "section_break_23",
+  "total_counts_targeted",
+  "column_break_25",
+  "total_counts_completed",
+  "medical_coding_section",
+  "codification_table",
+  "more_information_section",
+  "service_request",
+  "invoiced",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-THP-.YYYY.-"
+  },
+  {
+   "fieldname": "appointment",
+   "fieldtype": "Link",
+   "label": "Appointment",
+   "options": "Patient Appointment",
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_5",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "details_section",
+   "fieldtype": "Section Break",
+   "label": "Details"
+  },
+  {
+   "fieldname": "location",
+   "fieldtype": "Select",
+   "label": "Location",
+   "options": "\nCenter\nHome\nTele"
+  },
+  {
+   "fieldname": "column_break_12",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "therapy_template.rate",
+   "fieldname": "rate",
+   "fieldtype": "Currency",
+   "label": "Rate"
+  },
+  {
+   "fieldname": "exercises_section",
+   "fieldtype": "Section Break",
+   "label": "Exercises"
+  },
+  {
+   "fieldname": "exercises",
+   "fieldtype": "Table",
+   "label": "Exercises",
+   "options": "Exercise"
+  },
+  {
+   "depends_on": "eval: doc.therapy_plan",
+   "fieldname": "therapy_type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Therapy Type",
+   "options": "Therapy Type",
+   "reqd": 1
+  },
+  {
+   "fieldname": "therapy_plan",
+   "fieldtype": "Link",
+   "label": "Therapy Plan",
+   "options": "Therapy Plan",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Therapy Session",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Healthcare Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "default": "Today",
+   "fieldname": "start_date",
+   "fieldtype": "Date",
+   "label": "Start Date",
+   "reqd": 1
+  },
+  {
+   "default": "Now",
+   "fieldname": "start_time",
+   "fieldtype": "Time",
+   "label": "Start Time"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company",
+   "reqd": 1
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "label": "Patient Age",
+   "read_only": 1
+  },
+  {
+   "fieldname": "total_counts_targeted",
+   "fieldtype": "Int",
+   "label": "Total Counts Targeted",
+   "read_only": 1
+  },
+  {
+   "fieldname": "total_counts_completed",
+   "fieldtype": "Int",
+   "label": "Total Counts Completed",
+   "no_copy": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_23",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "column_break_25",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "medical_coding_section",
+   "fieldtype": "Section Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "fieldname": "service_request",
+   "fieldtype": "Link",
+   "in_standard_filter": 1,
+   "label": "Service Request",
+   "no_copy": 1,
+   "options": "Service Request",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "more_information_section",
+   "fieldtype": "Section Break",
+   "label": "More Information"
+  },
+  {
+   "fieldname": "duration",
+   "fieldtype": "Int",
+   "label": "Duration",
+   "non_negative": 1,
+   "reqd": 1
+  }
+ ],
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Nursing Task",
+   "link_fieldname": "reference_name"
+  },
+  {
+   "link_doctype": "Sales Invoice",
+   "link_fieldname": "reference_name"
+  }
+ ],
+ "modified": "2024-08-14 17:14:50.817700",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Session",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "cancel": 1,
+   "create": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "search_fields": "patient,appointment,therapy_plan,therapy_type",
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_session/therapy_session.py
@@ -0,0 +1,230 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import datetime
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.mapper import get_mapped_doc
+from frappe.utils import flt, get_link_to_form, get_time, getdate
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+	get_receivable_account,
+)
+from healthcare.healthcare.doctype.nursing_task.nursing_task import NursingTask
+from healthcare.healthcare.doctype.service_request.service_request import (
+	update_service_request_status,
+)
+from healthcare.healthcare.utils import validate_nursing_tasks
+
+
+class TherapySession(Document):
+	def validate(self):
+		self.set_exercises_from_therapy_type()
+		self.validate_duplicate()
+		self.set_total_counts()
+
+	def after_insert(self):
+		if self.service_request:
+			update_service_request_status(
+				self.service_request, self.doctype, self.name, "completed-Request Status"
+			)
+
+		self.create_nursing_tasks(post_event=False)
+
+	def on_update(self):
+		if self.appointment:
+			frappe.db.set_value("Patient Appointment", self.appointment, "status", "Closed")
+
+	def on_cancel(self):
+		if self.appointment:
+			frappe.db.set_value("Patient Appointment", self.appointment, "status", "Open")
+		if self.service_request:
+			frappe.db.set_value("Service Request", self.service_request, "status", "active-Request Status")
+
+		self.update_sessions_count_in_therapy_plan(on_cancel=True)
+
+	def validate_duplicate(self):
+		end_time = datetime.datetime.combine(
+			getdate(self.start_date), get_time(self.start_time)
+		) + datetime.timedelta(minutes=flt(self.duration))
+
+		overlaps = frappe.db.sql(
+			"""
+		select
+			name
+		from
+			`tabTherapy Session`
+		where
+			start_date=%s and name!=%s and docstatus!=2
+			and (practitioner=%s or patient=%s) and
+			((start_time<%s and start_time + INTERVAL duration MINUTE>%s) or
+			(start_time>%s and start_time<%s) or
+			(start_time=%s))
+		""",
+			(
+				self.start_date,
+				self.name,
+				self.practitioner,
+				self.patient,
+				self.start_time,
+				end_time.time(),
+				self.start_time,
+				end_time.time(),
+				self.start_time,
+			),
+		)
+
+		if overlaps:
+			overlapping_details = _("Therapy Session overlaps with {0}").format(
+				get_link_to_form("Therapy Session", overlaps[0][0])
+			)
+			frappe.throw(overlapping_details, title=_("Therapy Sessions Overlapping"))
+
+	def on_submit(self):
+		validate_nursing_tasks(self)
+		self.update_sessions_count_in_therapy_plan()
+
+		if self.service_request:
+			frappe.db.set_value("Service Request", self.service_request, "status", "Completed")
+
+	def create_nursing_tasks(self, post_event=True):
+		template = frappe.db.get_value("Therapy Type", self.therapy_type, "nursing_checklist_template")
+		if template:
+			NursingTask.create_nursing_tasks_from_template(
+				template,
+				self,
+				start_time=frappe.utils.get_datetime(f"{self.start_date} {self.start_time}"),
+				post_event=post_event,
+			)
+
+	def update_sessions_count_in_therapy_plan(self, on_cancel=False):
+		therapy_plan = frappe.get_doc("Therapy Plan", self.therapy_plan)
+		for entry in therapy_plan.therapy_plan_details:
+			if entry.therapy_type == self.therapy_type:
+				if on_cancel:
+					entry.sessions_completed -= 1
+				else:
+					entry.sessions_completed += 1
+		therapy_plan.save()
+
+	def set_total_counts(self):
+		target_total = 0
+		counts_completed = 0
+		for entry in self.exercises:
+			if entry.counts_target:
+				target_total += entry.counts_target
+			if entry.counts_completed:
+				counts_completed += entry.counts_completed
+
+		self.db_set("total_counts_targeted", target_total)
+		self.db_set("total_counts_completed", counts_completed)
+
+	def set_exercises_from_therapy_type(self):
+		if self.therapy_type and not self.exercises:
+			therapy_type_doc = frappe.get_cached_doc("Therapy Type", self.therapy_type)
+			if therapy_type_doc.exercises:
+				for exercise in therapy_type_doc.exercises:
+					self.append(
+						"exercises",
+						(frappe.copy_doc(exercise)).as_dict(),
+					)
+
+	def before_insert(self):
+		if self.service_request:
+			therapy_session = frappe.db.exists(
+				"Therapy Session",
+				{"service_request": self.service_request, "docstatus": ["!=", 2]},
+			)
+			if therapy_session:
+				frappe.throw(
+					_("Therapy Session {0} already created from service request {1}").format(
+						frappe.bold(get_link_to_form("Therapy Session", therapy_session)),
+						frappe.bold(get_link_to_form("Service Request", self.service_request)),
+					),
+					title=_("Already Exist"),
+				)
+
+
+@frappe.whitelist()
+def create_therapy_session(source_name, target_doc=None):
+	def set_missing_values(source, target):
+		therapy_type = frappe.get_doc("Therapy Type", source.therapy_type)
+		target.exercises = therapy_type.exercises
+
+	doc = get_mapped_doc(
+		"Patient Appointment",
+		source_name,
+		{
+			"Patient Appointment": {
+				"doctype": "Therapy Session",
+				"field_map": [
+					["appointment", "name"],
+					["patient", "patient"],
+					["patient_age", "patient_age"],
+					["gender", "patient_sex"],
+					["therapy_type", "therapy_type"],
+					["therapy_plan", "therapy_plan"],
+					["practitioner", "practitioner"],
+					["department", "department"],
+					["start_date", "appointment_date"],
+					["start_time", "appointment_time"],
+					["service_unit", "service_unit"],
+					["company", "company"],
+					["invoiced", "invoiced"],
+				],
+			}
+		},
+		target_doc,
+		set_missing_values,
+	)
+
+	return doc
+
+
+@frappe.whitelist()
+def invoice_therapy_session(source_name, target_doc=None):
+	def set_missing_values(source, target):
+		target.customer = frappe.db.get_value("Patient", source.patient, "customer")
+		target.due_date = getdate()
+		target.debit_to = get_receivable_account(source.company)
+		item = target.append("items", {})
+		item = get_therapy_item(source, item)
+		target.set_missing_values(for_validate=True)
+
+	doc = get_mapped_doc(
+		"Therapy Session",
+		source_name,
+		{
+			"Therapy Session": {
+				"doctype": "Sales Invoice",
+				"field_map": [
+					["patient", "patient"],
+					["referring_practitioner", "practitioner"],
+					["company", "company"],
+					["due_date", "start_date"],
+				],
+			}
+		},
+		target_doc,
+		set_missing_values,
+	)
+
+	return doc
+
+
+def get_therapy_item(therapy, item):
+	item.item_code = frappe.db.get_value("Therapy Type", therapy.therapy_type, "item")
+	item.description = _("Therapy Session Charges: {0}").format(therapy.practitioner)
+	item.income_account = get_income_account(therapy.practitioner, therapy.company)
+	item.cost_center = frappe.get_cached_value("Company", therapy.company, "cost_center")
+	item.rate = therapy.rate
+	item.amount = therapy.rate
+	item.qty = 1
+	item.reference_dt = "Therapy Session"
+	item.reference_dn = therapy.name
+	return item
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_session/therapy_session_dashboard.py
@@ -0,0 +1,8 @@
+from frappe import _
+
+
+def get_data():
+	return {
+		"fieldname": "therapy_session",
+		"transactions": [{"label": _("Assessments"), "items": ["Patient Assessment"]}],
+	}
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_type/test_therapy_type.py
@@ -0,0 +1,53 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestTherapyType(FrappeTestCase):
+	def test_therapy_type_item(self):
+		therapy_type = create_therapy_type()
+		self.assertTrue(frappe.db.exists("Item", therapy_type.item))
+
+		therapy_type.disabled = 1
+		therapy_type.save()
+		self.assertEqual(frappe.db.get_value("Item", therapy_type.item, "disabled"), 1)
+
+
+def create_therapy_type():
+	exercise = create_exercise_type()
+	therapy_type = frappe.db.exists("Therapy Type", "Basic Rehab")
+	if not therapy_type:
+		therapy_type = frappe.new_doc("Therapy Type")
+		therapy_type.therapy_type = "Basic Rehab"
+		therapy_type.default_duration = 30
+		therapy_type.is_billable = 1
+		therapy_type.rate = 5000
+		therapy_type.item_code = "Basic Rehab"
+		therapy_type.item_name = "Basic Rehab"
+		therapy_type.item_group = "Services"
+		therapy_type.append(
+			"exercises",
+			{"exercise_type": exercise.name, "counts_target": 10, "assistance_level": "Passive"},
+		)
+		therapy_type.save()
+	else:
+		therapy_type = frappe.get_doc("Therapy Type", therapy_type)
+
+	return therapy_type
+
+
+def create_exercise_type():
+	exercise_type = frappe.db.exists("Exercise Type", "Sit to Stand")
+	if not exercise_type:
+		exercise_type = frappe.new_doc("Exercise Type")
+		exercise_type.exercise_name = "Sit to Stand"
+		exercise_type.append("steps_table", {"title": "Step 1", "description": "Squat and Rise"})
+		exercise_type.save()
+	else:
+		exercise_type = frappe.get_doc("Exercise Type", exercise_type)
+
+	return exercise_type
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_type/therapy_type.js
@@ -0,0 +1,113 @@
+// Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Therapy Type', {
+	setup: function(frm) {
+		frm.get_field('exercises').grid.editable_fields = [
+			{fieldname: 'exercise_type', columns: 7},
+			{fieldname: 'difficulty_level', columns: 1},
+			{fieldname: 'counts_target', columns: 1},
+			{fieldname: 'assistance_level', columns: 1}
+		];
+	},
+
+	refresh: function(frm) {
+		if (!frm.doc.__islocal) {
+			cur_frm.add_custom_button(__('Change Item Code'), function() {
+				change_template_code(frm.doc);
+			});
+		}
+
+		frm.set_query("code_value", "codification_table", function(doc, cdt, cdn) {
+			let row = frappe.get_doc(cdt, cdn);
+			if (row.code_system) {
+				return {
+					filters: {
+						code_system: row.code_system
+					}
+				};
+			}
+		})
+
+		frm.set_query('staff_role', function () {
+			return {
+				filters: {
+					'restrict_to_domain': 'Healthcare'
+				}
+			};
+		});
+	},
+
+	therapy_type: function(frm) {
+		if (!frm.doc.item_code)
+			frm.set_value('item_code', frm.doc.therapy_type);
+		if (!frm.doc.description)
+			frm.set_value('description', frm.doc.therapy_type);
+		mark_change_in_item(frm);
+	},
+
+	rate: function(frm) {
+		mark_change_in_item(frm);
+	},
+
+	is_billable: function (frm) {
+		mark_change_in_item(frm);
+	},
+
+	item_group: function(frm) {
+		mark_change_in_item(frm);
+	},
+
+	description: function(frm) {
+		mark_change_in_item(frm);
+	},
+
+	medical_department: function(frm) {
+		mark_change_in_item(frm);
+	},
+
+});
+
+let mark_change_in_item = function(frm) {
+	if (!frm.doc.__islocal) {
+		frm.doc.change_in_item = 1;
+	}
+};
+
+let change_template_code = function(doc) {
+	let d = new frappe.ui.Dialog({
+		title:__('Change Item Code'),
+		fields:[
+			{
+				'fieldtype': 'Data',
+				'label': 'Item Code',
+				'fieldname': 'item_code',
+				reqd: 1
+			}
+		],
+		primary_action: function() {
+			let values = d.get_values();
+
+			if (values) {
+				frappe.call({
+					'method': 'healthcare.healthcare.doctype.therapy_type.therapy_type.change_item_code_from_therapy',
+					'args': {item_code: values.item_code, doc: doc},
+					callback: function () {
+						cur_frm.reload_doc();
+						frappe.show_alert({
+							message: 'Item Code renamed successfully',
+							indicator: 'green'
+						});
+					}
+				});
+			}
+			d.hide();
+		},
+		primary_action_label: __('Change Item Code')
+	});
+	d.show();
+
+	d.set_values({
+		'item_code': doc.item_code
+	});
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_type/therapy_type.json
@@ -0,0 +1,263 @@
+{
+ "actions": [],
+ "autoname": "field:therapy_type",
+ "creation": "2022-01-26 12:22:05.283047",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "disabled",
+  "section_break_2",
+  "therapy_type",
+  "medical_department",
+  "description",
+  "column_break_3",
+  "default_duration",
+  "healthcare_service_unit",
+  "nursing_checklist_template",
+  "item_details_section",
+  "item",
+  "item_code",
+  "item_name",
+  "item_group",
+  "column_break_12",
+  "is_billable",
+  "rate",
+  "exercises_tab",
+  "section_break_6",
+  "therapy_for",
+  "add_exercises",
+  "section_break_18",
+  "exercises",
+  "change_in_item",
+  "codification",
+  "codification_table",
+  "service_request_defaults_tab",
+  "patient_care_type",
+  "staff_role"
+ ],
+ "fields": [
+  {
+   "fieldname": "therapy_type",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Therapy Type",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "column_break_3",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "is_billable",
+   "fieldtype": "Check",
+   "label": "Is Billable"
+  },
+  {
+   "depends_on": "eval:doc.is_billable;",
+   "fieldname": "rate",
+   "fieldtype": "Currency",
+   "label": "Rate",
+   "mandatory_depends_on": "eval:doc.is_billable;"
+  },
+  {
+   "fieldname": "section_break_6",
+   "fieldtype": "Section Break",
+   "label": "Exercises"
+  },
+  {
+   "fieldname": "exercises",
+   "fieldtype": "Table",
+   "label": "Exercises",
+   "options": "Exercise"
+  },
+  {
+   "fieldname": "default_duration",
+   "fieldtype": "Int",
+   "label": "Default Duration (In Minutes)"
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "fieldname": "item_details_section",
+   "fieldtype": "Section Break",
+   "label": "Item Details"
+  },
+  {
+   "fieldname": "item",
+   "fieldtype": "Link",
+   "label": "Item",
+   "options": "Item",
+   "read_only": 1
+  },
+  {
+   "fieldname": "item_code",
+   "fieldtype": "Data",
+   "label": "Item Code",
+   "reqd": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "item_group",
+   "fieldtype": "Link",
+   "label": "Item Group",
+   "options": "Item Group",
+   "reqd": 1
+  },
+  {
+   "fieldname": "item_name",
+   "fieldtype": "Data",
+   "label": "Item Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_12",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description"
+  },
+  {
+   "fieldname": "section_break_2",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "default": "0",
+   "fieldname": "change_in_item",
+   "fieldtype": "Check",
+   "hidden": 1,
+   "label": "Change In Item",
+   "print_hide": 1,
+   "read_only": 1,
+   "report_hide": 1
+  },
+  {
+   "fieldname": "therapy_for",
+   "fieldtype": "Table MultiSelect",
+   "label": "Therapy For",
+   "options": "Body Part Link"
+  },
+  {
+   "fieldname": "healthcare_service_unit",
+   "fieldtype": "Link",
+   "label": "Healthcare Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "depends_on": "eval: doc.therapy_for",
+   "fieldname": "add_exercises",
+   "fieldtype": "Button",
+   "label": "Add Exercises",
+   "options": "add_exercises"
+  },
+  {
+   "fieldname": "section_break_18",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "codification_table",
+   "fieldtype": "Table",
+   "label": "Medical Codes",
+   "options": "Codification Table"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "codification",
+   "fieldtype": "Tab Break",
+   "label": "Medical Coding"
+  },
+  {
+   "fieldname": "nursing_checklist_template",
+   "fieldtype": "Link",
+   "label": "Nursing Checklist Template",
+   "options": "Nursing Checklist Template"
+  },
+  {
+   "fetch_from": "service_request_category.patient_care_type",
+   "fetch_if_empty": 1,
+   "fieldname": "patient_care_type",
+   "fieldtype": "Link",
+   "label": "Patient Care Type",
+   "options": "Patient Care Type"
+  },
+  {
+   "fieldname": "staff_role",
+   "fieldtype": "Link",
+   "label": "Staff Role",
+   "options": "Role"
+  },
+  {
+   "fieldname": "exercises_tab",
+   "fieldtype": "Tab Break",
+   "label": "Exercises"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "service_request_defaults_tab",
+   "fieldtype": "Tab Break",
+   "label": "Service Request Defaults"
+  }
+ ],
+ "links": [],
+ "modified": "2023-11-06 14:59:47.927972",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Therapy Type",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "quick_entry": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/therapy_type/therapy_type.py
@@ -0,0 +1,133 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2020, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+from frappe.model.rename_doc import rename_doc
+from frappe.utils import cint
+
+from healthcare.healthcare.doctype.clinical_procedure_template.clinical_procedure_template import (
+	make_item_price,
+)
+
+
+class TherapyType(Document):
+	def validate(self):
+		self.enable_disable_item()
+
+	def after_insert(self):
+		create_item_from_therapy(self)
+
+	def on_update(self):
+		if self.change_in_item:
+			self.update_item_and_item_price()
+
+	def enable_disable_item(self):
+		if self.is_billable:
+			if self.disabled:
+				frappe.db.set_value("Item", self.item, "disabled", 1)
+			else:
+				frappe.db.set_value("Item", self.item, "disabled", 0)
+
+	def update_item_and_item_price(self):
+		if self.is_billable and self.item:
+			item_doc = frappe.get_doc("Item", {"item_code": self.item})
+			item_doc.item_name = self.item_name
+			item_doc.item_group = self.item_group
+			item_doc.description = self.description
+			item_doc.disabled = 0
+			item_doc.ignore_mandatory = True
+			item_doc.save(ignore_permissions=True)
+
+			if self.rate:
+				if frappe.db.exists("Item Price", {"item_code": self.item}):
+					item_price = frappe.get_doc("Item Price", {"item_code": self.item})
+					item_price.item_name = self.item_name
+					item_price.price_list_rate = self.rate
+					item_price.ignore_mandatory = True
+					item_price.save()
+				else:
+					make_item_price(self.item, self.rate)
+
+		elif not self.is_billable and self.item:
+			frappe.db.set_value("Item", self.item, "disabled", 1)
+
+		self.db_set("change_in_item", 0)
+
+	@frappe.whitelist()
+	def add_exercises(self):
+		exercises = self.get_exercises_for_body_parts()
+		last_idx = max(
+			[cint(d.idx) for d in self.get("exercises")]
+			or [
+				0,
+			]
+		)
+		for i, d in enumerate(exercises):
+			ch = self.append("exercises", {})
+			ch.exercise_type = d.parent
+			ch.idx = last_idx + i + 1
+
+	def get_exercises_for_body_parts(self):
+		body_parts = [entry.body_part for entry in self.therapy_for]
+
+		exercises = frappe.db.sql(
+			"""
+				SELECT DISTINCT
+					b.parent, e.name, e.difficulty_level
+				FROM
+				 	`tabExercise Type` e, `tabBody Part Link` b
+				WHERE
+					b.body_part IN %(body_parts)s AND b.parent=e.name
+			""",
+			{"body_parts": body_parts},
+			as_dict=1,
+		)
+
+		return exercises
+
+
+def create_item_from_therapy(doc):
+	disabled = doc.disabled
+	if doc.is_billable and not doc.disabled:
+		disabled = 0
+
+	uom = frappe.db.exists("UOM", "Unit") or frappe.db.get_single_value("Stock Settings", "stock_uom")
+
+	item = frappe.get_doc(
+		{
+			"doctype": "Item",
+			"item_code": doc.item_code,
+			"item_name": doc.item_name,
+			"item_group": doc.item_group,
+			"description": doc.description,
+			"is_sales_item": 1,
+			"is_service_item": 1,
+			"is_purchase_item": 0,
+			"is_stock_item": 0,
+			"show_in_website": 0,
+			"is_pro_applicable": 0,
+			"disabled": disabled,
+			"stock_uom": uom,
+		}
+	).insert(ignore_permissions=True, ignore_mandatory=True)
+
+	make_item_price(item.name, doc.rate)
+	doc.db_set("item", item.name)
+
+
+@frappe.whitelist()
+def change_item_code_from_therapy(item_code, doc):
+	doc = frappe._dict(json.loads(doc))
+
+	if frappe.db.exists("Item", {"item_code": item_code}):
+		frappe.throw(_("Item with Item Code {0} already exists").format(item_code))
+	else:
+		rename_doc("Item", doc.item, item_code, ignore_permissions=True)
+		frappe.db.set_value("Therapy Type", doc.name, "item_code", item_code)
+	return
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_counselling/treatment_counselling.js
@@ -0,0 +1,103 @@
+// Copyright (c) 2023, healthcare and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on("Treatment Counselling", {
+    refresh(frm) {
+		if (!frm.doc.__islocal) {
+			if (frm.doc.docstatus === 1) {
+				if (frm.doc.encounter_status == "Admission Scheduled" && frm.doc.status == "Active") {
+					if (!frm.doc.inpatient_record) {
+						frm.add_custom_button(__('Schedule Admission'), function() {
+							frappe.confirm(__("Confirm to Schedule Admission"), function() {
+								schedule_inpatient(frm);
+							});
+						});
+					}
+					if (frm.doc.outstanding_amount > 0) {
+						frm.add_custom_button(__('Payment Entry'), function() {
+							frappe.call({
+								method: "healthcare.healthcare.doctype.treatment_counselling.treatment_counselling.create_payment_entry",
+								args: {
+									treatment_counselling: frm.doc.name
+								},
+								callback: function (r) {
+									if (r && r.message) {
+										frappe.set_route("Form", "Payment Entry", r.message);
+									}
+								}
+							});
+						}, 'Create')
+					}
+				}
+				if (frm.doc.status == "Completed") {
+					frm.add_custom_button(__("Admission Encounter"), function() {
+						frappe.set_route("Form", "Patient Encounter", frm.doc.admission_encounter);
+					}, "View")
+
+					frm.add_custom_button(__("Inpatient Record"), function() {
+						frappe.set_route("Form", "Inpatient Record", frm.doc.inpatient_record);
+					}, "View")
+				}
+			}
+			if(frm.doc.status == "Active") {
+				frm.add_custom_button(__('Close'), function() {
+					frm.set_value("status", "Closed")
+					frm.save("Update")
+					frm.refresh();
+				})
+			}
+		}
+	},
+	tc_name(frm) {
+		set_terms_and_conditions(frm)
+	},
+});
+
+
+var set_terms_and_conditions = function(frm){
+	if (frm.doc.tc_name) {
+		return frappe.call({
+			method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',
+			args: {
+				template_name: frm.doc.tc_name,
+				doc: frm.doc
+			},
+			callback: function (r) {
+				frm.set_value('terms', r.message)
+			}
+		});
+	} else {
+		frm.set_value('terms', '')
+	}
+}
+
+var schedule_inpatient = function(frm) {
+	var args = {
+		patient: frm.doc.patient,
+		admission_encounter: frm.doc.admission_encounter,
+		referring_practitioner: frm.doc.referring_practitioner,
+		company: frm.doc.company,
+		medical_department: frm.doc.medical_department,
+		primary_practitioner: frm.doc.primary_practitioner,
+		secondary_practitioner: frm.doc.secondary_practitioner,
+		admission_ordered_for: frm.doc.admission_ordered_for,
+		admission_service_unit_type: frm.doc.service_unit_type,
+		treatment_plan_template: frm.doc.treatment_plan_template,
+		expected_length_of_stay: frm.doc.expected_length_of_stay,
+		admission_instruction: frm.doc.admission_instruction,
+		admission_nursing_checklist_template: frm.doc.admission_nursing_checklist_template,
+	}
+	frappe.call({
+		method: "healthcare.healthcare.doctype.treatment_counselling.treatment_counselling.create_ip_from_treatment_counselling",
+		args: {
+			admission_order: args,
+			treatment_counselling: frm.doc.name,
+		},
+		callback: function(data) {
+			if (!data.exc) {
+				frm.reload_doc();
+			}
+		},
+	})
+}
+
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/test_records.json
@@ -0,0 +1,7 @@
+[
+  {
+    "doctype": "Treatment Plan Template",
+    "template_name": "Chemo",
+    "patient_age_from": 21
+  }
+]
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/test_treatment_plan_template.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestTreatmentPlanTemplate(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/treatment_plan_template.js
@@ -0,0 +1,29 @@
+// Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Treatment Plan Template', {
+	refresh: function (frm) {
+		frm.set_query('type', 'items', function () {
+			return {
+				filters: {
+					'name': ['in', [
+						'Lab Test Template',
+						'Clinical Procedure Template',
+						'Therapy Type',
+						'Observation Template',
+					]],
+				}
+			};
+		});
+
+		frm.set_query("practitioners", function () {
+			if (frm.doc.medical_department) {
+				return {
+					filters: {
+						"department": frm.doc.medical_department
+					}
+				};
+			}
+		});
+	},
+});
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/treatment_plan_template.json
@@ -0,0 +1,203 @@
+{
+ "actions": [],
+ "autoname": "field:template_name",
+ "creation": "2021-06-10 10:14:17.901273",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_1",
+  "template_name",
+  "description",
+  "medical_department",
+  "column_break_1",
+  "disabled",
+  "goal",
+  "practitioners",
+  "order_group",
+  "section_break_8",
+  "patient_age_from",
+  "complaints",
+  "diagnosis",
+  "column_break_12",
+  "patient_age_to",
+  "gender",
+  "ivestigation_procedures_tab",
+  "medications_section",
+  "drugs",
+  "plan_items_section",
+  "items"
+ ],
+ "fields": [
+  {
+   "fieldname": "section_break_1",
+   "fieldtype": "Section Break",
+   "label": "Template Details"
+  },
+  {
+   "fieldname": "medical_department",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Medical Department",
+   "options": "Medical Department"
+  },
+  {
+   "fieldname": "description",
+   "fieldtype": "Small Text",
+   "label": "Description"
+  },
+  {
+   "fieldname": "goal",
+   "fieldtype": "Small Text",
+   "label": "Goal"
+  },
+  {
+   "fieldname": "practitioners",
+   "fieldtype": "Table MultiSelect",
+   "label": "Practitioners",
+   "options": "Treatment Plan Template Practitioner"
+  },
+  {
+   "fieldname": "order_group",
+   "fieldtype": "Link",
+   "label": "Order Group",
+   "options": "Patient Encounter",
+   "read_only": 1
+  },
+  {
+   "fieldname": "section_break_8",
+   "fieldtype": "Section Break",
+   "label": "Plan Conditions"
+  },
+  {
+   "fieldname": "template_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Template Name",
+   "reqd": 1,
+   "unique": 1
+  },
+  {
+   "fieldname": "patient_age_from",
+   "fieldtype": "Int",
+   "label": "Patient Age From",
+   "non_negative": 1
+  },
+  {
+   "fieldname": "column_break_12",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "patient_age_to",
+   "fieldtype": "Int",
+   "label": "Patient Age To",
+   "non_negative": 1
+  },
+  {
+   "fieldname": "gender",
+   "fieldtype": "Link",
+   "label": "Gender",
+   "options": "Gender"
+  },
+  {
+   "fieldname": "complaints",
+   "fieldtype": "Table MultiSelect",
+   "label": "Complaints",
+   "options": "Patient Encounter Symptom"
+  },
+  {
+   "fieldname": "diagnosis",
+   "fieldtype": "Table MultiSelect",
+   "label": "Diagnosis",
+   "options": "Patient Encounter Diagnosis"
+  },
+  {
+   "fieldname": "plan_items_section",
+   "fieldtype": "Section Break",
+   "label": "Investigations, Therapy & Procedures"
+  },
+  {
+   "fieldname": "items",
+   "fieldtype": "Table",
+   "label": "Items",
+   "options": "Treatment Plan Template Item"
+  },
+  {
+   "fieldname": "drugs",
+   "fieldtype": "Table",
+   "label": "Medications",
+   "options": "Drug Prescription"
+  },
+  {
+   "default": "0",
+   "fieldname": "disabled",
+   "fieldtype": "Check",
+   "label": "Disabled"
+  },
+  {
+   "fieldname": "column_break_1",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "medications_section",
+   "fieldtype": "Section Break",
+   "label": "Medications"
+  },
+  {
+   "fieldname": "ivestigation_procedures_tab",
+   "fieldtype": "Tab Break",
+   "label": "Plan"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "links": [],
+ "modified": "2023-01-13 19:58:52.567460",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Treatment Plan Template",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "write": 1
+  },
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Healthcare Administrator",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "template_name",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/treatment_plan_template.py
@@ -0,0 +1,19 @@
+# Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe import _
+from frappe.model.document import Document
+
+
+class TreatmentPlanTemplate(Document):
+	def validate(self):
+		self.validate_age()
+
+	def validate_age(self):
+		if self.patient_age_from and self.patient_age_from < 0:
+			frappe.throw(_("Patient Age From cannot be less than 0"))
+		if self.patient_age_to and self.patient_age_to < 0:
+			frappe.throw(_("Patient Age To cannot be less than 0"))
+		if self.patient_age_to and self.patient_age_from and self.patient_age_to < self.patient_age_from:
+			frappe.throw(_("Patient Age To cannot be less than Patient Age From"))
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template/treatment_plan_template_list.js
@@ -0,0 +1,10 @@
+frappe.listview_settings['Treatment Plan Template'] = {
+	get_indicator: function(doc) {
+		var colors = {
+			1: 'gray',
+			0: 'blue',
+		};
+		let label  = doc.disabled == 1 ? 'Disabled' : 'Enabled';
+		return [__(label), colors[doc.disabled], 'disable,=,' + doc.disabled];
+	}
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template_item/treatment_plan_template_item.json
@@ -0,0 +1,55 @@
+{
+ "actions": [],
+ "creation": "2021-06-10 11:47:29.194795",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "type",
+  "template",
+  "qty",
+  "instructions"
+ ],
+ "fields": [
+  {
+   "fieldname": "type",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Type",
+   "options": "DocType",
+   "reqd": 1
+  },
+  {
+   "fieldname": "template",
+   "fieldtype": "Dynamic Link",
+   "in_list_view": 1,
+   "label": "Template",
+   "options": "type",
+   "reqd": 1
+  },
+  {
+   "default": "1",
+   "fieldname": "qty",
+   "fieldtype": "Int",
+   "label": "Qty"
+  },
+  {
+   "fieldname": "instructions",
+   "fieldtype": "Small Text",
+   "in_list_view": 1,
+   "label": "Instructions"
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2021-08-17 11:19:03.515441",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Treatment Plan Template Item",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template_item/treatment_plan_template_item.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class TreatmentPlanTemplateItem(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template_practitioner/treatment_plan_template_practitioner.json
@@ -0,0 +1,32 @@
+{
+ "actions": [],
+ "creation": "2021-06-10 10:37:56.669416",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "practitioner"
+ ],
+ "fields": [
+  {
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "istable": 1,
+ "links": [],
+ "modified": "2021-06-11 16:05:06.733299",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Treatment Plan Template Practitioner",
+ "owner": "Administrator",
+ "permissions": [],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "track_changes": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/treatment_plan_template_practitioner/treatment_plan_template_practitioner.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2021, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class TreatmentPlanTemplatePractitioner(Document):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/vital_signs/test_vital_signs.py
@@ -0,0 +1,12 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and Contributors
+# See license.txt
+
+
+from frappe.tests.utils import FrappeTestCase
+
+# test_records = frappe.get_test_records('Vital Signs')
+
+
+class TestVitalSigns(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/healthcare/doctype/vital_signs/vital_signs.js
@@ -0,0 +1,52 @@
+// Copyright (c) 2016, ESS LLP and contributors
+// For license information, please see license.txt
+
+frappe.ui.form.on('Vital Signs', {
+	height: function(frm) {
+		if (frm.doc.height && frm.doc.weight) {
+			calculate_bmi(frm);
+		}
+	},
+
+	weight: function(frm) {
+		if (frm.doc.height && frm.doc.weight) {
+			calculate_bmi(frm);
+		}
+	},
+
+	bp_systolic: function(frm) {
+		if (frm.doc.bp_systolic && frm.doc.bp_diastolic) {
+			set_bp(frm);
+		}
+	},
+
+	bp_diastolic: function(frm) {
+		if (frm.doc.bp_systolic && frm.doc.bp_diastolic) {
+			set_bp(frm);
+		}
+	}
+});
+
+let calculate_bmi = function(frm){
+	// Reference https://en.wikipedia.org/wiki/Body_mass_index
+	// bmi = weight (in Kg) / height * height (in Meter)
+	let bmi = (frm.doc.weight / (frm.doc.height * frm.doc.height)).toFixed(2);
+	let bmi_note = null;
+
+	if (bmi<18.5) {
+		bmi_note = __('Underweight');
+	} else if (bmi>=18.5 && bmi<25) {
+		bmi_note = __('Normal');
+	} else if (bmi>=25 && bmi<30) {
+		bmi_note = __('Overweight');
+	} else if (bmi>=30) {
+		bmi_note = __('Obese');
+	}
+	frappe.model.set_value(frm.doctype,frm.docname, 'bmi', bmi);
+	frappe.model.set_value(frm.doctype,frm.docname, 'nutrition_note', bmi_note);
+};
+
+let set_bp = function(frm){
+	let bp = frm.doc.bp_systolic+ '/' + frm.doc.bp_diastolic + ' mmHg';
+	frappe.model.set_value(frm.doctype,frm.docname, 'bp', bp);
+};
--- /dev/null
+++ b/healthcare/healthcare/doctype/vital_signs/vital_signs.json
@@ -0,0 +1,318 @@
+{
+ "actions": [],
+ "allow_copy": 1,
+ "allow_import": 1,
+ "autoname": "naming_series:",
+ "creation": "2017-02-02 11:00:24.853005",
+ "doctype": "DocType",
+ "editable_grid": 1,
+ "engine": "InnoDB",
+ "field_order": [
+  "naming_series",
+  "title",
+  "patient",
+  "patient_name",
+  "inpatient_record",
+  "appointment",
+  "encounter",
+  "column_break_2",
+  "company",
+  "signs_date",
+  "signs_time",
+  "sb_vs",
+  "temperature",
+  "pulse",
+  "respiratory_rate",
+  "tongue",
+  "abdomen",
+  "column_break_8",
+  "reflexes",
+  "bp_systolic",
+  "bp_diastolic",
+  "bp",
+  "spo2",
+  "vital_signs_note",
+  "sb_nutrition_values",
+  "height",
+  "weight",
+  "body_surface_area",
+  "bmi",
+  "column_break_14",
+  "nutrition_note",
+  "sb_references",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fetch_from": "patient.inpatient_record",
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record",
+   "read_only": 1
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "ignore_user_permissions": 1,
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "appointment",
+   "fieldtype": "Link",
+   "in_filter": 1,
+   "label": "Patient Appointment",
+   "no_copy": 1,
+   "options": "Patient Appointment",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "encounter",
+   "fieldtype": "Link",
+   "in_filter": 1,
+   "label": "Patient Encounter",
+   "options": "Patient Encounter",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_2",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "Today",
+   "fieldname": "signs_date",
+   "fieldtype": "Date",
+   "label": "Date",
+   "reqd": 1
+  },
+  {
+   "default": "Now",
+   "fieldname": "signs_time",
+   "fieldtype": "Time",
+   "label": "Time",
+   "reqd": 1
+  },
+  {
+   "fieldname": "sb_vs",
+   "fieldtype": "Section Break",
+   "label": "Vital Signs"
+  },
+  {
+   "description": "Presence of a fever (temp &gt; 38.5 \u00b0C/101.3 \u00b0F or sustained temp &gt; 38 \u00b0C/100.4 \u00b0F)",
+   "fieldname": "temperature",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Body Temperature"
+  },
+  {
+   "description": "Adults' pulse rate is anywhere between 50 and 80 beats per minute.",
+   "fieldname": "pulse",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Heart Rate / Pulse"
+  },
+  {
+   "description": "Normal reference range for an adult is 16\u201320 breaths/minute (RCP 2012)",
+   "fieldname": "respiratory_rate",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Respiratory rate"
+  },
+  {
+   "fieldname": "tongue",
+   "fieldtype": "Select",
+   "label": "Tongue",
+   "options": "\nCoated\nVery Coated\nNormal\nFurry\nCuts"
+  },
+  {
+   "fieldname": "abdomen",
+   "fieldtype": "Select",
+   "label": "Abdomen",
+   "options": "\nNormal\nBloated\nFull\nFluid\nConstipated"
+  },
+  {
+   "fieldname": "column_break_8",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reflexes",
+   "fieldtype": "Select",
+   "label": "Reflexes",
+   "options": "\nNormal\nHyper\nVery Hyper\nOne Sided"
+  },
+  {
+   "fieldname": "bp_systolic",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Blood Pressure (systolic)"
+  },
+  {
+   "fieldname": "bp_diastolic",
+   "fieldtype": "Data",
+   "ignore_xss_filter": 1,
+   "in_list_view": 1,
+   "label": "Blood Pressure (diastolic)"
+  },
+  {
+   "description": "Normal resting blood pressure in an adult is approximately 120 mmHg systolic, and 80 mmHg diastolic, abbreviated \"120/80 mmHg\"",
+   "fieldname": "bp",
+   "fieldtype": "Data",
+   "label": "Blood Pressure",
+   "read_only": 1
+  },
+  {
+   "fieldname": "vital_signs_note",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Notes"
+  },
+  {
+   "fieldname": "sb_nutrition_values",
+   "fieldtype": "Section Break",
+   "label": "Nutrition Values"
+  },
+  {
+   "fieldname": "height",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Height (In Centimeter)"
+  },
+  {
+   "fieldname": "weight",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "Weight (In Kilogram)"
+  },
+  {
+   "default": "0.00",
+   "fieldname": "bmi",
+   "fieldtype": "Float",
+   "in_list_view": 1,
+   "label": "BMI",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_14",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "nutrition_note",
+   "fieldtype": "Small Text",
+   "ignore_xss_filter": 1,
+   "label": "Notes"
+  },
+  {
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "label": "Company",
+   "options": "Company"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Vital Signs",
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "sb_references",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "naming_series",
+   "fieldtype": "Select",
+   "label": "Series",
+   "options": "HLC-VTS-.YYYY.-",
+   "reqd": 1
+  },
+  {
+   "allow_on_submit": 1,
+   "columns": 5,
+   "fieldname": "title",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Title",
+   "no_copy": 1,
+   "print_hide": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "spo2",
+   "fieldtype": "Data",
+   "label": "SPO2"
+  },
+  {
+   "fieldname": "body_surface_area",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "body surface area (In Meter square)"
+  }
+ ],
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-08-22 02:04:56.455323",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Vital Signs",
+ "naming_rule": "By \"Naming Series\" field",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Physician",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  },
+  {
+   "cancel": 1,
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "Nursing User",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "restrict_to_domain": "Healthcare",
+ "search_fields": "patient, signs_date",
+ "show_name_in_global_search": 1,
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "title",
+ "track_changes": 1,
+ "track_seen": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/doctype/vital_signs/vital_signs.py
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2015, ESS LLP and contributors
+# For license information, please see license.txt
+
+import frappe
+import math
+from frappe import _
+from frappe.model.document import Document
+
+class VitalSigns(Document):
+    def validate(self):
+        self.set_title()
+
+    def set_title(self):
+        self.title = _("{0} on {1}").format(
+            self.patient_name or self.patient, frappe.utils.format_date(self.signs_date)
+        )[:100]
+
+    def calculate_bsa(self):
+        if self.check_height_weight():
+            self.body_surface_area = round(math.sqrt((self.weight * self.height) / 3600), 2)
+           # frappe.msgprint(f"BSA: {self.body_surface_area}")
+
+    def before_save(self):
+        self.calculate_bsa()
+        self.calculate_bmi()
+
+    def calculate_bmi(self):
+        # Convert height from cm to meters
+        if self.check_height_weight():
+            height_m = self.height / 100
+            # Calculate BMI
+            self.bmi = round(self.weight / (height_m ** 2), 2)
+            #frappe.msgprint(f"BMI: {self.bmi}")
+
+    def check_height_weight(self):
+        return self.height > 0 and self.weight > 0
--- /dev/null
+++ b/healthcare/healthcare/healthcare_dashboard/healthcare/healthcare.json
@@ -0,0 +1,62 @@
+{
+ "cards": [
+  {
+   "card": "Total Patients"
+  },
+  {
+   "card": "Total Patients Admitted"
+  },
+  {
+   "card": "Open Appointments"
+  },
+  {
+   "card": "Appointments to Bill"
+  }
+ ],
+ "charts": [
+  {
+   "chart": "Patient Appointments",
+   "width": "Full"
+  },
+  {
+   "chart": "In-Patient Status",
+   "width": "Half"
+  },
+  {
+   "chart": "Clinical Procedures Status",
+   "width": "Half"
+  },
+  {
+   "chart": "Lab Tests",
+   "width": "Half"
+  },
+  {
+   "chart": "Clinical Procedures",
+   "width": "Half"
+  },
+  {
+   "chart": "Symptoms",
+   "width": "Half"
+  },
+  {
+   "chart": "Diagnoses",
+   "width": "Half"
+  },
+  {
+   "chart": "Department wise Patient Appointments",
+   "width": "Full"
+  }
+ ],
+ "creation": "2020-07-14 18:17:54.823311",
+ "dashboard_name": "Healthcare",
+ "docstatus": 0,
+ "doctype": "Dashboard",
+ "idx": 0,
+ "is_default": 0,
+ "is_standard": 1,
+ "modified": "2020-07-22 15:36:34.220387",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare",
+ "owner": "Administrator"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/module_onboarding/healthcare/healthcare.json
@@ -0,0 +1,44 @@
+{
+ "allow_roles": [
+  {
+   "role": "Healthcare Administrator"
+  },
+  {
+    "role": "System Manager"
+   }
+ ],
+ "creation": "2020-05-19 10:32:43.025852",
+ "docstatus": 0,
+ "doctype": "Module Onboarding",
+ "documentation_url": "https://frappehealth.com/docs",
+ "idx": 0,
+ "is_complete": 0,
+ "modified": "2023-10-27 03:40:32.864721",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Healthcare",
+ "owner": "Administrator",
+ "steps": [
+  {
+   "step": "Create Patient"
+  },
+  {
+   "step": "Create Practitioner Schedule"
+  },
+  {
+   "step": "Introduction to Healthcare Practitioner"
+  },
+  {
+   "step": "Create Healthcare Practitioner"
+  },
+  {
+   "step": "Explore Healthcare Settings"
+  },
+  {
+   "step": "Explore Clinical Procedure Templates"
+  }
+ ],
+ "subtitle": "Patients, Practitioner Schedules, Settings, and more.",
+ "success_message": "The Healthcare Module is all set up!",
+ "title": "Let's Set Up the Healthcare Module."
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/number_card/appointments_to_bill/appointments_to_bill.json
@@ -0,0 +1,21 @@
+{
+ "creation": "2020-07-14 18:17:54.792773",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Patient Appointment",
+ "dynamic_filters_json": "[[\"Patient Appointment\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Patient Appointment\",\"invoiced\",\"=\",0,false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "label": "Appointments To Bill",
+ "modified": "2020-07-22 13:27:58.038577",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Appointments to Bill",
+ "owner": "Administrator",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/number_card/open_appointments/open_appointments.json
@@ -0,0 +1,21 @@
+{
+ "creation": "2020-07-14 18:17:54.771092",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Patient Appointment",
+ "dynamic_filters_json": "[[\"Patient Appointment\",\"company\",\"=\",\"frappe.defaults.get_user_default(\\\"Company\\\")\"]]",
+ "filters_json": "[[\"Patient Appointment\",\"status\",\"=\",\"Open\",false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "label": "Open Appointments",
+ "modified": "2020-07-22 13:27:09.542122",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Open Appointments",
+ "owner": "Administrator",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/number_card/total_patients/total_patients.json
@@ -0,0 +1,20 @@
+{
+ "creation": "2020-07-14 18:17:54.727946",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Patient",
+ "filters_json": "[[\"Patient\",\"status\",\"=\",\"Active\",false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "label": "Total Patients",
+ "modified": "2020-07-22 13:26:02.643534",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Total Patients",
+ "owner": "Administrator",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/number_card/total_patients_admitted/total_patients_admitted.json
@@ -0,0 +1,20 @@
+{
+ "creation": "2020-07-14 18:17:54.749754",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Patient",
+ "filters_json": "[[\"Patient\",\"inpatient_status\",\"=\",\"Admitted\",false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 1,
+ "is_standard": 1,
+ "label": "Total Patients Admitted",
+ "modified": "2020-07-22 13:26:20.027788",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Total Patients Admitted",
+ "owner": "Administrator",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
diff --git "a/healthcare/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json" "b/healthcare/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json"
new file mode 100755
index 0000000..d2c6ceb
--- /dev/null
+++ "b/healthcare/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json"
@@ -0,0 +1,25 @@
+{
+ "aggregate_function_based_on": "",
+ "color": "#449CF0",
+ "creation": "2024-06-27 05:53:54.001526",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Inpatient Record",
+ "dynamic_filters_json": "[]",
+ "filters_json": "[[\"Inpatient Record\",\"status\",\"=\",\"Admitted\",false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 0,
+ "is_standard": 1,
+ "label": "\u0639\u062f\u062f \u0627\u0644\u0645\u0631\u0636\u0649 \u0627\u0644\u0631\u0627\u0642\u062f\u064a\u0646",
+ "modified": "2024-06-27 05:55:25.490730",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0639\u062f\u062f \u0627\u0644\u0645\u0631\u0636\u0649 \u0627\u0644\u0631\u0627\u0642\u062f\u064a\u0646",
+ "owner": "Administrator",
+ "parent_document_type": "",
+ "report_function": "Sum",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
diff --git "a/healthcare/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json" "b/healthcare/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json"
new file mode 100755
index 0000000..f0d2755
--- /dev/null
+++ "b/healthcare/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json"
@@ -0,0 +1,27 @@
+{
+ "aggregate_function_based_on": "",
+ "color": "#EC864B",
+ "creation": "2024-06-27 06:06:53.688752",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Item",
+ "dynamic_filters_json": "{}",
+ "filters_json": "{}",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 0,
+ "is_standard": 1,
+ "label": "\u0645\u0648\u0627\u062f \u0645\u062e\u0632\u0646  \u0627\u0644\u0627\u0648\u0646\u0643\u0648 ",
+ "modified": "2024-06-27 06:26:12.409818",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0645\u062e\u0632\u0646 \u0627\u0644\u0627\u0648\u0646\u0643\u0648",
+ "owner": "Administrator",
+ "parent_document_type": "",
+ "report_field": "in_qty",
+ "report_function": "Sum",
+ "report_name": "\u062c\u0631\u062f \u0627\u0644\u0645\u062e\u0632\u0646",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/create_healthcare_practitioner/create_healthcare_practitioner.json
@@ -0,0 +1,19 @@
+{
+ "action": "Create Entry",
+ "creation": "2020-05-19 10:39:55.728058",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 0,
+ "is_skipped": 0,
+ "modified": "2021-01-30 12:02:22.849260",
+ "modified_by": "Administrator",
+ "name": "Create Healthcare Practitioner",
+ "owner": "Administrator",
+ "reference_document": "Healthcare Practitioner",
+ "show_form_tour": 0,
+ "show_full_form": 1,
+ "title": "Create Healthcare Practitioner",
+ "validate_action": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/create_patient/create_patient.json
@@ -0,0 +1,19 @@
+{
+ "action": "Create Entry",
+ "creation": "2020-05-19 10:32:27.648902",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 0,
+ "is_skipped": 0,
+ "modified": "2021-01-30 00:09:28.786428",
+ "modified_by": "Administrator",
+ "name": "Create Patient",
+ "owner": "Administrator",
+ "reference_document": "Patient",
+ "show_form_tour": 0,
+ "show_full_form": 1,
+ "title": "Create Patient",
+ "validate_action": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/create_practitioner_schedule/create_practitioner_schedule.json
@@ -0,0 +1,19 @@
+{
+ "action": "Create Entry",
+ "creation": "2020-05-19 10:41:19.065753",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 0,
+ "is_skipped": 0,
+ "modified": "2021-01-30 00:09:28.794602",
+ "modified_by": "Administrator",
+ "name": "Create Practitioner Schedule",
+ "owner": "Administrator",
+ "reference_document": "Practitioner Schedule",
+ "show_form_tour": 0,
+ "show_full_form": 1,
+ "title": "Create Practitioner Schedule",
+ "validate_action": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/explore_clinical_procedure_templates/explore_clinical_procedure_templates.json
@@ -0,0 +1,19 @@
+{
+ "action": "Show Form Tour",
+ "creation": "2020-05-19 11:40:51.963741",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 0,
+ "is_skipped": 0,
+ "modified": "2021-01-30 19:22:08.257160",
+ "modified_by": "Administrator",
+ "name": "Explore Clinical Procedure Templates",
+ "owner": "Administrator",
+ "reference_document": "Clinical Procedure Template",
+ "show_form_tour": 0,
+ "show_full_form": 0,
+ "title": "Explore Clinical Procedure Templates",
+ "validate_action": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/explore_healthcare_settings/explore_healthcare_settings.json
@@ -0,0 +1,19 @@
+{
+ "action": "Show Form Tour",
+ "creation": "2020-05-19 11:14:33.044989",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 1,
+ "is_skipped": 0,
+ "modified": "2021-01-30 19:22:07.275735",
+ "modified_by": "Administrator",
+ "name": "Explore Healthcare Settings",
+ "owner": "Administrator",
+ "reference_document": "Healthcare Settings",
+ "show_form_tour": 0,
+ "show_full_form": 0,
+ "title": "Explore Healthcare Settings",
+ "validate_action": 1
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/onboarding_step/introduction_to_healthcare_practitioner/introduction_to_healthcare_practitioner.json
@@ -0,0 +1,20 @@
+{
+ "action": "Show Form Tour",
+ "creation": "2020-05-19 10:43:56.231679",
+ "docstatus": 0,
+ "doctype": "Onboarding Step",
+ "field": "schedule",
+ "idx": 0,
+ "is_complete": 0,
+ "is_single": 0,
+ "is_skipped": 0,
+ "modified": "2021-01-30 00:09:28.807129",
+ "modified_by": "Administrator",
+ "name": "Introduction to Healthcare Practitioner",
+ "owner": "Administrator",
+ "reference_document": "Healthcare Practitioner",
+ "show_form_tour": 0,
+ "show_full_form": 0,
+ "title": "Introduction to Healthcare Practitioner",
+ "validate_action": 0
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/page/__init__.py
@@ -0,0 +1 @@
+
--- /dev/null
+++ b/healthcare/healthcare/page/patient_history/patient_history.js
@@ -0,0 +1,456 @@
+frappe.provide('frappe.patient_history');
+frappe.pages['patient_history'].on_page_load = function(wrapper) {
+	frappe.ui.make_app_page({
+		parent: wrapper,
+		title: __('Patient History')
+	});
+
+	let patient_history = new PatientHistory(wrapper);
+	$(wrapper).bind('show', ()=> {
+		patient_history.show();
+	});
+};
+
+class PatientHistory {
+	constructor(wrapper) {
+		this.wrapper = $(wrapper);
+		this.page = wrapper.page;
+		this.sidebar = this.wrapper.find('.layout-side-section');
+		this.main_section = this.wrapper.find('.layout-main-section');
+		this.start = 0;
+	}
+
+	show() {
+		frappe.breadcrumbs.add('Healthcare');
+		this.sidebar.empty();
+
+		let me = this;
+		let patient = frappe.ui.form.make_control({
+			parent: me.sidebar,
+			df: {
+				fieldtype: 'Link',
+				options: 'Patient',
+				fieldname: 'patient',
+				placeholder: __('Select Patient'),
+				only_select: true,
+				change: () => {
+					me.patient_id = '';
+					if (me.patient_id != patient.get_value() && patient.get_value()) {
+						me.start = 0;
+						me.patient_id = patient.get_value();
+						me.make_patient_profile();
+					}
+				}
+			}
+		});
+		patient.df.change();
+		patient.refresh();
+
+		if (frappe.route_options && !this.patient_id) {
+			patient.set_value(frappe.route_options.patient);
+			this.patient_id = frappe.route_options.patient;
+		}
+
+		this.sidebar.find('[data-fieldname="patient"]').append('<div class="patient-info"></div>');
+	}
+
+	make_patient_profile() {
+		this.page.set_title(__('Patient History'));
+		this.main_section.empty().append(frappe.render_template('patient_history'));
+		this.setup_filters();
+		this.setup_documents();
+		this.show_patient_info();
+		this.setup_buttons();
+		this.show_patient_vital_charts('bp', 'mmHg', 'Blood Pressure');
+	}
+
+	setup_filters() {
+		$('.doctype-filter').empty();
+		let me = this;
+
+		frappe.xcall(
+			'healthcare.healthcare.page.patient_history.patient_history.get_patient_history_doctypes'
+		).then(document_types => {
+			let doctype_filter = frappe.ui.form.make_control({
+				parent: $('.doctype-filter'),
+				df: {
+					fieldtype: 'MultiSelectList',
+					fieldname: 'document_type',
+					placeholder: __('Select Document Type'),
+					change: () => {
+						me.start = 0;
+						me.page.main.find('.patient_documents_list').html('');
+						this.setup_documents(doctype_filter.get_value(), date_range_field.get_value());
+					},
+					get_data: () => {
+						return document_types.map(document_type => {
+							return {
+								description: document_type,
+								value: document_type
+							};
+						});
+					},
+				}
+			});
+			doctype_filter.refresh();
+
+			$('.date-filter').empty();
+			let date_range_field = frappe.ui.form.make_control({
+				df: {
+					fieldtype: 'DateRange',
+					fieldname: 'date_range',
+					placeholder: __('Date Range'),
+					input_class: 'input-xs',
+					change: () => {
+						let selected_date_range = date_range_field.get_value();
+						if (selected_date_range && selected_date_range.length === 2) {
+							me.start = 0;
+							me.page.main.find('.patient_documents_list').html('');
+							this.setup_documents(doctype_filter.get_value(), date_range_field.get_value());
+						}
+					}
+				},
+				parent: $('.date-filter')
+			});
+			date_range_field.refresh();
+		});
+	}
+
+	setup_documents(document_types="", selected_date_range="") {
+		let filters = {
+			name: this.patient_id,
+			start: this.start,
+			page_length: 20
+		};
+		if (document_types)
+			filters['document_types'] = document_types;
+		if (selected_date_range)
+			filters['date_range'] = selected_date_range;
+
+		let me = this;
+		frappe.call({
+			'method': 'healthcare.healthcare.page.patient_history.patient_history.get_feed',
+			args: filters,
+			callback: function(r) {
+				let data = r.message;
+				if (data.length) {
+					me.add_to_records(data);
+				} else {
+					me.page.main.find('.patient_documents_list').append(`
+						<div class='text-muted' align='center'>
+							<br><br>${__('No more records..')}<br><br>
+						</div>`);
+					me.page.main.find('.btn-get-records').hide();
+				}
+			}
+		});
+	}
+
+	add_to_records(data) {
+		let details = "";
+		let i;
+		for (i=0; i<data.length; i++) {
+			if (data[i].reference_doctype) {
+				let label = '';
+				if (data[i].subject) {
+					label += "<br/>" + data[i].subject;
+				}
+				data[i] = this.add_date_separator(data[i]);
+
+				if (frappe.user_info(data[i].owner).image) {
+					data[i].imgsrc = frappe.utils.get_file_link(frappe.user_info(data[i].owner).image);
+				} else {
+					data[i].imgsrc = false;
+				}
+
+				let time_line_heading = data[i].practitioner ? `${data[i].practitioner} ` : ``;
+				time_line_heading += data[i].reference_doctype + " - " +
+					`<a onclick="frappe.set_route('Form', '${data[i].reference_doctype}', '${data[i].reference_name}');">
+						${data[i].reference_name}
+					</a>`;
+
+				details += `
+					<div data-toggle='pill' class='patient_doc_menu'
+						data-doctype='${data[i].reference_doctype}' data-docname='${data[i].reference_name}'>
+						<div class='col-sm-12 d-flex border-bottom py-3'>`;
+
+				if (data[i].imgsrc) {
+					details += `<span class='mr-3 avatar avatar-small' style='width:32px; height:32px;'>
+							<img class='avatar-frame' src='${data[i].imgsrc}' width='32' height='32'></img>
+						</span>`;
+				} else {
+					details += `<span class='mr-3 avatar avatar-small' style='width:32px; height:32px;'>
+						<div align='center' class='avatar-frame' style='background-color: #fafbfc;'>
+							${data[i].practitioner ? data[i].practitioner.charAt(0) : 'U'}
+						</div>
+					</span>`;
+				}
+
+				details += `<div class='d-flex flex-column width-full'>
+						<div>
+							`+time_line_heading+`
+								<span>
+									${data[i].date_sep}
+								</span>
+						</div>
+						<div class='frappe-card p-5 mt-3'>
+							<span class='${data[i].reference_name} document-id'>${label}
+							<br>
+								<div align='center'>
+									<a class='btn octicon octicon-chevron-down btn-default btn-xs btn-more'
+										data-doctype='${data[i].reference_doctype}' data-docname='${data[i].reference_name}'>
+									</a>
+								</div>
+							</span>
+
+							<span class='document-html' hidden data-fetched='0'>
+							</span>
+						</div>
+					</div>
+				</div>
+				</div>`;
+			}
+		}
+
+		this.page.main.find('.patient_documents_list').append(details);
+		this.start += data.length;
+
+		if (data.length === 20) {
+			this.page.main.find(".btn-get-records").show();
+		} else {
+			this.page.main.find(".btn-get-records").hide();
+			this.page.main.find(".patient_documents_list").append(`
+				<div class='text-muted' align='center'>
+					<br><br>${__('No more records..')}<br><br>
+				</div>`);
+		}
+	}
+
+	add_date_separator(data) {
+		let date = frappe.datetime.str_to_obj(data.communication_date);
+		let pdate = '';
+		let diff = frappe.datetime.get_day_diff(frappe.datetime.get_today(),
+			frappe.datetime.obj_to_str(date));
+
+		if (diff < 1) {
+			pdate = __('Today');
+		} else if (diff < 2) {
+			pdate = __('Yesterday');
+		} else {
+			pdate = __('on {0}', [frappe.datetime.global_date_format(date)]);
+		}
+		data.date_sep = pdate;
+		return data;
+	}
+
+	show_patient_info() {
+		this.get_patient_info().then(() => {
+			$('.patient-info').empty().append(frappe.render_template('patient_history_sidebar', {
+				patient_image: this.patient.image,
+				patient_name: this.patient.patient_name,
+				patient_gender: this.patient.sex,
+				patient_mobile: this.patient.mobile
+			}));
+			this.show_patient_details();
+		});
+	}
+
+	show_patient_details() {
+		let me = this;
+		frappe.call({
+			'method': 'healthcare.healthcare.doctype.patient.patient.get_patient_detail',
+			args: {
+				patient: me.patient_id
+			},
+			callback: function(r) {
+				let data = r.message;
+				let details = ``;
+
+				if (data.occupation) details += `<br><br><b> ${__('Occupation')} : </b> ${data.occupation}`;
+				if (data.blood_group) details += `<br><b> ${__('Blood Group')} : </b> ${data.blood_group}`;
+				if (data.allergies) details +=  `<br><br><b> ${__('Allerigies')} : </b> ${data.allergies.replace(/\n/g, ", ")}`;
+				if (data.medication) details +=  `<br><b> ${__('Medication')} : </b> ${data.medication.replace(/\n/g, ", ")}`;
+				if (data.alcohol_current_use) details +=  `<br><br><b> ${__('Alcohol use')} : </b> ${data.alcohol_current_use}`;
+				if (data.alcohol_past_use) details +=  `<br><b> ${__('Alcohol past use')} : </b> ${data.alcohol_past_use}`;
+				if (data.tobacco_current_use) details +=  `<br><b> ${__('Tobacco use')} : </b> ${data.tobacco_current_use}`;
+				if (data.tobacco_past_use) details +=  `<br><b> ${__('Tobacco past use')} : </b> ${data.tobacco_past_use}`;
+				if (data.medical_history) details +=  `<br><br><b> ${__('Medical history')} : </b> ${data.medical_history.replace(/\n/g, ", ")}`;
+				if (data.surgical_history) details +=  `<br><b> ${__('Surgical history')} : </b> ${data.surgical_history.replace(/\n/g, ", ")}`;
+				if (data.surrounding_factors) details +=  `<br><br><b> ${__('Occupational hazards')} : </b> ${data.surrounding_factors.replace(/\n/g, ", ")}`;
+				if (data.other_risk_factors) details += `<br><b> ${__('Other risk factors')} : </b> ${data.other_risk_factors.replace(/\n/g, ", ")}`;
+				if (data.patient_details) details += `<br><br><b> ${__('More info')} : </b> ${data.patient_details.replace(/\n/g, ", ")}`;
+
+				if (details) {
+					details = `<div style='font-size:13px;' align='left'>` + details + `</div>`;
+				}
+
+				me.sidebar.find('.patient-details').html(details);
+			}
+		});
+	}
+
+	get_patient_info() {
+		return frappe.xcall('frappe.client.get', {
+			doctype: 'Patient',
+			name: this.patient_id,
+		}).then((patient) => {
+			if (patient) {
+				this.patient = patient;
+			}
+		});
+	}
+
+	setup_buttons() {
+		let me = this;
+		this.page.main.on("click", ".btn-show-chart", function() {
+			let btn_id = $(this).attr("data-show-chart-id"), scale_unit = $(this).attr("data-pts");
+			let title = $(this).attr("data-title");
+			me.show_patient_vital_charts(btn_id, scale_unit, title);
+		});
+
+		this.page.main.on('click', '.btn-more', function() {
+			let	doctype = $(this).attr('data-doctype'), docname = $(this).attr('data-docname');
+			if (me.page.main.find('.'+docname).parent().find('.document-html').attr('data-fetched') == '1') {
+				me.page.main.find('.'+docname).hide();
+				me.page.main.find('.'+docname).parent().find('.document-html').show();
+			} else {
+				if (doctype && docname) {
+					let exclude = ['patient', 'patient_name', 'patient_sex', 'encounter_date', 'naming_series'];
+					frappe.call({
+						method: 'healthcare.healthcare.utils.render_doc_as_html',
+						args: {
+							doctype: doctype,
+							docname: docname,
+							exclude_fields: exclude
+						},
+						freeze: true,
+						callback: function(r) {
+							if (r.message) {
+								me.page.main.find('.' + docname).hide();
+
+								me.page.main.find('.' + docname).parent().find('.document-html').html(
+									`${r.message.html}
+									<br>
+										<div align='center'>
+											<a class='btn octicon octicon-chevron-up btn-default btn-xs btn-less'
+												data-doctype='${doctype}'
+												data-docname='${docname}'>
+											</a>
+										</div>
+									`);
+
+								me.page.main.find('.' + docname).parent().find('.document-html').attr('hidden', false);
+								me.page.main.find('.' + docname).parent().find('.document-html').attr('data-fetched', '1');
+							}
+						}
+					});
+				}
+			}
+		});
+
+		this.page.main.on('click', '.btn-less', function() {
+			let docname = $(this).attr('data-docname');
+			me.page.main.find('.' + docname).parent().find('.document-id').show();
+			me.page.main.find('.' + docname).parent().find('.document-html').hide();
+		});
+
+		me.page.main.on('click', '.btn-get-records', function() {
+			this.setup_documents();
+		});
+	}
+
+	show_patient_vital_charts(btn_id, scale_unit, title) {
+		let me = this;
+
+		frappe.call({
+			method: 'healthcare.healthcare.utils.get_patient_vitals',
+			args: {
+				patient: me.patient_id
+			},
+			callback: function(r) {
+				if (r.message) {
+					let show_chart_btns_html = `
+						<div style='padding-top:10px;'>
+							<a class='btn btn-default btn-xs btn-show-chart' data-show-chart-id='bp' data-pts='mmHg' data-title='Blood Pressure'>
+								${__('Blood Pressure')}
+							</a>
+							<a class='btn btn-default btn-xs btn-show-chart' data-show-chart-id='pulse_rate' data-pts='per Minutes' data-title='Respiratory/Pulse Rate'>
+								${__('Respiratory/Pulse Rate')}
+							</a>
+							<a class='btn btn-default btn-xs btn-show-chart' data-show-chart-id='temperature' data-pts='¬∞C or ¬∞F' data-title='Temperature'>
+								${__('Temperature')}
+							</a>
+							<a class='btn btn-default btn-xs btn-show-chart' data-show-chart-id='bmi' data-pts='' data-title='BMI'>
+								${__('BMI')}
+							</a>
+						</div>`;
+
+					me.page.main.find('.show_chart_btns').html(show_chart_btns_html);
+					let data = r.message;
+					let labels = [], datasets = [];
+					let bp_systolic = [], bp_diastolic = [], temperature = [];
+					let pulse = [], respiratory_rate = [], bmi = [], height = [], weight = [];
+
+					for (let i=0; i<data.length; i++) {
+						labels.push(data[i].signs_date+' | '+data[i].signs_time);
+
+						if (btn_id === 'bp') {
+							bp_systolic.push(data[i].bp_systolic);
+							bp_diastolic.push(data[i].bp_diastolic);
+						}
+						if (btn_id === 'temperature') {
+							temperature.push(data[i].temperature);
+						}
+						if (btn_id === 'pulse_rate') {
+							pulse.push(data[i].pulse);
+							respiratory_rate.push(data[i].respiratory_rate);
+						}
+						if (btn_id === 'bmi') {
+							bmi.push(data[i].bmi);
+							height.push(data[i].height);
+							weight.push(data[i].weight);
+						}
+					}
+					if (btn_id === 'temperature') {
+						datasets.push({name: 'Temperature', values: temperature, chartType: 'line'});
+					}
+					if (btn_id === 'bmi') {
+						datasets.push({name: 'BMI', values: bmi, chartType: 'line'});
+						datasets.push({name: 'Height', values: height, chartType: 'line'});
+						datasets.push({name: 'Weight', values: weight, chartType: 'line'});
+					}
+					if (btn_id === 'bp') {
+						datasets.push({name: 'BP Systolic', values: bp_systolic, chartType: 'line'});
+						datasets.push({name: 'BP Diastolic', values: bp_diastolic, chartType: 'line'});
+					}
+					if (btn_id === 'pulse_rate') {
+						datasets.push({name: 'Heart Rate / Pulse', values: pulse, chartType: 'line'});
+						datasets.push({name: 'Respiratory Rate', values: respiratory_rate, chartType: 'line'});
+					}
+
+					new frappe.Chart('.patient_vital_charts', {
+						data: {
+							labels: labels,
+							datasets: datasets
+						},
+
+						title: title,
+						type: 'axis-mixed',
+						height: 200,
+						colors: ['purple', '#ffa3ef', 'light-blue'],
+
+						tooltipOptions: {
+							formatTooltipX: d => (d + '').toUpperCase(),
+							formatTooltipY: d => d + ' ' + scale_unit,
+						}
+					});
+					me.page.main.find('.header-separator').show();
+				} else {
+					me.page.main.find('.patient_vital_charts').html('');
+					me.page.main.find('.show_chart_btns').html('');
+					me.page.main.find('.header-separator').hide();
+				}
+			}
+		});
+	}
+}
--- /dev/null
+++ b/healthcare/healthcare/page/patient_history/patient_history.json
@@ -0,0 +1,28 @@
+{
+ "content": null, 
+ "creation": "2018-08-08 17:09:13.816199", 
+ "docstatus": 0, 
+ "doctype": "Page", 
+ "icon": "", 
+ "idx": 0, 
+ "modified": "2018-08-08 17:09:55.969424", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "patient_history", 
+ "owner": "Administrator", 
+ "page_name": "patient_history", 
+ "restrict_to_domain": "Healthcare", 
+ "roles": [
+  {
+   "role": "Healthcare Administrator"
+  }, 
+  {
+   "role": "Physician"
+  }
+ ], 
+ "script": null, 
+ "standard": "Yes", 
+ "style": null, 
+ "system_page": 0, 
+ "title": "Patient History"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/page/patient_history/patient_history.py
@@ -0,0 +1,71 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, ESS LLP and contributors
+# For license information, please see license.txt
+
+
+import json
+
+import frappe
+from frappe.utils import cint
+
+
+@frappe.whitelist()
+def get_feed(name, document_types=None, date_range=None, start=0, page_length=20):
+	"""get feed"""
+	filters = get_filters(name, document_types, date_range)
+
+	result = frappe.db.get_all(
+		"Patient Medical Record",
+		fields=["name", "owner", "communication_date", "reference_doctype", "reference_name", "subject"],
+		filters=filters,
+		order_by="communication_date DESC",
+		limit=cint(page_length),
+		start=cint(start),
+	)
+
+	return result
+
+
+def get_filters(name, document_types=None, date_range=None):
+	filters = {"patient": name}
+	if document_types:
+		document_types = json.loads(document_types)
+		if len(document_types):
+			filters["reference_doctype"] = ["IN", document_types]
+
+	if date_range:
+		try:
+			date_range = json.loads(date_range)
+			if date_range:
+				filters["communication_date"] = ["between", [date_range[0], date_range[1]]]
+		except json.decoder.JSONDecodeError:
+			pass
+
+	return filters
+
+
+@frappe.whitelist()
+def get_feed_for_dt(doctype, docname):
+	"""get feed"""
+	result = frappe.db.get_all(
+		"Patient Medical Record",
+		fields=["name", "owner", "communication_date", "reference_doctype", "reference_name", "subject"],
+		filters={"reference_doctype": doctype, "reference_name": docname},
+		order_by="communication_date DESC",
+	)
+
+	return result
+
+
+@frappe.whitelist()
+def get_patient_history_doctypes():
+	document_types = []
+	settings = frappe.get_single("Patient History Settings")
+
+	for entry in settings.standard_doctypes:
+		document_types.append(entry.document_type)
+
+	for entry in settings.custom_doctypes:
+		document_types.append(entry.document_type)
+
+	return document_types
--- /dev/null
+++ b/healthcare/healthcare/page/patient_progress/patient_progress.js
@@ -0,0 +1,536 @@
+frappe.pages['patient-progress'].on_page_load = function(wrapper) {
+
+	frappe.ui.make_app_page({
+		parent: wrapper,
+		title: __('Patient Progress')
+	});
+
+	let patient_progress = new PatientProgress(wrapper);
+	$(wrapper).bind('show', ()=> {
+		patient_progress.show();
+	});
+};
+
+class PatientProgress {
+
+	constructor(wrapper) {
+		this.wrapper = $(wrapper);
+		this.page = wrapper.page;
+		this.sidebar = this.wrapper.find('.layout-side-section');
+		this.main_section = this.wrapper.find('.layout-main-section');
+	}
+
+	show() {
+		frappe.breadcrumbs.add('Healthcare');
+		this.sidebar.empty();
+
+		let me = this;
+		let patient = frappe.ui.form.make_control({
+			parent: me.sidebar,
+			df: {
+				fieldtype: 'Link',
+				options: 'Patient',
+				fieldname: 'patient',
+				placeholder: __('Select Patient'),
+				only_select: true,
+				change: () => {
+					me.patient_id = '';
+					if (me.patient_id != patient.get_value() && patient.get_value()) {
+						me.start = 0;
+						me.patient_id = patient.get_value();
+						me.make_patient_profile();
+					}
+				}
+			}
+		});
+		patient.refresh();
+
+		if (frappe.route_options && !this.patient) {
+			patient.set_value(frappe.route_options.patient);
+			this.patient_id = frappe.route_options.patient;
+		}
+
+		this.sidebar.find('[data-fieldname="patient"]').append('<div class="patient-info"></div>');
+	}
+
+	make_patient_profile() {
+		this.page.set_title(__('Patient Progress'));
+		this.main_section.empty().append(frappe.render_template('patient_progress'));
+		this.render_patient_details();
+		this.render_heatmap();
+		this.render_percentage_chart('therapy_type', 'Therapy Type Distribution');
+		this.create_percentage_chart_filters();
+		this.show_therapy_progress();
+		this.show_assessment_results();
+		this.show_therapy_assessment_correlation();
+		this.show_assessment_parameter_progress();
+	}
+
+	get_patient_info() {
+		return frappe.xcall('frappe.client.get', {
+			doctype: 'Patient',
+			name: this.patient_id
+		}).then((patient) => {
+			if (patient) {
+				this.patient = patient;
+			}
+		});
+	}
+
+	get_therapy_sessions_count() {
+		return frappe.xcall(
+			'healthcare.healthcare.page.patient_progress.patient_progress.get_therapy_sessions_count', {
+				patient: this.patient_id,
+			}
+		).then(data => {
+			if (data) {
+				this.total_therapy_sessions = data.total_therapy_sessions;
+				this.therapy_sessions_this_month = data.therapy_sessions_this_month;
+			}
+		});
+	}
+
+	render_patient_details() {
+		this.get_patient_info().then(() => {
+			this.get_therapy_sessions_count().then(() => {
+				$('.patient-info').empty().append(frappe.render_template('patient_progress_sidebar', {
+					patient_image: this.patient.image,
+					patient_name: this.patient.patient_name,
+					patient_gender: this.patient.sex,
+					patient_mobile: this.patient.mobile,
+					total_therapy_sessions: this.total_therapy_sessions,
+					therapy_sessions_this_month: this.therapy_sessions_this_month
+				}));
+
+				this.setup_patient_profile_links();
+			});
+		});
+	}
+
+	setup_patient_profile_links() {
+		this.wrapper.find('.patient-profile-link').on('click', () => {
+			frappe.set_route('Form', 'Patient', this.patient_id);
+		});
+
+		this.wrapper.find('.therapy-plan-link').on('click', () => {
+			frappe.route_options = {
+				'patient': this.patient_id,
+				'docstatus': 1
+			};
+			frappe.set_route('List', 'Therapy Plan');
+		});
+
+		this.wrapper.find('.patient-history').on('click', () => {
+			frappe.route_options = {
+				'patient': this.patient_id
+			};
+			frappe.set_route('patient_history');
+		});
+	}
+
+	render_heatmap() {
+		this.heatmap = new frappe.Chart('.patient-heatmap', {
+			type: 'heatmap',
+			countLabel: 'Interactions',
+			data: {},
+			discreteDomains: 1,
+			radius: 3,
+			height: 150
+		});
+
+		this.update_heatmap_data();
+		this.create_heatmap_chart_filters();
+	}
+
+	update_heatmap_data(date_from) {
+		frappe.xcall('healthcare.healthcare.page.patient_progress.patient_progress.get_patient_heatmap_data', {
+			patient: this.patient_id,
+			date: date_from || frappe.datetime.year_start(),
+		}).then((data) => {
+			this.heatmap.update( {dataPoints: data} );
+		});
+	}
+
+	create_heatmap_chart_filters() {
+		this.get_patient_info().then(() => {
+			let filters = [
+				{
+					label: frappe.dashboard_utils.get_year(frappe.datetime.now_date()),
+					options: frappe.dashboard_utils.get_years_since_creation(this.patient.creation),
+					action: (selected_item) => {
+						this.update_heatmap_data(frappe.datetime.obj_to_str(selected_item));
+					}
+				},
+			];
+			frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', '.heatmap-container');
+		});
+	}
+
+	render_percentage_chart(field, title) {
+		// REDESIGN-TODO: chart seems to be broken. Enable this once fixed.
+		this.wrapper.find('.percentage-chart-container').hide();
+		// frappe.xcall(
+		// 	'healthcare.healthcare.page.patient_progress.patient_progress.get_therapy_sessions_distribution_data', {
+		// 		patient: this.patient_id,
+		// 		field: field
+		// 	}
+		// ).then(chart => {
+		// 	if (chart.labels.length) {
+		// 		this.percentage_chart = new frappe.Chart('.therapy-session-percentage-chart', {
+		// 			title: title,
+		// 			type: 'percentage',
+		// 			data: {
+		// 				labels: chart.labels,
+		// 				datasets: chart.datasets
+		// 			},
+		// 			truncateLegends: 1,
+		// 			barOptions: {
+		// 				height: 11,
+		// 				depth: 1
+		// 			},
+		// 			height: 160,
+		// 			maxSlices: 8,
+		// 			colors: ['#5e64ff', '#743ee2', '#ff5858', '#ffa00a', '#feef72', '#28a745', '#98d85b', '#a9a7ac'],
+		// 		});
+		// 	} else {
+		// 		this.wrapper.find('.percentage-chart-container').hide();
+		// 	}
+		// });
+	}
+
+	create_percentage_chart_filters() {
+		let filters = [
+			{
+				label: 'Therapy Type',
+				options: ['Therapy Type', 'Exercise Type'],
+				fieldnames: ['therapy_type', 'exercise_type'],
+				action: (selected_item, fieldname) => {
+					let title = selected_item + ' Distribution';
+					this.render_percentage_chart(fieldname, title);
+				}
+			},
+		];
+		frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', '.percentage-chart-container');
+	}
+
+	create_time_span_filters(action_method, parent) {
+		let chart_control = $(parent).find('.chart-control');
+		let filters = [
+			{
+				label: 'Last Month',
+				options: ['Select Date Range', 'Last Week', 'Last Month', 'Last Quarter', 'Last Year'],
+				action: (selected_item) => {
+					if (selected_item === 'Select Date Range') {
+						this.render_date_range_fields(action_method, chart_control);
+					} else {
+						// hide date range field if visible
+						let date_field = $(parent).find('.date-field');
+						if (date_field.is(':visible')) {
+							date_field.hide();
+						}
+						this[action_method](selected_item);
+					}
+				}
+			}
+		];
+		frappe.dashboard_utils.render_chart_filters(filters, 'chart-filter', chart_control, 1);
+	}
+
+	render_date_range_fields(action_method, parent) {
+		let date_field = $(parent).find('.date-field');
+
+		if (!date_field.length) {
+			let date_field_wrapper = $(
+				`<div class="date-field pull-right"></div>`
+			).appendTo(parent);
+
+			let date_range_field = frappe.ui.form.make_control({
+				df: {
+					fieldtype: 'DateRange',
+					fieldname: 'from_date',
+					placeholder: 'Date Range',
+					input_class: 'input-xs',
+					reqd: 1,
+					change: () => {
+						let selected_date_range = date_range_field.get_value();
+						if (selected_date_range && selected_date_range.length === 2) {
+							this[action_method](selected_date_range);
+						}
+					}
+				},
+				parent: date_field_wrapper,
+				render_input: 1
+			});
+		} else if (!date_field.is(':visible')) {
+			date_field.show();
+		}
+	}
+
+	show_therapy_progress() {
+		let me = this;
+		let therapy_type = frappe.ui.form.make_control({
+			parent: $('.therapy-type-search'),
+			df: {
+				fieldtype: 'Link',
+				options: 'Therapy Type',
+				fieldname: 'therapy_type',
+				placeholder: __('Select Therapy Type'),
+				only_select: true,
+				change: () => {
+					if (me.therapy_type != therapy_type.get_value() && therapy_type.get_value()) {
+						me.therapy_type = therapy_type.get_value();
+						me.render_therapy_progress_chart();
+					}
+				}
+			}
+		});
+		therapy_type.refresh();
+		this.create_time_span_filters('render_therapy_progress_chart', '.therapy-progress');
+	}
+
+	render_therapy_progress_chart(time_span='Last Month') {
+		if (!this.therapy_type) return;
+
+		frappe.xcall(
+			'healthcare.healthcare.page.patient_progress.patient_progress.get_therapy_progress_data', {
+				patient: this.patient_id,
+				therapy_type: this.therapy_type,
+				time_span: time_span
+			}
+		).then(chart => {
+			let data = {
+				labels: chart.labels,
+				datasets: chart.datasets
+			}
+			let parent = '.therapy-progress-line-chart';
+			if (!chart.labels.length) {
+				this.show_null_state(parent);
+			} else {
+				if (!this.therapy_line_chart) {
+					this.therapy_line_chart = new frappe.Chart(parent, {
+						type: 'axis-mixed',
+						height: 250,
+						data: data,
+						lineOptions: {
+							regionFill: 1
+						},
+						axisOptions: {
+							xIsSeries: 1
+						}
+					});
+				} else {
+					$(parent).find('.chart-container').show();
+					$(parent).find('.chart-empty-state').hide();
+					this.therapy_line_chart.update(data);
+				}
+			}
+		});
+	}
+
+	show_assessment_results() {
+		let me = this;
+		let assessment_template = frappe.ui.form.make_control({
+			parent: $('.assessment-template-search'),
+			df: {
+				fieldtype: 'Link',
+				options: 'Patient Assessment Template',
+				fieldname: 'assessment_template',
+				placeholder: __('Select Assessment Template'),
+				only_select: true,
+				change: () => {
+					if (me.assessment_template != assessment_template.get_value() && assessment_template.get_value()) {
+						me.assessment_template = assessment_template.get_value();
+						me.render_assessment_result_chart();
+					}
+				}
+			}
+		});
+		assessment_template.refresh();
+		this.create_time_span_filters('render_assessment_result_chart', '.assessment-results');
+	}
+
+	render_assessment_result_chart(time_span='Last Month') {
+		if (!this.assessment_template) return;
+
+		frappe.xcall(
+			'healthcare.healthcare.page.patient_progress.patient_progress.get_patient_assessment_data', {
+				patient: this.patient_id,
+				assessment_template: this.assessment_template,
+				time_span: time_span
+			}
+		).then(chart => {
+			let data = {
+				labels: chart.labels,
+				datasets: chart.datasets,
+				yMarkers: [
+					{ label: 'Max Score', value: chart.max_score }
+				],
+			}
+			let parent = '.assessment-results-line-chart';
+			if (!chart.labels.length) {
+				this.show_null_state(parent);
+			} else {
+				if (!this.assessment_line_chart) {
+					this.assessment_line_chart = new frappe.Chart(parent, {
+						type: 'axis-mixed',
+						height: 250,
+						data: data,
+						lineOptions: {
+							regionFill: 1
+						},
+						axisOptions: {
+							xIsSeries: 1
+						},
+						tooltipOptions: {
+							formatTooltipY: d => __('{0} out of {1}', [d, chart.max_score])
+						}
+					});
+				} else {
+					$(parent).find('.chart-container').show();
+					$(parent).find('.chart-empty-state').hide();
+					this.assessment_line_chart.update(data);
+				}
+			}
+		});
+	}
+
+	show_therapy_assessment_correlation() {
+		let me = this;
+		let assessment = frappe.ui.form.make_control({
+			parent: $('.assessment-correlation-template-search'),
+			df: {
+				fieldtype: 'Link',
+				options: 'Patient Assessment Template',
+				fieldname: 'assessment',
+				placeholder: __('Select Assessment Template'),
+				only_select: true,
+				change: () => {
+					if (me.assessment != assessment.get_value() && assessment.get_value()) {
+						me.assessment = assessment.get_value();
+						me.render_therapy_assessment_correlation_chart();
+					}
+				}
+			}
+		});
+		assessment.refresh();
+		this.create_time_span_filters('render_therapy_assessment_correlation_chart', '.therapy-assessment-correlation');
+	}
+
+	render_therapy_assessment_correlation_chart(time_span='Last Month') {
+		if (!this.assessment) return;
+
+		frappe.xcall(
+			'healthcare.healthcare.page.patient_progress.patient_progress.get_therapy_assessment_correlation_data', {
+				patient: this.patient_id,
+				assessment_template: this.assessment,
+				time_span: time_span
+			}
+		).then(chart => {
+			let data = {
+				labels: chart.labels,
+				datasets: chart.datasets,
+				yMarkers: [
+					{ label: 'Max Score', value: chart.max_score }
+				],
+			}
+			let parent = '.therapy-assessment-correlation-chart';
+			if (!chart.labels.length) {
+				this.show_null_state(parent);
+			} else {
+				if (!this.correlation_chart) {
+					this.correlation_chart = new frappe.Chart(parent, {
+						type: 'axis-mixed',
+						height: 300,
+						data: data,
+						axisOptions: {
+							xIsSeries: 1
+						}
+					});
+				} else {
+					$(parent).find('.chart-container').show();
+					$(parent).find('.chart-empty-state').hide();
+					this.correlation_chart.update(data);
+				}
+			}
+		});
+	}
+
+	show_assessment_parameter_progress() {
+		let me = this;
+		let parameter = frappe.ui.form.make_control({
+			parent: $('.assessment-parameter-search'),
+			df: {
+				fieldtype: 'Link',
+				options: 'Patient Assessment Parameter',
+				fieldname: 'assessment',
+				placeholder: __('Select Assessment Parameter'),
+				only_select: true,
+				change: () => {
+					if (me.parameter != parameter.get_value() && parameter.get_value()) {
+						me.parameter = parameter.get_value();
+						me.render_assessment_parameter_progress_chart();
+					}
+				}
+			}
+		});
+		parameter.refresh();
+		this.create_time_span_filters('render_assessment_parameter_progress_chart', '.assessment-parameter-progress');
+	}
+
+	render_assessment_parameter_progress_chart(time_span='Last Month') {
+		if (!this.parameter) return;
+
+		frappe.xcall(
+			'healthcare.healthcare.page.patient_progress.patient_progress.get_assessment_parameter_data', {
+				patient: this.patient_id,
+				parameter: this.parameter,
+				time_span: time_span
+			}
+		).then(chart => {
+			let data = {
+				labels: chart.labels,
+				datasets: chart.datasets
+			}
+			let parent = '.assessment-parameter-progress-chart';
+			if (!chart.labels.length) {
+				this.show_null_state(parent);
+			} else {
+				if (!this.parameter_chart) {
+					this.parameter_chart = new frappe.Chart(parent, {
+						type: 'line',
+						height: 250,
+						data: data,
+						lineOptions: {
+							regionFill: 1
+						},
+						axisOptions: {
+							xIsSeries: 1
+						},
+						tooltipOptions: {
+							formatTooltipY: d => d + '%'
+						}
+					});
+				} else {
+					$(parent).find('.chart-container').show();
+					$(parent).find('.chart-empty-state').hide();
+					this.parameter_chart.update(data);
+				}
+			}
+		});
+	}
+
+	show_null_state(parent) {
+		let null_state = $(parent).find('.chart-empty-state');
+		if (null_state.length) {
+			$(null_state).show();
+		} else {
+			null_state = $(
+				`<div class="chart-empty-state text-muted text-center" style="margin-bottom: 20px;">${__(
+					"No Data..."
+				)}</div>`
+			);
+			$(parent).append(null_state);
+		}
+		$(parent).find('.chart-container').hide();
+	}
+}
--- /dev/null
+++ b/healthcare/healthcare/page/patient_progress/patient_progress.json
@@ -0,0 +1,33 @@
+{
+ "content": null,
+ "creation": "2020-06-12 15:46:23.111928",
+ "docstatus": 0,
+ "doctype": "Page",
+ "idx": 0,
+ "modified": "2020-07-23 21:45:45.540055",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "patient-progress",
+ "owner": "Administrator",
+ "page_name": "patient-progress",
+ "restrict_to_domain": "Healthcare",
+ "roles": [
+  {
+   "role": "Healthcare Administrator"
+  },
+  {
+   "role": "Physician"
+  },
+  {
+   "role": "Patient"
+  },
+  {
+   "role": "System Manager"
+  }
+ ],
+ "script": null,
+ "standard": "Yes",
+ "style": null,
+ "system_page": 0,
+ "title": "Patient Progress"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/page/patient_progress/patient_progress.py
@@ -0,0 +1,232 @@
+import json
+from datetime import datetime
+
+import frappe
+from frappe import _
+from frappe.utils import get_timespan_date_range, getdate
+
+
+@frappe.whitelist()
+def get_therapy_sessions_count(patient):
+	total = frappe.db.count("Therapy Session", filters={"docstatus": 1, "patient": patient})
+
+	month_start = datetime.today().replace(day=1)
+	this_month = frappe.db.count(
+		"Therapy Session", filters={"creation": [">", month_start], "docstatus": 1, "patient": patient}
+	)
+
+	return {"total_therapy_sessions": total, "therapy_sessions_this_month": this_month}
+
+
+@frappe.whitelist()
+def get_patient_heatmap_data(patient, date):
+	return dict(
+		frappe.db.sql(
+			"""
+		SELECT
+			unix_timestamp(communication_date), count(*)
+		FROM
+			`tabPatient Medical Record`
+		WHERE
+			communication_date > subdate(%(date)s, interval 1 year) and
+			communication_date < subdate(%(date)s, interval -1 year) and
+			patient = %(patient)s
+		GROUP BY communication_date
+		ORDER BY communication_date asc""",
+			{"date": date, "patient": patient},
+		)
+	)
+
+
+@frappe.whitelist()
+def get_therapy_sessions_distribution_data(patient, field):
+	if field == "therapy_type":
+		result = frappe.db.get_all(
+			"Therapy Session",
+			filters={"patient": patient, "docstatus": 1},
+			group_by=field,
+			order_by=field,
+			fields=[field, "count(*)"],
+			as_list=True,
+		)
+
+	elif field == "exercise_type":
+		data = frappe.db.get_all(
+			"Therapy Session", filters={"docstatus": 1, "patient": patient}, as_list=True
+		)
+		therapy_sessions = [entry[0] for entry in data]
+
+		result = frappe.db.get_all(
+			"Exercise",
+			filters={"parenttype": "Therapy Session", "parent": ["in", therapy_sessions], "docstatus": 1},
+			group_by=field,
+			order_by=field,
+			fields=[field, "count(*)"],
+			as_list=True,
+		)
+
+	return {
+		"labels": [r[0] for r in result if r[0] != None],
+		"datasets": [{"values": [r[1] for r in result]}],
+	}
+
+
+@frappe.whitelist()
+def get_therapy_progress_data(patient, therapy_type, time_span):
+	date_range = get_date_range(time_span)
+	query_values = {
+		"from_date": date_range[0],
+		"to_date": date_range[1],
+		"therapy_type": therapy_type,
+		"patient": patient,
+	}
+	result = frappe.db.sql(
+		"""
+		SELECT
+			start_date, total_counts_targeted, total_counts_completed
+		FROM
+			`tabTherapy Session`
+		WHERE
+			start_date BETWEEN %(from_date)s AND %(to_date)s and
+			docstatus = 1 and
+			therapy_type = %(therapy_type)s and
+			patient = %(patient)s
+		ORDER BY start_date""",
+		query_values,
+		as_list=1,
+	)
+
+	return {
+		"labels": [r[0] for r in result if r[0] != None],
+		"datasets": [
+			{"name": _("Targetted"), "values": [r[1] for r in result if r[0] != None]},
+			{"name": _("Completed"), "values": [r[2] for r in result if r[0] != None]},
+		],
+	}
+
+
+@frappe.whitelist()
+def get_patient_assessment_data(patient, assessment_template, time_span):
+	date_range = get_date_range(time_span)
+	query_values = {
+		"from_date": date_range[0],
+		"to_date": date_range[1],
+		"assessment_template": assessment_template,
+		"patient": patient,
+	}
+	result = frappe.db.sql(
+		"""
+		SELECT
+			assessment_datetime, total_score, total_score_obtained
+		FROM
+			`tabPatient Assessment`
+		WHERE
+			DATE(assessment_datetime) BETWEEN %(from_date)s AND %(to_date)s and
+			docstatus = 1 and
+			assessment_template = %(assessment_template)s and
+			patient = %(patient)s
+		ORDER BY assessment_datetime""",
+		query_values,
+		as_list=1,
+	)
+
+	return {
+		"labels": [getdate(r[0]) for r in result if r[0] != None],
+		"datasets": [{"name": _("Score Obtained"), "values": [r[2] for r in result if r[0] != None]}],
+		"max_score": result[0][1] if result else None,
+	}
+
+
+@frappe.whitelist()
+def get_therapy_assessment_correlation_data(patient, assessment_template, time_span):
+	date_range = get_date_range(time_span)
+	query_values = {
+		"from_date": date_range[0],
+		"to_date": date_range[1],
+		"assessment": assessment_template,
+		"patient": patient,
+	}
+	result = frappe.db.sql(
+		"""
+		SELECT
+			therapy.therapy_type, count(*), avg(assessment.total_score_obtained), total_score
+		FROM
+			`tabPatient Assessment` assessment INNER JOIN `tabTherapy Session` therapy
+		ON
+			assessment.therapy_session = therapy.name
+		WHERE
+			DATE(assessment.assessment_datetime) BETWEEN %(from_date)s AND %(to_date)s and
+			assessment.docstatus = 1 and
+			assessment.patient = %(patient)s and
+			assessment.assessment_template = %(assessment)s
+		GROUP BY therapy.therapy_type
+	""",
+		query_values,
+		as_list=1,
+	)
+
+	return {
+		"labels": [r[0] for r in result if r[0] != None],
+		"datasets": [
+			{"name": _("Sessions"), "chartType": "bar", "values": [r[1] for r in result if r[0] != None]},
+			{
+				"name": _("Average Score"),
+				"chartType": "line",
+				"values": [round(r[2], 2) for r in result if r[0] != None],
+			},
+		],
+		"max_score": result[0][1] if result else None,
+	}
+
+
+@frappe.whitelist()
+def get_assessment_parameter_data(patient, parameter, time_span):
+	date_range = get_date_range(time_span)
+	query_values = {
+		"from_date": date_range[0],
+		"to_date": date_range[1],
+		"parameter": parameter,
+		"patient": patient,
+	}
+	results = frappe.db.sql(
+		"""
+		SELECT
+			assessment.assessment_datetime,
+			sheet.score,
+			template.scale_max
+		FROM
+			`tabPatient Assessment Sheet` sheet
+		INNER JOIN `tabPatient Assessment` assessment
+			ON sheet.parent = assessment.name
+		INNER JOIN `tabPatient Assessment Template` template
+			ON template.name = assessment.assessment_template
+		WHERE
+			DATE(assessment.assessment_datetime) BETWEEN %(from_date)s AND %(to_date)s and
+			assessment.docstatus = 1 and
+			sheet.parameter = %(parameter)s and
+			assessment.patient = %(patient)s
+		ORDER BY
+			assessment.assessment_datetime asc
+	""",
+		query_values,
+		as_list=1,
+	)
+
+	score_percentages = []
+	for r in results:
+		if r[2] != 0 and r[0] != None:
+			score = round((int(r[1]) / int(r[2])) * 100, 2)
+			score_percentages.append(score)
+
+	return {
+		"labels": [getdate(r[0]) for r in results if r[0] != None],
+		"datasets": [{"name": _("Score"), "values": score_percentages}],
+	}
+
+
+def get_date_range(time_span):
+	try:
+		time_span = json.loads(time_span)
+		return time_span
+	except json.decoder.JSONDecodeError:
+		return get_timespan_date_range(time_span.lower())
--- /dev/null
+++ b/healthcare/healthcare/print_format/barcode_speciment/barcode_speciment.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-06-03 12:57:11.132630",
+ "css": "/*.print-format {*/\n/*  margin-top: 1mm;*/\n/*  margin-left: 0mm;*/\n/*  margin-bottom: 0mm;*/\n/*  margin-right: 0mm;*/\n/*}*/\n\n  /*  @page {\n            size: 25.5mm 27.5mm;\n            margin: 0;\n    /*        }\n  /*  body {\n            width: 25.5mm;\n            height: 27.5mm;\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n  /*  }\n   /*     .barcode {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        img {\n            max-width: 100%;\n            max-height: 100%;\n        }*/",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 1,
+ "doc_type": "Specimen",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "{% set dob = frappe.db.get_value(\"Patient\", doc.patient, \"dob\") %}\n{% set years = 0 %}\n{% set months = 0 %}\n{% set days = 0 %}\n{% if dob %}\n    {% set now  = frappe.utils.nowdate() %}\n    {% set diff = frappe.utils.date_diff(now, dob) %}\n    {% set years = diff//365 %}\n    {% set months = (diff - (years * 365))//30 %}\n    {% set days = ( (diff - (years * 365)) - (months * 30) ) %}\n{% endif %}\n{% set age_display = \"\" %}\n{% if years > 0 %}\n    {% set age_display = years|str + 'Y' %}\n{% else %}\n    {% set age_display = months|str + 'M ' + days|str + 'D'  %}\n{% endif %}\n<div style=\"font-family: arial, sans-serif;\" >\n    <div style=\"display:flex; justify-content:center; text-align:center;font-weight:bold\">\n            <div class=\"b1\">\n                    <b><div style=\"text-align: center; margin-bottom: -2px; \">{{doc.patient_name|upper}} \n                    <span class=\"column\" style=\"margin:2px\">,</span>\n \n    {{doc.patient}}, {{age_display}} / {{doc.patient_gender[:1]}} <span>,</span>{{doc.specimen_type|upper}}</div> \n    \n    \n</b>\n            </div>\n        \n\n    </div>\n\n    <div style=\"text-align:center;\"><img class=\"barcode\" style=\"\" src=\"data:image/png;base64,{{ generate_barcodes(doc.name) }}\"></div>\n         <div  style=\"text-align:center; \">{{doc.name}}</div>\n\n</div>",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-09-24 13:13:27.886868",
+ "modified_by": "waed@his.com",
+ "module": "Healthcare",
+ "name": "barcode speciment",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/clinical_procedure_print/clinical_procedure_print.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-06-19 14:20:03.988828",
+ "css": ".header-image {\r\n    width: 100%;\r\n}\r\nheader {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n  \r\n}\r\nfooter {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n\r\n}\r\n\r\n\r\n@media print {\r\n  footer {\r\n    position: fixed;\r\n    left: 60px;\r\n    bottom: 0;\r\n    \r\n  }\r\n  \r\n  header {\r\n      width: 100%;\r\n  }\r\n\r\n}",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Clinical Procedure",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "<header>\n    <img src=\"/files/\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b header.png\" alt=\"Warith letter head\" class = \"header-image\">\n</header>\n<p>&emsp;&emsp;</p>\n\n<p>&emsp;&emsp;&emsp;<b>Name:</b>&emsp;&emsp;{{doc.patient_name}}</p>\n<p>&emsp;&emsp;&emsp;<b>Age:</b>&emsp;&emsp;{{doc.patient_age}}</p>\n<p>&emsp;&emsp;&emsp;<b>Study:</b>&emsp;&emsp;{{doc.procedure_template}}</p>\n\n<div>\n    <p>&emsp;&emsp;{{doc.report}}</p>\n</div>\n\n<footer>\n    <img src=\"/private/files/\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b footer.png\" alt=\"Warith letter footer\">\n</footer>",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-08-18 14:13:57.430131",
+ "modified_by": "zaynebadil@his.com",
+ "module": "Healthcare",
+ "name": "Clinical Procedure print",
+ "owner": "waed@his.com",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/diagnostic_report/diagnostic_report.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 1,
+ "creation": "2023-07-14 11:11:49.125416",
+ "css": ".diagnostic-report {\n    margin-top: 0px;\n    padding-top: 0px;\n    margin-right:15px;\n\tmargin-left:15px;\n}\n.observation {\n    page-break-inside: avoid;\n\tmargin-bottom: 10px;\n\tborder: 1px solid #dadce0;\n\tmargin-right:15px;\n\tmargin-left:15px;\n\tborder-radius: 5px !important;\n}\n\n.grouped-obs {\n\tborder: 1px solid #dadce0;\n\tfont-size: 11px;\n\tpadding-top: 5px;\n\tborder-radius: 10px;\n\tmargin-bottom: 5px;\n\tmargin-left: 10px;\n\tmargin-right: 10px;\n}\n\n.observation-details {\n    page-break-inside: avoid;\n\tpadding: 10px;\n\tdisplay: -webkit-box;\n\tdisplay: flex;\n}\n\n.note {\n\tpadding-right: 15px;\n\tmargin-left: 15px;\n\ttext-align: left;\n\tpadding-bottom: 3px;\n}\n\n.obs-first-line {\n    font-size: 13px;\n}\n\n.ref-range {\n    font-size: 12px !important;\n}\n.obs-second-line {\n    font-size: 10px;\n}\n\n.obs-sh-first-line {\n    font-size: 11px;\n}\n\n/*.print-format{*/\n/*    padding: 1px !important;*/\n/*    margin-bottom: 1px !important;*/\n/*}*/\n\n/*.print-format table, .print-format tr, .print-format td, .print-format div, .print-format p {*/\n/*    font-family: Tahoma, sans-serif;*/\n/*    vertical-align: middle; */\n    \n/*} */\n\n/*.letter-head .letter-head-footer {*/\n/*    margin-bottom: 0px !important;*/\n/*    display: block !important;*/\n/*}*/\n\n/*.print-format .row:not(.section-break) {*/\n/*    line-height: 1.6; margin-top: 1px !important;*/\n    \n/*}*/\n",
+ "custom_format": 0,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Diagnostic Report",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "<!DOCTYPE html>\n<div {% if print_settings.repeat_header_footer %} id=\"header-html\" class=\"hidden-pdf\" {% endif %} style=\"padding-bottom:10px;\">\n\t{% if letter_head and not no_letterhead %}\n\t\t<div>{{ letter_head }}</div>\n\t{% endif %}\n</div>\n\n\n{% set dob = frappe.db.get_value(\"Patient\", doc.patient, \"dob\") %}\n{% set years = 0 %}\n{% set months = 0 %}\n{% set days = 0 %}\n{% if dob %}\n    {% set now  = frappe.utils.nowdate() %}\n    {% if doc.ref_doctype==\"Sales Invoice\" and doc.docname %}\n        {% set now  = frappe.db.get_value(\"Sales Invoice\", doc.docname, \"posting_date\") %}\n    {% endif %}\n    {% set diff = frappe.utils.date_diff(now, dob) %}\n    {% set years = diff//365 %}\n    {% set months = (diff - (years * 365))//30 %}\n    {% set days = ( (diff - (years * 365)) - (months * 30) ) %}\n{% endif %}\n\n{% set sex = frappe.db.get_value(\"Patient\", doc.patient, \"sex\") %}\n\n{% set salutation = \"Ms\" %}\n\n{%- if years <= 1 -%}\n    {% set salutation = \"Baby\" %}\n{% elif sex == \"Male\" and years <= 13%}\n    {% set salutation = \"Master\" %}\n{% elif sex == \"Female\" and years <= 18 %}\n    {% set salutation = \"Miss\" %}\n{% elif sex == \"Male\" %}\n    {% set salutation = \"Mr\" %}\n{% endif %}\n<div class=\"text-center\"><h3 style=\"padding-top:0px; margin-top:0px;\"><u>DEPARTMENT OF LABORATORY MEDICINE</u></h3></div>\n<div class=\"row section-break diagnostic-report\" style=\"margin-left: 40px;\">\n    <div class=\"col-xs-6 column-break\">\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>Client Name:</label></div>\n            <div class=\"col-xs-8 value\"><b>{{ salutation }} {{ doc.patient_name.upper() }}</b></div>\n        </div>\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>MR Number:</label></div>\n            <div class=\"col-xs-8 value\">{{ doc.patient }}</div>\n        </div>\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>Age/Gender:</label></div>\n            <div class=\"col-xs-8 value\">{{ years }}Y {{ months }}M {{ days }}D / {{ sex }}</div>\n        </div>\n    </div>\n    <div class=\"col-xs-6 column-break\">\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>Referred By:</label></div>\n            {%- if doc.practitioner_name -%}\n            <div class=\"col-xs-8 value\">{{ doc.practitioner_name.upper() or \"Self\" }}</div>\n            {% else %}\n                <div class=\"col-xs-8 value\">Self</div>\n            {% endif %}\n        </div>\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>Invoice No.:</label></div>\n            <div class=\"col-xs-8 value\">{{ doc.docname }}</div>\n        </div>\n        <div class=\"row data-field\">\n            <div class=\"col-xs-4\"><label>Billed On:</label></div>\n            <div class=\"col-xs-8 value\">{{ frappe.utils.format_date(now) }}</div>\n        </div>\n\n    </div>\n</div>\n<div class = \"observation-details\" style=\"width: 100%; background-color:#a8d08d; padding-left:40px; margin-bottom: 10px;\">\n    <div class=\"obs-field\" style=\"width: 15%;\">\n        <div class=\"obs-sh-first-line\">\n            <b>\n            SAMPLE\n            </b>\n        </div>\n        <div class=\"obs-second-line\" style=\"color:white;\">\n            Collected on\n        </div>\n    </div>\n    <div class=\"obs-field\" style=\"width: 30%; padding-left:15px;\">\n        <div class=\"obs-sh-first-line\">\n            <b>\n            INVESTIGATION\n            </b>\n        </div>\n        <div class=\"obs-second-line\" style=\"color:white;\">\n            Method\n        </div>\n    </div>\n    <div class=\"obs-field\" style=\"width: 17%; padding-left:25px;\">\n        <div class=\"obs-sh-first-line\">\n            <b>\n            RESULT\n            </b>\n        </div>\n        <div class=\"obs-second-line\" style=\"color:white;\">\n            Reported on\n        </div>\n    </div>\n    <div class=\"obs-field\" style=\"width: 13%;\">\n        <div class=\"obs-sh-first-line\">\n            <b>\n            UNIT\n            </b>\n        </div>\n    </div>\n    <div class=\"obs-field\" style=\"width: 29%;\">\n        <div class=\"obs-sh-first-line\">\n            <b>\n            REFERENCE INTERVAL\n            </b>\n        </div>\n    </div>\n</div>\n\n{% if doc.get(\"docname\")  %}\n\t{% if doc.get(\"docname\")  %}\n\t\t{% set full_data = diagnostic_report_print(doc.name) %}\n\t\t <div class=\"diagnostic-report\">\n\t\t{% for data in full_data[0] %}\n\t\t\t{% if not data.get(\"has_component\")  %}\n\t\t\t\t{% if data.get(\"observation\").get(\"preferred_display_name\")  %}\n\t\t\t\t\t{% set observation_name = data.get(\"observation\").get(\"preferred_display_name\") %}\n\t\t\t\t{% else %}\n\t\t\t\t\t{% set observation_name = data.get(\"observation\").get(\"observation_template\") %}\n\t\t\t\t{% endif %}\n\t\t\t\t\n\t\t\t\t{% if data.get(\"observation\") or data.get(\"observation\")  %}\n\t\t\t\t{% if data.get(\"observation\").get(\"status\")==\"Approved\" and (data.get(\"observation\").get(\"result_data\") or data.get(\"observation\").get(\"result_text\") or  data.get(\"observation\").get(\"result_select\")  not in [None, \"\", \"Null\"]) %}\n\t\t\t\t\t<div class=\"observation-section grouped-obs\">\n\t\t\t\t\t\t\t<div class=\"flex\" style=\"padding-bottom: 5px; margin-left:5px;\">\n\t\t\t\t\t\t\t\t<b>\n\t\t\t\t\t\t\t\t\t{{observation_name}}\n\t\t\t\t\t\t\t\t</b>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"observation single-obs\">\n\t\t\t\t\t<div class=\"observation-details\" style=\"width: 100%;\">\n\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 15%;\">\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"sample\")  %}\n\t\t\t\t\t\t\t\t<div class=\"obs-first-line\">\n\t\t\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"sample\")}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% else %}\n                                <div class=\"obs-first-line\">\n\t\t\t\t\t\t\t\t\t{{ frappe.db.get_value(\"Observation Template\", data.get(\"observation\").get(\"observation_template\"), \"sample\") or \"\" }}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"received_time\")  %}\n\t\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line\">\n\t\t\t\t\t\t\t\t\t{{frappe.utils.format_datetime(data.get(\"observation\").get(\"received_time\"))[:-3]}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 30%;\">\n\t\t\t\t\t\t\t<div class=\"obs-first-line\">\n\t\t\t\t\t\t\t\t{{observation_name}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"method\")  %}\n\t\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line\">\n\t\t\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"method\")}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 20%;\">\n\t\t\t\t\t\t\t<div class=\"obs-first-line text-center\" style=\"text-align: center;\">\n\t\t\t\t\t\t\t    {% if data.get(\"observation\").get(\"result_data\") or data.get(\"observation\").get(\"result_select\") %}\n    \t\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"result_data\")\n    \t\t\t\t\t\t\t\tor data.get(\"observation\").get(\"result_select\")}}\n    \t\t\t\t\t\t\t{% elif data.get(\"observation\").get(\"result_text\") %}\n                                    {% if '</div>' in data.get(\"observation\").get(\"result_text\") %}\n                                         {% if  data.get(\"observation\").get(\"result_text\")|length <= 60 %}\n                                            {{data.get(\"observation\").get(\"result_text\")}}\n                                        {% endif %}\n                                    {% elif data.get(\"observation\").get(\"result_text\")|length <= 24 %}\n                                            {{data.get(\"observation\").get(\"result_text\")}}\n                                    {% endif %}\n\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"time_of_result\")  %}\n\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line text-center\" style=\"text-align: center;\">\n\t\t\t\t\t\t\t\t{{frappe.utils.format_datetime(data.get(\"observation\").get(\"time_of_result\"))[:-3]}}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"obs-field obs-first-line\" style=\"width: 12%; padding-right:5px;\">\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"permitted_unit\")  %}\n\t\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"permitted_unit\")}}\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"obs-field obs-second-line ref-range\" style=\"width: 23%; padding-left:5px;\">\n\t\t\t\t\t\t\t{% if data.get(\"observation\").get(\"reference\")  %}\n\t\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"reference\")}}\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n                    {% if data.get(\"observation\").get(\"result_text\") %}\n                        {% if '</div>' in data.get(\"observation\").get(\"result_text\") %}\n                            {% if  data.get(\"observation\").get(\"result_text\")|length > 60 %}\n                                <div class=\"note obs-second-line\">\n                                    {{data.get(\"observation\").get(\"result_text\")}}\n                                </div>\n                            {% endif %}\n                        {% elif data.get(\"observation\").get(\"result_text\")|length > 24 %}\n                            <div class=\"note obs-second-line\">\n                                {{data.get(\"observation\").get(\"result_text\")}}\n                            </div>\n                        {% endif %}\n                    {% endif %}\n\t\t\t\t\t{% if data.get(\"observation\").get(\"result_interpretation\")  %}\n\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"result_interpretation\")}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endif %}\n\t\t\t\t\t{% if data.get(\"observation\").get(\"note\")  %}\n\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"note\")}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endif %}\n\t\t\t\t\t{% if data.get(\"observation\").get(\"description\")  %}\n\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t\t\t{{data.get(\"observation\").get(\"description\")}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t{% endif %}\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{% endif %}\n\t\t\t\t{% endif %}\n\t\t\t{% else %}\n\t\t\t\t{% if data[\"obs_approved\"] and data[data.get(\"observation\")] and data[\"has_result\"] %}\n            \t    <div class=\"observation-section\">\n\t\t\t\t\t<div class=\"section-body\">\n\t\t\t\t\t<div class=\"observations pr-1\">\n\t\t\t\t\t<div class=\"grouped-obs\">\n\t\t\t\t\t\t<div class=\"flex\" style=\"padding-bottom: 5px; margin-left: 15px;\">\n\t\t\t\t\t\t\t<b>\n\t\t\t\t\t\t\t\t{{data.get(\"display_name\")}}\n\t\t\t\t\t\t\t</b>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{% for comps in data[data.get(\"observation\")] %}\n\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"preferred_display_name\")  %}\n\t\t\t\t\t\t\t\t{% set observation_name = comps.get(\"observation\").get(\"preferred_display_name\") %}\n\t\t\t\t\t\t\t{% else %}\n\t\t\t\t\t\t\t\t{% set observation_name = comps.get(\"observation\").get(\"observation_template\") %}\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"status\")==\"Approved\" and comps.get(\"observation\")  %}\n\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"result_data\") or comps.get(\"observation\").get(\"result_text\") or  comps.get(\"observation\").get(\"result_select\")  not in [None, \"\", \"Null\"] %}\n\t\t\t\t\t\t\t\t<div class=\"observation-section\">\n\t\t\t\t\t\t\t\t<div class=\"observation single-obs\">\n\t\t\t\t\t\t\t\t<div class=\"observation-details\" style=\"width: 100%;\">\n\t\t\t\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 15%;\">\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"sample\")  %}\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"obs-first-line\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"sample\")}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% else %}\n                                            <div class=\"obs-first-line\">\n            \t\t\t\t\t\t\t\t\t{{ frappe.db.get_value(\"Observation Template\", comps.get(\"observation\").get(\"observation_template\"), \"sample\") or \"\"}}\n            \t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"received_time\")  %}\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{frappe.utils.format_datetime(comps.get(\"observation\").get(\"received_time\"))[:-3]}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 30%;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"obs-first-line\">\n\t\t\t\t\t\t\t\t\t\t\t{{observation_name}}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"method\")  %}\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line\">\n\t\t\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"method\")}}\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"obs-field\" style=\"width: 20%;\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"obs-first-line text-center\" style=\"text-align: center;\">\n\t\t\t\t\t\t\t\t\t\t    {% if comps.get(\"observation\").get(\"result_data\") or comps.get(\"observation\").get(\"result_select\") %}\n    \t\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"result_data\")\n    \t\t\t\t\t\t\t\t\t\t\tor comps.get(\"observation\").get(\"result_select\")}}\n\t\t\t\t\t\t\t\t\t\t\t{% elif comps.get(\"observation\").get(\"result_text\") %}\n                                                {% if '</div>' in comps.get(\"observation\").get(\"result_text\") %}\n                                                     {% if  comps.get(\"observation\").get(\"result_text\")|length <= 60 %}\n                                                        {{comps.get(\"observation\").get(\"result_text\")}}\n                                                    {% endif %}\n                                                {% elif comps.get(\"observation\").get(\"result_text\")|length <= 24 %}\n                                                        {{comps.get(\"observation\").get(\"result_text\")}}\n                                                {% endif %}\n                                            {% endif %}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"time_of_result\")  %}\n\t\t\t\t\t\t\t\t\t\t<div class=\"text-muted obs-second-line text-center\">\n\t\t\t\t\t\t\t\t\t\t\t{{frappe.utils.format_datetime(comps.get(\"observation\").get(\"time_of_result\"))[:-3]}}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"obs-field obs-first-line\" style=\"width: 12%;\">\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"permitted_unit\")  %}\n\t\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"permitted_unit\")}}\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div class=\"obs-field obs-first-line\" style=\"width: 23%;\">\n\t\t\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"reference\")  %}\n\t\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"reference\")}}\n\t\t\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"result_text\") %} \n\t\t\t\t\t\t\t\t    {% if '</div>' in comps.get(\"observation\").get(\"result_text\") %}\n                                        {% if comps.get(\"observation\").get(\"result_text\")|length > 60 %}\n                                            <div class=\"note obs-second-line\">\n                                                {{comps.get(\"observation\").get(\"result_text\")}}\n                                            </div>\n                                        {% endif %}\n                                    {% elif comps.get(\"observation\").get(\"result_text\")|length > 24 %}\n                                        <div class=\"note obs-second-line\">\n                                            {{comps.get(\"observation\").get(\"result_text\")}}\n                                        </div>\n                                    {% endif %}\n                                {% endif %}\n                                {% if comps.get(\"observation\").get(\"result_interpretation\")  %}\n                                    <div class=\"note obs-second-line\">\n                                        {{comps.get(\"observation\").get(\"result_interpretation\")}}\n                                    </div>\n                                {% endif %}\n\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"note\")  %}\n\t\t\t\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"note\")}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t{% if comps.get(\"observation\").get(\"description\") and not data.get(\"description\") %}\n\t\t\t\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t\t\t\t\t\t{{comps.get(\"observation\").get(\"description\")}}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t\t{% endif %}\n\t\t\t\t\t\t{% endfor %}\n\t\t\t\t\t\t<div class=\"note obs-second-line\">\n\t\t\t\t\t    \t{{data.get(\"description\") or \"\"}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{% endif %}\n\t\t\t{% endif %}\n\t\t{% endfor %}\n\t\t{% if full_data[0]|length > 0  %}\n    \t\t<div style=\"padding-top:10px; text-align:center;\"><b>* End of Report *</b></div>\n\t\t{% endif %}\n\t\t</div>\n\t{% endif %}\n{% endif %}\n\n{% if print_settings.repeat_header_footer %}\n  <div id=\"footer-html\" class=\"visible-pdf\">\n      <p class=\"text-left text-muted small page-number visible-pdf\" style=\"font-size: 10px; padding-left: 30px !important;\">\n      {{ _(\"Page {0} of {1}\").format('<span class=\"page text-muted\"></span>', '<span class=\"topage text-muted\"></span>') }}\n    </p>\n    {% if not no_letterhead and footer %}\n    <div class=\"letter-head-footer\">\n      {{ footer }}\n    </div>\n    {% endif %}\n  </div>\n{% endif %}",
+ "idx": 0,
+ "line_breaks": 1,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2023-10-19 08:30:17.970599",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diagnostic Report",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 1,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/encounter_print/encounter_print.json
@@ -0,0 +1,22 @@
+{
+ "align_labels_right": 0,
+ "creation": "2017-04-10 14:05:53.355863",
+ "custom_format": 1,
+ "disabled": 0,
+ "doc_type": "Patient Encounter",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font": "Default",
+ "html": "<div >\n    {% if letter_head and not no_letterhead -%}\n    <div class=\"letter-head\">{{ letter_head }}</div>\n    <hr>\n    {% else %}\n    <div align=\"right\">\n      <h1>{{doc.name}}</h1>\n    </div>\n    {%- endif %}\n    <div class=\"row section-break\">\n        <div class=\"col-xs-6 column-break\">\n                {% if doc.appointment %}\n\t        <div class=\"row\">\n\t\t\t<div class=\"col-xs-4 text-left\">\n\t\t\t<label>Appointment</label>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-7  value\">\n\t\t\t<strong>: </strong>{{doc.appointment}}\n\t\t\t</div>\n\t\t</div>\n\t\t{%- endif -%}\n\n                <div class=\"row\">\n\t\t      <div class=\"col-xs-4 text-left\">\n\t\t\t <label>Patient</label>\n\t\t      </div>\n                     {% if doc.patient %}\n\t\t      <div class=\"col-xs-7  value\">\n\t\t\t  <strong>: </strong>{{doc.patient}}\n\t\t      </div>\n                     {% else %}\n                     <div class=\"col-xs-7  value\">\n\t\t\t <strong>: </strong><em>Patient Name</em>\n\t\t     </div>\n                     {%- endif -%}\n\t\t</div>\n\t        <div class=\"row\">\n\t\t\t<div class=\"col-xs-4 text-left\">\n\t\t\t\t<label>Age</label>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-7  value\">\n\t\t\t     <strong>: </strong> {{doc.patient_age}}\n\t\t\t</div>\n\t\t</div>\n\n                <div class=\"row\">\n                        <div class=\"col-xs-4 text-left\">\n\t\t\t\t<label>Gender</label>\n\t\t\t</div>\n\t\t\t<div class=\"col-xs-7  value\">\n\t\t\t     <strong>: </strong> {{doc.patient_sex}}\n\t\t\t</div>\n                </div>\n\n        </div>\n        <div class=\"col-xs-6 column-break\">\n\n          <div class=\"row\">\n\t      <div class=\"col-xs-4 text-left\">\n\t\t    <label>Healthcare Practitioner</label>\n\t      </div>\n              {% if doc.practitioner %}\n\t      <div class=\"col-xs-7  text-left value\">\n\t\t\t<strong>: </strong>{{doc.practitioner}}\n\t      </div>\n              {%- endif -%}\n\t</div>\n\n          {% if doc.encounter_date %}\n\t  <div class=\"row\">\n\t\t<div class=\"col-xs-4 text-left\">\n\t\t<label>Date</label>\n\t\t</div>\n\t\t<div class=\"col-xs-7 text-left value\">\n\t\t<strong>: </strong>{{doc.encounter_date}}\n\t\t</div>\n          </div>\n\t  {%- endif -%}\n          {% if doc.encounter_time %}\n\t  <div class=\"row\">\n\t\t<div class=\"col-xs-4 text-left\">\n\t\t<label>Time</label>\n\t\t</div>\n\t\t<div class=\"col-xs-7 text-left value\">\n\t\t<strong>: </strong>{{doc.encounter_time}}\n\t\t</div>\n          </div>\n\t  {%- endif -%}\n          {% if doc.medical_department %}\n\t  <div class=\"row\">\n\t\t<div class=\"col-xs-4 text-left\">\n\t\t<label>Department</label>\n\t\t</div>\n\t\t<div class=\"col-xs-7 text-left value\">\n\t\t<strong>: </strong>{{doc.visit_department}}\n\t\t</div>\n          </div>\n          {%- endif -%}\n        </div>\n\n   </div>\n\n</div>\n<div>\n     <hr>\n     {% if doc.symptoms_in_print%}\n       {% if doc.symptoms %}\n         Complaints:\n         <strong>{{doc.symptoms}}</strong>\n  \t   <br>\n       {%- endif -%}\n     {%- endif -%}\n\n     {% if doc.diagnosis_in_print%}\n       {% if doc.diagnosis %}\n  \t     Diagnosis:\n         <strong>{{doc.diagnosis}}</strong>\n         <br>\n       {%- endif -%}\n     {%- endif -%}\n\n</div>\n\n<div>\n      {% if doc.drug_prescription %}\n      <br>\n      Rx,\n      <table class=\"table\">\n        <tbody>\n            <!--<tr>\n                <th>Drug</th>\n                <th class=\"text-left\">Dosage</th>\n                <th class=\"text-left\">Period</th>\n                <th>Remark</th>\n            </tr>-->\n\n            {%- for row in doc.drug_prescription -%}\n            <tr>\n              <td style=\"width: 30%;border:none;\">\n                {%- if row.drug_name -%}<b>{{ row.drug_name }}</b>{%- endif -%}\n              </td>\n            \t<td style=\"width: 20%;text-align: left;border:none;\">\n                {%- if row.dosage -%}{{ row.dosage }}{%- endif -%}\n              </td>\n            \t<td style=\"width: 20%;text-align: left;border:none;\">\n                {%- if row.period -%}{{ row.period }}{%- endif -%}\n\t\t          </td>\n              <td style=\"width: 30%;text-align: left;border:none;\">\n\t\t\t             <div style=\"border: 0px;\">\n                      {%- if row.comment -%}{{ row.comment }}{%- endif -%}\n                   </div>\n\t\t           </td>\n            </tr>\n\t          {%- endfor -%}\n       </tbody>\n      </table>\n\n\n      {%- endif -%}\n</div>\n\n\n<div>\n      {% if doc.lab_test_prescription %}\n      Investigations,\n      <table class=\"table\">\n        <tbody>\n            <!--<tr>\n                <th>Test</th>\n                <th>Remark</th>\n            </tr>-->\n\n            {%- for row in doc.lab_test_prescription -%}\n            <tr>\n              <td style=\"width: 30%;border:none;\">\n                {%- if row.lab_test_name -%}<b>{{ row.lab_test_name }}</b>{%- endif -%}\n              </td>\n              <td style=\"width: 30%;text-align: left;border:none;\">\n\t\t\t           <div style=\"border: 0px;\">\n                   {%- if row.lab_test_comment -%}{{ row.lab_test_comment }}{%- endif -%}\n                 </div>\n\t\t          </td>\n             </tr>\n\n\t           {%- endfor -%}\n       </tbody>\n      </table>\n\n\n      {%- endif -%}\n</div>\n<div>\n    {% if doc.encounter_comment %}\n      <br>\n      {{doc.encounter_comment}}\n     {%- endif -%}\n</div>\n",
+ "idx": 0,
+ "line_breaks": 0,
+ "modified": "2018-09-04 11:52:54.473702",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Encounter Print",
+ "owner": "Administrator",
+ "print_format_builder": 0,
+ "print_format_type": "Jinja",
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/lab_test_print/lab_test_print.json
@@ -0,0 +1,23 @@
+{
+ "align_labels_right": 0,
+ "creation": "2017-04-24 15:38:45.332473",
+ "custom_format": 1,
+ "disabled": 0,
+ "doc_type": "Lab Test",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font": "Default",
+ "html": "<div >\n  {% if letter_head and not no_letterhead -%}\n    <div class=\"letter-head\">{{ letter_head }}</div>\n    <hr>\n  {%- endif %}\n\n  {% if (doc.docstatus != 1) %}\n  <div><h2 class=\"text-uppercase text-center\"><b>WORKSHEET</b></h2></div>\n\t<br/>\n\t<div class=\"row section-break\">\n    <div class=\"col-xs-6 column-break\">\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Patient</label>\n        </div>\n        {% if doc.patient_name %}\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient_name }}\n        </div>\n        {% else %}\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient }}\n        </div>\n        {%- endif -%}\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Age</label>\n        </div>\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient_age or '' }}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Gender</label>\n        </div>\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient_sex or '' }}\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"col-xs-6 column-break\">\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Practitioner</label>\n        </div>\n        {% if doc.practitioner_name %}\n        <div class=\"col-xs-7  text-left value\">\n          {{ doc.practitioner_name }}\n        </div>\n        {% else %}\n\t\t\t{% if doc.referring_practitioner_name %}\n            <div class=\"col-xs-7  text-left value\">\n            {{ doc.referring_practitioner_name }}\n            </div>\n\t\t    {% endif %}\n        {%- endif -%}\n      </div>\n\n      {% if doc.sample_date %}\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Sample Date</label>\n        </div>\n        <div class=\"col-xs-7 text-left value\">\n        {{ doc.sample_date }}\n        </div>\n      </div>\n      {%- endif -%}\n    </div>\n  </div>\n\n\t<div>\n    <hr><h4 class=\"text-uppercase text-center\"><b><u>Department of {{ doc.department }}</u></b></h4>\n  </div>\n\n\t<table class=\"table\">\n    <tbody>\n      {%- if doc.normal_test_items -%}\n      <tr>\n        <th>Name of Test</th>\n        <th class=\"text-left\">Result</th>\n        <th class=\"text-right\">Normal Range</th>\n      </tr>\n\n      {%- if doc.normal_test_items|length > 1 %}\n      <tr><td style=\"width: 40%;\"> <b>{{ doc.lab_test_name }}</b> </td><td></td></tr>\n      {%- endif -%}\n\n      {%- for row in doc.normal_test_items -%}\n      <tr>\n        <td style=\"width: 40%;border:none;\">\n          {%- if doc.normal_test_items|length > 1 %}&emsp;&emsp;{%- endif -%}\n          {%- if row.lab_test_name -%}<b>{{ row.lab_test_name }}</b>\n          {%- else -%}&emsp;&emsp;&emsp;{%- endif -%}\n          {%- if row.lab_test_event -%} &emsp;&emsp;{{ row.lab_test_event }}{%- endif -%}\n        </td>\n\n        <td style=\"width: 20%;text-align: right;border:none;\">\n          {%- if row.lab_test_uom -%}&nbsp;{{ row.lab_test_uom }}{%- endif -%}\n        </td>\n\n        <td style=\"width: 30%;text-align: right;border:none;\">\n          <div style=\"border: 0px;\">\n            {%- if row.normal_range -%}{{ row.normal_range }}{%- endif -%}\n          </div>\n        </td>\n      </tr>\n\n      {%- endfor -%}\n      {%- endif -%}\n    </tbody>\n  </table>\n\n\t<table class=\"table\">\n    <tbody>\n      {%- if doc.descriptive_test_items -%}\n      <tr>\n        <th>Name of Test</th>\n        <th class=\"text-left\">Result</th>\n      </tr>\n      <tr><td style=\"width: 30%;border:none;\"> <b>{{ doc.lab_test_name }}</b> </td><td></td></tr>\n\t\t\t{% set gr_lab_test_name = {'ltname': ''} %}\n      {%- for row in doc.descriptive_test_items -%}\n\t\t\t{%- if row.lab_test_name -%}\n\t\t\t{%- if row.lab_test_name != gr_lab_test_name.ltname -%}\n\t\t\t<tr>\n\t\t\t\t<td style=\"width: 30%;border:none;\"> &emsp;{{ row.lab_test_name }} </td>\n\t\t\t\t<td style=\"width: 70%;text-align: left;border:none;\"></td>\n\t\t\t</tr>\n\t\t\t{% if gr_lab_test_name.update({'ltname': row.lab_test_name}) %} {% endif %}\n\t\t\t{%- endif -%}\n\t\t\t{%- endif -%}\n      <tr>\n        <td style=\"width: 30%;border:none;\"> &emsp;&emsp;{{ row.lab_test_particulars }} </td>\n        <td style=\"width: 70%;text-align: left;border:none;\"></td>\n      </tr>\n      {%- endfor -%}\n      {%- endif -%}\n    </tbody>\n  </table>\n  <div>\n    {% if doc.worksheet_instructions %}\n    <hr>\n    <b>Instructions</b>\n    {{ doc.worksheet_instructions }}\n    {%- endif -%}\n</div>\n  {% elif (frappe.db.get_value(\"Healthcare Settings\", \"None\", \"require_test_result_approval\") == '1' and doc.status != \"Approved\") %}\n  <b>Lab Tests have to be Approved for Print .. !</b>\n  {%- else -%}\n  <div class=\"row section-break\">\n    <div class=\"col-xs-6 column-break\">\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Patient</label>\n        </div>\n        {% if doc.patient_name %}\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient_name }}\n        </div>\n        {% else %}\n        <div class=\"col-xs-7  value\">\n            {{ doc.patient }}\n        </div>\n        {%- endif -%}\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Age</label>\n        </div>\n        <div class=\"col-xs-7  value\">\n        {{ doc.patient_age or '' }}\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Gender</label>\n        </div>\n        <div class=\"col-xs-7  value\">\n          {{ doc.patient_sex or '' }}\n        </div>\n      </div>\n\n    </div>\n\n    <div class=\"col-xs-6 column-break\">\n\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Practitioner</label>\n        </div>\n        {% if doc.practitioner_name %}\n        <div class=\"col-xs-7  text-left value\">\n          {{ doc.practitioner_name }}\n        </div>\n\t\t{% else %}\n\t\t    {% if doc.referring_practitioner_name %}\n                <div class=\"col-xs-7  text-left value\">\n                {{ doc.referring_practitioner_name }}\n                </div>\n\t\t\t{% endif %}\n        {%- endif -%}\n      </div>\n\n      {% if doc.sample_date %}\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Sample Date</label>\n        </div>\n        <div class=\"col-xs-7 text-left value\">\n          {{ doc.sample_date }}\n        </div>\n      </div>\n      {%- endif -%}\n\n      {% if doc.result_date %}\n      <div class=\"row\">\n        <div class=\"col-xs-4 text-left\">\n          <label>Result Date</label>\n        </div>\n        <div class=\"col-xs-7 text-left value\">\n          {{ doc.result_date }}\n        </div>\n      </div>\n      {%- endif -%}\n\n    </div>\n\n  </div>\n\n  <div>\n    <hr><h4 class=\"text-uppercase text-center\"><b><u>Department of {{ doc.department }}</u></b></h4>\n  </div>\n\n\t<div>\n\t\t{% if doc.result_legend and  (doc.legend_print_position == \"Top\" or doc.legend_print_position == \"Both\")%}\n\t\t<b>Result Legend:</b>\n\t\t{{ doc.result_legend }}\n\t\t{%- endif -%}\n\t</div>\n\n  <table class=\"table\">\n    <tbody>\n      {%- if doc.normal_test_items -%}\n      <tr>\n        <th>Name of Test</th>\n        <th class=\"text-left\">Result</th>\n        <th class=\"text-right\">Normal Range</th>\n      </tr>\n\n      {%- if doc.normal_test_items|length > 1 %}\n      <tr><td style=\"width: 40%;\"> <b>{{ doc.lab_test_name }}</b> </td><td></td></tr>\n      {%- endif -%}\n\n      {%- for row in doc.normal_test_items -%}\n      <tr>\n        <td style=\"width: 40%;border:none;\">\n          {%- if doc.normal_test_items|length > 1 %}&emsp;&emsp;{%- endif -%}\n          {%- if row.lab_test_name -%}<b>{{ row.lab_test_name }}</b>\n          {%- else -%}&emsp;&emsp;&emsp;{%- endif -%}\n          {%- if row.lab_test_event -%} &emsp;&emsp;{{ row.lab_test_event }}{%- endif -%}\n        </td>\n\n        <td style=\"width: 20%;text-align: left;border:none;\">\n\t\t\t\t\t{%- if row.result_value -%}\n\t\t\t\t\t\t{%- if row.bold -%}<b>{% endif %}\n\t\t\t\t\t\t{%- if row.underline -%}<u>{% endif %}\n\t\t\t\t\t\t{%- if row.italic -%}<i>{% endif %}\n                        {{ row.result_value }}\n                        {%- if row.lab_test_uom -%}&emsp;{{ row.lab_test_uom }}{%- endif -%}\n\t\t\t\t\t\t{%- if row.italic -%}</i>{% endif %}\n\t\t\t\t\t\t{%- if row.underline -%}</u>{% endif %}\n\t\t\t\t\t\t{%- if row.bold -%}</b>{% endif %}\n\t\t\t\t\t{%- endif -%}\n          \n\t\t\t\t\t{%- if row.secondary_uom and row.conversion_factor and row.secondary_uom_result -%}\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t{%- if row.bold -%}<b>{% endif %}\n\t\t\t\t\t\t{%- if row.underline -%}<u>{% endif %}\n\t\t\t\t\t\t{%- if row.italic -%}<i>{% endif %}\n                        {{ row.secondary_uom_result }}\n                        &emsp;{{ row.secondary_uom }}\n\t\t\t\t\t\t{%- if row.italic -%}</i>{% endif %}\n\t\t\t\t\t\t{%- if row.underline -%}</u>{% endif %}\n\t\t\t\t\t\t{%- if row.bold -%}</b>{% endif %}\n\t\t\t\t\t\t&emsp;\n\t\t\t\t\t{%- endif -%}\n        </td>\n\n        <td style=\"width: 30%;text-align: right;border:none;\">\n          <div style=\"border: 0px;\">\n            {%- if row.normal_range -%}{{ row.normal_range }}{%- endif -%}\n          </div>\n        </td>\n      </tr>\n\n      {%- endfor -%}\n      {%- endif -%}\n    </tbody>\n  </table>\n\n  <table class=\"table\">\n    <tbody>\n      {%- if doc.descriptive_test_items -%}\n      <tr>\n        <th>Name of Test</th>\n        <th class=\"text-left\">Result</th>\n      </tr>\n      <tr><td style=\"width: 30%;border:none;\"> <b>{{ doc.lab_test_name }}</b> </td><td></td></tr>\n\t\t\t{% set gr_lab_test_name = {'ltname': ''} %}\n      {%- for row in doc.descriptive_test_items -%}\n\t\t\t{%- if row.lab_test_name -%}\n\t\t\t{%- if row.lab_test_name != gr_lab_test_name.ltname -%}\n\t\t\t<tr>\n\t\t\t\t<td style=\"width: 30%;border:none;\"> &emsp;{{ row.lab_test_name }} </td>\n\t\t\t\t<td style=\"width: 70%;text-align: left;border:none;\"></td>\n\t\t\t</tr>\n\t\t\t{% if gr_lab_test_name.update({'ltname': row.lab_test_name}) %} {% endif %}\n\t\t\t{%- endif -%}\n\t\t\t{%- endif -%}\n      <tr>\n        <td style=\"width: 30%;border:none;\"> &emsp;&emsp;{{ row.lab_test_particulars }} </td>\n        <td style=\"width: 70%;text-align: left;border:none;\">\n          {%- if row.result_value -%}{{ row.result_value }}{%- endif -%}\n        </td>\n      </tr>\n      {%- endfor -%}\n      {%- endif -%}\n\n\t\t\t{%- if doc.organisms -%}\n\t\t\t<tr>\n\t\t\t\t<th>Organism</th>\n\t\t\t\t<th class=\"text-left\">Colony Population</th>\n\t\t\t</tr>\n\t\t\t{%- for row in doc.organisms -%}\n\t\t\t<tr>\n\t\t\t\t<td style=\"width: 30%;border:none;\"> {{ row.organism }} </td>\n\t\t\t\t<td style=\"width: 60%;text-align: left;border:none;\">\n\t\t\t\t\t{{ row.colony_population }}\n\t\t\t\t\t{% if row.colony_uom %}\n\t\t\t\t\t\t{{ row.colony_uom }}\n\t\t\t\t\t{% endif %}\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t\t{%- endfor -%}\n\t\t\t{%- endif -%}\n\n\t\t\t{%- if doc.sensitivity_test_items -%}\n\t\t\t<tr>\n\t\t\t\t<th>Antibiotic</th>\n\t\t\t\t<th class=\"text-left\">Sensitivity</th>\n\t\t\t</tr>\n\t\t\t{%- for row in doc.sensitivity_test_items -%}\n\t\t\t<tr>\n\t\t\t\t<td style=\"width: 30%;border:none;\"> {{ row.antibiotic }} </td>\n\t\t\t\t<td style=\"width: 70%;text-align: left;border:none;\">{{ row.antibiotic_sensitivity }}</td>\n\t\t\t</tr>\n\t\t\t{%- endfor -%}\n\t\t\t{%- endif -%}\n\n    </tbody>\n  </table>\n  <div>\n    {% if doc.custom_result %}\n        <br/>\n        <div> {{ doc.custom_result }} </div>\n    {%- endif -%}\n    </div>\n\n    <div>\n        {% if doc.lab_test_comment %}\n        <br/>\n        <b>Comments</b>\n        {{ doc.lab_test_comment }}\n        {%- endif -%}\n    </div>\n\n    <div class=\"text-right\">\n        {%- if (frappe.db.get_value(\"Healthcare Settings\", \"None\", \"employee_name_and_designation_in_print\") == '1') -%}\n            {%- if doc.employee_name -%}\n            <h6 class=\"text-uppercase\"><b>{{ doc.employee_name }}</b></h6>\n            {%- endif -%}\n            {%- if doc.employee_designation -%}\n            <h6 class=\"text-uppercase\"><b>{{ doc.employee_designation }}</b></h6>\n            {%- endif -%}\n        {%- else -%}\n            {%- if frappe.db.get_value(\"Healthcare Settings\", \"None\", \"custom_signature_in_print\") -%}\n            <h6 ><b>{{ frappe.db.get_value(\"Healthcare Settings\", \"None\", \"custom_signature_in_print\") }}</b></h6>\n            {%- endif -%}\n        {%- endif -%}\n    </div>\n\n    <div>\n        {% if doc.result_legend and  (doc.legend_print_position == \"Bottom\" or doc.legend_print_position == \"Both\" or doc.legend_print_position == \"\")%}\n        <hr>\n        <b>Result Legend</b>\n        {{ doc.result_legend }}\n        {%- endif -%}\n    </div>\n  {%- endif -%}\n</div>",
+ "idx": 0,
+ "line_breaks": 0,
+ "modified": "2020-07-08 15:34:28.866798",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test Print",
+ "owner": "Administrator",
+ "print_format_builder": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/lab_test_print_default/lab_test_print_default.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 1,
+ "creation": "2024-06-20 10:56:44.780511",
+ "css": ".header-image {\r\n    width: 100%;\r\n}\r\nheader {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n  \r\n}\r\nfooter {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n\r\n}\r\n\r\n\r\n@media print {\r\n  footer {\r\n    position: fixed;\r\n    left: 75px;\r\n    bottom: 0;\r\n    \r\n  }\r\n  \r\n  header {\r\n      width: 100%;\r\n  }\r\n\r\n}",
+ "custom_format": 0,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Lab Test",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "format_data": "[{\"fieldname\": \"print_heading_template\", \"fieldtype\": \"Custom HTML\", \"options\": \"<header>\\n    <img src=\\\"/files/\\u0645\\u0624\\u0633\\u0633\\u0629 \\u0648\\u0627\\u0631\\u062b header.png\\\" alt=\\\"Warith letter head\\\" class = \\\"header-image\\\">\\n</header>\\n\\n\\n<div calss = \\\"department-cont\\\">\\n    <hr><h4 class=\\\"text-uppercase text-center\\\"\\n><b><u>DEPARTMENT OF LABORATORY</u></b></h4>\\n  </div>\\n\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<div class=\\\"row\\\">\\n        <div class=\\\"col-xs-4 text-left\\\">\\n          <label>Patient</label>\\n        </div>\\n        {% if doc.patient_name %}\\n        <div class=\\\"col-xs-7  value\\\">\\n          &emsp;&emsp;{{ doc.patient_name }}\\n        </div>\\n        {% else %}\\n        <div class=\\\"col-xs-7  value\\\">\\n          {{ doc.patient }}\\n        </div>\\n        {%- endif -%}\\n      </div>\\n\"}, {\"fieldname\": \"patient_age\", \"print_hide\": 0, \"label\": \"Age\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"patient_sex\", \"print_hide\": 0, \"label\": \"Gender\"}, {\"fieldname\": \"result_date\", \"print_hide\": 0, \"label\": \"Result Date\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<p>Lab test name:  &emsp;&emsp;&emsp;{{ doc.lab_test_name }}</p>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<table class=\\\"table\\\">\\n    <tbody>\\n      {%- if doc.normal_test_items -%}\\n      <tr>\\n        <th>Name of Test</th>\\n        <th class=\\\"text-left\\\">Result</th>\\n        <th class=\\\"text-right\\\">Normal Range</th>\\n      </tr>\\n\\n      {%- if doc.normal_test_items|length > 1 %}\\n      {%- endif -%}\\n\\n      {%- for i, row in enumerate(doc.normal_test_items) -%}\\n      <tr>\\n        <td style=\\\"width: 40%;border:none;\\\">\\n          {%- if doc.normal_test_items|length > 1 %}&emsp;&emsp;{%- endif -%}\\n          {%- if row.lab_test_name -%}<b>{{ row.lab_test_name }}</b>\\n          {%- else -%}&emsp;&emsp;&emsp;{%- endif -%}\\n          {%- if row.lab_test_event -%} &emsp;&emsp;{{ row.lab_test_event }}{%- endif -%}\\n        </td>\\n\\n        <td style=\\\"width: 20%;text-align: left;border:none;\\\">\\n\\t\\t\\t\\t\\t{%- if row.result_value -%}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}<b>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}<u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}<i>{% endif %}\\n                        {{ row.result_value }}\\n                        {%- if row.lab_test_uom -%}&emsp;{{ row.lab_test_uom }}{%- endif -%}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}</i>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}</u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}</b>{% endif %}\\n\\t\\t\\t\\t\\t{%- endif -%}\\n          \\n\\t\\t\\t\\t\\t{%- if row.secondary_uom and row.conversion_factor and row.secondary_uom_result -%}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}<b>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}<u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}<i>{% endif %}\\n                        {{ row.secondary_uom_result }}\\n                        &emsp;{{ row.secondary_uom }}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}</i>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}</u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}</b>{% endif %}\\n\\t\\t\\t\\t\\t\\t&emsp;\\n\\t\\t\\t\\t\\t{%- endif -%}\\n        </td>\\n\\n        <td style=\\\"width: 30%;text-align: right;border:none;\\\">\\n          <div style=\\\"border: 0px;\\\">\\n            {%- if row.normal_range -%}{{ row.normal_range }}{%- endif -%}\\n          </div>\\n        </td>\\n      </tr>\\n      {%- endfor -%}\\n      {%- endif -%}\\n    </tbody>\\n  </table>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<div class=\\\"footer\\\" style=\\\"text-align:center\\\">\\r\\n        <p>\\u062a\\u0643\\u0627\\u0644\\u064a\\u0641 \\u0639\\u0644\\u0627\\u062c \\u0627\\u0644\\u0627\\u0637\\u0641\\u0627\\u0644 \\u062f\\u0648\\u0646 \\u0633\\u0646 \\u0627\\u0644\\u062e\\u0627\\u0645\\u0633\\u0629 \\u0639\\u0634\\u0631\\u0629 \\u062a\\u0645 \\u062f\\u0641\\u0639\\u0647\\u0627 \\u0643\\u0627\\u0645\\u0644\\u0629 \\u0645\\u0646 \\u0642\\u0628\\u0644 \\u0627\\u0644\\u0639\\u062a\\u0628\\u0629 \\u0627\\u0644\\u062d\\u0633\\u064a\\u0646\\u064a\\u0629 \\u0627\\u0644\\u0645\\u0642\\u062f\\u0633\\u0629.</p>\\r\\n        <p>\\u0627\\u0644\\u0639\\u0646\\u0648\\u0627\\u0646 : \\u0627\\u0644\\u0628\\u0635\\u0631\\u0629 - \\u0627\\u0644\\u0627\\u0631\\u0628\\u0639 \\u0634\\u0648\\u0627\\u0631\\u0639</p>\\r\\n    </div>\\r\\n    \\r\\n<footer>\\r\\n    <img src=\\\"/files/\\u0645\\u0624\\u0633\\u0633\\u0629 \\u0648\\u0627\\u0631\\u062b footer.png\\\" alt=\\\"Warith letter footer\\\">\\r\\n</footer>\"}]",
+ "idx": 0,
+ "line_breaks": 1,
+ "margin_bottom": 0.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 0.0,
+ "modified": "2024-06-22 13:31:21.137720",
+ "modified_by": "waed@his.com",
+ "module": "Healthcare",
+ "name": "Lab test print default",
+ "owner": "waed@his.com",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 1,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/print_format/sample_id_print/sample_id_print.json
@@ -0,0 +1,22 @@
+{
+ "align_labels_left": 0,
+ "creation": "2017-02-17 17:40:52.967840",
+ "custom_format": 1,
+ "disabled": 0,
+ "doc_type": "Sample Collection",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font": "Default",
+ "html": "<style>\n\t.print-format table, .print-format tr, \n\t.print-format td, .print-format div, .print-format p {\n\t\tfont-family: Monospace;\n\t\tline-height: 170%;\n\t\tvertical-align: middle;\n\t}\n\t@media screen {\n\t\t.print-format {\n\t\t\twidth: 6in;\n\t\t\tpadding: 0.25in;\n\t\t\tmin-height: 2in;\n\t\t}\n\t}\n</style>\n{% set column = 0 %}\n<table>\n{% for _ in range(0, doc.num_print) %}\n{% if column == 0 -%}<tr>{% endif %}\n\t<td style=\"width: 2in; height: 1.8in;\">{{doc.name}}<br>{{doc.patient}}<br>\n{% if doc.patient_age %}{{doc.patient_age}}, {% endif %} {% if doc.patient_sex %}{{doc.patient_sex}}{% endif %}<br> {% if doc.collected_time %}{{doc.collected_time}} {% endif %}<br>{% if doc.collected_by %} {{doc.collected_by}} {% endif %}</td>\n{% if column == 0 %}{% set column = column+1 %}\n{% elif column == 2%} </tr>{%- set column = 0 %}\n{% else %}{%- set column = column+1 -%}{%- endif %}\n\t\n{% endfor %}\n</table>",
+ "idx": 0,
+ "line_breaks": 0,
+ "modified": "2017-03-30 18:09:39.537609",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Sample ID Print", 
+ "owner": "Administrator",
+ "print_format_builder": 0,
+ "print_format_type": "Jinja",
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
--- /dev/null
+++ b/healthcare/healthcare/print_format/specimen_barcode/specimen_barcode.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 1,
+ "creation": "2023-08-07 18:15:17.393285",
+ "css": ".print-format {\n  margin-top: 1mm;\n  margin-left: 0mm;\n  margin-bottom: 0mm;\n  margin-right: 0mm;\n}\n",
+ "custom_format": 0,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Specimen",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "{% set dob = frappe.db.get_value(\"Patient\", doc.patient, \"dob\") %}\n{% set years = 0 %}\n{% set months = 0 %}\n{% set days = 0 %}\n{% if dob %}\n    {% set now  = frappe.utils.nowdate() %}\n    {% set diff = frappe.utils.date_diff(now, dob) %}\n    {% set years = diff//365 %}\n    {% set months = (diff - (years * 365))//30 %}\n    {% set days = ( (diff - (years * 365)) - (months * 30) ) %}\n{% endif %}\n{% set age_display = \"\" %}\n{% if years > 0 %}\n    {% set age_display = years|str + 'Y' %}\n{% else %}\n    {% set age_display = months|str + 'M ' + days|str + 'D'  %}\n{% endif %}\n<div style=\"font-family: arial, sans-serif;\">\n    <b><div style=\"text-align: center; margin-bottom: -2px; font-size:8px;\">{{doc.patient_name|upper}}<br>\n    {{doc.patient}}, {{age_display}} / {{doc.patient_gender[:1]}}</div>\n    <div style=\"text-align:center;\"><img class=\"barcode\" style=\"width: 350px; height: 50px;\" src=\"data:image/png;base64,{{ generate_barcodes(doc.name) }}\"></div>\n    <div  style=\"text-align:center; font-size:8px; margin-top: -8px;\">{{doc.name}}</div>\n    <div style=\"text-align: center; font-size:8px;\">{{doc.specimen_type|upper}}</div></b>\n</div>",
+ "idx": 0,
+ "line_breaks": 1,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2023-10-20 07:18:45.952670",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Specimen Barcode",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 1,
+ "standard": "Yes"
+}
\ No newline at end of file
diff --git "a/healthcare/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/__init__.py" "b/healthcare/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/__init__.py"
new file mode 100755
index 0000000..e69de29
diff --git "a/healthcare/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json" "b/healthcare/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json"
new file mode 100755
index 0000000..3500196
--- /dev/null
+++ "b/healthcare/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json"
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-05-23 09:38:38.482233",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Patient",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "format_data": "[{\"fieldname\": \"print_heading_template\", \"fieldtype\": \"Custom HTML\", \"options\": \"<div class=\\\"print-heading\\\" >\\t\\t\\n<h2><div>Patient</div><br>\\n\\n    <pre>\\n        MRN:     <small class=\\\"sub-heading\\\">\\n            \\n            {{ doc.name }}\\n            \\n        </small>\\t\\n    </pre>\\n    \\t\\n    \\n    <div class='ar-header' style=\\\"text-align:right;direction:rtl\\\" >\\n            \\n            <div>\\n                <span>\\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 : </span>\\n                {{doc.\\u0627\\u0644\\u0627\\u0633\\u0645_\\u0627\\u0644\\u0627\\u0648\\u0644}} {{  doc.\\u0627\\u0633\\u0645_\\u0627\\u0644\\u0627\\u0628   }}\\n            </div>\\n    </div>\\n    \\n</h2></div>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\"}]",
+ "html": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Patient Information</title>\r\n    <style>\r\n        .bill-container {\r\n            font-family: Arial, sans-serif;\r\n            width: 100%;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            /*border: 1px solid #000;*/\r\n            direction:rtl;\r\n        }\r\n        .bill-header {\r\n            text-align: center;\r\n            margin-bottom: 20px;\r\n        }\r\n        .bill-header img {\r\n            width: 100px;\r\n            height: auto;\r\n        }\r\n        .bill-header h2 {\r\n            margin: 0;\r\n        }\r\n        .bill-info {\r\n            width: 100%;\r\n            margin-bottom: 20px;\r\n        }\r\n        .bill-info table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n        }\r\n        .bill-info th, .bill-info td {\r\n            border: 1px solid #000;\r\n            padding: 8px;\r\n            text-align: right;\r\n        }\r\n        .bill-info th {\r\n            width: 30%;\r\n        }\r\n        .bill-footer {\r\n            font-size: 12px;\r\n            text-align: center;\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"bill-container\">\r\n        <div class=\"bill-header\">\r\n            <img src=\"/files/protfolio.svg\" alt=\"Logo\">\r\n            \r\n            <h1> \r\n            \u0645\u0633\u062a\u0634\u0641\u0649 \u0627\u0644\u062b\u0642\u0644\u064a\u0646 \u0644\u0639\u0644\u0627\u062d \u0627\u0644\u0627\u0648\u0631\u0627\u0645\r\n            </h1>\r\n            <p>\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b \u0627\u0644\u062f\u0648\u0644\u064a\u0629</p>\r\n            <p>ISO 9001 | ISO 14001 | ISO 45001</p>\r\n        </div>\r\n        <div class=\"bill-info\">\r\n            <table>\r\n                <tr>\r\n                    <th>  \u0627\u0633\u0645 \u0627\u0644\u0645\u0631\u064a\u0636 :</th>\r\n                    <td>\r\n                        {{doc.\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644}}\r\n                        {{doc.\u0627\u0633\u0645_\u0627\u0644\u0627\u0628}}\r\n                        {{doc.\u0627\u0633\u0645_\u0627\u0644\u062c\u062f}}\r\n                        {{doc.\u0627\u0644\u0644\u0642\u0628}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>\u0627\u0644\u0639\u0645\u0631 :</th>\r\n                    <td>{{doc.age.years}}</td>\r\n                </tr>\r\n                   <tr>\r\n                    <th> MRN / \u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u064a\u0636</th>\r\n                    <td>{{doc.name}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>\u0627\u0644\u0645\u0648\u0642\u0639:</th>\r\n                    <td>Out-Patient</td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <div class=\"bill-footer\">\r\n            <p>\u062a\u0643\u0627\u0644\u064a\u0641 \u0639\u0644\u0627\u062c \u0627\u0644\u0623\u0637\u0641\u0627\u0644 \u062f\u0648\u0646 \u0633\u0646 \u0627\u0644\u062e\u0627\u0645\u0633\u0629 \u0639\u0634\u0631\u0629 \u062a\u0645 \u062f\u0641\u0639\u0647\u0627 \u0643\u0627\u0645\u0644\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0639\u062a\u0628\u0629 \u0627\u0644\u062d\u0633\u064a\u0646\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0633\u0629.</p>\r\n            <p>\u062a\u0645 \u0627\u0644\u062a\u0643\u0641\u0644 \u0628\u0639\u0644\u0627\u062c \u0627\u0644\u0645\u0631\u064a\u0636  \u0645\u062c\u0627\u0646\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0639\u062a\u0628\u0629 \u0627\u0644\u062d\u0633\u064a\u0646\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0633\u0629</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-05-25 07:34:14.006658",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0637\u0628\u0627\u0639\u0647 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u064a\u0636",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/report/diagnosis_trends/diagnosis_trends.js
@@ -0,0 +1,93 @@
+// Copyright (c) 2016, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+/* eslint-disable */
+
+frappe.query_reports['Diagnosis Trends'] = {
+	"filters": [
+		{
+			fieldname: 'department',
+			label: __('Medical Department'),
+			fieldtype: 'Link',
+			options: 'Medical Department'
+		},
+		{
+			fieldname: 'from_date',
+			label: __('From Date'),
+			fieldtype: 'Date',
+			default: frappe.defaults.get_user_default('year_start_date'),
+			reqd: 1
+		},
+		{
+			fieldname: 'to_date',
+			label: __('To Date'),
+			fieldtype: 'Date',
+			default: frappe.defaults.get_user_default('year_end_date'),
+			reqd: 1
+		},
+		{
+			fieldname: 'range',
+			label: __('Range'),
+			fieldtype: 'Select',
+			options:[
+				{label: __('Weekly'), value: 'Weekly'},
+				{label: __('Monthly'), value: 'Monthly'},
+				{label: __('Quarterly'), value: 'Quarterly'},
+				{label: __('Yearly'), value: 'Yearly'}
+			],
+			default: 'Monthly',
+			reqd: 1
+		}
+	],
+	get_datatable_options(options) {
+		return Object.assign(options, {
+			checkboxColumn: true,
+			events: {
+				onCheckRow: function(data) {
+					row_name = data[2].content;
+					length = data.length;
+
+					row_values = data.slice(3,length-1).map(function (column) {
+						return column.content;
+					})
+
+					entry = {
+						'name': row_name,
+						'values': row_values
+					}
+
+					let raw_data = frappe.query_report.chart.data;
+					let new_datasets = raw_data.datasets;
+
+					let found = false;
+					for (let i=0; i < new_datasets.length; i++) {
+						if (new_datasets[i].name == row_name) {
+							found = true;
+							new_datasets.splice(i,1);
+							break;
+						}
+					}
+
+					if (!found) {
+						new_datasets.push(entry);
+					}
+
+					let new_data = {
+						labels: raw_data.labels,
+						datasets: new_datasets
+					}
+
+					setTimeout(() => {
+						frappe.query_report.chart.update(new_data)
+					}, 500)
+
+
+					setTimeout(() => {
+						frappe.query_report.chart.draw(true);
+					}, 1000)
+
+					frappe.query_report.raw_chart_data = new_data;
+				},
+			}
+		})
+	},
+};
--- /dev/null
+++ b/healthcare/healthcare/report/diagnosis_trends/diagnosis_trends.json
@@ -0,0 +1,35 @@
+{
+ "add_total_row": 0,
+ "columns": [],
+ "creation": "2021-09-08 11:21:13.655665",
+ "disable_prepared_report": 0,
+ "disabled": 0,
+ "docstatus": 0,
+ "doctype": "Report",
+ "filters": [],
+ "idx": 0,
+ "is_standard": "Yes",
+ "modified": "2021-11-10 09:27:19.153846",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Diagnosis Trends",
+ "owner": "Administrator",
+ "prepared_report": 0,
+ "ref_doctype": "Patient Encounter Diagnosis",
+ "report_name": "Diagnosis Trends",
+ "report_type": "Script Report",
+ "roles": [
+  {
+   "role": "Healthcare Administrator"
+  },
+  {
+   "role": "Nursing User"
+  },
+  {
+   "role": "Physician"
+  },
+  {
+   "role": "System Manager"
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/report/diagnosis_trends/diagnosis_trends.py
@@ -0,0 +1,167 @@
+# Copyright (c) 2013, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+import frappe
+from frappe import _, scrub
+from frappe.database.query import OPERATOR_MAP
+from frappe.utils import add_days, add_to_date, flt, getdate
+
+from erpnext.accounts.utils import get_fiscal_year
+
+
+def execute(filters=None):
+	return DiagnosisTrends(filters).run()
+
+
+class DiagnosisTrends(object):
+	"""
+	Diagnosis Trends Report.
+	"""
+
+	def __init__(self, filters=None):
+		self.data = []
+		self.periodic_daterange = []
+		self.filters = frappe._dict(filters or {})
+		self.months = [
+			"Jan",
+			"Feb",
+			"Mar",
+			"Apr",
+			"May",
+			"Jun",
+			"Jul",
+			"Aug",
+			"Sep",
+			"Oct",
+			"Nov",
+			"Dec",
+		]
+		self.get_period_date_ranges()
+
+	def run(self):
+		self.get_columns()
+		self.get_data()
+		self.get_chart_data()
+
+		return self.columns, self.data, None, self.chart
+
+	def get_period_date_ranges(self):
+		from dateutil.relativedelta import MO, relativedelta
+
+		from_date, to_date = getdate(self.filters.from_date), getdate(self.filters.to_date)
+
+		increment = {"Monthly": 1, "Quarterly": 3, "Half-Yearly": 6, "Yearly": 12}.get(
+			self.filters.range, 1
+		)
+
+		if self.filters.range in ["Monthly", "Quarterly"]:
+			from_date = from_date.replace(day=1)
+		elif self.filters.range == "Yearly":
+			from_date = get_fiscal_year(from_date)[1]
+		else:
+			from_date = from_date + relativedelta(from_date, weekday=MO(-1))
+
+		for _ in range(1, 53):  # noqa
+			if self.filters.range == "Weekly":
+				period_end_date = add_days(from_date, 6)
+			else:
+				period_end_date = add_to_date(from_date, months=increment, days=-1)
+
+			if period_end_date > to_date:
+				period_end_date = to_date
+
+			self.periodic_daterange.append(period_end_date)
+
+			from_date = add_days(period_end_date, 1)
+			if period_end_date == to_date:
+				break
+
+	def get_columns(self):
+		self.columns = []
+
+		self.columns.append(
+			{
+				"label": _("Diagnosis"),
+				"fieldname": "diagnosis",
+				"fieldtype": "Link",
+				"options": "Diagnosis",
+				"width": 150,
+			}
+		)
+
+		for end_date in self.periodic_daterange:
+			period = self.get_period(end_date)
+			self.columns.append(
+				{"label": _(period), "fieldname": scrub(period), "fieldtype": "Int", "width": 120}
+			)
+
+		self.columns.append(
+			{"label": _("Total"), "fieldname": "total", "fieldtype": "Int", "width": 120}
+		)
+
+	def get_data(self):
+		pe_diagnosis = frappe.qb.DocType("Patient Encounter Diagnosis")
+		query = (
+			frappe.qb.from_(pe_diagnosis)
+			.select("name", "creation", "diagnosis")
+			.where(pe_diagnosis.creation[self.filters.from_date : self.filters.to_date])
+		)
+
+		department = self.filters.get("department")
+
+		if department:
+			encounters = frappe.get_all(
+				"Patient Encounter", filters={"medical_department": department}, pluck="name"
+			)
+			if encounters:
+				_operator = OPERATOR_MAP["in"]
+				query = query.where(_operator(pe_diagnosis.parent, encounters))
+
+		self.entries = query.run(as_dict=True)
+		self.get_rows()
+
+	def get_period(self, appointment_date):
+		if self.filters.range == "Weekly":
+			period = "Week " + str(appointment_date.isocalendar()[1])
+		elif self.filters.range == "Monthly":
+			period = str(self.months[appointment_date.month - 1])
+		elif self.filters.range == "Quarterly":
+			period = "Quarter " + str(((appointment_date.month - 1) // 3) + 1)
+		else:
+			year = get_fiscal_year(appointment_date, company=self.filters.company)
+			period = str(year[0])
+
+		if getdate(self.filters.from_date).year != getdate(self.filters.to_date).year:
+			period += " " + str(appointment_date.year)
+
+		return period
+
+	def get_rows(self):
+		self.get_periodic_data()
+
+		for entity, period_data in self.appointment_periodic_data.items():
+			row = {"diagnosis": entity}
+
+			total = 0
+			for end_date in self.periodic_daterange:
+				period = self.get_period(end_date)
+				amount = flt(period_data.get(period, 0.0))
+				row[scrub(period)] = amount
+				total += amount
+
+			row["total"] = total
+
+			self.data.append(row)
+
+	def get_periodic_data(self):
+		self.appointment_periodic_data = frappe._dict()
+
+		for d in self.entries:
+			period = self.get_period(d.get("creation"))
+			self.appointment_periodic_data.setdefault(d.diagnosis, frappe._dict()).setdefault(period, 0.0)
+			self.appointment_periodic_data[d.diagnosis][period] += 1
+
+	def get_chart_data(self):
+		length = len(self.columns)
+		labels = [d.get("label") for d in self.columns[1 : length - 1]]
+		self.chart = {"data": {"labels": labels, "datasets": []}, "type": "line"}
--- /dev/null
+++ b/healthcare/healthcare/report/diagnosis_trends/test_diagnosis_trends.py
@@ -0,0 +1,104 @@
+import frappe
+from frappe import DuplicateEntryError
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import add_days, add_months, getdate
+
+from healthcare.healthcare.doctype.patient_appointment.test_patient_appointment import (
+	create_practitioner,
+)
+from healthcare.healthcare.report.diagnosis_trends.diagnosis_trends import execute
+from healthcare.healthcare.test_utils import create_encounter
+
+months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
+
+
+class TestDiagnosisTrends(FrappeTestCase):
+	@classmethod
+	def setUpClass(cls):
+		cls.create_diagnosis()
+
+	@classmethod
+	def create_diagnosis(cls):
+		medical_department = frappe.get_doc(
+			{"doctype": "Medical Department", "department": "Cardiology"}
+		)
+		try:
+			medical_department.insert()
+		except DuplicateEntryError:
+			pass
+
+		patient = frappe.get_list("Patient")[0]
+		practitioner_name = create_practitioner(medical_department=medical_department.name)
+		encounter_cardiology = create_encounter(
+			patient=patient.name,
+			practitioner=practitioner_name,
+		)
+		encounter = frappe.get_list(
+			"Patient Encounter",
+		)[0]
+
+		try:
+			cls.diagnosis = frappe.get_doc(
+				{
+					"doctype": "Diagnosis",
+					"diagnosis": "Fever",
+				}
+			)
+			cls.diagnosis.insert()
+		except DuplicateEntryError:
+			pass
+
+		try:
+			cls.diagnosis_cardio = frappe.get_doc(
+				{
+					"doctype": "Diagnosis",
+					"diagnosis": "Heart Attack",
+				}
+			)
+			cls.diagnosis_cardio.insert()
+		except DuplicateEntryError:
+			pass
+
+		encounter = frappe.get_doc("Patient Encounter", encounter["name"])
+		encounter.append(
+			"diagnosis",
+			{
+				"diagnosis": "Fever",
+			},
+		)
+		encounter.save()
+
+		encounter_cardiology.reload()
+		encounter_cardiology.append(
+			"diagnosis",
+			{
+				"diagnosis": "Heart Attack",
+			},
+		)
+		encounter_cardiology.save()
+
+	def test_report_data(self):
+		filters = {
+			"from_date": str(add_months(getdate(), -12)),
+			"to_date": str(add_days(getdate(), 1)),
+			"range": "Monthly",
+		}
+
+		report = execute(filters)
+		data = [i["diagnosis"] for i in report[1]]
+		self.assertIn(self.diagnosis.diagnosis, data)
+
+	def test_report_data_with_filters(self):
+		medical_department = frappe.get_doc("Medical Department", "Cardiology")
+
+		filters = {
+			"from_date": str(add_months(getdate(), -12)),
+			"to_date": str(add_days(getdate(), 1)),
+			"range": "Monthly",
+			"department": medical_department.name,
+		}
+		report = execute(filters)
+
+		data = [i["diagnosis"] for i in report[1]]
+
+		self.assertIn(self.diagnosis_cardio.diagnosis, data)
--- /dev/null
+++ b/healthcare/healthcare/report/inpatient_medication_orders/inpatient_medication_orders.js
@@ -0,0 +1,57 @@
+// Copyright (c) 2016, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+/* eslint-disable */
+
+frappe.query_reports["Inpatient Medication Orders"] = {
+	"filters": [
+		{
+			fieldname: "company",
+			label: __("Company"),
+			fieldtype: "Link",
+			options: "Company",
+			default: frappe.defaults.get_user_default("Company"),
+			reqd: 1
+		},
+		{
+			fieldname: "from_date",
+			label: __("From Date"),
+			fieldtype: "Date",
+			default: frappe.datetime.add_months(frappe.datetime.get_today(), -1),
+			reqd: 1
+		},
+		{
+			fieldname: "to_date",
+			label: __("To Date"),
+			fieldtype: "Date",
+			default: frappe.datetime.now_date(),
+			reqd: 1
+		},
+		{
+			fieldname: "patient",
+			label: __("Patient"),
+			fieldtype: "Link",
+			options: "Patient"
+		},
+		{
+			fieldname: "service_unit",
+			label: __("Healthcare Service Unit"),
+			fieldtype: "Link",
+			options: "Healthcare Service Unit",
+			get_query: () => {
+				var company = frappe.query_report.get_filter_value('company');
+				return {
+					filters: {
+						'company': company,
+						'is_group': 0
+					}
+				}
+			}
+		},
+		{
+			fieldname: "show_completed_orders",
+			label: __("Show Completed Orders"),
+			fieldtype: "Check",
+			default: 1
+		}
+	]
+};
--- /dev/null
+++ b/healthcare/healthcare/report/inpatient_medication_orders/inpatient_medication_orders.json
@@ -0,0 +1,36 @@
+{
+ "add_total_row": 0,
+ "columns": [],
+ "creation": "2020-11-23 17:25:58.802949",
+ "disable_prepared_report": 0,
+ "disabled": 0,
+ "docstatus": 0,
+ "doctype": "Report",
+ "filters": [],
+ "idx": 0,
+ "is_standard": "Yes",
+ "json": "{}",
+ "modified": "2020-11-23 19:40:20.227591",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Inpatient Medication Orders",
+ "owner": "Administrator",
+ "prepared_report": 0,
+ "ref_doctype": "Inpatient Medication Order",
+ "report_name": "Inpatient Medication Orders",
+ "report_type": "Script Report",
+ "roles": [
+  {
+   "role": "System Manager"
+  },
+  {
+   "role": "Healthcare Administrator"
+  },
+  {
+   "role": "Nursing User"
+  },
+  {
+   "role": "Physician"
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/report/inpatient_medication_orders/inpatient_medication_orders.py
@@ -0,0 +1,189 @@
+# Copyright (c) 2013, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+
+from healthcare.healthcare.doctype.inpatient_medication_entry.inpatient_medication_entry import (
+	get_current_healthcare_service_unit,
+)
+
+
+def execute(filters=None):
+	columns = get_columns()
+	data = get_data(filters)
+	chart = get_chart_data(data)
+
+	return columns, data, None, chart
+
+
+def get_columns():
+	return [
+		{
+			"fieldname": "patient",
+			"fieldtype": "Link",
+			"label": "Patient",
+			"options": "Patient",
+			"width": 200,
+		},
+		{
+			"fieldname": "healthcare_service_unit",
+			"fieldtype": "Link",
+			"label": "Healthcare Service Unit",
+			"options": "Healthcare Service Unit",
+			"width": 150,
+		},
+		{
+			"fieldname": "drug",
+			"fieldtype": "Link",
+			"label": "Drug Code",
+			"options": "Item",
+			"width": 150,
+		},
+		{"fieldname": "drug_name", "fieldtype": "Data", "label": "Drug Name", "width": 150},
+		{
+			"fieldname": "dosage",
+			"fieldtype": "Link",
+			"label": "Dosage",
+			"options": "Prescription Dosage",
+			"width": 80,
+		},
+		{
+			"fieldname": "dosage_form",
+			"fieldtype": "Link",
+			"label": "Dosage Form",
+			"options": "Dosage Form",
+			"width": 100,
+		},
+		{"fieldname": "date", "fieldtype": "Date", "label": "Date", "width": 100},
+		{"fieldname": "time", "fieldtype": "Time", "label": "Time", "width": 100},
+		{"fieldname": "is_completed", "fieldtype": "Check", "label": "Is Order Completed", "width": 100},
+		{
+			"fieldname": "healthcare_practitioner",
+			"fieldtype": "Link",
+			"label": "Healthcare Practitioner",
+			"options": "Healthcare Practitioner",
+			"width": 200,
+		},
+		{
+			"fieldname": "inpatient_medication_entry",
+			"fieldtype": "Link",
+			"label": "Inpatient Medication Entry",
+			"options": "Inpatient Medication Entry",
+			"width": 200,
+		},
+		{
+			"fieldname": "inpatient_record",
+			"fieldtype": "Link",
+			"label": "Inpatient Record",
+			"options": "Inpatient Record",
+			"width": 200,
+		},
+	]
+
+
+def get_data(filters):
+	conditions, values = get_conditions(filters)
+
+	data = frappe.db.sql(
+		"""
+		SELECT
+			parent.patient, parent.inpatient_record, parent.practitioner,
+			child.drug, child.drug_name, child.dosage, child.dosage_form,
+			child.date, child.time, child.is_completed, child.name
+		FROM `tabInpatient Medication Order` parent
+		INNER JOIN `tabInpatient Medication Order Entry` child
+		ON child.parent = parent.name
+		WHERE
+			parent.docstatus = 1
+			{conditions}
+		ORDER BY date, time
+	""".format(
+			conditions=conditions
+		),
+		values,
+		as_dict=1,
+	)
+
+	data = get_inpatient_details(data, filters.get("service_unit"))
+
+	return data
+
+
+def get_conditions(filters):
+	conditions = ""
+	values = dict()
+
+	if filters.get("company"):
+		conditions += " AND parent.company = %(company)s"
+		values["company"] = filters.get("company")
+
+	if filters.get("from_date") and filters.get("to_date"):
+		conditions += " AND child.date BETWEEN %(from_date)s and %(to_date)s"
+		values["from_date"] = filters.get("from_date")
+		values["to_date"] = filters.get("to_date")
+
+	if filters.get("patient"):
+		conditions += " AND parent.patient = %(patient)s"
+		values["patient"] = filters.get("patient")
+
+	if not filters.get("show_completed_orders"):
+		conditions += " AND child.is_completed = 0"
+
+	return conditions, values
+
+
+def get_inpatient_details(data, service_unit):
+	service_unit_filtered_data = []
+
+	for entry in data:
+		entry["healthcare_service_unit"] = get_current_healthcare_service_unit(entry.inpatient_record)
+		if entry.is_completed:
+			entry["inpatient_medication_entry"] = get_inpatient_medication_entry(entry.name)
+
+		if (
+			service_unit and entry.healthcare_service_unit and service_unit != entry.healthcare_service_unit
+		):
+			service_unit_filtered_data.append(entry)
+
+		entry.pop("name", None)
+
+	for entry in service_unit_filtered_data:
+		data.remove(entry)
+
+	return data
+
+
+def get_inpatient_medication_entry(order_entry):
+	return frappe.db.get_value(
+		"Inpatient Medication Entry Detail", {"against_imoe": order_entry}, "parent"
+	)
+
+
+def get_chart_data(data):
+	if not data:
+		return None
+
+	labels = ["Pending", "Completed"]
+	datasets = []
+
+	status_wise_data = {"Pending": 0, "Completed": 0}
+
+	for d in data:
+		if d.is_completed:
+			status_wise_data["Completed"] += 1
+		else:
+			status_wise_data["Pending"] += 1
+
+	datasets.append(
+		{
+			"name": "Inpatient Medication Order Status",
+			"values": [status_wise_data.get("Pending"), status_wise_data.get("Completed")],
+		}
+	)
+
+	chart = {"data": {"labels": labels, "datasets": datasets}, "type": "donut", "height": 300}
+
+	chart["fieldtype"] = "Data"
+
+	return chart
--- /dev/null
+++ b/healthcare/healthcare/report/inpatient_medication_orders/test_inpatient_medication_orders.py
@@ -0,0 +1,145 @@
+# Copyright (c) 2018, Frappe Technologies Pvt. Ltd. and Contributors
+# License: GNU General Public License v3. See license.txt
+
+
+import datetime
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+from frappe.utils import getdate, now_datetime
+
+from healthcare.healthcare.doctype.inpatient_medication_order.test_inpatient_medication_order import (
+	create_ipme,
+	create_ipmo,
+)
+from healthcare.healthcare.doctype.inpatient_record.inpatient_record import (
+	admit_patient,
+	discharge_patient,
+	schedule_discharge,
+)
+from healthcare.healthcare.doctype.inpatient_record.test_inpatient_record import (
+	create_inpatient,
+	create_patient,
+	get_healthcare_service_unit,
+	mark_invoiced_inpatient_occupancy,
+)
+from healthcare.healthcare.report.inpatient_medication_orders.inpatient_medication_orders import (
+	execute,
+)
+
+
+class TestInpatientMedicationOrders(FrappeTestCase):
+	@classmethod
+	def setUpClass(self):
+		frappe.db.sql("delete from `tabInpatient Medication Order` where company='_Test Company'")
+		frappe.db.sql("delete from `tabInpatient Medication Entry` where company='_Test Company'")
+		self.patient = create_patient()
+		self.ip_record = create_records(self.patient)
+
+	def test_inpatient_medication_orders_report(self):
+		filters = {
+			"company": "_Test Company",
+			"from_date": getdate(),
+			"to_date": getdate(),
+			"patient": "_Test IPD Patient",
+			"service_unit": "_Test Service Unit Ip Occupancy - _TC",
+		}
+
+		report = execute(filters)
+
+		expected_data = [
+			{
+				"patient": "_Test IPD Patient",
+				"inpatient_record": self.ip_record.name,
+				"practitioner": None,
+				"drug": "Dextromethorphan",
+				"drug_name": "Dextromethorphan",
+				"dosage": 1.0,
+				"dosage_form": "Tablet",
+				"date": getdate(),
+				"time": datetime.timedelta(seconds=32400),
+				"is_completed": 0,
+				"healthcare_service_unit": "_Test Service Unit Ip Occupancy - _TC",
+			},
+			{
+				"patient": "_Test IPD Patient",
+				"inpatient_record": self.ip_record.name,
+				"practitioner": None,
+				"drug": "Dextromethorphan",
+				"drug_name": "Dextromethorphan",
+				"dosage": 1.0,
+				"dosage_form": "Tablet",
+				"date": getdate(),
+				"time": datetime.timedelta(seconds=50400),
+				"is_completed": 0,
+				"healthcare_service_unit": "_Test Service Unit Ip Occupancy - _TC",
+			},
+			{
+				"patient": "_Test IPD Patient",
+				"inpatient_record": self.ip_record.name,
+				"practitioner": None,
+				"drug": "Dextromethorphan",
+				"drug_name": "Dextromethorphan",
+				"dosage": 1.0,
+				"dosage_form": "Tablet",
+				"date": getdate(),
+				"time": datetime.timedelta(seconds=75600),
+				"is_completed": 0,
+				"healthcare_service_unit": "_Test Service Unit Ip Occupancy - _TC",
+			},
+		]
+
+		self.assertEqual(expected_data, report[1])
+
+		filters = frappe._dict(from_date=getdate(), to_date=getdate(), from_time="", to_time="")
+		ipme = create_ipme(filters)
+		ipme.submit()
+
+		filters = {
+			"company": "_Test Company",
+			"from_date": getdate(),
+			"to_date": getdate(),
+			"patient": "_Test IPD Patient",
+			"service_unit": "_Test Service Unit Ip Occupancy - _TC",
+			"show_completed_orders": 0,
+		}
+
+		report = execute(filters)
+		self.assertEqual(len(report[1]), 0)
+
+	def tearDown(self):
+		if frappe.db.get_value("Patient", self.patient, "inpatient_record"):
+			# cleanup - Discharge
+			schedule_discharge(frappe.as_json({"patient": self.patient}))
+			self.ip_record.reload()
+			mark_invoiced_inpatient_occupancy(self.ip_record)
+
+			self.ip_record.reload()
+			discharge_patient(self.ip_record)
+
+		for entry in frappe.get_all("Inpatient Medication Entry"):
+			doc = frappe.get_doc("Inpatient Medication Entry", entry.name)
+			doc.cancel()
+			doc.delete()
+
+		for entry in frappe.get_all("Inpatient Medication Order"):
+			doc = frappe.get_doc("Inpatient Medication Order", entry.name)
+			doc.cancel()
+			doc.delete()
+
+
+def create_records(patient):
+	frappe.db.sql("""delete from `tabInpatient Record`""")
+
+	# Admit
+	ip_record = create_inpatient(patient)
+	ip_record.expected_length_of_stay = 0
+	ip_record.save()
+	ip_record.reload()
+	service_unit = get_healthcare_service_unit("_Test Service Unit Ip Occupancy")
+	admit_patient(ip_record, service_unit, now_datetime())
+
+	ipmo = create_ipmo(patient)
+	ipmo.submit()
+
+	return ip_record
--- /dev/null
+++ b/healthcare/healthcare/report/lab_test_report/lab_test_report.js
@@ -0,0 +1,57 @@
+// Copyright (c) 2016, ESS
+// License: See license.txt
+
+frappe.query_reports["Lab Test Report"] = {
+	"filters": [
+		{
+			"fieldname": "from_date",
+			"label": __("From Date"),
+			"fieldtype": "Date",
+			"default": frappe.datetime.add_months(frappe.datetime.get_today(), -1),
+			"reqd": 1
+		},
+		{
+			"fieldname": "to_date",
+			"label": __("To Date"),
+			"fieldtype": "Date",
+			"default": frappe.datetime.now_date(),
+			"reqd": 1
+		},
+		{
+			"fieldname": "company",
+			"label": __("Company"),
+			"fieldtype": "Link",
+			"default": frappe.defaults.get_default("Company"),
+			"options": "Company"
+		},
+		{
+			"fieldname": "template",
+			"label": __("Lab Test Template"),
+			"fieldtype": "Link",
+			"options": "Lab Test Template"
+		},
+		{
+			"fieldname": "patient",
+			"label": __("Patient"),
+			"fieldtype": "Link",
+			"options": "Patient"
+		},
+		{
+			"fieldname": "department",
+			"label": __("Medical Department"),
+			"fieldtype": "Link",
+			"options": "Medical Department"
+		},
+		{
+			"fieldname": "status",
+			"label": __("Status"),
+			"fieldtype": "Select",
+			"options": "\nCompleted\nApproved\nRejected"
+		},
+		{
+			"fieldname": "invoiced",
+			"label": __("Invoiced"),
+			"fieldtype": "Check"
+		}
+	]
+};
--- /dev/null
+++ b/healthcare/healthcare/report/lab_test_report/lab_test_report.json
@@ -0,0 +1,33 @@
+{
+ "add_total_row": 0,
+ "creation": "2013-04-23 18:15:29",
+ "disable_prepared_report": 0,
+ "disabled": 0,
+ "docstatus": 0,
+ "doctype": "Report",
+ "idx": 1,
+ "is_standard": "Yes",
+ "modified": "2020-07-30 18:53:20.102873",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Lab Test Report",
+ "owner": "Administrator",
+ "prepared_report": 0,
+ "ref_doctype": "Lab Test",
+ "report_name": "Lab Test Report",
+ "report_type": "Script Report",
+ "roles": [
+  {
+   "role": "Laboratory User"
+  },
+  {
+   "role": "Nursing User"
+  },
+  {
+   "role": "LabTest Approver"
+  },
+  {
+   "role": "Healthcare Administrator"
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/report/lab_test_report/lab_test_report.py
@@ -0,0 +1,206 @@
+# Copyright (c) 2016, ESS
+# License: See license.txt
+
+
+import frappe
+from frappe import _
+
+
+def execute(filters=None):
+	if not filters:
+		filters = {}
+
+	data, columns = [], []
+
+	columns = get_columns()
+	lab_test_list = get_lab_tests(filters)
+
+	if not lab_test_list:
+		return columns, lab_test_list
+
+	data = []
+	for lab_test in lab_test_list:
+		row = frappe._dict(
+			{
+				"test": lab_test.name,
+				"template": lab_test.template,
+				"company": lab_test.company,
+				"patient": lab_test.patient,
+				"patient_name": lab_test.patient_name,
+				"practitioner": lab_test.practitioner,
+				"employee": lab_test.employee,
+				"status": lab_test.status,
+				"invoiced": lab_test.invoiced,
+				"result_date": lab_test.result_date,
+				"department": lab_test.department,
+			}
+		)
+		data.append(row)
+
+	chart = get_chart_data(data)
+	report_summary = get_report_summary(data)
+	return columns, data, None, chart, report_summary
+
+
+def get_columns():
+	return [
+		{
+			"fieldname": "test",
+			"label": _("Lab Test"),
+			"fieldtype": "Link",
+			"options": "Lab Test",
+			"width": "120",
+		},
+		{
+			"fieldname": "template",
+			"label": _("Lab Test Template"),
+			"fieldtype": "Link",
+			"options": "Lab Test Template",
+			"width": "120",
+		},
+		{
+			"fieldname": "company",
+			"label": _("Company"),
+			"fieldtype": "Link",
+			"options": "Company",
+			"width": "120",
+		},
+		{
+			"fieldname": "patient",
+			"label": _("Patient"),
+			"fieldtype": "Link",
+			"options": "Patient",
+			"width": "120",
+		},
+		{"fieldname": "patient_name", "label": _("Patient Name"), "fieldtype": "Data", "width": "120"},
+		{
+			"fieldname": "employee",
+			"label": _("Lab Technician"),
+			"fieldtype": "Link",
+			"options": "Employee",
+			"width": "120",
+		},
+		{"fieldname": "status", "label": _("Status"), "fieldtype": "Data", "width": "100"},
+		{"fieldname": "invoiced", "label": _("Invoiced"), "fieldtype": "Check", "width": "100"},
+		{"fieldname": "result_date", "label": _("Result Date"), "fieldtype": "Date", "width": "100"},
+		{
+			"fieldname": "practitioner",
+			"label": _("Requesting Practitioner"),
+			"fieldtype": "Link",
+			"options": "Healthcare Practitioner",
+			"width": "120",
+		},
+		{
+			"fieldname": "department",
+			"label": _("Medical Department"),
+			"fieldtype": "Link",
+			"options": "Medical Department",
+			"width": "100",
+		},
+	]
+
+
+def get_lab_tests(filters):
+	conditions = get_conditions(filters)
+	data = frappe.get_all(
+		doctype="Lab Test",
+		fields=[
+			"name",
+			"template",
+			"company",
+			"patient",
+			"patient_name",
+			"practitioner",
+			"employee",
+			"status",
+			"invoiced",
+			"result_date",
+			"department",
+		],
+		filters=conditions,
+		order_by="submitted_date desc",
+	)
+	return data
+
+
+def get_conditions(filters):
+	conditions = {"docstatus": ("=", 1)}
+
+	if filters.get("from_date") and filters.get("to_date"):
+		conditions["result_date"] = ("between", (filters.get("from_date"), filters.get("to_date")))
+		filters.pop("from_date")
+		filters.pop("to_date")
+
+	for key, value in filters.items():
+		if filters.get(key):
+			conditions[key] = value
+
+	return conditions
+
+
+def get_chart_data(data):
+	if not data:
+		return None
+
+	labels = ["Completed", "Approved", "Rejected"]
+
+	status_wise_data = {"Completed": 0, "Approved": 0, "Rejected": 0}
+
+	datasets = []
+
+	for entry in data:
+		status_wise_data[entry.status] += 1
+
+	datasets.append(
+		{
+			"name": "Lab Test Status",
+			"values": [
+				status_wise_data.get("Completed"),
+				status_wise_data.get("Approved"),
+				status_wise_data.get("Rejected"),
+			],
+		}
+	)
+
+	chart = {
+		"data": {"labels": labels, "datasets": datasets},
+		"type": "bar",
+		"height": 300,
+	}
+
+	return chart
+
+
+def get_report_summary(data):
+	if not data:
+		return None
+
+	total_lab_tests = len(data)
+	invoiced_lab_tests, unbilled_lab_tests = 0, 0
+
+	for entry in data:
+		if entry.invoiced:
+			invoiced_lab_tests += 1
+		else:
+			unbilled_lab_tests += 1
+
+	return [
+		{
+			"value": total_lab_tests,
+			"indicator": "Blue",
+			"label": "Total Lab Tests",
+			"datatype": "Int",
+		},
+		{
+			"value": invoiced_lab_tests,
+			"indicator": "Green",
+			"label": "Invoiced Lab Tests",
+			"datatype": "Int",
+		},
+		{
+			"value": unbilled_lab_tests,
+			"indicator": "Red",
+			"label": "Unbilled Lab Tests",
+			"datatype": "Int",
+		},
+	]
--- /dev/null
+++ b/healthcare/healthcare/report/patient_appointment_analytics/patient_appointment_analytics.js
@@ -0,0 +1,128 @@
+// Copyright (c) 2016, Frappe Technologies Pvt. Ltd. and contributors
+// For license information, please see license.txt
+/* eslint-disable */
+
+frappe.query_reports['Patient Appointment Analytics'] = {
+	"filters": [
+		{
+			fieldname: 'tree_type',
+			label: __('Tree Type'),
+			fieldtype: 'Select',
+			options: ['Healthcare Practitioner', 'Medical Department'],
+			default: 'Healthcare Practitioner',
+			reqd: 1
+		},
+		{
+			fieldname: 'status',
+			label: __('Appointment Status'),
+			fieldtype: 'Select',
+			options:[
+				{label: __('Scheduled'), value: 'Scheduled'},
+				{label: __('Open'), value: 'Open'},
+				{label: __('Closed'), value: 'Closed'},
+				{label: __('Expired'), value: 'Expired'},
+				{label: __('Cancelled'), value: 'Cancelled'}
+			]
+		},
+		{
+			fieldname: 'appointment_type',
+			label: __('Appointment Type'),
+			fieldtype: 'Link',
+			options: 'Appointment Type'
+		},
+		{
+			fieldname: 'practitioner',
+			label: __('Healthcare Practitioner'),
+			fieldtype: 'Link',
+			options: 'Healthcare Practitioner'
+		},
+		{
+			fieldname: 'department',
+			label: __('Medical Department'),
+			fieldtype: 'Link',
+			options: 'Medical Department'
+		},
+		{
+			fieldname: 'from_date',
+			label: __('From Date'),
+			fieldtype: 'Date',
+			default: frappe.defaults.get_user_default('year_start_date'),
+			reqd: 1
+		},
+		{
+			fieldname: 'to_date',
+			label: __('To Date'),
+			fieldtype: 'Date',
+			default: frappe.defaults.get_user_default('year_end_date'),
+			reqd: 1
+		},
+		{
+			fieldname: 'range',
+			label: __('Range'),
+			fieldtype: 'Select',
+			options:[
+				{label: __('Weekly'), value: 'Weekly'},
+				{label: __('Monthly'), value: 'Monthly'},
+				{label: __('Quarterly'), value: 'Quarterly'},
+				{label: __('Yearly'), value: 'Yearly'}
+			],
+			default: 'Monthly',
+			reqd: 1
+		}
+	],
+	after_datatable_render: function(datatable_obj) {
+		$(datatable_obj.wrapper).find(".dt-row-0").find('input[type=checkbox]').click();
+	},
+	get_datatable_options(options) {
+		return Object.assign(options, {
+			checkboxColumn: true,
+			events: {
+				onCheckRow: function(data) {
+					row_name = data[2].content;
+					length = data.length;
+
+					row_values = data.slice(3,length-1).map(function (column) {
+						return column.content;
+					})
+
+					entry = {
+						'name': row_name,
+						'values': row_values
+					}
+
+					let raw_data = frappe.query_report.chart.data;
+					let new_datasets = raw_data.datasets;
+
+					let found = false;
+					for (let i=0; i < new_datasets.length;i++) {
+						if (new_datasets[i].name == row_name) {
+							found = true;
+							new_datasets.splice(i,1);
+							break;
+						}
+					}
+
+					if (!found) {
+						new_datasets.push(entry);
+					}
+
+					let new_data = {
+						labels: raw_data.labels,
+						datasets: new_datasets
+					}
+
+					setTimeout(() => {
+						frappe.query_report.chart.update(new_data)
+					}, 500)
+
+
+					setTimeout(() => {
+						frappe.query_report.chart.draw(true);
+					}, 1000)
+
+					frappe.query_report.raw_chart_data = new_data;
+				},
+			}
+		})
+	},
+};
--- /dev/null
+++ b/healthcare/healthcare/report/patient_appointment_analytics/patient_appointment_analytics.json
@@ -0,0 +1,36 @@
+{
+ "add_total_row": 1,
+ "creation": "2020-03-02 15:13:16.273493",
+ "disable_prepared_report": 0,
+ "disabled": 0,
+ "docstatus": 0,
+ "doctype": "Report",
+ "idx": 0,
+ "is_standard": "Yes",
+ "modified": "2020-03-02 15:13:16.273493",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "Patient Appointment Analytics",
+ "owner": "Administrator",
+ "prepared_report": 0,
+ "ref_doctype": "Patient Appointment",
+ "report_name": "Patient Appointment Analytics",
+ "report_type": "Script Report",
+ "roles": [
+  {
+   "role": "Healthcare Administrator"
+  },
+  {
+   "role": "LabTest Approver"
+  },
+  {
+   "role": "Physician"
+  },
+  {
+   "role": "Nursing User"
+  },
+  {
+   "role": "Laboratory User"
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/report/patient_appointment_analytics/patient_appointment_analytics.py
@@ -0,0 +1,203 @@
+# Copyright (c) 2013, Frappe Technologies Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+
+import frappe
+from frappe import _, scrub
+from frappe.utils import add_days, add_to_date, flt, getdate
+
+from erpnext.accounts.utils import get_fiscal_year
+
+
+def execute(filters=None):
+	return Analytics(filters).run()
+
+
+class Analytics(object):
+	def __init__(self, filters=None):
+		"""Patient Appointment Analytics Report."""
+		self.filters = frappe._dict(filters or {})
+		self.months = [
+			"Jan",
+			"Feb",
+			"Mar",
+			"Apr",
+			"May",
+			"Jun",
+			"Jul",
+			"Aug",
+			"Sep",
+			"Oct",
+			"Nov",
+			"Dec",
+		]
+		self.get_period_date_ranges()
+
+	def run(self):
+		self.get_columns()
+		self.get_data()
+		self.get_chart_data()
+
+		return self.columns, self.data, None, self.chart
+
+	def get_period_date_ranges(self):
+		from dateutil.relativedelta import MO, relativedelta
+
+		from_date, to_date = getdate(self.filters.from_date), getdate(self.filters.to_date)
+
+		increment = {"Monthly": 1, "Quarterly": 3, "Half-Yearly": 6, "Yearly": 12}.get(
+			self.filters.range, 1
+		)
+
+		if self.filters.range in ["Monthly", "Quarterly"]:
+			from_date = from_date.replace(day=1)
+		elif self.filters.range == "Yearly":
+			from_date = get_fiscal_year(from_date)[1]
+		else:
+			from_date = from_date + relativedelta(from_date, weekday=MO(-1))
+
+		self.periodic_daterange = []
+		for dummy in range(1, 53):
+			if self.filters.range == "Weekly":
+				period_end_date = add_days(from_date, 6)
+			else:
+				period_end_date = add_to_date(from_date, months=increment, days=-1)
+
+			if period_end_date > to_date:
+				period_end_date = to_date
+
+			self.periodic_daterange.append(period_end_date)
+
+			from_date = add_days(period_end_date, 1)
+			if period_end_date == to_date:
+				break
+
+	def get_columns(self):
+		self.columns = []
+
+		if self.filters.tree_type == "Healthcare Practitioner":
+			self.columns.append(
+				{
+					"label": _("Healthcare Practitioner"),
+					"options": "Healthcare Practitioner",
+					"fieldname": "practitioner",
+					"fieldtype": "Link",
+					"width": 200,
+				}
+			)
+
+		elif self.filters.tree_type == "Medical Department":
+			self.columns.append(
+				{
+					"label": _("Medical Department"),
+					"fieldname": "department",
+					"fieldtype": "Link",
+					"options": "Medical Department",
+					"width": 150,
+				}
+			)
+
+		for end_date in self.periodic_daterange:
+			period = self.get_period(end_date)
+			self.columns.append(
+				{"label": _(period), "fieldname": scrub(period), "fieldtype": "Int", "width": 120}
+			)
+
+		self.columns.append(
+			{"label": _("Total"), "fieldname": "total", "fieldtype": "Int", "width": 120}
+		)
+
+	def get_data(self):
+		if self.filters.tree_type == "Healthcare Practitioner":
+			self.get_appointments_based_on_healthcare_practitioner()
+			self.get_rows()
+
+		elif self.filters.tree_type == "Medical Department":
+			self.get_appointments_based_on_medical_department()
+			self.get_rows()
+
+	def get_period(self, appointment_date):
+		if self.filters.range == "Weekly":
+			period = "Week " + str(appointment_date.isocalendar()[1])
+		elif self.filters.range == "Monthly":
+			period = str(self.months[appointment_date.month - 1])
+		elif self.filters.range == "Quarterly":
+			period = "Quarter " + str(((appointment_date.month - 1) // 3) + 1)
+		else:
+			year = get_fiscal_year(appointment_date, company=self.filters.company)
+			period = str(year[0])
+
+		if getdate(self.filters.from_date).year != getdate(self.filters.to_date).year:
+			period += " " + str(appointment_date.year)
+
+		return period
+
+	def get_appointments_based_on_healthcare_practitioner(self):
+		filters = self.get_common_filters()
+
+		self.entries = frappe.db.get_all(
+			"Patient Appointment",
+			fields=["appointment_date", "name", "patient", "practitioner"],
+			filters=filters,
+		)
+
+	def get_appointments_based_on_medical_department(self):
+		filters = self.get_common_filters()
+		if not filters.get("department"):
+			filters["department"] = ("!=", "")
+
+		self.entries = frappe.db.get_all(
+			"Patient Appointment",
+			fields=["appointment_date", "name", "patient", "practitioner", "department"],
+			filters=filters,
+		)
+
+	def get_common_filters(self):
+		filters = {}
+		filters["appointment_date"] = ("between", [self.filters.from_date, self.filters.to_date])
+		for entry in ["appointment_type", "practitioner", "department", "status"]:
+			if self.filters.get(entry):
+				filters[entry] = self.filters.get(entry)
+
+		return filters
+
+	def get_rows(self):
+		self.data = []
+		self.get_periodic_data()
+
+		for entity, period_data in self.appointment_periodic_data.items():
+			if self.filters.tree_type == "Healthcare Practitioner":
+				row = {"practitioner": entity}
+			elif self.filters.tree_type == "Medical Department":
+				row = {"department": entity}
+
+			total = 0
+			for end_date in self.periodic_daterange:
+				period = self.get_period(end_date)
+				amount = flt(period_data.get(period, 0.0))
+				row[scrub(period)] = amount
+				total += amount
+
+			row["total"] = total
+
+			self.data.append(row)
+
+	def get_periodic_data(self):
+		self.appointment_periodic_data = frappe._dict()
+
+		for d in self.entries:
+			period = self.get_period(d.get("appointment_date"))
+			if self.filters.tree_type == "Healthcare Practitioner":
+				self.appointment_periodic_data.setdefault(d.practitioner, frappe._dict()).setdefault(
+					period, 0.0
+				)
+				self.appointment_periodic_data[d.practitioner][period] += 1
+
+			elif self.filters.tree_type == "Medical Department":
+				self.appointment_periodic_data.setdefault(d.department, frappe._dict()).setdefault(period, 0.0)
+				self.appointment_periodic_data[d.department][period] += 1
+
+	def get_chart_data(self):
+		length = len(self.columns)
+		labels = [d.get("label") for d in self.columns[1 : length - 1]]
+		self.chart = {"data": {"labels": labels, "datasets": []}, "type": "line"}
--- /dev/null
+++ b/healthcare/healthcare/test_utils.py
@@ -0,0 +1,12 @@
+import frappe
+from frappe import DuplicateEntryError
+
+
+def create_encounter(patient, practitioner, submit=False):
+	encounter = frappe.new_doc("Patient Encounter")
+	encounter.patient = patient
+	encounter.practitioner = practitioner
+	encounter.save()
+	if submit:
+		encounter.submit()
+	return encounter
--- /dev/null
+++ b/healthcare/healthcare/utils.py
@@ -0,0 +1,1283 @@
+# -*- coding: utf-8 -*-
+# Copyright (c) 2018, earthians and contributors
+# For license information, please see license.txt
+
+
+import base64
+import json
+import math
+
+import frappe
+from frappe import _
+from frappe.utils import cstr, flt, get_link_to_form, rounded, time_diff_in_hours
+from frappe.utils.formatters import format_value
+
+from erpnext.setup.utils import insert_record
+
+from healthcare.healthcare.doctype.healthcare_settings.healthcare_settings import (
+	get_income_account,
+)
+from healthcare.healthcare.doctype.lab_test.lab_test import create_multiple
+from healthcare.healthcare.doctype.observation.observation import add_observation
+from healthcare.healthcare.doctype.observation_template.observation_template import (
+	get_observation_template_details,
+)
+from healthcare.setup import setup_healthcare
+
+
+@frappe.whitelist()
+def get_healthcare_services_to_invoice(patient, company):
+	patient = frappe.get_doc("Patient", patient)
+	items_to_invoice = []
+	if patient:
+		validate_customer_created(patient)
+		# Customer validated, build a list of billable services
+		items_to_invoice += get_appointments_to_invoice(patient, company)
+		items_to_invoice += get_encounters_to_invoice(patient, company)
+		items_to_invoice += get_lab_tests_to_invoice(patient, company)
+		items_to_invoice += get_clinical_procedures_to_invoice(patient, company)
+		items_to_invoice += get_inpatient_services_to_invoice(patient, company)
+		items_to_invoice += get_therapy_plans_to_invoice(patient, company)
+		items_to_invoice += get_therapy_sessions_to_invoice(patient, company)
+		items_to_invoice += get_service_requests_to_invoice(patient, company)
+		items_to_invoice += get_observations_to_invoice(patient, company)
+		return items_to_invoice
+
+
+def validate_customer_created(patient):
+	if not frappe.db.get_value("Patient", patient.name, "customer"):
+		msg = _("Please set a Customer linked to the Patient")
+		msg += " <b><a href='/app/Form/Patient/{0}'>{0}</a></b>".format(patient.name)
+		frappe.throw(msg, title=_("Customer Not Found"))
+
+
+def get_appointments_to_invoice(patient, company):
+	appointments_to_invoice = []
+	patient_appointments = frappe.get_list(
+		"Patient Appointment",
+		fields="*",
+		filters={
+			"patient": patient.name,
+			"company": company,
+			"invoiced": 0,
+			"status": ["!=", "Cancelled"],
+		},
+		order_by="appointment_date",
+	)
+
+	for appointment in patient_appointments:
+		# Procedure Appointments
+		if appointment.procedure_template:
+			if frappe.db.get_value(
+				"Clinical Procedure Template", appointment.procedure_template, "is_billable"
+			):
+				appointments_to_invoice.append(
+					{
+						"reference_type": "Patient Appointment",
+						"reference_name": appointment.name,
+						"service": appointment.procedure_template,
+					}
+				)
+		# Consultation Appointments, should check fee validity
+		else:
+			if frappe.db.get_single_value(
+				"Healthcare Settings", "enable_free_follow_ups"
+			) and frappe.db.exists("Fee Validity Reference", {"appointment": appointment.name}):
+				continue  # Skip invoicing, fee validty present
+			practitioner_charge = 0
+			income_account = None
+			service_item = None
+			if appointment.practitioner:
+				details = get_appointment_billing_item_and_rate(appointment)
+				service_item = details.get("service_item")
+				practitioner_charge = details.get("practitioner_charge")
+				income_account = get_income_account(appointment.practitioner, appointment.company)
+			appointments_to_invoice.append(
+				{
+					"reference_type": "Patient Appointment",
+					"reference_name": appointment.name,
+					"service": service_item,
+					"rate": practitioner_charge,
+					"income_account": income_account,
+				}
+			)
+
+	return appointments_to_invoice
+
+
+def get_encounters_to_invoice(patient, company):
+	if not isinstance(patient, str):
+		patient = patient.name
+	encounters_to_invoice = []
+	encounters = frappe.get_list(
+		"Patient Encounter",
+		fields=["*"],
+		filters={"patient": patient, "company": company, "invoiced": False, "docstatus": 1},
+	)
+	if encounters:
+		for encounter in encounters:
+			if not encounter.appointment:
+				practitioner_charge = 0
+				income_account = None
+				service_item = None
+				if encounter.practitioner:
+					if encounter.inpatient_record and frappe.db.get_single_value(
+						"Healthcare Settings", "do_not_bill_inpatient_encounters"
+					):
+						continue
+
+					details = get_appointment_billing_item_and_rate(encounter)
+					service_item = details.get("service_item")
+					practitioner_charge = details.get("practitioner_charge")
+					income_account = get_income_account(encounter.practitioner, encounter.company)
+
+				encounters_to_invoice.append(
+					{
+						"reference_type": "Patient Encounter",
+						"reference_name": encounter.name,
+						"service": service_item,
+						"rate": practitioner_charge,
+						"income_account": income_account,
+					}
+				)
+
+	return encounters_to_invoice
+
+
+def get_lab_tests_to_invoice(patient, company):
+	lab_tests_to_invoice = []
+	lab_tests = frappe.get_list(
+		"Lab Test",
+		fields=["name", "template"],
+		filters={
+			"patient": patient.name,
+			"company": company,
+			"invoiced": False,
+			"docstatus": 1,
+			"service_request": "",
+		},
+	)
+	for lab_test in lab_tests:
+		item, is_billable = frappe.get_cached_value(
+			"Lab Test Template", lab_test.template, ["item", "is_billable"]
+		)
+		if is_billable:
+			lab_tests_to_invoice.append(
+				{"reference_type": "Lab Test", "reference_name": lab_test.name, "service": item}
+			)
+
+	return lab_tests_to_invoice
+
+
+def get_observations_to_invoice(patient, company):
+	observations_to_invoice = []
+	observations = frappe.get_list(
+		"Observation",
+		fields=["name", "observation_template"],
+		filters={
+			"patient": patient.name,
+			"company": company,
+			"invoiced": False,
+			"docstatus": 1,
+			"service_request": "",
+		},
+	)
+	for observation in observations:
+		item, is_billable = frappe.get_cached_value(
+			"Observation Template", observation.observation_template, ["item", "is_billable"]
+		)
+		if is_billable:
+			observations_to_invoice.append(
+				{"reference_type": "Observation", "reference_name": observation.name, "service": item}
+			)
+
+	return observations_to_invoice
+
+
+def get_clinical_procedures_to_invoice(patient, company):
+	clinical_procedures_to_invoice = []
+	procedures = frappe.get_list(
+		"Clinical Procedure",
+		fields="*",
+		filters={
+			"patient": patient.name,
+			"company": company,
+			"invoiced": False,
+			"docstatus": 1,
+			"service_request": "",
+		},
+	)
+	for procedure in procedures:
+		if not procedure.appointment:
+			item, is_billable = frappe.get_cached_value(
+				"Clinical Procedure Template", procedure.procedure_template, ["item", "is_billable"]
+			)
+			if procedure.procedure_template and is_billable:
+				clinical_procedures_to_invoice.append(
+					{"reference_type": "Clinical Procedure", "reference_name": procedure.name, "service": item}
+				)
+
+		# consumables
+		if (
+			procedure.invoice_separately_as_consumables
+			and procedure.consume_stock
+			and procedure.status == "Completed"
+			and not procedure.consumption_invoiced
+		):
+			service_item = frappe.db.get_single_value(
+				"Healthcare Settings", "clinical_procedure_consumable_item"
+			)
+			if not service_item:
+				msg = _("Please Configure Clinical Procedure Consumable Item in {0}").format(
+					get_link_to_form("Healthcare Settings", "Healthcare Settings")
+				)
+
+				frappe.throw(msg, title=_("Missing Configuration"))
+
+			clinical_procedures_to_invoice.append(
+				{
+					"reference_type": "Clinical Procedure",
+					"reference_name": procedure.name,
+					"service": service_item,
+					"rate": procedure.consumable_total_amount,
+					"description": procedure.consumption_details,
+				}
+			)
+
+	return clinical_procedures_to_invoice
+
+
+def get_inpatient_services_to_invoice(patient, company):
+	services_to_invoice = []
+	inpatient_services = frappe.db.sql(
+		"""
+			SELECT
+				io.*
+			FROM
+				`tabInpatient Record` ip, `tabInpatient Occupancy` io
+			WHERE
+				ip.patient=%s
+				and ip.company=%s
+				and io.parent=ip.name
+				and io.left=1
+				and io.invoiced=0
+		""",
+		(patient.name, company),
+		as_dict=1,
+	)
+
+	for inpatient_occupancy in inpatient_services:
+		service_unit_type = frappe.db.get_value(
+			"Healthcare Service Unit", inpatient_occupancy.service_unit, "service_unit_type"
+		)
+		service_unit_type = frappe.get_cached_doc("Healthcare Service Unit Type", service_unit_type)
+		if service_unit_type and service_unit_type.is_billable:
+			hours_occupied = flt(
+				time_diff_in_hours(inpatient_occupancy.check_out, inpatient_occupancy.check_in), 2
+			)
+			qty = 0.5
+			if hours_occupied > 0:
+				actual_qty = hours_occupied / service_unit_type.no_of_hours
+				floor = math.floor(actual_qty)
+				decimal_part = actual_qty - floor
+				if decimal_part > 0.5:
+					qty = rounded(floor + 1, 1)
+				elif decimal_part < 0.5 and decimal_part > 0:
+					qty = rounded(floor + 0.5, 1)
+				if qty <= 0:
+					qty = 0.5
+			services_to_invoice.append(
+				{
+					"reference_type": "Inpatient Occupancy",
+					"reference_name": inpatient_occupancy.name,
+					"service": service_unit_type.item,
+					"qty": qty,
+				}
+			)
+
+	return services_to_invoice
+
+
+def get_therapy_plans_to_invoice(patient, company):
+	therapy_plans_to_invoice = []
+	therapy_plans = frappe.get_list(
+		"Therapy Plan",
+		fields=["therapy_plan_template", "name"],
+		filters={
+			"patient": patient.name,
+			"invoiced": 0,
+			"company": company,
+			"therapy_plan_template": ("!=", ""),
+			"docstatus": 1,
+		},
+	)
+	for plan in therapy_plans:
+		therapy_plans_to_invoice.append(
+			{
+				"reference_type": "Therapy Plan",
+				"reference_name": plan.name,
+				"service": frappe.db.get_value(
+					"Therapy Plan Template", plan.therapy_plan_template, "linked_item"
+				),
+			}
+		)
+
+	return therapy_plans_to_invoice
+
+
+def get_therapy_sessions_to_invoice(patient, company):
+	therapy_sessions_to_invoice = []
+	therapy_plans = frappe.db.get_all("Therapy Plan", {"therapy_plan_template": ("!=", "")})
+	therapy_plans_created_from_template = []
+	for entry in therapy_plans:
+		therapy_plans_created_from_template.append(entry.name)
+
+	therapy_sessions = frappe.get_list(
+		"Therapy Session",
+		fields="*",
+		filters={
+			"patient": patient.name,
+			"invoiced": 0,
+			"company": company,
+			"therapy_plan": ("not in", therapy_plans_created_from_template),
+			"docstatus": 1,
+			"service_request": "",
+		},
+	)
+	for therapy in therapy_sessions:
+		if not therapy.appointment:
+			if therapy.therapy_type and frappe.db.get_value(
+				"Therapy Type", therapy.therapy_type, "is_billable"
+			):
+				therapy_sessions_to_invoice.append(
+					{
+						"reference_type": "Therapy Session",
+						"reference_name": therapy.name,
+						"service": frappe.db.get_value("Therapy Type", therapy.therapy_type, "item"),
+					}
+				)
+
+	return therapy_sessions_to_invoice
+
+
+def get_service_requests_to_invoice(patient, company):
+	orders_to_invoice = []
+	service_requests = frappe.get_list(
+		"Service Request",
+		fields=["*"],
+		filters={
+			"patient": patient.name,
+			"company": company,
+			"billing_status": ["!=", "Invoiced"],
+			"docstatus": 1,
+		},
+	)
+	for service_request in service_requests:
+		item, is_billable = frappe.get_cached_value(
+			service_request.template_dt, service_request.template_dn, ["item", "is_billable"]
+		)
+		price_list, price_list_currency = frappe.db.get_values(
+			"Price List", {"selling": 1}, ["name", "currency"]
+		)[0]
+		args = {
+			"doctype": "Sales Invoice",
+			"item_code": item,
+			"company": service_request.get("company"),
+			"customer": frappe.db.get_value("Patient", service_request.get("patient"), "customer"),
+			"plc_conversion_rate": 1.0,
+			"conversion_rate": 1.0,
+		}
+		if is_billable:
+			orders_to_invoice.append(
+				{
+					"reference_type": "Service Request",
+					"reference_name": service_request.name,
+					"service": item,
+					"qty": service_request.quantity if service_request.quantity else 1,
+				}
+			)
+	return orders_to_invoice
+
+
+@frappe.whitelist()
+def get_appointment_billing_item_and_rate(doc):
+	if isinstance(doc, str):
+		doc = json.loads(doc)
+		doc = frappe.get_doc(doc)
+
+	service_item = None
+	practitioner_charge = None
+	department = doc.medical_department if doc.doctype == "Patient Encounter" else doc.department
+	service_unit = doc.service_unit if doc.doctype == "Patient Appointment" else None
+
+	is_inpatient = doc.inpatient_record
+
+	if doc.get("practitioner"):
+		service_item, practitioner_charge = get_practitioner_billing_details(
+			doc.practitioner, is_inpatient
+		)
+
+	if not service_item and doc.get("appointment_type"):
+		service_item, appointment_charge = get_appointment_type_billing_details(
+			doc.appointment_type, department if department else service_unit, is_inpatient
+		)
+		if not practitioner_charge:
+			practitioner_charge = appointment_charge
+
+	if not service_item:
+		service_item = get_healthcare_service_item(is_inpatient)
+
+	if not service_item:
+		throw_config_service_item(is_inpatient)
+
+	if not practitioner_charge and doc.get("practitioner"):
+		throw_config_practitioner_charge(is_inpatient, doc.practitioner)
+
+	if not practitioner_charge and not doc.get("practitioner"):
+		throw_config_appointment_type_charge(is_inpatient, doc.appointment_type)
+
+	return {"service_item": service_item, "practitioner_charge": practitioner_charge}
+
+
+def get_appointment_type_billing_details(appointment_type, dep_su, is_inpatient):
+	from healthcare.healthcare.doctype.appointment_type.appointment_type import get_billing_details
+
+	if not dep_su:
+		return None, None
+
+	item_list = get_billing_details(appointment_type, dep_su)
+	service_item = None
+	practitioner_charge = None
+
+	if item_list:
+		if is_inpatient:
+			service_item = item_list.get("inpatient_visit_charge_item")
+			practitioner_charge = item_list.get("inpatient_visit_charge")
+		else:
+			service_item = item_list.get("op_consulting_charge_item")
+			practitioner_charge = item_list.get("op_consulting_charge")
+
+	return service_item, practitioner_charge
+
+
+def throw_config_service_item(is_inpatient):
+	service_item_label = (
+		_("Inpatient Visit Charge Item") if is_inpatient else _("Out Patient Consulting Charge Item")
+	)
+
+	msg = _(
+		("Please Configure {0} in ").format(service_item_label)
+		+ """<b><a href='/app/Form/Healthcare Settings'>Healthcare Settings</a></b>"""
+	)
+	frappe.throw(msg, title=_("Missing Configuration"))
+
+
+def throw_config_practitioner_charge(is_inpatient, practitioner):
+	charge_name = _("Inpatient Visit Charge") if is_inpatient else _("OP Consulting Charge")
+
+	msg = _(
+		("Please Configure {0} for Healthcare Practitioner").format(charge_name)
+		+ """ <b><a href='/app/Form/Healthcare Practitioner/{0}'>{0}</a></b>""".format(practitioner)
+	)
+	frappe.throw(msg, title=_("Missing Configuration"))
+
+
+def throw_config_appointment_type_charge(is_inpatient, appointment_type):
+	charge_name = _("Inpatient Visit Charge") if is_inpatient else _("OP Consulting Charge")
+
+	msg = _(
+		("Please Configure {0} for Appointment Type").format(charge_name)
+		+ """ <b><a href='/app/Form/Appointment type/{0}'>{0}</a></b>""".format(appointment_type)
+	)
+	frappe.throw(msg, title=_("Missing Configuration"))
+
+
+def get_practitioner_billing_details(practitioner, is_inpatient):
+	service_item = None
+	practitioner_charge = None
+
+	if is_inpatient:
+		fields = ["inpatient_visit_charge_item", "inpatient_visit_charge"]
+	else:
+		fields = ["op_consulting_charge_item", "op_consulting_charge"]
+
+	if practitioner:
+		service_item, practitioner_charge = frappe.db.get_value(
+			"Healthcare Practitioner", practitioner, fields
+		)
+
+	return service_item, practitioner_charge
+
+
+def get_healthcare_service_item(is_inpatient):
+	service_item = None
+
+	if is_inpatient:
+		service_item = frappe.db.get_single_value("Healthcare Settings", "inpatient_visit_charge_item")
+	else:
+		service_item = frappe.db.get_single_value("Healthcare Settings", "op_consulting_charge_item")
+
+	return service_item
+
+
+def manage_invoice_validate(doc, method):
+	if doc.service_unit and len(doc.items):
+		for item in doc.items:
+			if not item.service_unit:
+				item.service_unit = doc.service_unit
+
+
+def manage_invoice_submit_cancel(doc, method):
+	if not doc.patient:
+		return
+
+	if doc.items:
+		for item in doc.items:
+			if item.get("reference_dt") and item.get("reference_dn"):
+				# TODO check
+				# if frappe.get_meta(item.reference_dt).has_field("invoiced"):
+				set_invoiced(item, method, doc.name)
+		if method == "on_submit" and frappe.db.get_single_value(
+			"Healthcare Settings", "create_observation_on_si_submit"
+		):
+			create_sample_collection_and_observation(doc)
+
+	if method == "on_submit":
+		if frappe.db.get_single_value("Healthcare Settings", "create_lab_test_on_si_submit"):
+			create_multiple("Sales Invoice", doc.name)
+
+		if (
+			not frappe.db.get_single_value("Healthcare Settings", "show_payment_popup")
+			and frappe.db.get_single_value("Healthcare Settings", "enable_free_follow_ups")
+			and doc.items
+		):
+			for item in doc.items:
+				if item.reference_dt == "Patient Appointment":
+					fee_validity = frappe.db.exists("Fee Validity", {"patient_appointment": item.reference_dn})
+					if fee_validity:
+						frappe.db.set_value("Fee Validity", fee_validity, "sales_invoice_ref", doc.name)
+
+	if method == "on_cancel":
+		if doc.items and (doc.additional_discount_percentage or doc.discount_amount):
+			for item in doc.items:
+				if (
+					item.get("reference_dt")
+					and item.get("reference_dn")
+					and item.get("reference_dt") == "Patient Appointment"
+				):
+					frappe.db.set_value(
+						item.get("reference_dt"),
+						item.get("reference_dn"),
+						{
+							"paid_amount": item.amount,
+							"ref_sales_invoice": None,
+						},
+					)
+
+
+def set_invoiced(item, method, ref_invoice=None):
+	invoiced = False
+	if method == "on_submit":
+		validate_invoiced_on_submit(item)
+		invoiced = True
+
+	if item.reference_dt == "Clinical Procedure":
+		service_item = frappe.db.get_single_value(
+			"Healthcare Settings", "clinical_procedure_consumable_item"
+		)
+		if service_item == item.item_code:
+			frappe.db.set_value(item.reference_dt, item.reference_dn, "consumption_invoiced", invoiced)
+		else:
+			frappe.db.set_value(item.reference_dt, item.reference_dn, "invoiced", invoiced)
+	else:
+		if item.reference_dt not in ["Service Request", "Medication Request"]:
+			frappe.db.set_value(item.reference_dt, item.reference_dn, "invoiced", invoiced)
+
+	if item.reference_dt == "Patient Appointment":
+		if frappe.db.get_value("Patient Appointment", item.reference_dn, "procedure_template"):
+			dt_from_appointment = "Clinical Procedure"
+		else:
+			dt_from_appointment = "Patient Encounter"
+		manage_doc_for_appointment(dt_from_appointment, item.reference_dn, invoiced)
+
+	elif item.reference_dt == "Lab Prescription":
+		manage_prescriptions(
+			invoiced, item.reference_dt, item.reference_dn, "Lab Test", "lab_test_created"
+		)
+
+	elif item.reference_dt == "Procedure Prescription":
+		manage_prescriptions(
+			invoiced, item.reference_dt, item.reference_dn, "Clinical Procedure", "procedure_created"
+		)
+	elif item.reference_dt in ["Service Request", "Medication Request"]:
+		# if order is invoiced, set both order and service transaction as invoiced
+		hso = frappe.get_doc(item.reference_dt, item.reference_dn)
+		if invoiced:
+			hso.update_invoice_details(item.qty)
+		else:
+			hso.update_invoice_details(item.qty * -1)
+
+		# service transaction linking to HSO
+		if item.reference_dt == "Service Request":
+			template_map = {
+				"Clinical Procedure Template": "Clinical Procedure",
+				"Therapy Type": "Therapy Session",
+				"Lab Test Template": "Lab Test"
+				# 'Healthcare Service Unit': 'Inpatient Occupancy'
+			}
+
+
+def validate_invoiced_on_submit(item):
+	if (
+		item.reference_dt == "Clinical Procedure"
+		and frappe.db.get_single_value("Healthcare Settings", "clinical_procedure_consumable_item")
+		== item.item_code
+	):
+		is_invoiced = frappe.db.get_value(item.reference_dt, item.reference_dn, "consumption_invoiced")
+
+	elif item.reference_dt in ["Service Request", "Medication Request"]:
+		billing_status = frappe.db.get_value(item.reference_dt, item.reference_dn, "billing_status")
+		is_invoiced = True if billing_status == "Invoiced" else False
+
+	else:
+		is_invoiced = frappe.db.get_value(item.reference_dt, item.reference_dn, "invoiced")
+	if is_invoiced:
+		frappe.throw(
+			_("The item referenced by {0} - {1} is already invoiced").format(
+				item.reference_dt, item.reference_dn
+			)
+		)
+
+
+def manage_prescriptions(invoiced, ref_dt, ref_dn, dt, created_check_field):
+	created = frappe.db.get_value(ref_dt, ref_dn, created_check_field)
+	if created:
+		# Fetch the doc created for the prescription
+		doc_created = frappe.db.get_value(dt, {"prescription": ref_dn})
+		frappe.db.set_value(dt, doc_created, "invoiced", invoiced)
+
+
+def manage_doc_for_appointment(dt_from_appointment, appointment, invoiced):
+	dn_from_appointment = frappe.db.get_value(
+		dt_from_appointment, filters={"appointment": appointment}
+	)
+	if dn_from_appointment:
+		frappe.db.set_value(dt_from_appointment, dn_from_appointment, "invoiced", invoiced)
+
+
+@frappe.whitelist()
+def get_drugs_to_invoice(encounter):
+	encounter = frappe.get_doc("Patient Encounter", encounter)
+	if encounter:
+		patient = frappe.get_doc("Patient", encounter.patient)
+		if patient:
+			if patient.customer:
+				orders_to_invoice = []
+				medication_requests = frappe.get_list(
+					"Medication Request",
+					fields=["*"],
+					filters={
+						"patient": patient.name,
+						"order_group": encounter.name,
+						"billing_status": ["in", ["Pending", "Partly Invoiced"]],
+						"docstatus": 1,
+					},
+				)
+				for medication_request in medication_requests:
+					if medication_request.medication:
+						is_billable = frappe.get_cached_value(
+							"Medication", medication_request.medication, ["is_billable"]
+						)
+					else:
+						is_billable = frappe.db.exists(
+							"Item", {"name": medication_request.medication_item, "disabled": False}
+						)
+
+					description = ""
+					if medication_request.dosage and medication_request.period:
+						description = _("{0} for {1}").format(medication_request.dosage, medication_request.period)
+
+					if medication_request.medication_item and is_billable:
+						billable_order_qty = medication_request.get("quantity", 1) - medication_request.get(
+							"qty_invoiced", 0
+						)
+						if medication_request.number_of_repeats_allowed:
+							if (
+								medication_request.total_dispensable_quantity
+								>= medication_request.quantity + medication_request.qty_invoiced
+							):
+								billable_order_qty = medication_request.get("quantity", 1)
+							else:
+								billable_order_qty = (
+									medication_request.total_dispensable_quantity - medication_request.get("qty_invoiced", 0)
+								)
+
+						orders_to_invoice.append(
+							{
+								"reference_type": "Medication Request",
+								"reference_name": medication_request.name,
+								"drug_code": medication_request.medication_item,
+								"quantity": billable_order_qty,
+								"description": description,
+							}
+						)
+				return orders_to_invoice
+
+
+@frappe.whitelist()
+def get_children(doctype, parent=None, company=None, is_root=False):
+	parent_fieldname = "parent_" + doctype.lower().replace(" ", "_")
+	fields = ["name as value", "is_group as expandable", "lft", "rgt"]
+
+	filters = [["ifnull(`{0}`,'')".format(parent_fieldname), "=", "" if is_root else parent]]
+
+	if is_root:
+		fields += ["service_unit_type"] if doctype == "Healthcare Service Unit" else []
+		filters.append(["company", "=", company])
+	else:
+		fields += (
+			["service_unit_type", "allow_appointments", "inpatient_occupancy", "occupancy_status"]
+			if doctype == "Healthcare Service Unit"
+			else []
+		)
+		fields += [parent_fieldname + " as parent"]
+
+	service_units = frappe.get_list(doctype, fields=fields, filters=filters)
+	for each in service_units:
+		if each["expandable"] != 1 or each["value"].startswith("All Healthcare Service Units"):
+			continue
+
+		available_count = frappe.db.count(
+			"Healthcare Service Unit",
+			filters={"parent_healthcare_service_unit": each["value"], "inpatient_occupancy": 1},
+		)
+
+		if available_count > 0:
+			occupied_count = frappe.db.count(
+				"Healthcare Service Unit",
+				filters={
+					"parent_healthcare_service_unit": each["value"],
+					"inpatient_occupancy": 1,
+					"occupancy_status": "Occupied",
+				},
+			)
+			# set occupancy status of group node
+			each["occupied_of_available"] = f"{str(occupied_count)} Occupied of {str(available_count)}"
+
+	return service_units
+
+
+@frappe.whitelist()
+def get_patient_vitals(patient, from_date=None, to_date=None):
+	if not patient:
+		return
+
+	vitals = frappe.db.get_all(
+		"Vital Signs",
+		filters={"docstatus": 1, "patient": patient},
+		order_by="signs_date, signs_time",
+		fields=["*"],
+	)
+
+	if len(vitals):
+		return vitals
+	return False
+
+
+@frappe.whitelist()
+def render_docs_as_html(docs):
+	# docs key value pair {doctype: docname}
+	docs_html = "<div class='col-md-12 col-sm-12 text-muted'>"
+	for doc in docs:
+		docs_html += render_doc_as_html(doc["doctype"], doc["docname"])["html"] + "<br/>"
+		return {"html": docs_html}
+
+
+@frappe.whitelist()
+def render_doc_as_html(doctype, docname, exclude_fields=None):
+	"""
+	Render document as HTML
+	"""
+	exclude_fields = exclude_fields or []
+	doc = frappe.get_doc(doctype, docname)
+	meta = frappe.get_meta(doctype)
+	doc_html = section_html = section_label = html = ""
+	sec_on = has_data = False
+	col_on = 0
+
+	for df in meta.fields:
+		# on section break append previous section and html to doc html
+		if df.fieldtype == "Section Break":
+			if has_data and col_on and sec_on:
+				doc_html += section_html + html + "</div>"
+
+			elif has_data and not col_on and sec_on:
+				doc_html += """
+					<br>
+					<div class='row'>
+						<div class='col-md-12 col-sm-12'>
+							<b>{0}</b>
+						</div>
+					</div>
+					<div class='row'>
+						<div class='col-md-12 col-sm-12'>
+							{1} {2}
+						</div>
+					</div>
+				""".format(
+					section_label, section_html, html
+				)
+
+			# close divs for columns
+			while col_on:
+				doc_html += "</div>"
+				col_on -= 1
+
+			sec_on = True
+			has_data = False
+			col_on = 0
+			section_html = html = ""
+
+			if df.label:
+				section_label = df.label
+			continue
+
+		# on column break append html to section html or doc html
+		if df.fieldtype == "Column Break":
+			if sec_on and not col_on and has_data:
+				section_html += """
+					<br>
+					<div class='row'>
+						<div class='col-md-12 col-sm-12'>
+							<b>{0}</b>
+						</div>
+					</div>
+					<div class='row'>
+						<div class='col-md-4 col-sm-4'>
+							{1}
+						</div>
+				""".format(
+					section_label, html
+				)
+			elif col_on == 1 and has_data:
+				section_html += "<div class='col-md-4 col-sm-4'>" + html + "</div>"
+			elif col_on > 1 and has_data:
+				doc_html += "<div class='col-md-4 col-sm-4'>" + html + "</div>"
+			else:
+				doc_html += """
+					<div class='row'>
+						<div class='col-md-12 col-sm-12'>
+							{0}
+						</div>
+					</div>
+				""".format(
+					html
+				)
+
+			html = ""
+			col_on += 1
+
+			if df.label:
+				html += "<br>" + df.label
+			continue
+
+		# on table iterate through items and create table
+		# based on the in_list_view property
+		# append to section html or doc html
+		if df.fieldtype == "Table":
+			items = doc.get(df.fieldname)
+			if not items:
+				continue
+			child_meta = frappe.get_meta(df.options)
+
+			if not has_data:
+				has_data = True
+			table_head = table_row = ""
+			create_head = True
+
+			for item in items:
+				table_row += "<tr>"
+				for cdf in child_meta.fields:
+					if cdf.in_list_view:
+						if create_head:
+							table_head += "<th class='text-muted'>" + cdf.label + "</th>"
+						if item.get(cdf.fieldname):
+							table_row += "<td>" + cstr(item.get(cdf.fieldname)) + "</td>"
+						else:
+							table_row += "<td></td>"
+
+				create_head = False
+				table_row += "</tr>"
+
+			if sec_on:
+				section_html += """
+					<table class='table table-condensed bordered'>
+						{0} {1}
+					</table>
+				""".format(
+					table_head, table_row
+				)
+			else:
+				html += """
+					<table class='table table-condensed table-bordered'>
+						{0} {1}
+					</table>
+				""".format(
+					table_head, table_row
+				)
+			continue
+
+		# on any other field type add label and value to html
+		if (
+			not df.hidden
+			and not df.print_hide
+			and doc.get(df.fieldname)
+			and df.fieldname not in exclude_fields
+		):
+			formatted_value = format_value(doc.get(df.fieldname), meta.get_field(df.fieldname), doc)
+			html += "<br>{0} : {1}".format(df.label or df.fieldname, formatted_value)
+
+			if not has_data:
+				has_data = True
+
+	if sec_on and col_on and has_data:
+		doc_html += section_html + html + "</div></div>"
+	elif sec_on and not col_on and has_data:
+		doc_html += """
+			<div class='col-md-12 col-sm-12'>
+				<div class='col-md-12 col-sm-12'>
+					{0} {1}
+				</div>
+			</div>
+		""".format(
+			section_html, html
+		)
+	return {"html": doc_html}
+
+
+def update_address_links(address, method):
+	"""
+	Hook validate Address
+	If Patient is linked in Address, also link the associated Customer
+	"""
+	if "Healthcare" not in frappe.get_active_domains():
+		return
+
+	patient_links = list(filter(lambda link: link.get("link_doctype") == "Patient", address.links))
+
+	for link in patient_links:
+		customer = frappe.db.get_value("Patient", link.get("link_name"), "customer")
+		if customer and not address.has_link("Customer", customer):
+			address.append("links", dict(link_doctype="Customer", link_name=customer))
+
+
+def update_patient_email_and_phone_numbers(contact, method):
+	"""
+	Hook validate Contact
+	Update linked Patients' primary mobile and phone numbers
+	"""
+	if "Healthcare" not in frappe.get_active_domains() or contact.flags.skip_patient_update:
+		return
+
+	if contact.is_primary_contact and (contact.email_id or contact.mobile_no or contact.phone):
+		patient_links = list(filter(lambda link: link.get("link_doctype") == "Patient", contact.links))
+
+		for link in patient_links:
+			contact_details = frappe.db.get_value(
+				"Patient", link.get("link_name"), ["email", "mobile", "phone"], as_dict=1
+			)
+			if contact.email_id and contact.email_id != contact_details.get("email"):
+				frappe.db.set_value("Patient", link.get("link_name"), "email", contact.email_id)
+			if contact.mobile_no and contact.mobile_no != contact_details.get("mobile"):
+				frappe.db.set_value("Patient", link.get("link_name"), "mobile", contact.mobile_no)
+			if contact.phone and contact.phone != contact_details.get("phone"):
+				frappe.db.set_value("Patient", link.get("link_name"), "phone", contact.phone)
+
+
+def before_tests():
+	# complete setup if missing
+	from frappe.desk.page.setup_wizard.setup_wizard import setup_complete
+
+	current_year = frappe.utils.now_datetime().year
+
+	if not frappe.get_list("Company"):
+		setup_complete(
+			{
+				"currency": "INR",
+				"full_name": "Test User",
+				"company_name": "Frappe Care LLC",
+				"timezone": "America/New_York",
+				"company_abbr": "WP",
+				"industry": "Healthcare",
+				"country": "United States",
+				"fy_start_date": f"{current_year}-01-01",
+				"fy_end_date": f"{current_year}-12-31",
+				"language": "english",
+				"company_tagline": "Testing",
+				"email": "test@erpnext.com",
+				"password": "test",
+				"chart_of_accounts": "Standard",
+				"domains": ["Healthcare"],
+			}
+		)
+
+		setup_healthcare()
+
+
+def create_healthcare_service_unit_tree_root(doc, method=None):
+	record = [
+		{
+			"doctype": "Healthcare Service Unit",
+			"healthcare_service_unit_name": "All Healthcare Service Units",
+			"is_group": 1,
+			"company": doc.name,
+		}
+	]
+	insert_record(record)
+
+
+def validate_nursing_tasks(document):
+	if not frappe.db.get_single_value("Healthcare Settings", "validate_nursing_checklists"):
+		return True
+
+	filters = {
+		"reference_name": document.name,
+		"mandatory": 1,
+		"status": ["not in", ["Completed", "Cancelled"]],
+	}
+	tasks = frappe.get_all("Nursing Task", filters=filters)
+	if not tasks:
+		return True
+
+	frappe.throw(
+		_("Please complete linked Nursing Tasks before submission: {}").format(
+			", ".join(get_link_to_form("Nursing Task", task.name) for task in tasks)
+		)
+	)
+
+
+@frappe.whitelist()
+def get_medical_codes(template_dt, template_dn, code_standard=None):
+	"""returns codification table from templates"""
+	filters = {"parent": template_dn, "parenttype": template_dt}
+
+	if code_standard:
+		filters["code_system"] = code_standard
+
+	return frappe.db.get_all(
+		"Codification Table",
+		filters=filters,
+		fields=[
+			"code_value",
+			"code",
+			"system",
+			"definition",
+			"code_system",
+		],
+	)
+
+
+def company_on_trash(doc, method):
+	for su in frappe.get_all("Healthcare Service Unit", {"company": doc.name}):
+		service_unit_doc = frappe.get_doc("Healthcare Service Unit", su.get("name"))
+		service_unit_doc.flags.on_trash_company = True
+		service_unit_doc.delete()
+
+
+def create_sample_collection_and_observation(doc):
+	meta = frappe.get_meta("Sales Invoice Item", cached=True)
+	diag_report_required = False
+	data = []
+	for item in doc.items:
+		# to set patient in item table if not set
+		if meta.has_field("patient") and not item.patient:
+			item.patient = doc.patient
+
+		# ignore if already created from service request
+		if item.get("reference_dt") == "Service Request" and item.get("reference_dn"):
+			if frappe.db.exists(
+				"Observation Sample Collection", {"service_request": item.get("reference_dn")}
+			) or frappe.db.exists(
+				"Sample Collection", {"service_request": item.get("reference_dn")}
+			):
+				continue
+
+		template_id = frappe.db.exists("Observation Template", {"item": item.item_code})
+		if template_id:
+			temp_dict = {}
+			temp_dict["name"] = template_id
+			if meta.has_field("patient") and item.get("patient"):
+				temp_dict["patient"] = item.get("patient")
+				temp_dict["child"] = item.get("name")
+			data.append(temp_dict)
+
+	out_data = []
+	for d in data:
+		observation_template = frappe.get_value(
+			"Observation Template",
+			d.get("name"),
+			[
+				"sample_type",
+				"sample",
+				"medical_department",
+				"container_closure_color",
+				"name",
+				"sample_qty",
+				"has_component",
+				"sample_collection_required",
+			],
+			as_dict=True,
+		)
+		if observation_template:
+			observation_template["patient"] = d.get("patient")
+			observation_template["child"] = d.get("child")
+			out_data.append(observation_template)
+	if not meta.has_field("patient"):
+		sample_collection = create_sample_collection(doc, doc.patient)
+	else:
+		grouped = {}
+		for grp in out_data:
+			grouped.setdefault(grp.patient, []).append(grp)
+		if grouped:
+			out_data = grouped
+
+	for grp in out_data:
+		patient = doc.patient
+		if meta.has_field("patient") and grp:
+			patient = grp
+		if meta.has_field("patient"):
+			sample_collection = create_sample_collection(doc, patient)
+			for obs in out_data[grp]:
+				(sample_collection, diag_report_required,) = insert_observation_and_sample_collection(
+					doc, patient, obs, sample_collection, obs.get("child")
+				)
+			if sample_collection and len(sample_collection.get("observation_sample_collection")) > 0:
+				sample_collection.save(ignore_permissions=True)
+
+			if diag_report_required:
+				insert_diagnostic_report(doc, patient, sample_collection.name)
+		else:
+			sample_collection, diag_report_required = insert_observation_and_sample_collection(
+				doc, patient, grp, sample_collection
+			)
+
+	if not meta.has_field("patient"):
+		if sample_collection and len(sample_collection.get("observation_sample_collection")) > 0:
+			sample_collection.save(ignore_permissions=True)
+
+		if diag_report_required:
+			insert_diagnostic_report(doc, patient, sample_collection.name)
+
+
+def create_sample_collection(doc, patient):
+	patient = frappe.get_doc("Patient", patient)
+	sample_collection = frappe.new_doc("Sample Collection")
+	sample_collection.patient = patient.name
+	sample_collection.patient_age = patient.get_age()
+	sample_collection.patient_sex = patient.sex
+	sample_collection.company = doc.company
+	sample_collection.referring_practitioner = doc.ref_practitioner
+	sample_collection.reference_doc = doc.doctype
+	sample_collection.reference_name = doc.name
+	return sample_collection
+
+
+def insert_diagnostic_report(doc, patient, sample_collection=None):
+	diagnostic_report = frappe.new_doc("Diagnostic Report")
+	diagnostic_report.company = doc.company
+	diagnostic_report.patient = patient
+	diagnostic_report.ref_doctype = doc.doctype
+	diagnostic_report.docname = doc.name
+	diagnostic_report.practitioner = doc.ref_practitioner
+	diagnostic_report.sample_collection = sample_collection
+	diagnostic_report.save(ignore_permissions=True)
+
+
+def insert_observation_and_sample_collection(doc, patient, grp, sample_collection, child=None):
+	diag_report_required = False
+	if grp.get("has_component"):
+		diag_report_required = True
+		# parent observation
+		parent_observation = add_observation(
+			patient=patient,
+			template=grp.get("name"),
+			practitioner=doc.ref_practitioner,
+			invoice=doc.name,
+			child=child if child else "",
+		)
+
+		sample_reqd_component_obs, non_sample_reqd_component_obs = get_observation_template_details(
+			grp.get("name")
+		)
+		# create observation for non sample_collection_reqd grouped templates
+
+		if len(non_sample_reqd_component_obs) > 0:
+			for comp in non_sample_reqd_component_obs:
+				add_observation(
+					patient=patient,
+					template=comp,
+					practitioner=doc.ref_practitioner,
+					parent=parent_observation,
+					invoice=doc.name,
+					child=child if child else "",
+				)
+		# create sample_colleciton child row for  sample_collection_reqd grouped templates
+		if len(sample_reqd_component_obs) > 0:
+			sample_collection.append(
+				"observation_sample_collection",
+				{
+					"observation_template": grp.get("name"),
+					"container_closure_color": grp.get("color"),
+					"sample": grp.get("sample"),
+					"sample_type": grp.get("sample_type"),
+					"component_observation_parent": parent_observation,
+					"reference_child": child if child else "",
+				},
+			)
+
+	else:
+		diag_report_required = True
+		# create observation for non sample_collection_reqd individual templates
+		if not grp.get("sample_collection_required"):
+			add_observation(
+				patient=patient,
+				template=grp.get("name"),
+				practitioner=doc.ref_practitioner,
+				invoice=doc.name,
+				child=child if child else "",
+			)
+		else:
+			# create sample_colleciton child row for  sample_collection_reqd individual templates
+			sample_collection.append(
+				"observation_sample_collection",
+				{
+					"observation_template": grp.get("name"),
+					"container_closure_color": grp.get("color"),
+					"sample": grp.get("sample"),
+					"sample_type": grp.get("sample_type"),
+					"reference_child": child if child else "",
+				},
+			)
+	return sample_collection, diag_report_required
+
+
+@frappe.whitelist()
+def generate_barcodes(in_val):
+	from io import BytesIO
+
+	from barcode import Code128
+	from barcode.writer import ImageWriter
+
+	stream = BytesIO()
+	Code128(str(in_val), writer=ImageWriter()).write(
+		stream,
+		{
+			"module_height": 3,
+			"text_distance": 0.9,
+			"write_text": False,
+		},
+	)
+	barcode_base64 = base64.b64encode(stream.getbuffer()).decode()
+	stream.close()
+
+	return barcode_base64
--- /dev/null
+++ b/healthcare/healthcare/web_form/lab_test/lab_test.js
@@ -0,0 +1,34 @@
+frappe.ready(function() {
+	//	bind events here
+	var normal_test_items = $('div[data-fieldname = "normal_test_items"]');
+	var normal_test_items_add_btn = $('button[data-fieldname = "normal_test_items"]');
+	var special_test_items = $('div[data-fieldname = "special_test_items"]');
+	var special_test_items_add_btn = $('button[data-fieldname = "special_test_items"]');
+	var sensitivity_test_items = $('div[data-fieldname = "sensitivity_test_items"]');
+	var sensitivity_test_items_add_btn = $('button[data-fieldname = "sensitivity_test_items"]');
+	var sensitivity_toggle = $('input[name = "sensitivity_toggle"]');
+	var special_toggle = $('input[name = "special_toggle"]');
+	var normal_toggle = $('input[name = "normal_toggle"]');
+	if(normal_toggle.val() == 1){
+		//	normal_test_items[0].style.display = "none";
+		//	normal_test_items[0].setAttribute("hidden", true);
+		//	normal_test_items_add_btn[0].style.visibility = "hidden";
+		special_test_items[0].style.display = "none";
+		special_test_items_add_btn[0].style.display = "none";
+		sensitivity_test_items[0].style.display = "none";
+		sensitivity_test_items_add_btn[0].style.display = "none";
+		normal_test_items_add_btn[0].style.display = "none";
+	}else if(sensitivity_toggle.val() == 1){
+		special_test_items[0].style.display = "none";
+		special_test_items_add_btn[0].style.display = "none";
+		normal_test_items[0].style.display = "none";
+		normal_test_items_add_btn[0].style.display = "none";
+		sensitivity_test_items_add_btn[0].style.display = "none";
+	}else if(special_toggle.val() == 1){
+		normal_test_items[0].style.display = "none";
+		normal_test_items_add_btn[0].style.display = "none";
+		sensitivity_test_items[0].style.display = "none";
+		sensitivity_test_items_add_btn[0].style.display = "none";
+		special_test_items_add_btn[0].style.display = "none";
+	}
+});
--- /dev/null
+++ b/healthcare/healthcare/web_form/lab_test/lab_test.json
@@ -0,0 +1,460 @@
+{
+ "accept_payment": 0,
+ "allow_comments": 1,
+ "allow_delete": 0,
+ "allow_edit": 1,
+ "allow_incomplete": 0,
+ "allow_multiple": 1,
+ "allow_print": 1,
+ "amount": 0.0,
+ "amount_based_on_field": 0,
+ "creation": "2017-06-06 16:12:33.052258",
+ "currency": "INR",
+ "doc_type": "Lab Test",
+ "docstatus": 0,
+ "doctype": "Web Form",
+ "idx": 0,
+ "introduction_text": "Lab Test",
+ "is_standard": 1,
+ "login_required": 1,
+ "max_attachment_size": 0,
+ "modified": "2020-06-22 12:59:49.126398",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "lab-test",
+ "owner": "Administrator",
+ "payment_button_label": "Buy Now",
+ "print_format": "Lab Test Print",
+ "published": 1,
+ "route": "lab-test",
+ "route_to_success_link": 0,
+ "show_attachments": 0,
+ "show_in_grid": 0,
+ "show_sidebar": 1,
+ "sidebar_items": [],
+ "success_url": "/lab-test",
+ "title": "Lab Test",
+ "web_form_fields": [
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "lab_test_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Test Name",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "department",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Department",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Medical Department",
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "column_break_26",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "company",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Company",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Company",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "hidden": 0,
+   "label": "Status",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Draft\nCompleted\nApproved\nRejected\nCancelled",
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "submitted_date",
+   "fieldtype": "Datetime",
+   "hidden": 0,
+   "label": "Submitted Date",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_first",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Patient",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Patient",
+   "read_only": 0,
+   "reqd": 1,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Patient Name",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "patient_age",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Age",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "patient_sex",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Gender",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Gender",
+   "read_only": 0,
+   "reqd": 1,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Inpatient Record",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Inpatient Record",
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "report_preference",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Report Preference",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Email",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Mobile",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "c_b",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "practitioner",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Requesting Practitioner",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Healthcare Practitioner",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "practitioner_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Requesting Practitioner",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "requesting_department",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Requesting Department",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Medical Department",
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "employee",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Employee (Lab Technician)",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Employee",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "employee_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Lab Technician Name",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "employee_designation",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Lab Technician Designation",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 1,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_normal",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "lab_test_html",
+   "fieldtype": "HTML",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "normal_test_items",
+   "fieldtype": "Table",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Normal Test Result",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_descriptive",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "descriptive_test_items",
+   "fieldtype": "Table",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Descriptive Test Result",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "depends_on": "special_toggle",
+   "fieldname": "organisms_section",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "organisms",
+   "fieldtype": "Table",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Organism Test Result",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_sensitivity",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sensitivity_test_items",
+   "fieldtype": "Table",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Sensitivity Test Result",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_comments",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "lab_test_comment",
+   "fieldtype": "Text",
+   "hidden": 0,
+   "label": "Comments",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sb_customresult",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "label": "Custom Result",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "custom_result",
+   "fieldtype": "Text Editor",
+   "hidden": 0,
+   "label": "Custom Result",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/web_form/lab_test/lab_test.py
@@ -0,0 +1,34 @@
+import frappe
+
+
+def get_context(context):
+	context.read_only = 1
+
+
+def get_list_context(context):
+	context.row_template = "erpnext/templates/includes/healthcare/lab_test_row_template.html"
+	context.get_list = get_lab_test_list
+
+
+def get_lab_test_list(
+	doctype, txt, filters, limit_start, limit_page_length=20, order_by="modified desc"
+):
+	patient = get_patient()
+	lab_tests = frappe.db.sql(
+		"""select * from `tabLab Test`
+		where patient = %s order by result_date""",
+		patient,
+		as_dict=True,
+	)
+	return lab_tests
+
+
+def get_patient():
+	return frappe.get_value("Patient", {"email": frappe.session.user}, "name")
+
+
+def has_website_permission(doc, ptype, user, verbose=False):
+	if doc.patient == get_patient():
+		return True
+	else:
+		return False
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_appointments/patient_appointments.js
@@ -0,0 +1,3 @@
+frappe.ready(function() {
+	// bind events here
+});
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_appointments/patient_appointments.json
@@ -0,0 +1,111 @@
+{
+ "accept_payment": 0, 
+ "allow_comments": 0, 
+ "allow_delete": 0, 
+ "allow_edit": 1, 
+ "allow_incomplete": 0, 
+ "allow_multiple": 1, 
+ "allow_print": 1, 
+ "amount": 0.0, 
+ "amount_based_on_field": 0, 
+ "creation": "2017-06-07 15:30:44.984832", 
+ "currency": "INR", 
+ "doc_type": "Patient Appointment", 
+ "docstatus": 0, 
+ "doctype": "Web Form", 
+ "idx": 0, 
+ "introduction_text": "Patient Appointments", 
+ "is_standard": 1, 
+ "login_required": 1, 
+ "max_attachment_size": 0, 
+ "modified": "2018-07-16 13:11:08.626316", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "patient-appointments", 
+ "owner": "Administrator", 
+ "payment_button_label": "Buy Now", 
+ "published": 1, 
+ "route": "patient-appointments", 
+ "show_sidebar": 1, 
+ "sidebar_items": [], 
+ "success_url": "/patient-appointments", 
+ "title": "Patient Appointments", 
+ "web_form_fields": [
+  {
+   "fieldname": "patient", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Patient", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Patient", 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "practitioner", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Healthcare Practitioner", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Healthcare Practitioner", 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "appointment_date", 
+   "fieldtype": "Date", 
+   "hidden": 0, 
+   "label": "Date", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "appointment_time", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "label": "Time", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 0
+  }, 
+  {
+   "fieldname": "department", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Department", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Medical Department", 
+   "read_only": 0, 
+   "reqd": 0
+  }, 
+  {
+   "fieldname": "appointment_type", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Type", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Appointment Type", 
+   "read_only": 0, 
+   "reqd": 0
+  }, 
+  {
+   "default": "Scheduled", 
+   "fieldname": "status", 
+   "fieldtype": "Select", 
+   "hidden": 0, 
+   "label": "Status", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "\nScheduled\nOpen\nClosed\nPending\nCancelled", 
+   "read_only": 1, 
+   "reqd": 0
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_appointments/patient_appointments.py
@@ -0,0 +1,34 @@
+import frappe
+
+
+def get_context(context):
+	context.read_only = 1
+
+
+def get_list_context(context):
+	context.row_template = "erpnext/templates/includes/healthcare/appointment_row_template.html"
+	context.get_list = get_appointment_list
+
+
+def get_appointment_list(
+	doctype, txt, filters, limit_start, limit_page_length=20, order_by="modified desc"
+):
+	patient = get_patient()
+	lab_tests = frappe.db.sql(
+		"""select * from `tabPatient Appointment`
+		where patient = %s and (status = 'Open' or status = 'Scheduled') order by appointment_date""",
+		patient,
+		as_dict=True,
+	)
+	return lab_tests
+
+
+def get_patient():
+	return frappe.get_value("Patient", {"email": frappe.session.user}, "name")
+
+
+def has_website_permission(doc, ptype, user, verbose=False):
+	if doc.patient == get_patient():
+		return True
+	else:
+		return False
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_registration/patient_registration.js
@@ -0,0 +1,3 @@
+frappe.ready(function() {
+	// bind events here
+});
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_registration/patient_registration.json
@@ -0,0 +1,397 @@
+{
+ "accept_payment": 0,
+ "allow_comments": 0,
+ "allow_delete": 0,
+ "allow_edit": 1,
+ "allow_incomplete": 0,
+ "allow_multiple": 0,
+ "allow_print": 0,
+ "amount": 0.0,
+ "amount_based_on_field": 0,
+ "button_label": "Register",
+ "creation": "2020-03-03 01:01:16.250607",
+ "currency": "INR",
+ "doc_type": "Patient",
+ "docstatus": 0,
+ "doctype": "Web Form",
+ "idx": 0,
+ "introduction_text": "",
+ "is_standard": 1,
+ "login_required": 0,
+ "max_attachment_size": 0,
+ "modified": "2020-03-26 17:25:15.361918",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "patient-registration",
+ "owner": "Administrator",
+ "payment_button_label": "Buy Now",
+ "published": 1,
+ "route": "patient-registration",
+ "route_to_success_link": 0,
+ "show_attachments": 0,
+ "show_in_grid": 0,
+ "show_sidebar": 1,
+ "sidebar_items": [],
+ "success_message": "Registration Successfully. Thank You!",
+ "success_url": "/patient-registration",
+ "title": "Patient Registration",
+ "web_form_fields": [
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "basic_info",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "label": "Patient Demographics",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "fa fa-user",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "first_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "First Name",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 1,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "middle_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Middle Name (optional)",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "last_name",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Last Name",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 1,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "sex",
+   "fieldtype": "Link",
+   "hidden": 0,
+   "label": "Gender",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Gender",
+   "read_only": 0,
+   "reqd": 1,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "blood_group",
+   "fieldtype": "Select",
+   "hidden": 0,
+   "label": "Blood Group",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "\nA Positive\nA Negative\nAB Positive\nAB Negative\nB Positive\nB Negative\nO Positive\nO Negative",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "dob",
+   "fieldtype": "Date",
+   "hidden": 0,
+   "label": "Date of birth",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "mobile",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Mobile",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "email",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Email",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "Email",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "phone",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Phone",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "label": "Personal Details",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "occupation",
+   "fieldtype": "Data",
+   "hidden": 0,
+   "label": "Occupation",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "marital_status",
+   "fieldtype": "Select",
+   "hidden": 0,
+   "label": "Marital Status",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "\nSingle\nMarried\nDivorced\nWidow",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "allergy_medical_and_surgical_history",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "label": "Allergies, Medical and Surgical History",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "allergies",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Allergies",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "medication",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Medication",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "column_break_20",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "medical_history",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Medical History",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "surgical_history",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Surgical History",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "risk_factors",
+   "fieldtype": "Section Break",
+   "hidden": 0,
+   "label": "Risk Factors",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "default": "0",
+   "fieldname": "tobacco_past_use",
+   "fieldtype": "Check",
+   "hidden": 0,
+   "label": "Check if you have a history of Tobacco Consumption",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "default": "0",
+   "fieldname": "tobacco_current_use",
+   "fieldtype": "Check",
+   "hidden": 0,
+   "label": "Check if you consume Tobacco",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "default": "0",
+   "fieldname": "alcohol_past_use",
+   "fieldtype": "Check",
+   "hidden": 0,
+   "label": "Check if you have a history of Alcohol Consumption",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "default": "0",
+   "fieldname": "alcohol_current_use",
+   "fieldtype": "Check",
+   "hidden": 0,
+   "label": "Check if you consume Alcohol",
+   "max_length": 0,
+   "max_value": 0,
+   "options": "",
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "column_break_32",
+   "fieldtype": "Column Break",
+   "hidden": 0,
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "surrounding_factors",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Occupational Hazards and Environmental Factors",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  },
+  {
+   "allow_read_on_all_link_options": 0,
+   "fieldname": "other_risk_factors",
+   "fieldtype": "Small Text",
+   "hidden": 0,
+   "label": "Other Risk Factors",
+   "max_length": 0,
+   "max_value": 0,
+   "read_only": 0,
+   "reqd": 0,
+   "show_in_filter": 0
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/web_form/patient_registration/patient_registration.py
@@ -0,0 +1,3 @@
+def get_context(context):
+	# do your magic here
+	pass
--- /dev/null
+++ b/healthcare/healthcare/web_form/personal_details/personal_details.js
@@ -0,0 +1,3 @@
+frappe.ready(function() {
+	// bind events here
+});
--- /dev/null
+++ b/healthcare/healthcare/web_form/personal_details/personal_details.json
@@ -0,0 +1,87 @@
+{
+ "accept_payment": 0, 
+ "allow_comments": 0, 
+ "allow_delete": 0, 
+ "allow_edit": 1, 
+ "allow_incomplete": 0, 
+ "allow_multiple": 0, 
+ "allow_print": 0, 
+ "amount": 0.0, 
+ "amount_based_on_field": 0, 
+ "creation": "2018-07-03 19:33:23.332661", 
+ "currency": "INR", 
+ "doc_type": "Patient", 
+ "docstatus": 0, 
+ "doctype": "Web Form", 
+ "idx": 0, 
+ "introduction_text": "", 
+ "is_standard": 1, 
+ "login_required": 1, 
+ "max_attachment_size": 0, 
+ "modified": "2018-07-04 17:22:28.936442", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "personal-details", 
+ "owner": "Administrator", 
+ "payment_button_label": "Buy Now", 
+ "published": 1, 
+ "route": "personal-details", 
+ "show_sidebar": 1, 
+ "sidebar_items": [], 
+ "success_url": "/personal-details", 
+ "title": "Personal Details", 
+ "web_form_fields": [
+  {
+   "fieldname": "patient_name", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "label": "Full Name", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "sex", 
+   "fieldtype": "Select", 
+   "hidden": 0, 
+   "label": "Gender", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "\nMale\nFemale\nOther", 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "dob", 
+   "fieldtype": "Date", 
+   "hidden": 0, 
+   "label": "Date of birth", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 1
+  }, 
+  {
+   "fieldname": "mobile", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "label": "Mobile", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 0
+  }, 
+  {
+   "fieldname": "email", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "label": "Email", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Email", 
+   "read_only": 1, 
+   "reqd": 0
+  }
+ ]
+}
--- /dev/null
+++ b/healthcare/healthcare/web_form/personal_details/personal_details.py
@@ -0,0 +1,28 @@
+import frappe
+from frappe import _
+
+no_cache = 1
+
+
+def get_context(context):
+	if frappe.session.user == "Guest":
+		frappe.throw(_("You need to be logged in to access this page"), frappe.PermissionError)
+
+	context.show_sidebar = True
+
+	if frappe.db.exists("Patient", {"email": frappe.session.user}):
+		patient = frappe.get_doc("Patient", {"email": frappe.session.user})
+		context.doc = patient
+		frappe.form_dict.new = 0
+		frappe.form_dict.name = patient.name
+
+
+def get_patient():
+	return frappe.get_value("Patient", {"email": frappe.session.user}, "name")
+
+
+def has_website_permission(doc, ptype, user, verbose=False):
+	if doc.name == get_patient():
+		return True
+	else:
+		return False
--- /dev/null
+++ b/healthcare/healthcare/web_form/prescription/prescription.js
@@ -0,0 +1,3 @@
+frappe.ready(function() {
+	// bind events here
+});
--- /dev/null
+++ b/healthcare/healthcare/web_form/prescription/prescription.json
@@ -0,0 +1,120 @@
+{
+ "accept_payment": 0, 
+ "allow_comments": 0, 
+ "allow_delete": 0, 
+ "allow_edit": 1, 
+ "allow_incomplete": 0, 
+ "allow_multiple": 1, 
+ "allow_print": 1, 
+ "amount": 0.0, 
+ "amount_based_on_field": 0, 
+ "creation": "2017-06-06 17:13:19.101374", 
+ "currency": "INR", 
+ "doc_type": "Patient Encounter", 
+ "docstatus": 0, 
+ "doctype": "Web Form", 
+ "idx": 0, 
+ "introduction_text": "Patient Prescriptions", 
+ "is_standard": 1, 
+ "login_required": 1, 
+ "max_attachment_size": 0, 
+ "modified": "2018-09-04 11:53:40.954517", 
+ "modified_by": "Administrator", 
+ "module": "Healthcare", 
+ "name": "prescription", 
+ "owner": "Administrator", 
+ "payment_button_label": "Buy Now", 
+ "print_format": "Encounter Print", 
+ "published": 1, 
+ "route": "prescription", 
+ "show_in_grid": 0, 
+ "show_sidebar": 1, 
+ "sidebar_items": [], 
+ "success_url": "/prescription", 
+ "title": "Prescription", 
+ "web_form_fields": [
+  {
+   "fieldname": "practitioner", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Healthcare Practitioner", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Healthcare Practitioner", 
+   "read_only": 0, 
+   "reqd": 1, 
+   "show_in_filter": 0
+  }, 
+  {
+   "fieldname": "visit_department", 
+   "fieldtype": "Link", 
+   "hidden": 0, 
+   "label": "Department", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Medical Department", 
+   "read_only": 0, 
+   "reqd": 0, 
+   "show_in_filter": 0
+  }, 
+  {
+   "default": "Today", 
+   "fieldname": "encounter_date", 
+   "fieldtype": "Date", 
+   "hidden": 0, 
+   "label": "Encounter Date", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 1, 
+   "show_in_filter": 0
+  }, 
+  {
+   "default": "", 
+   "fieldname": "encounter_time", 
+   "fieldtype": "Data", 
+   "hidden": 0, 
+   "label": "Encounter Time", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 1, 
+   "show_in_filter": 0
+  }, 
+  {
+   "fieldname": "drug_prescription", 
+   "fieldtype": "Table", 
+   "hidden": 0, 
+   "label": "Drug Prescription", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Drug Prescription", 
+   "read_only": 0, 
+   "reqd": 0, 
+   "show_in_filter": 0
+  }, 
+  {
+   "fieldname": "lab_test_prescription", 
+   "fieldtype": "Table", 
+   "hidden": 0, 
+   "label": "Investigations", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "options": "Lab Prescription", 
+   "read_only": 0, 
+   "reqd": 0, 
+   "show_in_filter": 0
+  }, 
+  {
+   "fieldname": "encounter_comment", 
+   "fieldtype": "Small Text", 
+   "hidden": 0, 
+   "label": "Review Details", 
+   "max_length": 0, 
+   "max_value": 0, 
+   "read_only": 0, 
+   "reqd": 0, 
+   "show_in_filter": 0
+  }
+ ]
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/healthcare/web_form/prescription/prescription.py
@@ -0,0 +1,34 @@
+import frappe
+
+
+def get_context(context):
+	context.read_only = 1
+
+
+def get_list_context(context):
+	context.row_template = "erpnext/templates/includes/healthcare/prescription_row_template.html"
+	context.get_list = get_encounter_list
+
+
+def get_encounter_list(
+	doctype, txt, filters, limit_start, limit_page_length=20, order_by="modified desc"
+):
+	patient = get_patient()
+	encounters = frappe.db.sql(
+		"""select * from `tabPatient Encounter`
+		where patient = %s order by creation desc""",
+		patient,
+		as_dict=True,
+	)
+	return encounters
+
+
+def get_patient():
+	return frappe.get_value("Patient", {"email": frappe.session.user}, "name")
+
+
+def has_website_permission(doc, ptype, user, verbose=False):
+	if doc.patient == get_patient():
+		return True
+	else:
+		return False
--- /dev/null
+++ b/healthcare/healthcare/workspace/healthcare/healthcare.json
@@ -0,0 +1,806 @@
+{
+ "charts": [
+  {
+   "chart_name": "Patient Appointments",
+   "label": "Patient Appointments"
+  }
+ ],
+ "content": "[{\"id\":\"f1f8e3812a\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients\",\"col\":3}},{\"id\":\"326087361e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients Admitted\",\"col\":3}},{\"id\":\"264b39da0e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Open Appointments\",\"col\":3}},{\"id\":\"e507c90d85\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Appointments to Bill\",\"col\":3}},{\"id\":\"IPK_0OJyFF\",\"type\":\"chart\",\"data\":{\"chart_name\":\"Patient Appointments\",\"col\":12}},{\"id\":\"fKaNGh_f3X\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"LCsKfCbHFS\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Your Shortcuts</span>\",\"col\":12}},{\"id\":\"gtytowgpr9\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient Appointment\",\"col\":4}},{\"id\":\"cgh4dqonE3\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient\",\"col\":4}},{\"id\":\"pw8ECGStt-\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Service Unit\",\"col\":4}},{\"id\":\"irCA7TCgAO\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Practitioner\",\"col\":4}},{\"id\":\"wdgJqmB4mx\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient History\",\"col\":4}},{\"id\":\"oN5Gi4f4LN\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Dashboard\",\"col\":4}},{\"id\":\"QAyRuJGfxG\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"-K7NMpJiTM\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Reports &amp; Masters</span>\",\"col\":12}},{\"id\":\"M1PT6PedBj\",\"type\":\"card\",\"data\":{\"card_name\":\"Masters\",\"col\":4}},{\"id\":\"51eVEiCjvf\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation\",\"col\":4}},{\"id\":\"Mk_jHVQUPc\",\"type\":\"card\",\"data\":{\"card_name\":\"Orders\",\"col\":4}},{\"id\":\"PwTxarr1_m\",\"type\":\"card\",\"data\":{\"card_name\":\"Inpatient\",\"col\":4}},{\"id\":\"W-3YAoPKn-\",\"type\":\"card\",\"data\":{\"card_name\":\"Rehabilitation and Physiotherapy\",\"col\":4}},{\"id\":\"6cc3885df2\",\"type\":\"card\",\"data\":{\"card_name\":\"Diagnotics\",\"col\":4}},{\"id\":\"hMMLOCZpxJ\",\"type\":\"card\",\"data\":{\"card_name\":\"Nursing\",\"col\":4}},{\"id\":\"jC32DydzyL\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory\",\"col\":4}},{\"id\":\"GvdoebZzcE\",\"type\":\"card\",\"data\":{\"card_name\":\"Service Units \",\"col\":4}},{\"id\":\"1f1f1a7b9e\",\"type\":\"card\",\"data\":{\"card_name\":\"Terminology Mapping\",\"col\":4}},{\"id\":\"rstxE68cTQ\",\"type\":\"card\",\"data\":{\"card_name\":\"Settings\",\"col\":4}},{\"id\":\"YnekHjQCia\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation Setup\",\"col\":4}},{\"id\":\"5J3nicaW1a\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory Setup\",\"col\":4}},{\"id\":\"zcOmhgxb5f\",\"type\":\"card\",\"data\":{\"card_name\":\"Reports\",\"col\":4}}]",
+ "creation": "2020-03-02 17:23:17.919682",
+ "custom_blocks": [],
+ "docstatus": 0,
+ "doctype": "Workspace",
+ "for_user": "",
+ "hide_custom": 0,
+ "icon": "healthcare",
+ "idx": 0,
+ "is_hidden": 0,
+ "label": "Healthcare",
+ "links": [
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Masters",
+   "link_count": 0,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient",
+   "link_count": 0,
+   "link_to": "Patient",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Healthcare Practitioner",
+   "link_count": 0,
+   "link_to": "Healthcare Practitioner",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Practitioner Schedule",
+   "link_count": 0,
+   "link_to": "Practitioner Schedule",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Medical Department",
+   "link_count": 0,
+   "link_to": "Medical Department",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Care Type",
+   "link_count": 0,
+   "link_to": "Patient Care Type",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Settings",
+   "link_count": 0,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Healthcare Settings",
+   "link_count": 0,
+   "link_to": "Healthcare Settings",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient History Settings",
+   "link_count": 0,
+   "link_to": "Patient History Settings",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Laboratory",
+   "link_count": 0,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Lab Test",
+   "link_count": 0,
+   "link_to": "Lab Test",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Sample Collection",
+   "link_count": 0,
+   "link_to": "Sample Collection",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Inpatient",
+   "link_count": 0,
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Inpatient Record",
+   "link_count": 0,
+   "link_to": "Inpatient Record",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Inpatient Medication Order",
+   "link_count": 0,
+   "link_to": "Inpatient Medication Order",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Inpatient Medication Entry",
+   "link_count": 0,
+   "link_to": "Inpatient Medication Entry",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Rehabilitation and Physiotherapy",
+   "link_count": 0,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Therapy Session",
+   "link_count": 0,
+   "link_to": "Therapy Session",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Assessment",
+   "link_count": 0,
+   "link_to": "Patient Assessment",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Therapy Plan",
+   "link_count": 0,
+   "link_to": "Therapy Plan",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Exercise Type",
+   "link_count": 0,
+   "link_to": "Exercise Type",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Therapy Type",
+   "link_count": 0,
+   "link_to": "Therapy Type",
+   "link_type": "DocType",
+   "onboard": 1,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Therapy Plan Template",
+   "link_count": 0,
+   "link_to": "Therapy Plan Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Assessment Template",
+   "link_count": 0,
+   "link_to": "Patient Assessment Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient History",
+   "link_count": 0,
+   "link_to": "patient_history",
+   "link_type": "Page",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Progress",
+   "link_count": 0,
+   "link_to": "patient-progress",
+   "link_type": "Page",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Medical Record",
+   "link_count": 0,
+   "link_to": "Patient Medical Record",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Reports",
+   "link_count": 3,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 1,
+   "label": "Patient Appointment Analytics",
+   "link_count": 0,
+   "link_to": "Patient Appointment Analytics",
+   "link_type": "Report",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 1,
+   "label": "Lab Test Report",
+   "link_count": 0,
+   "link_to": "Lab Test Report",
+   "link_type": "Report",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 1,
+   "label": "Diagnosis Trends",
+   "link_count": 0,
+   "link_to": "Diagnosis Trends",
+   "link_type": "Report",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Nursing",
+   "link_count": 3,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Nursing Task",
+   "link_count": 0,
+   "link_to": "Nursing Task",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Healthcare Activity",
+   "link_count": 0,
+   "link_to": "Healthcare Activity",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Nursing Checklist Template",
+   "link_count": 0,
+   "link_to": "Nursing Checklist Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Consultation Setup",
+   "link_count": 7,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Appointment Type",
+   "link_count": 0,
+   "link_to": "Appointment Type",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Clinical Procedure Template",
+   "link_count": 0,
+   "link_to": "Clinical Procedure Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Treatment Plan Template",
+   "link_count": 0,
+   "link_to": "Treatment Plan Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Dosage Form",
+   "link_count": 0,
+   "link_to": "Dosage Form",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Prescription Dosage",
+   "link_count": 0,
+   "link_to": "Prescription Dosage",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Prescription Duration",
+   "link_count": 0,
+   "link_to": "Prescription Duration",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Complaint",
+   "link_count": 0,
+   "link_to": "Complaint",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Diagnosis",
+   "link_count": 0,
+   "link_to": "Diagnosis",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Laboratory Setup",
+   "link_count": 6,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Lab Test Template",
+   "link_count": 0,
+   "link_to": "Lab Test Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Lab Test Sample",
+   "link_count": 0,
+   "link_to": "Lab Test Sample",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Lab Test UOM",
+   "link_count": 0,
+   "link_to": "Lab Test UOM",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Antibiotic",
+   "link_count": 0,
+   "link_to": "Antibiotic",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Sensitivity",
+   "link_count": 0,
+   "link_to": "Sensitivity",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Service Units ",
+   "link_count": 2,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Healthcare Service Unit",
+   "link_count": 0,
+   "link_to": "Healthcare Service Unit",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Healthcare Service Unit Type",
+   "link_count": 0,
+   "link_to": "Healthcare Service Unit Type",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Terminology Mapping",
+   "link_count": 2,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Code Value",
+   "link_count": 0,
+   "link_to": "Code Value",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Code System",
+   "link_count": 0,
+   "link_to": "Code System",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Orders",
+   "link_count": 2,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Service Request",
+   "link_count": 0,
+   "link_to": "Service Request",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Medication Request",
+   "link_count": 0,
+   "link_to": "Medication Request",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Diagnotics",
+   "link_count": 0,
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Diagnostic Report",
+   "link_count": 0,
+   "link_to": "Diagnostic Report",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Observation",
+   "link_count": 0,
+   "link_to": "Observation",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Observation Template",
+   "link_count": 0,
+   "link_to": "Observation Template",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Consultation",
+   "link_count": 5,
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Appointment",
+   "link_count": 0,
+   "link_to": "Patient Appointment",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Vital Signs",
+   "link_count": 0,
+   "link_to": "Vital Signs",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Encounter",
+   "link_count": 0,
+   "link_to": "Patient Encounter",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "\u062a\u0642\u0627\u0631\u064a\u0631 \u0627\u0644\u0627\u0634\u0639\u0629",
+   "link_count": 0,
+   "link_to": "Clinical Procedure",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Fee Validity",
+   "link_count": 0,
+   "link_to": "Fee Validity",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  }
+ ],
+ "modified": "2024-08-30 16:37:42.587962",
+ "modified_by": "alaa@his.com",
+ "module": "Healthcare",
+ "name": "Healthcare",
+ "number_cards": [
+  {
+   "label": "Total Patients",
+   "number_card_name": "Total Patients"
+  },
+  {
+   "label": "Total Patients Admitted",
+   "number_card_name": "Total Patients Admitted"
+  },
+  {
+   "label": "Open Appointments",
+   "number_card_name": "Open Appointments"
+  },
+  {
+   "label": "Appointments to Bill",
+   "number_card_name": "Appointments to Bill"
+  }
+ ],
+ "owner": "Administrator",
+ "parent_page": "",
+ "public": 1,
+ "quick_lists": [],
+ "restrict_to_domain": "Healthcare",
+ "roles": [],
+ "sequence_id": 23.0,
+ "shortcuts": [
+  {
+   "color": "Orange",
+   "doc_view": "List",
+   "format": "{} Open",
+   "label": "Patient Appointment",
+   "link_to": "Patient Appointment",
+   "stats_filter": "{\n    \"status\": \"Open\",\n    \"company\": [\"like\", '%' + frappe.defaults.get_global_default(\"company\") + '%']\n}",
+   "type": "DocType"
+  },
+  {
+   "color": "#761ACB",
+   "doc_view": "List",
+   "format": "{} Active",
+   "label": "Patient",
+   "link_to": "Patient",
+   "stats_filter": "{\n    \"status\": \"Active\"\n}",
+   "type": "DocType"
+  },
+  {
+   "color": "Green",
+   "doc_view": "Tree",
+   "format": "{} Vacant",
+   "label": "Healthcare Service Unit",
+   "link_to": "Healthcare Service Unit",
+   "stats_filter": "{\n    \"occupancy_status\": \"Vacant\",\n    \"is_group\": 0,\n    \"company\": [\"like\", \"%\" + frappe.defaults.get_global_default(\"company\") + \"%\"]\n}",
+   "type": "DocType"
+  },
+  {
+   "color": "#EC864B",
+   "doc_view": "List",
+   "format": "{} Active",
+   "label": "Healthcare Practitioner",
+   "link_to": "Healthcare Practitioner",
+   "stats_filter": "{\n    \"status\": \"Active\",\n}",
+   "type": "DocType"
+  },
+  {
+   "label": "Patient History",
+   "link_to": "patient_history",
+   "type": "Page"
+  },
+  {
+   "label": "Dashboard",
+   "link_to": "Healthcare",
+   "type": "Dashboard"
+  }
+ ],
+ "title": "Healthcare"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/hooks.py
@@ -0,0 +1,291 @@
+from . import __version__ as app_version  # noqa
+
+app_name = "healthcare"
+app_title = "Frappe Health"
+app_publisher = "earthians Health Informatics Pvt. Ltd."
+app_description = "Modern, Open Source HIS built on Frappe and ERPNext"
+app_icon = "octicon octicon-file-directory"
+app_color = "grey"
+app_email = "info@earthianslive.com"
+app_license = "GNU GPL V3"
+required_apps = ["erpnext"]
+
+# Includes in <head>
+# ------------------
+
+# include js, css files in header of desk.html
+# app_include_css = "/assets/healthcare/css/healthcare.css"
+app_include_js = "healthcare.bundle.js"
+
+# include js, css files in header of web template
+# web_include_css = "/assets/healthcare/css/healthcare.css"
+# web_include_js = "/assets/healthcare/js/healthcare.js"
+
+# include custom scss in every website theme (without file extension ".scss")
+# website_theme_scss = "healthcare/public/scss/website"
+
+# include js, css files in header of web form
+# webform_include_js = {"doctype": "public/js/doctype.js"}
+# webform_include_css = {"doctype": "public/css/doctype.css"}
+
+# include js in page
+# page_js = {"page" : "public/js/file.js"}
+
+# include js in doctype views
+doctype_js = {"Sales Invoice": "public/js/sales_invoice.js"}
+# doctype_list_js = {"doctype" : "public/js/doctype_list.js"}
+# doctype_tree_js = {"doctype" : "public/js/doctype_tree.js"}
+# doctype_calendar_js = {"doctype" : "public/js/doctype_calendar.js"}
+
+# Home Pages
+# ----------
+
+# application home page (will override Website Settings)
+# home_page = "login"
+
+# website user home page (by Role)
+# role_home_page = {
+# 	"Role": "home_page"
+# }
+
+# Generators
+# ----------
+
+# automatically create page for each record of this doctype
+# website_generators = ["Web Page"]
+
+# Jinja
+# ----------
+
+# add methods and filters to jinja environment
+jinja = {
+	"methods": [
+		"healthcare.healthcare.doctype.diagnostic_report.diagnostic_report.diagnostic_report_print",
+		"healthcare.healthcare.utils.generate_barcodes",
+	]
+}
+
+# Installation
+# ------------
+
+# before_install = "healthcare.install.before_install"
+after_install = "healthcare.setup.setup_healthcare"
+
+# Uninstallation
+# ------------
+
+before_uninstall = "healthcare.uninstall.before_uninstall"
+after_uninstall = "healthcare.uninstall.after_uninstall"
+
+# Desk Notifications
+# ------------------
+# See frappe.core.notifications.get_notification_config
+
+# notification_config = "healthcare.notifications.get_notification_config"
+
+# Permissions
+# -----------
+# Permissions evaluated in scripted ways
+
+# permission_query_conditions = {
+# 	"Event": "frappe.desk.doctype.event.event.get_permission_query_conditions",
+# }
+#
+# has_permission = {
+# 	"Event": "frappe.desk.doctype.event.event.has_permission",
+# }
+
+# DocType Class
+# ---------------
+# Override standard doctype classes
+
+override_doctype_class = {
+	"Sales Invoice": "healthcare.healthcare.custom_doctype.sales_invoice.HealthcareSalesInvoice",
+}
+
+# Document Events
+# ---------------
+# Hook on document methods and events
+
+doc_events = {
+	"*": {
+		"on_submit": "healthcare.healthcare.doctype.patient_history_settings.patient_history_settings.create_medical_record",
+		"on_cancel": "healthcare.healthcare.doctype.patient_history_settings.patient_history_settings.delete_medical_record",
+		"on_update_after_submit": "healthcare.healthcare.doctype.patient_history_settings.patient_history_settings.update_medical_record",
+	},
+	"Sales Invoice": {
+		"on_submit": "healthcare.healthcare.utils.manage_invoice_submit_cancel",
+		"on_cancel": "healthcare.healthcare.utils.manage_invoice_submit_cancel",
+		"validate": "healthcare.healthcare.utils.manage_invoice_validate",
+	},
+	"Company": {
+		"after_insert": "healthcare.healthcare.utils.create_healthcare_service_unit_tree_root",
+		"on_trash": "healthcare.healthcare.utils.company_on_trash",
+	},
+	"Patient": {
+		"after_insert": "healthcare.regional.india.abdm.utils.set_consent_attachment_details"
+	},
+}
+
+scheduler_events = {
+	"all": [
+		"healthcare.healthcare.doctype.patient_appointment.patient_appointment.send_appointment_reminder",
+	],
+	"daily": [
+		"healthcare.healthcare.doctype.patient_appointment.patient_appointment.update_appointment_status",
+		"healthcare.healthcare.doctype.fee_validity.fee_validity.update_validity_status",
+	],
+}
+
+# Scheduled Tasks
+# ---------------
+
+# scheduler_events = {
+# 	"all": [
+# 		"healthcare.tasks.all"
+# 	],
+# 	"daily": [
+# 		"healthcare.tasks.daily"
+# 	],
+# 	"hourly": [
+# 		"healthcare.tasks.hourly"
+# 	],
+# 	"weekly": [
+# 		"healthcare.tasks.weekly"
+# 	],
+# 	"monthly": [
+# 		"healthcare.tasks.monthly"
+# 	],
+# }
+
+# Testing
+# -------
+
+before_tests = "healthcare.healthcare.utils.before_tests"
+
+# Overriding Methods
+# ------------------------------
+#
+# override_whitelisted_methods = {
+# 	"frappe.desk.doctype.event.event.get_events": "healthcare.event.get_events"
+# }
+#
+# each overriding function accepts a `data` argument;
+# generated from the base implementation of the doctype dashboard,
+# along with any modifications made in other Frappe apps
+# override_doctype_dashboards = {
+# 	"Task": "healthcare.task.get_dashboard_data"
+# }
+
+# exempt linked doctypes from being automatically cancelled
+#
+auto_cancel_exempted_doctypes = [
+	"Inpatient Medication Entry",
+]
+
+# User Data Protection
+# --------------------
+
+# user_data_fields = [
+# 	{
+# 		"doctype": "{doctype_1}",
+# 		"filter_by": "{filter_by}",
+# 		"redact_fields": ["{field_1}", "{field_2}"],
+# 		"partial": 1,
+# 	},
+# 	{
+# 		"doctype": "{doctype_2}",
+# 		"filter_by": "{filter_by}",
+# 		"partial": 1,
+# 	},
+# 	{
+# 		"doctype": "{doctype_3}",
+# 		"strict": False,
+# 	},
+# 	{
+# 		"doctype": "{doctype_4}"
+# 	}
+# ]
+
+# Authentication and authorization
+# --------------------------------
+
+# auth_hooks = [
+# 	"healthcare.auth.validate"
+# ]
+
+global_search_doctypes = {
+	"Healthcare": [
+		{"doctype": "Patient", "index": 1},
+		{"doctype": "Medical Department", "index": 2},
+		{"doctype": "Vital Signs", "index": 3},
+		{"doctype": "Healthcare Practitioner", "index": 4},
+		{"doctype": "Patient Appointment", "index": 5},
+		{"doctype": "Healthcare Service Unit", "index": 6},
+		{"doctype": "Patient Encounter", "index": 7},
+		{"doctype": "Antibiotic", "index": 8},
+		{"doctype": "Diagnosis", "index": 9},
+		{"doctype": "Lab Test", "index": 10},
+		{"doctype": "Clinical Procedure", "index": 11},
+		{"doctype": "Inpatient Record", "index": 12},
+		{"doctype": "Sample Collection", "index": 13},
+		{"doctype": "Patient Medical Record", "index": 14},
+		{"doctype": "Appointment Type", "index": 15},
+		{"doctype": "Fee Validity", "index": 16},
+		{"doctype": "Practitioner Schedule", "index": 17},
+		{"doctype": "Dosage Form", "index": 18},
+		{"doctype": "Lab Test Sample", "index": 19},
+		{"doctype": "Prescription Duration", "index": 20},
+		{"doctype": "Prescription Dosage", "index": 21},
+		{"doctype": "Sensitivity", "index": 22},
+		{"doctype": "Complaint", "index": 23},
+		{"doctype": "Medical Code", "index": 24},
+	]
+}
+
+domains = {
+	"Healthcare": "healthcare.setup",
+}
+
+# nosemgrep
+standard_portal_menu_items = [
+	{
+		"title": "Personal Details",
+		"route": "/personal-details",
+		"reference_doctype": "Patient",
+		"role": "Patient",
+	},
+	{
+		"title": "Lab Test",
+		"route": "/lab-test",
+		"reference_doctype": "Lab Test",
+		"role": "Patient",
+	},
+	{
+		"title": "Prescription",
+		"route": "/prescription",
+		"reference_doctype": "Patient Encounter",
+		"role": "Patient",
+	},
+	{
+		"title": "Patient Appointment",
+		"route": "/patient-appointments",
+		"reference_doctype": "Patient Appointment",
+		"role": "Patient",
+	},
+]
+
+has_website_permission = {
+	"Lab Test": "healthcare.healthcare.web_form.lab_test.lab_test.has_website_permission",
+	"Patient Encounter": "healthcare.healthcare.web_form.prescription.prescription.has_website_permission",
+	"Patient Appointment": "healthcare.healthcare.web_form.patient_appointments.patient_appointments.has_website_permission",
+	"Patient": "healthcare.healthcare.web_form.personal_details.personal_details.has_website_permission",
+}
+
+standard_queries = {
+	"Healthcare Practitioner": "healthcare.healthcare.doctype.healthcare_practitioner.healthcare_practitioner.get_practitioner_list"
+}
+
+treeviews = [
+	"Healthcare Service Unit",
+]
diff --git "a/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json" "b/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json"
new file mode 100755
index 0000000..d2c6ceb
--- /dev/null
+++ "b/healthcare/number_card/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206/\330\271\330\257\330\257_\330\247\331\204\331\205\330\261\330\266\331\211_\330\247\331\204\330\261\330\247\331\202\330\257\331\212\331\206.json"
@@ -0,0 +1,25 @@
+{
+ "aggregate_function_based_on": "",
+ "color": "#449CF0",
+ "creation": "2024-06-27 05:53:54.001526",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Inpatient Record",
+ "dynamic_filters_json": "[]",
+ "filters_json": "[[\"Inpatient Record\",\"status\",\"=\",\"Admitted\",false]]",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 0,
+ "is_standard": 1,
+ "label": "\u0639\u062f\u062f \u0627\u0644\u0645\u0631\u0636\u0649 \u0627\u0644\u0631\u0627\u0642\u062f\u064a\u0646",
+ "modified": "2024-06-27 05:55:25.490730",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0639\u062f\u062f \u0627\u0644\u0645\u0631\u0636\u0649 \u0627\u0644\u0631\u0627\u0642\u062f\u064a\u0646",
+ "owner": "Administrator",
+ "parent_document_type": "",
+ "report_function": "Sum",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
diff --git "a/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json" "b/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json"
new file mode 100755
index 0000000..f0d2755
--- /dev/null
+++ "b/healthcare/number_card/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210/\331\205\330\256\330\262\331\206_\330\247\331\204\330\247\331\210\331\206\331\203\331\210.json"
@@ -0,0 +1,27 @@
+{
+ "aggregate_function_based_on": "",
+ "color": "#EC864B",
+ "creation": "2024-06-27 06:06:53.688752",
+ "docstatus": 0,
+ "doctype": "Number Card",
+ "document_type": "Item",
+ "dynamic_filters_json": "{}",
+ "filters_json": "{}",
+ "function": "Count",
+ "idx": 0,
+ "is_public": 0,
+ "is_standard": 1,
+ "label": "\u0645\u0648\u0627\u062f \u0645\u062e\u0632\u0646  \u0627\u0644\u0627\u0648\u0646\u0643\u0648 ",
+ "modified": "2024-06-27 06:26:12.409818",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0645\u062e\u0632\u0646 \u0627\u0644\u0627\u0648\u0646\u0643\u0648",
+ "owner": "Administrator",
+ "parent_document_type": "",
+ "report_field": "in_qty",
+ "report_function": "Sum",
+ "report_name": "\u062c\u0631\u062f \u0627\u0644\u0645\u062e\u0632\u0646",
+ "show_percentage_stats": 1,
+ "stats_time_interval": "Daily",
+ "type": "Document Type"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Medication Preparation", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.json
@@ -0,0 +1,296 @@
+{
+ "actions": [],
+ "autoname": "format:Mixing_{chemo_order}_{DD}.{#####}",
+ "creation": "2024-08-20 03:15:05.575433",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_ffss",
+  "__column_1",
+  "patient",
+  "patient_name",
+  "service_unit",
+  "prep_ph",
+  "check_ph",
+  "mix_ph",
+  "prepration_info_column",
+  "draw_valume",
+  "final_volume",
+  "dps",
+  "rate_num",
+  "rate",
+  "mixing_info_section",
+  "route",
+  "infusion_over",
+  "admin_date_time",
+  "column_break_kfkg",
+  "diluent",
+  "diluent_",
+  "diluent_volume",
+  "medications_section",
+  "medications",
+  "preparation_status_section",
+  "start_time",
+  "end_time",
+  "column_break_fpwv",
+  "status",
+  "refrence_section",
+  "chemo_order",
+  "reference_name",
+  "amended_from",
+  "column_break_wofe",
+  "invoiced"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "prepration_info_column",
+   "fieldtype": "Column Break",
+   "label": "Prepration Info"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Link",
+   "label": "Route",
+   "options": "Med Route",
+   "reqd": 1
+  },
+  {
+   "fieldname": "infusion_over",
+   "fieldtype": "Duration",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Infusion Over",
+   "reqd": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "preparation_status_section",
+   "fieldtype": "Section Break",
+   "label": "Preparation Status"
+  },
+  {
+   "fieldname": "start_time",
+   "fieldtype": "Datetime",
+   "label": "Start Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "end_time",
+   "fieldtype": "Datetime",
+   "label": "End Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_fpwv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_section",
+   "fieldtype": "Section Break",
+   "label": "Reference"
+  },
+  {
+   "fieldname": "chemo_order",
+   "fieldtype": "Link",
+   "label": "Chemo Order",
+   "options": "Chemo Order",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.ar_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Recived\nPrep Pending\nPrep InProgress\nPrep Complete\nQ Check\nQ Passed\nQ Failed\nAdministration\nStart Administration\nEnd Administration\nCompleted",
+   "read_only": 1
+  },
+  {
+   "fieldname": "final_volume",
+   "fieldtype": "Float",
+   "label": "Final Volume",
+   "non_negative": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "admin_date_time",
+   "fieldtype": "Datetime",
+   "label": "Administarion Date & Time",
+   "reqd": 1
+  },
+  {
+   "fieldname": "__column_1",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_ffss",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "rate",
+   "fieldtype": "Data",
+   "label": "Rate",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Referance Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Medication Preparation",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "draw_valume",
+   "fieldtype": "Float",
+   "label": "Total quantity to be withdrawn",
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "dps",
+   "fieldtype": "Float",
+   "label": "Drop / 10 Sec (Dps)",
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "rate_num",
+   "fieldtype": "Float",
+   "label": "Rate Volume",
+   "non_negative": 1,
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "prep_ph",
+   "fieldtype": "Link",
+   "label": "Prep Ph",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "check_ph",
+   "fieldtype": "Link",
+   "label": "Chek Ph ",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "mix_ph",
+   "fieldtype": "Link",
+   "label": "Mix Ph ",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "medications_section",
+   "fieldtype": "Section Break",
+   "label": "MEDICATIONS"
+  },
+  {
+   "fieldname": "medications",
+   "fieldtype": "Table",
+   "label": "Mixed Item",
+   "options": "Chemo Medication Preparation Items"
+  },
+  {
+   "fieldname": "mixing_info_section",
+   "fieldtype": "Section Break",
+   "label": "Mixing Info"
+  },
+  {
+   "fieldname": "column_break_kfkg",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diluent",
+   "fieldtype": "Link",
+   "label": "Diluent",
+   "options": "Diluent",
+   "reqd": 1
+  },
+  {
+   "fieldname": "diluent_volume",
+   "fieldtype": "Float",
+   "label": "Diluent Volume",
+   "non_negative": 1,
+   "precision": "2",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_wofe",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "diluent.acronym",
+   "fieldname": "diluent_",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Diluent  Acrynom",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-09-20 18:33:30.257405",
+ "modified_by": "Administrator",
+ "module": "Oncology",
+ "name": "Chemo Medication Preparation",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.py
@@ -0,0 +1,37 @@
+import frappe
+from frappe.model.document import Document
+
+class ChemoMedicationPreparation(Document):
+    def validate(self):
+        # Validate each medication's dose and volume in the child table
+        for med in self.medications:
+            if med.med_dose <= 0 or med.med_volume_mi__total_vial_volume <= 0:
+                frappe.throw(f"Medication dose and volume for {med.medication} should be set to a positive value before continuing.")
+            
+            # Validate that required dose is greater than 0
+            if med.required_dose <= 0:
+                frappe.throw(f"Required dose for {med.medication} should be a valid positive dose.")
+
+    def before_save(self):
+        self.calculate_mixing_items()
+        # Debugging message (use with caution in production)
+        # frappe.msgprint(f"Infusion over: {self.infusion_over}")
+
+        # Debugging message (use with caution in production)
+        # frappe.msgprint(f"Final volume calculated: {self.final_volume}")
+
+    def calculate_mixing_items(self):
+        total_withdraw = 0.0
+        for med in self.medications:
+            # Calculate quantity to be withdrawn for each medication
+            med.the_quantity_to_be_withdrawn = (med.required_dose * med.med_volume_mi__total_vial_volume) / med.med_dose
+            total_withdraw += med.the_quantity_to_be_withdrawn
+        
+        self.draw_valume =   total_withdraw
+        # Calculate final volume
+        self.final_volume = total_withdraw + self.diluent_volume
+
+        # Convert the volume to ml/hr and calculate the rate
+        self.dps = round((self.final_volume / self.infusion_over) * 200, 1)  # 20 drops for each 10 seconds
+        self.rate_num = round(self.final_volume / (self.infusion_over / 3600), 1)
+        self.rate = f"{self.rate_num} ml/hr == {self.dps} Dps/10 Sec"
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_medication_preparation/test_chemo_medication_preparation.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoMedicationPreparation(FrappeTestCase):
+	pass
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_order/chemo_order.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Order", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_order/chemo_order.json
@@ -0,0 +1,314 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{protocol_name}-{patient}-{DD}{MM}{YY}.{#####}",
+ "creation": "2024-07-02 05:15:21.509355",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "order_details",
+  "patient",
+  "healthcare_practitioner",
+  "visit_date",
+  "full_name",
+  "gender",
+  "birth_date",
+  "column_break_azjb",
+  "allergy",
+  "diagnosis",
+  "stage",
+  "column_break_cxji",
+  "weight",
+  "height",
+  "bsa",
+  "ecog_score",
+  "service_unit",
+  "order_details_section",
+  "protocol_name",
+  "column_break_aepk",
+  "cycle_no",
+  "cycle_no_written",
+  "previous_cycle_aes",
+  "column_break_ebvk",
+  "date",
+  "pre_medications_section",
+  "pre_meds",
+  "anti_cancer_drugs_section",
+  "patients_anti_cancer_drugs",
+  "section_break_taax",
+  "notes",
+  "refrence_info_section",
+  "inpatient_record",
+  "reference_name",
+  "column_break_omjt",
+  "reference_doc",
+  "section_break_2ktq",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "order_details",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  },
+  {
+   "fieldname": "visit_date",
+   "fieldtype": "Datetime",
+   "label": "Visit Date"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "full_name",
+   "fieldtype": "Data",
+   "label": "Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Data",
+   "label": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "birth_date",
+   "fieldtype": "Data",
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_azjb",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.allergies",
+   "fieldname": "allergy",
+   "fieldtype": "Small Text",
+   "label": "Allergy",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_cxji",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "weight",
+   "fieldtype": "Data",
+   "label": "Weight"
+  },
+  {
+   "fieldname": "height",
+   "fieldtype": "Data",
+   "label": "Height"
+  },
+  {
+   "fieldname": "bsa",
+   "fieldtype": "Data",
+   "label": "BSA"
+  },
+  {
+   "fieldname": "ecog_score",
+   "fieldtype": "Data",
+   "label": "ECOG Score"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "order_details_section",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "fieldname": "protocol_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Protocol Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_aepk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "cycle_no",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Cycle No.",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cycle_no_written",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Cycle No Written"
+  },
+  {
+   "fieldname": "previous_cycle_aes",
+   "fieldtype": "Data",
+   "label": "Previous Cycle  AEs"
+  },
+  {
+   "fieldname": "column_break_ebvk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "label": "Date"
+  },
+  {
+   "fieldname": "pre_medications_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medications"
+  },
+  {
+   "columns": 10,
+   "fieldname": "pre_meds",
+   "fieldtype": "Table",
+   "label": "Patients Pre Medications list",
+   "options": "Pre Medication Sheet"
+  },
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "columns": 10,
+   "fieldname": "patients_anti_cancer_drugs",
+   "fieldtype": "Table",
+   "label": "Patients Anti Cancer Drugs",
+   "options": "Anti Cancer Drug  Sheet"
+  },
+  {
+   "fieldname": "section_break_taax",
+   "fieldtype": "Section Break",
+   "label": "Review Notes"
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Text Editor",
+   "label": "Notes"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_info_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Refrence Info"
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record"
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Reference Name",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_omjt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "label": "Reference Doc",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "section_break_2ktq",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Order",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Vital Signs",
+   "link_fieldname": "patient",
+   "table_fieldname": "patient"
+  },
+  {
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "chemo_order"
+  }
+ ],
+ "modified": "2024-09-20 19:49:28.184495",
+ "modified_by": "Administrator",
+ "module": "Oncology",
+ "name": "Chemo Order",
+ "naming_rule": "Expression (old style)",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "full_name"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_order/chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ChemoOrder(Document):
+	pass
--- /dev/null
+++ b/healthcare/oncology/doctype/chemo_order/test_chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoOrder(FrappeTestCase):
+	pass
similarity index 100%
rename from patches/v0_0/set_medical_code_from_field_to_codification_table.py
rename to healthcare/patches/v0_0/set_medical_code_from_field_to_codification_table.py
similarity index 100%
rename from patches/v0_0/setup_abdm_custom_fields.py
rename to healthcare/patches/v0_0/setup_abdm_custom_fields.py
similarity index 100%
rename from patches/v15_0/check_version_compatibility_with_frappe.py
rename to healthcare/patches/v15_0/check_version_compatibility_with_frappe.py
similarity index 100%
rename from patches/v15_0/create_custom_fields_in_sales_invoice_item.py
rename to healthcare/patches/v15_0/create_custom_fields_in_sales_invoice_item.py
similarity index 100%
rename from patches/v15_0/rename_automate_appointment_invoicing.py
rename to healthcare/patches/v15_0/rename_automate_appointment_invoicing.py
similarity index 100%
rename from patches/v15_0/rename_field_medical_department_in_appoitment_type_service_item.py
rename to healthcare/patches/v15_0/rename_field_medical_department_in_appoitment_type_service_item.py
similarity index 100%
rename from patches/v15_0/rename_medical_code_standard_and_medical_code.py
rename to healthcare/patches/v15_0/rename_medical_code_standard_and_medical_code.py
similarity index 100%
rename from patches/v15_0/set_allow_booking_for_in_appointment_type.py
rename to healthcare/patches/v15_0/set_allow_booking_for_in_appointment_type.py
similarity index 100%
rename from patches/v15_0/set_default_dynamic_link_dt_for_appointment_type_service_item.py
rename to healthcare/patches/v15_0/set_default_dynamic_link_dt_for_appointment_type_service_item.py
similarity index 100%
rename from patches/v15_0/set_fee_validity_status.py
rename to healthcare/patches/v15_0/set_fee_validity_status.py
similarity index 100%
rename from patches/v15_0/setup_basic_code_systems.py
rename to healthcare/patches/v15_0/setup_basic_code_systems.py
similarity index 100%
rename from patches/v15_0/setup_diagnostic_module_codes.py
rename to healthcare/patches/v15_0/setup_diagnostic_module_codes.py
similarity index 100%
rename from patches/v15_0/setup_order_status_codes.py
rename to healthcare/patches/v15_0/setup_order_status_codes.py
similarity index 100%
rename from patches/v15_0/setup_service_request.py
rename to healthcare/patches/v15_0/setup_service_request.py
--- /dev/null
+++ b/healthcare/print_format/barcode_speciment/barcode_speciment.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-06-03 12:57:11.132630",
+ "css": "/*.print-format {*/\n/*  margin-top: 1mm;*/\n/*  margin-left: 0mm;*/\n/*  margin-bottom: 0mm;*/\n/*  margin-right: 0mm;*/\n/*}*/\n\n  /*  @page {\n            size: 25.5mm 27.5mm;\n            margin: 0;\n    /*        }\n  /*  body {\n            width: 25.5mm;\n            height: 27.5mm;\n            margin: 0;\n            padding: 0;\n            font-family: Arial, sans-serif;\n  /*  }\n   /*     .barcode {\n            width: 100%;\n            height: 100%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        img {\n            max-width: 100%;\n            max-height: 100%;\n        }*/",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 1,
+ "doc_type": "Specimen",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "{% set dob = frappe.db.get_value(\"Patient\", doc.patient, \"dob\") %}\n{% set years = 0 %}\n{% set months = 0 %}\n{% set days = 0 %}\n{% if dob %}\n    {% set now  = frappe.utils.nowdate() %}\n    {% set diff = frappe.utils.date_diff(now, dob) %}\n    {% set years = diff//365 %}\n    {% set months = (diff - (years * 365))//30 %}\n    {% set days = ( (diff - (years * 365)) - (months * 30) ) %}\n{% endif %}\n{% set age_display = \"\" %}\n{% if years > 0 %}\n    {% set age_display = years|str + 'Y' %}\n{% else %}\n    {% set age_display = months|str + 'M ' + days|str + 'D'  %}\n{% endif %}\n<div style=\"font-family: arial, sans-serif;\" >\n    <div style=\"display:flex; justify-content:center; text-align:center;font-weight:bold\">\n            <div class=\"b1\">\n                    <b><div style=\"text-align: center; margin-bottom: -2px; \">{{doc.patient_name|upper}} \n                    <span class=\"column\" style=\"margin:2px\">,</span>\n \n    {{doc.patient}}, {{age_display}} / {{doc.patient_gender[:1]}} <span>,</span>{{doc.specimen_type|upper}}</div> \n    \n    \n</b>\n            </div>\n        \n\n    </div>\n\n    <div style=\"text-align:center;\"><img class=\"barcode\" style=\"\" src=\"data:image/png;base64,{{ generate_barcodes(doc.name) }}\"></div>\n         <div  style=\"text-align:center; \">{{doc.name}}</div>\n\n</div>",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-09-24 13:13:27.886868",
+ "modified_by": "waed@his.com",
+ "module": "Healthcare",
+ "name": "barcode speciment",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/print_format/clinical_procedure_print/clinical_procedure_print.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-06-19 14:20:03.988828",
+ "css": ".header-image {\r\n    width: 100%;\r\n}\r\nheader {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n  \r\n}\r\nfooter {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n\r\n}\r\n\r\n\r\n@media print {\r\n  footer {\r\n    position: fixed;\r\n    left: 60px;\r\n    bottom: 0;\r\n    \r\n  }\r\n  \r\n  header {\r\n      width: 100%;\r\n  }\r\n\r\n}",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Clinical Procedure",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "html": "<header>\n    <img src=\"/files/\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b header.png\" alt=\"Warith letter head\" class = \"header-image\">\n</header>\n<p>&emsp;&emsp;</p>\n\n<p>&emsp;&emsp;&emsp;<b>Name:</b>&emsp;&emsp;{{doc.patient_name}}</p>\n<p>&emsp;&emsp;&emsp;<b>Age:</b>&emsp;&emsp;{{doc.patient_age}}</p>\n<p>&emsp;&emsp;&emsp;<b>Study:</b>&emsp;&emsp;{{doc.procedure_template}}</p>\n\n<div>\n    <p>&emsp;&emsp;{{doc.report}}</p>\n</div>\n\n<footer>\n    <img src=\"/private/files/\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b footer.png\" alt=\"Warith letter footer\">\n</footer>",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-08-18 14:13:57.430131",
+ "modified_by": "zaynebadil@his.com",
+ "module": "Healthcare",
+ "name": "Clinical Procedure print",
+ "owner": "waed@his.com",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/print_format/lab_test_print_default/lab_test_print_default.json
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 1,
+ "creation": "2024-06-20 10:56:44.780511",
+ "css": ".header-image {\r\n    width: 100%;\r\n}\r\nheader {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n  \r\n}\r\nfooter {\r\n  font-size: 9px;\r\n  color: #f00;\r\n  text-align: center;\r\n\r\n}\r\n\r\n\r\n@media print {\r\n  footer {\r\n    position: fixed;\r\n    left: 75px;\r\n    bottom: 0;\r\n    \r\n  }\r\n  \r\n  header {\r\n      width: 100%;\r\n  }\r\n\r\n}",
+ "custom_format": 0,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Lab Test",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "format_data": "[{\"fieldname\": \"print_heading_template\", \"fieldtype\": \"Custom HTML\", \"options\": \"<header>\\n    <img src=\\\"/files/\\u0645\\u0624\\u0633\\u0633\\u0629 \\u0648\\u0627\\u0631\\u062b header.png\\\" alt=\\\"Warith letter head\\\" class = \\\"header-image\\\">\\n</header>\\n\\n\\n<div calss = \\\"department-cont\\\">\\n    <hr><h4 class=\\\"text-uppercase text-center\\\"\\n><b><u>DEPARTMENT OF LABORATORY</u></b></h4>\\n  </div>\\n\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<div class=\\\"row\\\">\\n        <div class=\\\"col-xs-4 text-left\\\">\\n          <label>Patient</label>\\n        </div>\\n        {% if doc.patient_name %}\\n        <div class=\\\"col-xs-7  value\\\">\\n          &emsp;&emsp;{{ doc.patient_name }}\\n        </div>\\n        {% else %}\\n        <div class=\\\"col-xs-7  value\\\">\\n          {{ doc.patient }}\\n        </div>\\n        {%- endif -%}\\n      </div>\\n\"}, {\"fieldname\": \"patient_age\", \"print_hide\": 0, \"label\": \"Age\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"patient_sex\", \"print_hide\": 0, \"label\": \"Gender\"}, {\"fieldname\": \"result_date\", \"print_hide\": 0, \"label\": \"Result Date\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<p>Lab test name:  &emsp;&emsp;&emsp;{{ doc.lab_test_name }}</p>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<table class=\\\"table\\\">\\n    <tbody>\\n      {%- if doc.normal_test_items -%}\\n      <tr>\\n        <th>Name of Test</th>\\n        <th class=\\\"text-left\\\">Result</th>\\n        <th class=\\\"text-right\\\">Normal Range</th>\\n      </tr>\\n\\n      {%- if doc.normal_test_items|length > 1 %}\\n      {%- endif -%}\\n\\n      {%- for i, row in enumerate(doc.normal_test_items) -%}\\n      <tr>\\n        <td style=\\\"width: 40%;border:none;\\\">\\n          {%- if doc.normal_test_items|length > 1 %}&emsp;&emsp;{%- endif -%}\\n          {%- if row.lab_test_name -%}<b>{{ row.lab_test_name }}</b>\\n          {%- else -%}&emsp;&emsp;&emsp;{%- endif -%}\\n          {%- if row.lab_test_event -%} &emsp;&emsp;{{ row.lab_test_event }}{%- endif -%}\\n        </td>\\n\\n        <td style=\\\"width: 20%;text-align: left;border:none;\\\">\\n\\t\\t\\t\\t\\t{%- if row.result_value -%}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}<b>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}<u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}<i>{% endif %}\\n                        {{ row.result_value }}\\n                        {%- if row.lab_test_uom -%}&emsp;{{ row.lab_test_uom }}{%- endif -%}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}</i>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}</u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}</b>{% endif %}\\n\\t\\t\\t\\t\\t{%- endif -%}\\n          \\n\\t\\t\\t\\t\\t{%- if row.secondary_uom and row.conversion_factor and row.secondary_uom_result -%}\\n\\t\\t\\t\\t\\t\\t<br/>\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}<b>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}<u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}<i>{% endif %}\\n                        {{ row.secondary_uom_result }}\\n                        &emsp;{{ row.secondary_uom }}\\n\\t\\t\\t\\t\\t\\t{%- if row.italic -%}</i>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.underline -%}</u>{% endif %}\\n\\t\\t\\t\\t\\t\\t{%- if row.bold -%}</b>{% endif %}\\n\\t\\t\\t\\t\\t\\t&emsp;\\n\\t\\t\\t\\t\\t{%- endif -%}\\n        </td>\\n\\n        <td style=\\\"width: 30%;text-align: right;border:none;\\\">\\n          <div style=\\\"border: 0px;\\\">\\n            {%- if row.normal_range -%}{{ row.normal_range }}{%- endif -%}\\n          </div>\\n        </td>\\n      </tr>\\n      {%- endfor -%}\\n      {%- endif -%}\\n    </tbody>\\n  </table>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\", \"options\": \"<div class=\\\"footer\\\" style=\\\"text-align:center\\\">\\r\\n        <p>\\u062a\\u0643\\u0627\\u0644\\u064a\\u0641 \\u0639\\u0644\\u0627\\u062c \\u0627\\u0644\\u0627\\u0637\\u0641\\u0627\\u0644 \\u062f\\u0648\\u0646 \\u0633\\u0646 \\u0627\\u0644\\u062e\\u0627\\u0645\\u0633\\u0629 \\u0639\\u0634\\u0631\\u0629 \\u062a\\u0645 \\u062f\\u0641\\u0639\\u0647\\u0627 \\u0643\\u0627\\u0645\\u0644\\u0629 \\u0645\\u0646 \\u0642\\u0628\\u0644 \\u0627\\u0644\\u0639\\u062a\\u0628\\u0629 \\u0627\\u0644\\u062d\\u0633\\u064a\\u0646\\u064a\\u0629 \\u0627\\u0644\\u0645\\u0642\\u062f\\u0633\\u0629.</p>\\r\\n        <p>\\u0627\\u0644\\u0639\\u0646\\u0648\\u0627\\u0646 : \\u0627\\u0644\\u0628\\u0635\\u0631\\u0629 - \\u0627\\u0644\\u0627\\u0631\\u0628\\u0639 \\u0634\\u0648\\u0627\\u0631\\u0639</p>\\r\\n    </div>\\r\\n    \\r\\n<footer>\\r\\n    <img src=\\\"/files/\\u0645\\u0624\\u0633\\u0633\\u0629 \\u0648\\u0627\\u0631\\u062b footer.png\\\" alt=\\\"Warith letter footer\\\">\\r\\n</footer>\"}]",
+ "idx": 0,
+ "line_breaks": 1,
+ "margin_bottom": 0.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 0.0,
+ "modified": "2024-06-22 13:31:21.137720",
+ "modified_by": "waed@his.com",
+ "module": "Healthcare",
+ "name": "Lab test print default",
+ "owner": "waed@his.com",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 1,
+ "standard": "Yes"
+}
\ No newline at end of file
diff --git "a/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/__init__.py" "b/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/__init__.py"
new file mode 100755
index 0000000..e69de29
diff --git "a/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json" "b/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json"
new file mode 100755
index 0000000..3500196
--- /dev/null
+++ "b/healthcare/print_format/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266/\330\267\330\250\330\247\330\271\331\207_\331\205\330\271\331\204\331\210\331\205\330\247\330\252_\330\247\331\204\331\205\330\261\331\212\330\266.json"
@@ -0,0 +1,32 @@
+{
+ "absolute_value": 0,
+ "align_labels_right": 0,
+ "creation": "2024-05-23 09:38:38.482233",
+ "custom_format": 1,
+ "default_print_language": "en",
+ "disabled": 0,
+ "doc_type": "Patient",
+ "docstatus": 0,
+ "doctype": "Print Format",
+ "font_size": 14,
+ "format_data": "[{\"fieldname\": \"print_heading_template\", \"fieldtype\": \"Custom HTML\", \"options\": \"<div class=\\\"print-heading\\\" >\\t\\t\\n<h2><div>Patient</div><br>\\n\\n    <pre>\\n        MRN:     <small class=\\\"sub-heading\\\">\\n            \\n            {{ doc.name }}\\n            \\n        </small>\\t\\n    </pre>\\n    \\t\\n    \\n    <div class='ar-header' style=\\\"text-align:right;direction:rtl\\\" >\\n            \\n            <div>\\n                <span>\\u0627\\u0644\\u0627\\u0633\\u0645 \\u0627\\u0644\\u0643\\u0627\\u0645\\u0644 : </span>\\n                {{doc.\\u0627\\u0644\\u0627\\u0633\\u0645_\\u0627\\u0644\\u0627\\u0648\\u0644}} {{  doc.\\u0627\\u0633\\u0645_\\u0627\\u0644\\u0627\\u0628   }}\\n            </div>\\n    </div>\\n    \\n</h2></div>\"}, {\"fieldtype\": \"Section Break\", \"label\": \"\"}, {\"fieldtype\": \"Column Break\"}, {\"fieldname\": \"_custom_html\", \"print_hide\": 0, \"label\": \"Custom HTML\", \"fieldtype\": \"HTML\"}]",
+ "html": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Patient Information</title>\r\n    <style>\r\n        .bill-container {\r\n            font-family: Arial, sans-serif;\r\n            width: 100%;\r\n            margin: 0 auto;\r\n            padding: 20px;\r\n            /*border: 1px solid #000;*/\r\n            direction:rtl;\r\n        }\r\n        .bill-header {\r\n            text-align: center;\r\n            margin-bottom: 20px;\r\n        }\r\n        .bill-header img {\r\n            width: 100px;\r\n            height: auto;\r\n        }\r\n        .bill-header h2 {\r\n            margin: 0;\r\n        }\r\n        .bill-info {\r\n            width: 100%;\r\n            margin-bottom: 20px;\r\n        }\r\n        .bill-info table {\r\n            width: 100%;\r\n            border-collapse: collapse;\r\n        }\r\n        .bill-info th, .bill-info td {\r\n            border: 1px solid #000;\r\n            padding: 8px;\r\n            text-align: right;\r\n        }\r\n        .bill-info th {\r\n            width: 30%;\r\n        }\r\n        .bill-footer {\r\n            font-size: 12px;\r\n            text-align: center;\r\n            margin-top: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"bill-container\">\r\n        <div class=\"bill-header\">\r\n            <img src=\"/files/protfolio.svg\" alt=\"Logo\">\r\n            \r\n            <h1> \r\n            \u0645\u0633\u062a\u0634\u0641\u0649 \u0627\u0644\u062b\u0642\u0644\u064a\u0646 \u0644\u0639\u0644\u0627\u062d \u0627\u0644\u0627\u0648\u0631\u0627\u0645\r\n            </h1>\r\n            <p>\u0645\u0624\u0633\u0633\u0629 \u0648\u0627\u0631\u062b \u0627\u0644\u062f\u0648\u0644\u064a\u0629</p>\r\n            <p>ISO 9001 | ISO 14001 | ISO 45001</p>\r\n        </div>\r\n        <div class=\"bill-info\">\r\n            <table>\r\n                <tr>\r\n                    <th>  \u0627\u0633\u0645 \u0627\u0644\u0645\u0631\u064a\u0636 :</th>\r\n                    <td>\r\n                        {{doc.\u0627\u0644\u0627\u0633\u0645_\u0627\u0644\u0627\u0648\u0644}}\r\n                        {{doc.\u0627\u0633\u0645_\u0627\u0644\u0627\u0628}}\r\n                        {{doc.\u0627\u0633\u0645_\u0627\u0644\u062c\u062f}}\r\n                        {{doc.\u0627\u0644\u0644\u0642\u0628}}\r\n                    </td>\r\n                </tr>\r\n                <tr>\r\n                    <th>\u0627\u0644\u0639\u0645\u0631 :</th>\r\n                    <td>{{doc.age.years}}</td>\r\n                </tr>\r\n                   <tr>\r\n                    <th> MRN / \u0631\u0642\u0645 \u0627\u0644\u0645\u0631\u064a\u0636</th>\r\n                    <td>{{doc.name}}</td>\r\n                </tr>\r\n                <tr>\r\n                    <th>\u0627\u0644\u0645\u0648\u0642\u0639:</th>\r\n                    <td>Out-Patient</td>\r\n                </tr>\r\n            </table>\r\n        </div>\r\n        <div class=\"bill-footer\">\r\n            <p>\u062a\u0643\u0627\u0644\u064a\u0641 \u0639\u0644\u0627\u062c \u0627\u0644\u0623\u0637\u0641\u0627\u0644 \u062f\u0648\u0646 \u0633\u0646 \u0627\u0644\u062e\u0627\u0645\u0633\u0629 \u0639\u0634\u0631\u0629 \u062a\u0645 \u062f\u0641\u0639\u0647\u0627 \u0643\u0627\u0645\u0644\u0629 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0639\u062a\u0628\u0629 \u0627\u0644\u062d\u0633\u064a\u0646\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0633\u0629.</p>\r\n            <p>\u062a\u0645 \u0627\u0644\u062a\u0643\u0641\u0644 \u0628\u0639\u0644\u0627\u062c \u0627\u0644\u0645\u0631\u064a\u0636  \u0645\u062c\u0627\u0646\u0627 \u0645\u0646 \u0642\u0628\u0644 \u0627\u0644\u0639\u062a\u0628\u0629 \u0627\u0644\u062d\u0633\u064a\u0646\u064a\u0629 \u0627\u0644\u0645\u0642\u062f\u0633\u0629</p>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\r\n",
+ "idx": 0,
+ "line_breaks": 0,
+ "margin_bottom": 15.0,
+ "margin_left": 15.0,
+ "margin_right": 15.0,
+ "margin_top": 15.0,
+ "modified": "2024-05-25 07:34:14.006658",
+ "modified_by": "Administrator",
+ "module": "Healthcare",
+ "name": "\u0637\u0628\u0627\u0639\u0647 \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0627\u0644\u0645\u0631\u064a\u0636",
+ "owner": "Administrator",
+ "page_number": "Hide",
+ "print_format_builder": 0,
+ "print_format_builder_beta": 0,
+ "print_format_type": "Jinja",
+ "raw_printing": 0,
+ "show_section_headings": 0,
+ "standard": "Yes"
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/public/js/diagnostic_report_controller.js
@@ -0,0 +1,82 @@
+frappe.provide("healthcare.Diagnostic.DiagnosticReport");
+
+healthcare.Diagnostic.DiagnosticReport = class DiagnosticReport {
+	constructor(opts) {
+		$.extend(this, opts);
+	}
+
+	refresh() {
+		var me = this;
+		this.ObservationWidgets = []
+		  frappe.call({
+			method: "healthcare.healthcare.doctype.observation.observation.get_observation_details",
+			args: {
+				docname: me.frm.doc.name
+			},
+			freeze: true,
+			callback: function(r) {
+				me.create_widget(r)
+				let new_ob_list = [];
+				const inputContainer = document.querySelectorAll('.input-with-feedback');
+				for (let i = 0; i < inputContainer.length; i++) {
+					new_ob_list.push(inputContainer[i])
+				}
+
+				document.addEventListener('keydown', function(event) {
+					const focusedElement = document.activeElement;
+					let current_index = 0
+					let next_index = 0
+					for (let key in new_ob_list) {
+						if (new_ob_list.hasOwnProperty(key) && new_ob_list.includes(focusedElement)) {
+							current_index = new_ob_list.indexOf(focusedElement);
+						}
+					}
+
+					if (['ArrowDown', 'Enter'].includes(event.key)) {
+						next_index = current_index + 1
+					} else if (event.key === 'ArrowUp') {
+						next_index = current_index - 1
+					}
+
+					if (new_ob_list[next_index]) {
+						new_ob_list[next_index].focus();
+					}
+
+				});
+				}
+			})
+			me.save_action("load")
+	}
+
+	create_widget(r) {
+		var me = this;
+		if (r && r.message[0]) {
+		this.result = []
+			for (let key in r.message[0]) {
+				me.ObservationWidgets[key] = new healthcare.ObservationWidget({
+					wrapper: me.observation_wrapper,
+					data: r.message[0][key],
+					frm: me.frm,
+					result: this.result
+				});
+			}
+		}
+	}
+
+	save_action(func) {
+		var me = this;
+		if (func=="save") {
+			frappe.call({
+				method: "healthcare.healthcare.doctype.observation.observation.record_observation_result",
+				args: {
+					values: this.result
+				},
+				freeze: true,
+				callback: function(r) {
+					// me.frm.refresh(this)
+				}
+			})
+		}
+	}
+
+}
\ No newline at end of file
--- /dev/null
+++ b/healthcare/public/js/healthcare.bundle.js
@@ -0,0 +1,8 @@
+import "./patient_quick_entry";
+import "./observation.js";
+import "./observation.html";
+import "./diagnostic_report_controller.js";
+import "./observation_widget.js";
+import "./healthcare_note.js";
+import "./healthcare_note.html";
+import "./healthcare_orders.html";
--- /dev/null
+++ b/healthcare/public/js/healthcare_note.js
@@ -0,0 +1,531 @@
+frappe.provide("healthcare");
+
+healthcare.ClinicalNotes = class ClinicalNotes {
+	constructor(opts) {
+		$.extend(this, opts);
+	}
+
+	refresh() {
+		var me = this;
+		this.notes_wrapper.find('.clinical-notes-section').remove();
+		frappe.run_serially([
+			() => frappe.call({
+				method: "get_clinical_notes",
+				doc: me.frm.doc,
+				args: {
+					patient: me.frm.doc.patient
+				},
+				freeze: true,
+				callback: function(r) {
+					let clinical_notes = r.message || [];
+					// notes.sort(
+					// 	function(a, b) {
+					// 		return new Date(b.added_on) - new Date(a.added_on);
+					// 	}
+					// );
+
+					let clinical_notes_html = frappe.render_template(
+						'healthcare_note',
+						{
+							clinical_notes: clinical_notes
+						}
+					);
+					$(clinical_notes_html).appendTo(me.notes_wrapper);
+				}
+			}),
+			() => {
+				me.add_clinical_note();
+				$(".clinical-notes-section").find(".edit-note-btn").on("click", function() {
+					me.edit_clinical_note(this);
+				});
+				$(".clinical-notes-section").find(".delete-note-btn").on("click", function() {
+					me.delete_clinical_note(this);
+				});
+			}
+		])
+	}
+
+
+	add_clinical_note () {
+		let me = this;
+		let _add_clinical_note = () => {
+			var d = new frappe.ui.Dialog({
+				title: __('Add Clinical Note'),
+				fields: [
+					{
+						"label": "Clinical Note Type",
+						"fieldname": "note_type",
+						"fieldtype": "Link",
+						"options": "Clinical Note Type"
+					},
+					{
+						"label": "Note",
+						"fieldname": "note",
+						"fieldtype": "Text Editor",
+						"reqd": 1,
+						"enable_mentions": true,
+					}
+				],
+				primary_action: function() {
+					var data = d.get_values();
+					frappe.call({
+						method: "add_clinical_note",
+						doc: me.frm.doc,
+						args: {
+							note: data.note,
+							note_type: data.note_type
+						},
+						freeze: true,
+						callback: function(r) {
+							if (!r.exc) {
+								me.refresh();
+							}
+							d.hide();
+						}
+					});
+				},
+				primary_action_label: __('Add')
+			});
+			d.show();
+		};
+		$(".new-note-btn").click(_add_clinical_note);
+	}
+
+	edit_clinical_note (edit_btn) {
+		var me = this;
+		let row = $(edit_btn).closest('.comment-content');
+		let note_name = row.attr("name");
+		let note_type = $(row).find(".note-type").html().trim();
+		let row_content = $(row).find(".content").html();
+			var d = new frappe.ui.Dialog({
+				title: __('Edit Clinical Note'),
+				fields: [
+					{
+						"label": "Clinical Note Type",
+						"fieldname": "note_type",
+						"fieldtype": "Link",
+						"options": "Clinical Note Type",
+						"default": note_type,
+					},
+					{
+						"label": "Note",
+						"fieldname": "note",
+						"fieldtype": "Text Editor",
+						"default": row_content,
+					}
+				],
+				primary_action: function() {
+					var data = d.get_values();
+					frappe.call({
+						method: "edit_clinical_note",
+						doc: me.frm.doc,
+						args: {
+							note: data.note,
+							note_name: note_name
+						},
+						freeze: true,
+						callback: function(r) {
+							if (!r.exc) {
+								me.refresh();
+								d.hide();
+							}
+
+						}
+					});
+				},
+				primary_action_label: __('Done')
+			});
+			d.show();
+	}
+
+	delete_clinical_note (delete_btn) {
+		var me = this;
+		let note_name = $(delete_btn).closest('.comment-content').attr("name");
+		frappe.confirm('Are you sure you want to proceed?',
+			() => {
+				frappe.call({
+					method: "delete_clinical_note",
+					doc: me.frm.doc,
+					args: {
+						note_name: note_name
+					},
+					freeze: true,
+					callback: function(r) {
+						if (!r.exc) {
+							me.refresh();
+						}
+					}
+				});
+			})
+	}
+};
+
+healthcare.Orders = class Orders {
+	constructor(opts) {
+		$.extend(this, opts);
+	}
+
+	refresh() {
+		var me = this;
+		$(this.open_activities_wrapper).empty();
+		let cur_form_footer = this.form_wrapper.find('.form-footer');
+
+		frappe.call({
+			method: "get_encounter_details",
+			doc: me.frm.doc,
+			args: {
+			},
+			callback: (r) => {
+				if (!r.exc) {
+					var activities_html = frappe.render_template('healthcare_orders', {
+						service_requests: r.message[1],
+						medication_requests: r.message[0],
+						create_orders: me.create_orders,
+						show_encounter: this.show_encounter
+				});
+
+					$(activities_html).appendTo(me.open_activities_wrapper);
+
+					$(".service-request").find(".service-request-onhold").on("click", function() {
+						me.update_status(this, "Service Request", "On Hold");
+					});
+					$(".service-request").find(".service-request-active").on("click", function() {
+						me.update_status(this, "Service Request", "Active");
+					});
+
+					$(".service-request").find(".order-cancel").on("click", function() {
+						me.update_status(this, "Service Request", "Cancel");
+					});
+
+					$(".service-request").find(".service-request-replace").on("click", function() {
+						me.update_status(this, "Service Request", "Replaced");
+					});
+
+					$(".medication-request").find(".service-request-onhold").on("click", function() {
+						me.update_status(this, "Medication Request", "On Hold");
+					});
+					$(".medication-request").find(".service-request-active").on("click", function() {
+						me.update_status(this, "Medication Request", "Active");
+					});
+
+					$(".medication-request").find(".order-cancel").on("click", function() {
+						me.update_status(this, "Medication Request", "Cancel");
+					});
+
+					$(".medication-request").find(".service-request-replace").on("click", function() {
+						me.update_status(this, "Medication Request", "Replaced");
+						me.create_medication_request();
+					});
+
+					me.create_service_request();
+					me.create_medication_request();
+				}
+			}
+		});
+	}
+
+	create_service_request () {
+		let me = this;
+		let _create_service_request = () => {
+			var d = new frappe.ui.Dialog({
+				title: __('Create Service Request'),
+				fields: [
+					{
+						"label": "Order Template Type",
+						"fieldname": "order_template_type",
+						"fieldtype": "Link",
+						"options": "DocType",
+						"reqd": 1,
+						get_query: () => {
+							let order_template_doctypes = [
+								"Therapy Type",
+								"Lab Test Template",
+								"Clinical Procedure Template",
+								"Observation Template",
+							];
+							return {
+								filters: {
+									name: ['in', order_template_doctypes]
+								}
+							};
+						}
+					},
+					{
+						"label": "Order Template",
+						"fieldname": "order_template",
+						"fieldtype": "Dynamic Link",
+						"options": "order_template_type",
+						"depends_on": "eval:doc.order_template_type;",
+						"reqd": 1,
+					},
+					{
+						"fetch_from": "order_template.medical_department",
+						"fieldname": "department",
+						"fieldtype": "Link",
+						"label": "Department",
+						"options": "Medical Department",
+						"depends_on": "eval:doc.order_template_type=='Clinical Procedure Template';",
+					},
+					{
+						"fieldname": "column_break_4",
+						"fieldtype": "Column Break",
+						"depends_on": "eval:doc.order_template_type=='Lab Test Template';",
+					},
+					{
+						"fieldname": "practitioner",
+						"fieldtype": "Link",
+						"label": "Referred to Practitioner",
+						"options": "Healthcare Practitioner",
+						"depends_on": "eval:doc.order_template_type=='Clinical Procedure Template';",
+					},
+					{
+						"fieldname": "date",
+						"fieldtype": "Date",
+						"label": "Date",
+						"depends_on": "eval:doc.order_template_type=='Clinical Procedure Template';",
+					},
+					{
+						"fieldname": "description",
+						"fieldtype": "Small Text",
+						"label": "Comments",
+						"depends_on": "eval:['Lab Test Template', 'Clinical Procedure Template'].includes(doc.order_template_type);",
+					},
+					// therapy
+					   {
+						"fieldname": "no_of_sessions",
+						"fieldtype": "Int",
+						"label": "No of Sessions",
+						"depends_on": "eval:doc.order_template_type=='Therapy Type';",
+					   },
+				],
+				primary_action: function() {
+					var data = d.get_values();
+					frappe.call({
+						method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_service_request_from_widget",
+						args: {
+							encounter: me.frm.doc.name,
+							data: data,
+						},
+						freeze: true,
+						callback: function(r) {
+							if (!r.exc) {
+								me.refresh();
+								d.hide();
+							}
+
+						}
+					});
+				},
+				primary_action_label: __("Create")
+			});
+			d.show();
+		};
+		$(".new-service-request-btn").click(_create_service_request);
+	}
+
+	create_medication_request () {
+		let me = this;
+		let _create_medication_request = () => {
+			var d = new frappe.ui.Dialog({
+				title: __('Create Medication Request'),
+				fields: [
+					{
+						"fieldname": "medication",
+						"fieldtype": "Link",
+						"in_list_view": 1,
+						"label": "Medication",
+						"options": "Medication",
+						onchange: function(e) {
+							frappe.call({
+								method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.get_medications",
+								freeze: true,
+								args: {
+									medication: d.get_value("medication")
+								},
+								callback: function(r) {
+									if (r.message) {
+										if (r.message.length == 1) {
+											d.set_value("drug_code", r.message[0].item)
+										}
+										else if (r.message.length > 1) {
+											d.set_value("drug_code", "")
+											var drug_list = r.message.map(({ item }) => item);
+											d.fields_dict['drug_code'].get_query = function() {
+												return {
+													filters: {
+														name: ["in", drug_list]
+													}
+												};
+											};
+									}
+									}
+								}
+							})
+
+							frappe.db.get_value("Medication", d.get_value("medication"),
+								["default_prescription_dosage", "default_prescription_duration",
+								"dosage_form", "default_interval", "default_interval_uom", "strength", "strength_uom"])
+							.then(r => {
+								let values = r.message;
+								d.set_values({
+									"dosage": values.default_prescription_dosage,
+									"period": values.default_prescription_duration,
+									"dosage_form": values.dosage_form,
+									"interval": values.default_interval,
+									"interval_uom": values.default_interval_uom,
+									"strength": values.strength,
+									"strength_uom": values.strength_uom
+								})
+							})
+						}
+					},
+					{
+						"fieldname": "drug_code",
+						"fieldtype": "Link",
+						"ignore_user_permissions": 1,
+						"label": "Drug Code",
+						"options": "Item",
+					},
+					{
+						"fetch_from": "medication.default_prescription_duration",
+						"fieldname": "period",
+						"fieldtype": "Link",
+						"label": "Period",
+						"options": "Prescription Duration",
+						"reqd": 1
+					},
+					{
+						"fetch_from": "medication.dosage_form",
+						"fieldname": "dosage_form",
+						"fieldtype": "Link",
+						"label": "Dosage Form",
+						"options": "Dosage Form",
+						"reqd": 1
+					},
+					{
+						"depends_on": "eval:!doc.dosage_by_interval",
+						"fetch_from": "medication.default_prescription_dosage",
+						"fieldname": "dosage",
+						"fieldtype": "Link",
+						"label": "Dosage",
+						"mandatory_depends_on": "eval:!doc.dosage_by_interval",
+						"options": "Prescription Dosage"
+					},
+					{
+						"fieldname": "column_break_7",
+						"fieldtype": "Column Break"
+					},
+					{
+						"fieldname": "description",
+						"fieldtype": "Small Text",
+						"label": "Comment"
+					},
+					{
+						"fetch_from": "medication.strength",
+						"fieldname": "strength",
+						"fieldtype": "Float",
+						"label": "Strength",
+						"read_only_depends_on": "eval: doc.medication"
+					},
+					{
+						"depends_on": "strength",
+						"fetch_from": "medication.strength_uom",
+						"fieldname": "strength_uom",
+						"fieldtype": "Link",
+						"label": "Strength UOM",
+						"options": "UOM",
+						"read_only_depends_on": "eval: doc.medication"
+					},
+					{
+						"fieldname": "number_of_repeats_allowed",
+						"fieldtype": "Float",
+						"label": "Number Of Repeats Allowed"
+					},
+					{
+						"default": "0",
+						"fieldname": "dosage_by_interval",
+						"fieldtype": "Check",
+						"label": "Dosage by Time Interval"
+					},
+					{
+						"fieldname": "section_break_7",
+						"fieldtype": "Section Break",
+						"depends_on": "eval:doc.dosage_by_interval",
+					},
+					{
+						"depends_on": "eval:doc.dosage_by_interval",
+						"fetch_from": "medication.default_interval",
+						"fieldname": "interval",
+						"fieldtype": "Int",
+						"label": "Interval",
+						"mandatory_depends_on": "eval:doc.dosage_by_interval"
+					},
+					{
+						"depends_on": "eval:doc.dosage_by_interval",
+						"fetch_from": "medication.default_interval_uom",
+						"fieldname": "interval_uom",
+						"fieldtype": "Select",
+						"label": "Interval UOM",
+						"mandatory_depends_on": "eval:doc.dosage_by_interval",
+						"options": "\nHour\nDay"
+					},
+				],
+				primary_action: function() {
+					var data = d.get_values();
+					frappe.call({
+						method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_service_request_from_widget",
+						args: {
+							encounter: me.frm.doc.name,
+							data: data,
+							medication_request: true,
+						},
+						freeze: true,
+						callback: function(r) {
+							if (!r.exc) {
+								me.refresh();
+								d.hide();
+							}
+
+						}
+					});
+				},
+				primary_action_label: __("Create")
+			});
+			d.show();
+
+		};
+		$(".new-medication-btn").click(_create_medication_request);
+	}
+
+	async update_status (status_btn, doctype, status) {
+		let me = this;
+		let row = ""
+		if (doctype == "Service Request") {
+			row = $(status_btn).closest('.service-request')
+		} else {
+			row = $(status_btn).closest('.medication-request')
+		}
+		let order_name = row.attr("name");
+		if (status == "Cancel") {
+			frappe.confirm('Are you sure you want to proceed?',
+			() => {
+				frappe.call({
+					method: "healthcare.healthcare.doctype.patient_encounter.patient_encounter.cancel_request",
+						freeze: true,
+						args: {
+							doctype: doctype,
+							request: order_name
+						},
+						callback: function(r) {
+							if (r && !r.exc) {
+								me.refresh();
+							}
+						}
+				})
+			})
+		} else {
+			await frappe.db.set_value(doctype, order_name, "status", status);
+			me.refresh();
+		}
+	}
+};
\ No newline at end of file
similarity index 100%
rename from public/js/observation.js
rename to healthcare/public/js/observation.js
similarity index 100%
rename from public/js/observation_widget.js
rename to healthcare/public/js/observation_widget.js
similarity index 100%
rename from public/js/patient_quick_entry.js
rename to healthcare/public/js/patient_quick_entry.js
--- /dev/null
+++ b/healthcare/public/js/sales_invoice.js
@@ -0,0 +1,330 @@
+// Healthcare
+frappe.ui.form.on('Sales Invoice', {
+	refresh(frm) {
+		if (frm.doc.docstatus === 0 && !frm.doc.is_return) {
+			frm.add_custom_button(__('Healthcare Services'), function() {
+				get_healthcare_services_to_invoice(frm);
+			},__('Get Items From'));
+			frm.add_custom_button(__('Prescriptions'), function() {
+				get_drugs_to_invoice(frm);
+			},__('Get Items From'));
+		}
+	},
+
+	patient(frm) {
+		if (frm.doc.patient) {
+			frappe.db.get_value("Patient", frm.doc.patient, "customer")
+				.then(r => {
+					if (!r.exc && r.message.customer) {
+						frm.set_value("customer", r.message.customer);
+					} else {
+						frappe.show_alert({
+							indicator: "warning",
+							message: __("Patient <b>{0}</b> is not linked to a Customer",
+								[`<a class='bold' href='/app/patient/${frm.doc.patient}'>${frm.doc.patient}</a>`]
+							),
+						});
+						frm.set_value("customer", "");
+					}
+					frm.set_df_property("customer", "read_only", frm.doc.customer ? 1 : 0);
+				})
+		} else {
+			frm.set_value("customer", "");
+			frm.set_df_property("customer", "read_only", 0);
+		}
+	},
+
+	service_unit: function (frm) {
+		set_service_unit(frm);
+	},
+
+	items_add: function (frm) {
+		set_service_unit(frm);
+	}
+});
+
+var set_service_unit = function (frm) {
+	if (frm.doc.service_unit && frm.doc.items.length > 0) {
+		frm.doc.items.forEach((item) => {
+			if (!item.service_unit) {
+				frappe.model.set_value(item.doctype, item.name, "service_unit", frm.doc.service_unit);
+			}
+		});
+	}
+};
+
+var get_healthcare_services_to_invoice = function(frm) {
+	var me = this;
+	let selected_patient = '';
+	var dialog = new frappe.ui.Dialog({
+		title: __("Get Items from Healthcare Services"),
+		fields:[
+			{
+				fieldtype: 'Link',
+				options: 'Patient',
+				label: 'Patient',
+				fieldname: "patient",
+				reqd: true
+			},
+			{ fieldtype: 'Section Break'	},
+			{ fieldtype: 'HTML', fieldname: 'results_area' }
+		]
+	});
+	var $wrapper;
+	var $results;
+	var $placeholder;
+	dialog.set_values({
+		'patient': frm.doc.patient
+	});
+	dialog.fields_dict["patient"].df.onchange = () => {
+		var patient = dialog.fields_dict.patient.input.value;
+		if(patient && patient!=selected_patient){
+			selected_patient = patient;
+			var method = "healthcare.healthcare.utils.get_healthcare_services_to_invoice";
+			var args = {patient: patient, company: frm.doc.company};
+			var columns = (["service", "reference_name", "reference_type"]);
+			get_healthcare_items(frm, true, $results, $placeholder, method, args, columns);
+		}
+		else if(!patient){
+			selected_patient = '';
+			$results.empty();
+			$results.append($placeholder);
+		}
+	}
+	$wrapper = dialog.fields_dict.results_area.$wrapper.append(`<div class="results"
+		style="border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;"></div>`);
+	$results = $wrapper.find('.results');
+	$placeholder = $(`<div class="multiselect-empty-state">
+				<span class="text-center" style="margin-top: -40px;">
+					<i class="fa fa-2x fa-heartbeat text-extra-muted"></i>
+					<p class="text-extra-muted">No billable Healthcare Services found</p>
+				</span>
+			</div>`);
+	$results.on('click', '.list-item--head :checkbox', (e) => {
+		$results.find('.list-item-container .list-row-check')
+			.prop("checked", ($(e.target).is(':checked')));
+	});
+	set_primary_action(frm, dialog, $results, true);
+	dialog.show();
+};
+
+var get_healthcare_items = function(frm, invoice_healthcare_services, $results, $placeholder, method, args, columns) {
+	var me = this;
+	$results.empty();
+	frappe.call({
+		method: method,
+		args: args,
+		callback: function(data) {
+			if(data.message){
+				$results.append(make_list_row(columns, invoice_healthcare_services));
+				for(let i=0; i<data.message.length; i++){
+					$results.append(make_list_row(columns, invoice_healthcare_services, data.message[i]));
+				}
+			}else {
+				$results.append($placeholder);
+			}
+		}
+	});
+}
+
+var make_list_row= function(columns, invoice_healthcare_services, result={}) {
+	var me = this;
+	// Make a head row by default (if result not passed)
+	let head = Object.keys(result).length === 0;
+	let contents = ``;
+	columns.forEach(function(column) {
+		contents += `<div class="list-item__content ellipsis">
+			${
+				head ? `<span class="ellipsis">${__(frappe.model.unscrub(column))}</span>`
+				:(column !== "name" ? `<span class="ellipsis">${__(result[column])}</span>`
+					: `<a class="list-id ellipsis">
+						${__(result[column])}</a>`)
+			}
+		</div>`;
+	})
+
+	let $row = $(`<div class="list-item">
+		<div class="list-item__content" style="flex: 0 0 10px;">
+			<input type="checkbox" class="list-row-check" ${result.checked ? 'checked' : ''}>
+		</div>
+		${contents}
+	</div>`);
+
+	$row = list_row_data_items(head, $row, result, invoice_healthcare_services);
+	return $row;
+};
+
+var set_primary_action= function(frm, dialog, $results, invoice_healthcare_services) {
+	var me = this;
+	dialog.set_primary_action(__('Add'), function() {
+		frm.clear_table('items');
+		let checked_values = get_checked_values($results);
+		if(checked_values.length > 0){
+			if(invoice_healthcare_services) {
+				frm.set_value("patient", dialog.fields_dict.patient.input.value);
+			}
+			add_to_item_line(frm, checked_values, invoice_healthcare_services);
+			dialog.hide();
+		}
+		else{
+			if(invoice_healthcare_services){
+				frappe.msgprint(__("Please select Healthcare Service"));
+			}
+			else{
+				frappe.msgprint(__("Please select Drug"));
+			}
+		}
+	});
+};
+
+var get_checked_values= function($results) {
+	return $results.find('.list-item-container').map(function() {
+		let checked_values = {};
+		if ($(this).find('.list-row-check:checkbox:checked').length > 0 ) {
+			checked_values['dn'] = $(this).attr('data-dn');
+			checked_values['dt'] = $(this).attr('data-dt');
+			checked_values['item'] = $(this).attr('data-item');
+			if($(this).attr('data-rate') != 'undefined'){
+				checked_values['rate'] = $(this).attr('data-rate');
+			}
+			else{
+				checked_values['rate'] = false;
+			}
+			if($(this).attr('data-income-account') != 'undefined'){
+				checked_values['income_account'] = $(this).attr('data-income-account');
+			}
+			else{
+				checked_values['income_account'] = false;
+			}
+			if($(this).attr('data-qty') != 'undefined'){
+				checked_values['qty'] = $(this).attr('data-qty');
+			}
+			else{
+				checked_values['qty'] = false;
+			}
+			if($(this).attr('data-description') != 'undefined'){
+				checked_values['description'] = $(this).attr('data-description');
+			}
+			else{
+				checked_values['description'] = false;
+			}
+			return checked_values;
+		}
+	}).get();
+};
+
+var get_drugs_to_invoice = function(frm) {
+	var me = this;
+	let selected_encounter = '';
+	var dialog = new frappe.ui.Dialog({
+		title: __("Get Items from Medication Requests"),
+		fields:[
+			{ fieldtype: 'Link', options: 'Patient', label: 'Patient', fieldname: "patient", reqd: true },
+			{ fieldtype: 'Link', options: 'Patient Encounter', label: 'Patient Encounter', fieldname: "encounter", reqd: true,
+				description:'Quantity will be calculated only for items which has "Nos" as UoM. You may change as required for each invoice item.',
+				get_query: function(doc) {
+					return {
+						filters: {
+							patient: dialog.get_value("patient"),
+							company: frm.doc.company,
+							docstatus: 1
+						}
+					};
+				}
+			},
+			{ fieldtype: 'Section Break' },
+			{ fieldtype: 'HTML', fieldname: 'results_area' }
+		]
+	});
+	var $wrapper;
+	var $results;
+	var $placeholder;
+	dialog.set_values({
+		'patient': frm.doc.patient,
+		'encounter': ""
+	});
+	dialog.fields_dict["encounter"].df.onchange = () => {
+		var encounter = dialog.fields_dict.encounter.input.value;
+		if(encounter && encounter!=selected_encounter){
+			selected_encounter = encounter;
+			var method = "healthcare.healthcare.utils.get_drugs_to_invoice";
+			var args = {encounter: encounter};
+			var columns = (["drug_code", "quantity", "description"]);
+			get_healthcare_items(frm, false, $results, $placeholder, method, args, columns);
+		}
+		else if(!encounter){
+			selected_encounter = '';
+			$results.empty();
+			$results.append($placeholder);
+		}
+	}
+	$wrapper = dialog.fields_dict.results_area.$wrapper.append(`<div class="results"
+		style="border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;"></div>`);
+	$results = $wrapper.find('.results');
+	$placeholder = $(`<div class="multiselect-empty-state">
+				<span class="text-center" style="margin-top: -40px;">
+					<i class="fa fa-2x fa-heartbeat text-extra-muted"></i>
+					<p class="text-extra-muted">No Drug Prescription found</p>
+				</span>
+			</div>`);
+	$results.on('click', '.list-item--head :checkbox', (e) => {
+		$results.find('.list-item-container .list-row-check')
+			.prop("checked", ($(e.target).is(':checked')));
+	});
+	set_primary_action(frm, dialog, $results, false);
+	dialog.show();
+};
+
+var list_row_data_items = function(head, $row, result, invoice_healthcare_services) {
+	if(invoice_healthcare_services){
+		head ? $row.addClass('list-item--head')
+			: $row = $(`<div class="list-item-container"
+				data-dn= "${result.reference_name}" data-dt= "${result.reference_type}" data-item= "${result.service}"
+				data-rate = ${result.rate}
+				data-income-account = "${result.income_account}"
+				data-qty = ${result.qty}
+				data-description = "${result.description}">
+				</div>`).append($row);
+	}
+	else{
+		head ? $row.addClass('list-item--head')
+			: $row = $(`<div class="list-item-container"
+				data-item= "${result.drug_code}"
+				data-qty = ${result.quantity}
+				data-dn= "${result.reference_name}"
+				data-dt= "${result.reference_type}"
+				data-rate = ${result.rate}
+				data-description = "${result.description}">
+				</div>`).append($row);
+	}
+	return $row
+};
+
+var add_to_item_line = function(frm, checked_values, invoice_healthcare_services){
+	if(invoice_healthcare_services){
+		frappe.call({
+			doc: frm.doc,
+			method: "set_healthcare_services",
+			args:{
+				checked_values: checked_values
+			},
+			callback: function() {
+				frm.trigger("validate");
+				frm.refresh_fields();
+			}
+		});
+	}
+	else{
+		for(let i=0; i<checked_values.length; i++){
+			var si_item = frappe.model.add_child(frm.doc, 'Sales Invoice Item', 'items');
+			frappe.model.set_value(si_item.doctype, si_item.name, 'item_code', checked_values[i]['item']);
+			frappe.model.set_value(si_item.doctype, si_item.name, 'qty', 1);
+			frappe.model.set_value(si_item.doctype, si_item.name, 'reference_dn', checked_values[i]['dn']);
+			frappe.model.set_value(si_item.doctype, si_item.name, 'reference_dt', checked_values[i]['dt']);
+			if(checked_values[i]['qty'] > 1){
+				frappe.model.set_value(si_item.doctype, si_item.name, 'qty', parseFloat(checked_values[i]['qty']));
+			}
+		}
+		frm.refresh_fields();
+	}
+};
\ No newline at end of file
--- /dev/null
+++ b/healthcare/public/js/service_request.js
@@ -0,0 +1,154 @@
+
+frappe.ui.form.on(cur_frm.doctype, { // nosemgrep
+    onload: function(frm) {
+        if (frm.doc.__islocal) {
+			frm.set_value('order_time', frappe.datetime.now_time())
+		}
+    },
+
+    refresh: function(frm) {
+		frm.set_query('order_group', function () {
+			return {
+				filters: {
+					'docstatus': 1,
+					'patient': frm.doc.patient,
+					'practitioner': frm.doc.ordered_by
+				}
+			};
+		});
+
+		frm.set_query('patient', function () {
+			return {
+				filters: {
+					'status': 'Active'
+				}
+			};
+		});
+
+		frm.set_query('staff_role', function () {
+			return {
+				filters: {
+					'restrict_to_domain': 'Healthcare'
+				}
+			};
+		});
+
+		frm.set_query('priority', function () {
+			return {
+				filters: {
+					code_system: 'Priority'
+				}
+			};
+		});
+
+		frm.set_query('intent', function () {
+			return {
+				filters: {
+					code_system: 'Intent'
+				}
+			};
+		});
+
+		frm.trigger('setup_status_buttons');
+	},
+
+	setup_status_buttons: function(frm) {
+		var status_types = {
+			"Service Request": "Request Status",
+			"Medication Request": "Medication Request Status"
+		};
+
+		var type = status_types[frm.doc.doctype] || "";
+		var revoke = (frm.doc.doctype == "Service Request" ? "revoked-" : "cancelled-") + type;
+		var active = "active-" + type;
+		var on_hold = "on-hold-" + type;
+		var entered_in_error = "entered-in-error-" + type;
+		var unknown = "unknown-" + type;
+
+		if (frm.doc.docstatus === 1) {
+			if (frm.doc.status === active) {
+				frm.add_custom_button(__('On Hold'), function() {
+					frm.events.set_status(frm, on_hold);
+				}, __('Status'));
+			} else if (frm.doc.status === on_hold) {
+				frm.add_custom_button(__('Active'), function() {
+					frm.events.set_status(frm, active);
+				}, __('Status'));
+			}
+		} else if (frm.doc.docstatus === 2) {
+			frm.add_custom_button(__('Revoked'), function() {
+				frm.events.set_status(frm, revoke);
+			}, __('Status'));
+
+			frm.add_custom_button(__('Entered in Error'), function() {
+				frm.events.set_status(frm, entered_in_error);
+			}, __('Status'));
+
+			frm.add_custom_button(__('Unknown'), function() {
+				frm.events.set_status(frm, unknown);
+			}, __('Status'));
+		}
+	},
+
+    set_status: function(frm, status) {
+		frappe.call({
+			method: 'healthcare.controllers.service_request_controller.set_request_status',
+			async: false,
+			freeze: true,
+			args: {
+				doctype: frm.doctype,
+				request: frm.doc.name,
+				status: status
+			},
+			callback: function(r) {
+				if (!r.exc) frm.reload_doc();
+			}
+		});
+	},
+
+    after_cancel: function(frm) {
+		frappe.prompt([
+			{
+				fieldname: 'reason_for_cancellation',
+				label: __('Reason for Cancellation'),
+				fieldtype: 'Select',
+				options: [
+					{ label: "Revoked", value: "revoked-Request Status" },
+					{ label: "Entered in Error", value: "entered-in-error-Request Status" },
+					{ label: "Unknown", value:"unknown-Request Status"},
+				],
+				reqd: 1
+			}
+		],
+		function(data) {
+			frm.events.set_status(frm, data.reason_for_cancellation);
+		}, __('Reason for Cancellation'), __('Submit'));
+	},
+
+    patient: function(frm) {
+		if (!frm.doc.patient) {
+			frm.set_values ({
+				'patient_name': '',
+				'gender': '',
+				'patient_age': '',
+				'mobile': '',
+				'email': '',
+				'inpatient_record': '',
+				'inpatient_status': '',
+			});
+		}
+	},
+
+    birth_date: function(frm) {
+		let age_str = calculate_age(frm.doc.birth_date);
+		frm.set_value('patient_age', age_str);
+	}
+});
+
+let calculate_age = function(birth) {
+	let ageMS = Date.parse(Date()) - Date.parse(birth);
+	let age = new Date();
+	age.setTime(ageMS);
+	let years =  age.getFullYear() - 1970;
+	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
+};
\ No newline at end of file
--- /dev/null
+++ b/healthcare/regional/india/abdm/abdm_config.py
@@ -0,0 +1,87 @@
+config = {
+	"authorization": {"method": "POST", "url": "/v0.5/sessions", "encrypted": False},
+	"exists_by_health_id": {
+		"method": "POST",
+		"url": "/v1/search/existsByHealthId",
+		"encrypted": False,
+	},
+	"verify_health_id": {"method": "POST", "url": "/v1/search/searchByHealthId", "encrypted": False},
+	"generate_aadhaar_otp": {
+		"method": "POST",
+		"url": "/v1/registration/aadhaar/generateOtp",
+		"encrypted": False,
+	},
+	"generate_mobile_otp": {
+		"method": "POST",
+		"url": "/v2/registration/mobile/generateOtp",
+		"encrypted": False,
+	},
+	"verify_mobile_otp": {
+		"method": "POST",
+		"url": "/v2/registration/mobile/verifyOtp",
+		"encrypted": True,
+	},
+	"resend_mobile_otp": {
+		"method": "POST",
+		"url": "/v2/registration/mobile/resendOtp",
+		"encrypted": False,
+	},
+	"resend_aadhaar_otp": {
+		"method": "POST",
+		"url": "/v2/registration/aadhaar/resendAadhaarOtp",
+		"encrypted": False,
+	},
+	"create_abha_w_aadhaar": {
+		"method": "POST",
+		"url": "/v1/registration/aadhaar/createHealthIdWithAadhaarOtp",
+		"encrypted": False,
+	},
+	"create_abha_w_mobile": {
+		"method": "POST",
+		"url": "/v2/registration/mobile/createHidViaMobile",
+		"encrypted": False,
+	},
+	"auth_cert": {"method": "GET", "url": "/v2/auth/cert", "encrypted": False},
+	"auth_init": {"method": "POST", "url": "/v2/auth/init", "encrypted": False},
+	"confirm_w_aadhaar_otp": {
+		"method": "POST",
+		"url": "/v2/auth/confirmWithAadhaarOtp",
+		"encrypted": True,
+	},
+	"confirm_w_mobile_otp": {
+		"method": "POST",
+		"url": "/v2/auth/confirmWithMobileOTP",
+		"encrypted": True,
+	},
+	"get_acc_info": {"method": "GET", "url": "/v2/account/profile", "encrypted": False},
+	"generate_aadhaar_mobile_otp": {
+		"method": "POST",
+		"url": "/v1/registration/aadhaar/generateMobileOTP",
+		"encrypted": False,
+	},
+	"verify_aadhaar_mobile_otp": {
+		"method": "POST",
+		"url": "/v1/registration/aadhaar/verifyMobileOTP",
+		"encrypted": False,
+	},
+	"verify_aadhaar_otp": {
+		"method": "POST",
+		"url": "/v1/registration/aadhaar/verifyOTP",
+		"encrypted": False,
+	},
+	"generate_mobile_otp_for_linking": {
+		"method": "POST",
+		"url": "/v2/document/generate/mobile/otp",
+		"encrypted": False,
+	},
+	"verify_mobile_otp_for_linking": {
+		"method": "POST",
+		"url": "/v2/document/verify/mobile/otp",
+		"encrypted": True,
+	},
+	"get_card": {"method": "GET", "url": "/v1/account/getPngCard", "encrypted": False},
+}
+
+
+def get_url(key):
+	return config.get(key)
--- /dev/null
+++ b/healthcare/regional/india/abdm/js/patient.js
@@ -0,0 +1,960 @@
+frappe.ui.form.on('Patient', {
+	refresh: function (frm) {
+		if (frappe.boot.sysdefaults.country == 'India') {
+			unhide_field(['abha_number', 'abha_address']);
+			if (!frm.doc.abha_address && !frm.doc.abha_number) {
+				frm.add_custom_button(__('Verify ABHA'), function () {
+					search_by_abha_address(frm)
+				}, 'ABDM');
+			}
+			if (frm.doc.abha_number) {
+				frm.add_custom_button(__('Verify ABHA Number'), function () {
+					verify_health_id(frm)
+				}, 'ABDM');
+			}
+			if (!(frm.doc.abha_address || frm.doc.abha_number)) {
+				frm.add_custom_button(__('Create ABHA'), function () {
+					create_abha(frm)
+				}, 'ABDM');
+			}
+		} else {
+			hide_field(['abha_number', 'abha_address']);
+		}
+	}
+});
+
+// search by ABHA address. If know ABHA number, can be verified
+let search_by_abha_address = function (frm) {
+	let dialog = new frappe.ui.Dialog({
+		title: 'Enter ABHA Address / Number',
+		fields: [
+			{
+				label: 'ABHA Address / Number',
+				fieldname: 'abha_address',
+				fieldtype: 'Data'
+			},
+			{
+				label: 'ABHA Number',
+				fieldname: 'abha_number',
+				fieldtype: 'Data',
+				hidden: 1
+			}
+		],
+		secondary_action_label: 'Search ABHA',
+		secondary_action(values) {
+			if (!dialog.get_value('abha_address')) {
+				frappe.throw({
+					message: __(`ABHA Address is required to search`),
+					title: __("ABHA Addressent Required")
+				});
+			} else {
+				show_message(dialog, 'Searching...', 'black', '', 'abha_address')
+				frappe.call({
+					method: 'healthcare.regional.india.abdm.utils.abdm_request',
+					args: {
+						'payload': {
+							"healthId": dialog.get_value('abha_address')
+						},
+						'url_key': 'verify_health_id',
+						'req_type': 'Health ID'
+					},
+					freeze: true,
+					freeze_message: __('<br><br>Searching...'),
+					callback: function (data) {
+						if (data.message['healthIdNumber']) {
+							show_message(dialog, 'Status:' + data.message['status'], 'green', '', 'abha_address')
+							dialog.set_values ({
+								'abha_number': data.message['healthIdNumber']
+							})
+							dialog.hide();
+							if (data.message['healthIdNumber']) {
+								verify_health_id(frm, data.message['healthIdNumber'])
+							}
+						} else {
+							show_message(dialog, data.message.message, '#fa6969',
+											data.message.details[0]['message'], 'abha_address')
+							}
+					}
+				});
+			}
+		},
+	});
+	dialog.show();
+}
+
+
+let verify_health_id = function (frm, recieved_abha_number = '') {
+	let d = new frappe.ui.Dialog({
+		title: 'Verify ABHA',
+		fields: [
+			{
+				label: 'ABHA Number',
+				fieldname: 'healthid',
+				fieldtype: 'Data'
+			},
+			{
+				label: 'Authentication Method',
+				fieldname: 'auth_method',
+				fieldtype: 'Select',
+				options: ['AADHAAR_OTP', 'MOBILE_OTP'],
+				default: 'AADHAAR_OTP'
+			},
+			{
+				label: 'Mobile number to save patient',
+				fieldname: 'sb1',
+				fieldtype: 'Section Break',
+				collapsible: 1
+			},
+			{
+				label: 'Mobile',
+				fieldname: 'mobile',
+				fieldtype: 'Data',
+			},
+			{
+				fieldname: 'sb2',
+				fieldtype: 'Section Break'
+			},
+			{
+				fieldname: 'qr_data',
+				fieldtype: 'HTML'
+			},
+			{
+				fieldname: 'scanned_data',
+				fieldtype: 'Small Text',
+				hidden: 1
+			},
+			{
+				fieldname: 'abha_card',
+				fieldtype: 'Attach',
+				hidden: 1
+			}
+		],
+		primary_action_label: 'Send Auth OTP',
+		primary_action(values) {
+			d.get_primary_btn().attr('disabled', true);
+			show_message(d, '', '', '', 'auth_method')
+			frappe.run_serially([
+				() =>frappe.db.get_value('Patient', {abha_number: d.get_value('healthid'), name: ['!=', frm.doc.name]	}, ['name', 'abha_card'])
+					.then(r =>{
+						if (r.message.name) {
+							frappe.set_route("Form", "Patient", r.message.name);
+							if (r.message.abha_card) {
+								frappe.throw({
+									message: __(`{0}`,
+									["<img src='"+ r.message.abha_card + "'>"]),
+									title: __("Patient already exist")
+								});
+							} else {
+								frappe.throw({
+									message: __(`{0}`,
+									['<a href="/app/patient/'+r.message.name+'">' + r.message.name + '</a>']),
+									title: __("Patient already exist")
+								});
+							}
+						}
+					}),
+				() => {show_message(d, 'Sending Auth OTP...', 'black', '', 'auth_method')
+					frappe.call({
+						method: 'healthcare.regional.india.abdm.utils.abdm_request',
+						args: {
+							'payload': {
+								"authMethod": d.get_value('auth_method'),
+								"healthid": d.get_value('healthid')
+							},
+							'url_key': 'auth_init',
+							'req_type': 'Health ID'
+						},
+						freeze: true,
+						freeze_message: __('Generating OTP...'),
+						callback: function (r) {
+							let txn_id = r.message['txnId'];
+							if (txn_id) {
+								show_message(d, 'Successfully Sent OTP', 'green', '', 'auth_method')
+								verify_auth_otp(r, d)
+							} else {
+								if (r.message.message && r.message.details[0]['message']) {
+									show_message(d, r.message.message, 'red', r.message.details[0]['message'], 'auth_method')
+								}
+								frappe.show_alert({
+									message:__('OTP Generation Failed, Please try again later'),
+									indicator:'red'
+								}, 10);
+								d.get_primary_btn().attr('disabled', false);
+							}
+						}
+					});
+				}
+		])
+		},
+		secondary_action_label: 'Save',
+		secondary_action(values) {
+			// save data from qr_scan/api fetch, save to form
+			var scanned_data = JSON.parse(d.get_value('scanned_data'));
+			set_data_to_form(frm, scanned_data, d, '')
+			frm.save();
+			d.hide();
+		}
+	});
+
+	// QR scanner field
+	setup_qr_scanner(d)
+	//verify btn
+	setup_send_otp_btn(d)
+	if (recieved_abha_number) {
+		d.set_values({
+			'healthid': recieved_abha_number
+		});
+	}
+	d.get_secondary_btn().attr('disabled', true);
+	d.fields_dict['scanned_data'].df.onchange = () => {
+		if (d.get_value('scanned_data')) {
+			d.get_secondary_btn().attr('disabled', false);
+		}
+	}
+	d.fields_dict['healthid'].df.onchange = () => {
+		d.get_primary_btn().attr('disabled', false);
+	}
+
+	d.show();
+}
+
+// authorization otp verification
+let verify_auth_otp = function(r, d) {
+	let dialog = new frappe.ui.Dialog({
+		title: 'Authentication OTP',
+		fields: [
+			{
+				label: 'OTP',
+				fieldname: 'otp',
+				fieldtype: 'Data',
+				reqd: 1
+			}
+		],
+		primary_action_label: 'Verify',
+		primary_action(values) {
+			// sending otp received to call 2 apis and receive health_data
+			show_message(d, 'Verifying...', 'black', '', 'auth_method')
+			frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.get_health_data',
+				args: {
+					'otp': dialog.get_value('otp'),
+					'txnId': r.message['txnId'],
+					'auth_method': d.get_value('auth_method')
+				},
+				freeze: true,
+				freeze_message: __(`<br><br>Verifying OTP... <br>
+					<small>Please note, this may take a while</small>`),
+				callback: function (data) {
+					if (data.message) {
+						if (data.message[0] && data.message[0]['healthIdNumber']) {
+							d.get_primary_btn().attr('hidden', true);
+							if (!data.message[1] && !data.message[1]['file_url']) {
+								set_qr_scanned_data(d, data.message[0])
+							}
+							d.set_values({
+								'scanned_data': JSON.stringify(data.message[0])
+							});
+							show_message(d, '', '', '', 'auth_method')
+						} else {
+							if (data.message[0].details[0]['message']) {
+								show_message(d, data.message[0].message, 'red', data.message[0].details[0]['message'], 'auth_method')
+							}
+							frappe.show_alert({
+								message:__('Failed to fetch health Data, Please try again later'),
+								indicator:'red'
+							}, 10);
+						}
+						if (data.message[1]) {
+							$(d.fields_dict.qr_data.$wrapper).html("<img src='"+ data.message[1] + "'>")
+							d.set_values({
+								'abha_card': data.message[1]
+							});
+							show_message(d, '', '', '', 'auth_method')
+						}
+					}
+				}
+			});
+			dialog.hide();
+		}
+	});
+	dialog.show();
+}
+
+
+let create_abha = function (frm) {
+	let d = new frappe.ui.Dialog({
+		title: 'Create ABHA',
+		fields: [
+			{
+				label: 'Enter Aadhaar',
+				fieldname: 'aadhaar',
+				fieldtype: 'Data',
+				mandatory: 1
+			},
+			{
+				label:'Patient Consent',
+				fieldname: 'patient_consent',
+				fieldtype: 'Section Break'
+			},
+			{
+				fieldname: 'patient_consent',
+				fieldtype: 'Link',
+				options: 'Terms and Conditions',
+				read_only: 0
+			},
+			{
+				fieldname: 'cb1',
+				fieldtype: 'Column Break',
+			},
+			{
+				label: 'Button',
+				fieldname: 'print_btn',
+				fieldtype: 'HTML'
+			},
+			{
+				fieldname: 'sb2',
+				fieldtype: 'Section Break',
+				hide_border: 1
+			},
+			{
+				fieldname: 'patient_consent_attach',
+				fieldtype: 'Attach',
+				description: `Please attach patient's signed consent for using
+						their Aadhaar for ABHA creation`
+			},
+			{
+				label: 'OR',
+				fieldname: 'or',
+				fieldtype: 'Heading',
+				hidden: 1
+			},
+			{
+				label: 'Received Consent',
+				fieldname: 'received_consent',
+				fieldtype: 'Check',
+				default: 0,
+				description: `Check this to confirm that patient has
+					provided consent to use Aadhaar for ABHA Registration`,
+				hidden: 1
+			},
+		],
+		primary_action_label: 'Send OTP',
+		primary_action(values) {
+			if (!d.get_value('received_consent') && !d.get_value('patient_consent_attach')) {
+				frappe.throw({
+					message: __(`Patient Consent is required for ABHA creation`),
+					title: __("Consent Required")
+				});
+			} else {
+				create_abha_with_aadhaar(frm, d)
+				d.hide();
+			}
+		}
+	});
+
+	let print_button = d.fields_dict.print_btn.$wrapper;
+
+	print_button.html(
+		`<br><button class="btn btn-sm" style="float:left;" title="Print">
+		<svg class="icon  icon-sm" style="">
+		<use class="" href="#icon-printer"></use></svg>
+		</button>`
+	);
+
+	print_button.on('click', 'button', function() {
+		frappe.db.get_value('Terms and Conditions', d.get_value('patient_consent'), 'terms')
+		.then(r => {
+			let result = frappe.render_template(r.message.terms, {"doc" : {}})
+			frappe.render_pdf(result, {orientation:"Portrait"});
+		})
+	})
+
+	frappe.db.get_value('ABDM Settings', {
+		company: frappe.defaults.get_user_default("Company"),
+		default: 1
+	}, 'patient_aadhaar_consent')
+    .then(r => {
+		if (r.message.patient_aadhaar_consent) {
+			d.set_values({
+				'patient_consent': r.message.patient_aadhaar_consent
+			});
+		}
+    })
+	d.show();
+}
+
+
+// to create html table
+let set_qr_scanned_data = function(d, scanned_data) {
+	let wrapper = $(d.fields_dict['qr_data'].wrapper).empty();
+	let dob = '';
+	if (scanned_data['dob']) {
+		dob = scanned_data['dob']
+	} else {
+		dob = `${scanned_data['dayOfBirth'] ? scanned_data['dayOfBirth'] : '-'} -
+		${scanned_data['monthOfBirth'] ? scanned_data['monthOfBirth'] : '-'} -
+		${scanned_data['yearOfBirth']}`;
+	}
+
+	let qr_table = $(`<table class="table table-bordered" style="cursor:pointer; margin:0px;">
+		<tbody></tbody</table>`).appendTo(wrapper);
+		const row =
+			$(`<tr>
+				<td>Name</td>
+				<td>${scanned_data['name']}</td>
+			</tr>
+			<tr>
+				<td>Gender</td>
+				<td>${scanned_data['gender'] || '-'}</td>
+			</tr>
+			<tr>
+				<td>Mobile</td>
+				<td>${scanned_data['mobile'] ||  '-'}</td>
+			</tr>
+			<tr>
+				<td>DOB</td>
+				<td>${dob}</td>
+			</tr>
+			<tr>
+				<td>ABHA Address</td>
+				<td>${scanned_data['healthId'] || scanned_data['hid'] || '-'}</td>
+			</tr>`);
+			qr_table.find('tbody').append(row);
+}
+
+
+let set_data_to_form = function(frm, scanned_data, dialog, d) {
+	if (scanned_data) {
+		let dob = '';
+		if (scanned_data['dob']) {
+			dob = scanned_data['dob'];
+		} else {
+			dob = `${scanned_data['dayOfBirth'] ? scanned_data['dayOfBirth'] : '01'}-
+			${scanned_data['monthOfBirth'] ? scanned_data['monthOfBirth'] : '01'}-
+			${scanned_data['yearOfBirth']}`;
+		}
+		for (var k in scanned_data) {
+			if (k == 'hid' || k == 'healthId'){frm.set_value('abha_address', scanned_data[k])}
+			if (k == 'hidn' || k == 'healthIdNumber'){frm.set_value('abha_number', scanned_data[k])}
+			if (!frm.doc.first_name) {
+				if (k == 'name'){frm.set_value('first_name', scanned_data[k])}
+			}
+			if (!frm.doc.dob) {
+				if (dob){frm.set_value('dob', moment(dob, 'DD/MM/YYYY').format('YYYY-MM-DD'))}
+			}
+			if (!frm.doc.email) {
+				if (k == 'email'){frm.set_value('email', scanned_data[k])}
+			}
+			if (dialog.get_value('mobile')) {
+				frm.set_value('mobile', dialog.get_value('mobile'))
+			} else if (k == 'mobile'){
+				frm.set_value('mobile', scanned_data[k])
+			}
+			if (k == 'gender'){
+				let gender = scanned_data[k] == 'M' ? 'Male' :
+				scanned_data[k] == 'F' ? 'Female' :
+				scanned_data[k] == 'U' ? 'Prefer not to say' : 'Other'
+				frm.set_value('sex', gender)
+			}
+			if (d && d.get_value('patient_consent_attach')) {
+				frm.set_value('consent_for_aadhaar_use', d.get_value('patient_consent_attach'))
+			}
+		}
+		if (dialog.get_value('abha_card')) {
+			frm.set_value('abha_card', dialog.get_value('abha_card'))
+		}
+	}
+}
+
+
+let setup_qr_scanner = function(dialog) {
+	dialog.fields_dict.healthid.$wrapper.find('.control-input').append(
+		`<span class="link-btn" style="display:inline">
+			<a class="btn-open no-decoration" title="${__("Scan")}">
+				${frappe.utils.icon('scan', 'sm')}
+			</a>
+		</span>`
+	);
+	let scan_btn = dialog.$body.find('.link-btn');
+	scan_btn.toggle(true);
+
+	scan_btn.on('click', 'a', () => {
+		new frappe.ui.Scanner({
+			dialog: true,
+			multiple: false,
+			on_scan(data) {
+				if (data && data.result && data.result.text) {
+					var scanned_data = JSON.parse(data.decodedText);
+					dialog.set_values({
+						'scanned_data': data.decodedText,
+						'healthid': (scanned_data['hidn'] ? scanned_data['hidn'] : '')
+					});
+					set_qr_scanned_data(dialog, scanned_data)
+				}
+			}
+		});
+	});
+}
+
+
+let show_message = function(dialog, message, color, details, field) {
+	var field = dialog.get_field(field);
+	field.df.description = `<div style="color:${color};
+		padding:5px 5px 5px 5px">${message}<br>
+		${details ? 'Details: '+details+'</div>': '</div>'}`
+	field.refresh();
+}
+
+
+let setup_search_btn = function(dialog) {
+	dialog.fields_dict.username.$wrapper.find('.control-input').append(
+		`<span class="link-btn search" style="display:inline">
+		<a class="search-icons" title="${__("Search")}">
+			${frappe.utils.icon("search", "sm")}
+			</a>
+		</span>`
+	);
+	let search_btn = dialog.$body.find('.search');
+	search_btn.toggle(true);
+
+	search_btn.on('click', 'a', () => {
+		if (dialog.get_value('username')) {
+			show_message(dialog, 'Verifying...', 'black', '', 'username')
+			frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.abdm_request',
+				args: {
+					'payload': {
+						"healthId": dialog.get_value('username')
+					},
+					'url_key': 'exists_by_health_id',
+					'req_type': 'Health ID'
+				},
+				freeze: true,
+				freeze_message: __('<br><br>Verifying...'),
+				callback: function (data) {
+					if (data.message['status'] == false) {
+						show_message(dialog, 'ABHA Address can be used', 'green', '', 'username')
+						dialog.get_primary_btn().attr('disabled', false);
+					} else if (data.message['status'] == true) {
+						show_message(dialog, 'ABHA Address is already existing', 'red', '', 'username')
+						dialog.get_primary_btn().attr('disabled', true);
+					}
+				}
+			});
+		}
+	});
+}
+
+
+let create_abha_with_aadhaar = function(frm, d) {
+	let txn_id = ''
+	let error_msg = ''
+	frappe.run_serially([
+		() => frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.abdm_request',
+				args: {
+					'payload': {
+						"aadhaar": d.get_value('aadhaar')
+					},
+					'url_key': 'generate_aadhaar_otp',
+					'req_type': 'Health ID'
+				},
+				freeze: true,
+				freeze_message: __('Sending OTP...'),
+				callback: function (r) {
+					if (r.message['txnId']) {
+						txn_id = r.message['txnId'];
+					} else {
+						error_msg = r.message
+					}
+				}
+			}),
+		() => {
+			if (txn_id) {
+				let dialog = new frappe.ui.Dialog({
+					title: 'Create',
+					fields: [
+					{
+						label: 'Aadhaar OTP',
+						fieldname: 'otp',
+						fieldtype: 'Data',
+						reqd: 1
+					},
+					{
+						fieldname: 'resent_txn_id',
+						fieldtype: 'Data',
+						hidden: 1
+					},
+					{
+						label: 'Use Another Mobile Number For ABHA',
+						fieldname: 'sb1',
+						fieldtype: 'Section Break',
+						collapsible: 1
+					},
+					{
+						label: 'Mobile',
+						fieldname: 'mobile',
+						fieldtype: 'Data',
+					},
+					{
+						fieldname: 'sb2',
+						fieldtype: 'Section Break'
+					},
+					{
+						label: 'Choose ABHA Address',
+						fieldname: 'sb5',
+						fieldtype: 'Section Break',
+						collapsible: 1
+					},
+					{
+						label: 'Choose ABHA Address (Optional)',
+						fieldname: 'username',
+						fieldtype: 'Data'
+					},
+					{
+						fieldname: 'sb3',
+						fieldtype: 'Section Break',
+						hide_border: 1
+					}
+					],
+					primary_action_label: 'Create ABHA ID',
+					primary_action(values) {
+						dialog.get_primary_btn().attr('disabled', true);
+						frappe.call({
+							method: 'healthcare.regional.india.abdm.utils.abdm_request',
+							args: {
+								'payload': {
+									"email": frm.doc.email || '',
+									"firstName": frm.doc.first_name || '',
+									"lastName": frm.doc.last_name || '',
+									"middleName": frm.doc.middle_name || '',
+									"mobile": dialog.get_value('mobile') ?
+										dialog.get_value('mobile') : frm.doc.mobile,
+									"otp": dialog.get_value('otp'),
+									"password": dialog.get_value('password'),
+									"txnId": txn_id,
+									"username": dialog.get_value('username')
+								},
+								'url_key': 'create_abha_w_aadhaar',
+								'req_type': 'Health ID'
+							},
+							freeze: true,
+							freeze_message: __(`<br><br><br>Creating Health ID <br>
+								<small>Please note, this may take a while</small>`),
+							callback: function (data) {
+								if (data.message['healthIdNumber']) {
+									dialog.hide()
+									frappe.run_serially([
+										() =>frappe.db.get_value('Patient', {abha_number: data.message['healthIdNumber'],
+												name: ['!=', frm.doc.name]	}, ['name', 'abha_card'])
+											.then(r =>{
+												if (r.message.name) {
+													frappe.set_route("Form", "Patient", r.message.name);
+													if (r.message.abha_card) {
+														frappe.throw({
+															message: __(`{0}`,
+															["<img src='"+ r.message.abha_card + "'>"]),
+															title: __("Patient already exist")
+														});
+													} else {
+														frappe.throw({
+															message: __(`{0}`,
+															['<a href="/app/patient/'+r.message.name+'">' + r.message.name + '</a>']),
+															title: __("Patient already exist")
+														});
+													}
+												}
+											}),
+										() => {
+											set_data_to_form(frm, data.message, dialog, d)
+											if (data.message['token']) {
+												show_id_card_dialog(frm, data.message['token'])
+											}
+											if (data.message['new'] == false) {
+												frappe.show_alert({
+													message: __('Fetched existing ABHA of aadhaar provided'),
+													indicator: 'green' }, 5);
+											} else {
+												frappe.show_alert({
+													message: __('ABHA ID created successfully'),
+													indicator: 'green' }, 5);
+											}
+											// frm.save()
+											dialog.hide();
+										},
+									])
+								} else {
+									dialog.get_primary_btn().attr('disabled', false);
+									if (data.message && data.message.details[0]['message']) {
+										show_message(dialog, data.message.message, 'red',
+										data.message.details[0]['message'], 'otp')
+									}
+									frappe.show_alert({
+										message: __('ABHA ID not Created'),
+										indicator: 'red' }, 5);
+								}
+							}
+						});
+					}
+				});
+
+				setup_search_btn(dialog)
+				setup_resend_otp_btn(dialog, txn_id)
+				setup_send_otp_btn(dialog, txn_id)
+
+				// clear response_message
+				dialog.fields_dict['username'].df.onchange = () => {
+					show_message(dialog, '', '', '', 'otp')
+					dialog.get_primary_btn().attr('disabled', true);
+				}
+				dialog.show();
+			} else {
+				if (error_msg) {
+					if (error_msg.details[0]['message']) {
+						frappe.show_alert({
+							message: __(error_msg.details[0]['message']),
+							indicator: 'red' }, 5);
+					} else if (error_msg.message) {
+						frappe.show_alert({
+							message: __(error_msg.message),
+							indicator: 'red' }, 5);
+					}
+				}
+			}
+		}
+	]);
+
+}
+
+
+let setup_resend_otp_btn = function(dialog, txn_id) {
+	dialog.fields_dict.otp.$wrapper.find('.control-input').append(
+		`<span class="link-btn resend-btn" style="display:inline">
+		<a class="icons" title="${__("Resend OTP")}">
+			Resend OTP
+			</a>
+		</span>`
+	);
+	let search_btn = dialog.$body.find('.resend-btn');
+	search_btn.toggle(true);
+
+	search_btn.on('click', 'a', () => {
+		if (txn_id) {
+			show_message(dialog, 'Resending Aadhaar OTP ...', 'black', '', 'otp')
+			frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.abdm_request',
+				args: {
+					'payload': {
+						"txnId": txn_id
+					},
+					'url_key': 'resend_aadhaar_otp',
+					'req_type': 'Health ID'
+				},
+				freeze: true,
+				freeze_message: __('<br><br>Resending Aadhaar OTP...'),
+				callback: function (data) {
+					if (data.message['txnId']) {
+						show_message(dialog, 'Successfully Resent Aadhaar OTP', 'green', '', 'otp')
+						dialog.get_primary_btn().attr('disabled', false);
+						dialog.set_values({
+							'resent_txn_id': data.message['txnId']
+						});
+					} else {
+						show_message(dialog, 'Resending Aadhaar OTP Failed', 'red', '', 'otp')
+						dialog.get_primary_btn().attr('disabled', true);
+					}
+				}
+			});
+		}
+	});
+}
+
+
+let setup_send_otp_btn = function(dialog, txn_id = '') {
+	dialog.fields_dict.mobile.$wrapper.find('.control-input').append(
+		`<span class="link-btn send-a-m-otp" style="display:inline">
+		<a class="icons" title="${__("Search")}">
+			Verify
+			</a>
+		</span>`
+	);
+	let search_btn = dialog.$body.find('.send-a-m-otp');
+	search_btn.toggle(true);
+
+	search_btn.on('click', 'a', () => {
+		if (dialog.get_value('mobile')) {
+			let args = {};
+			let url_key = '';
+			if (txn_id) {
+				args =  {
+					'payload': {
+						"mobile": dialog.get_value('mobile'),
+						"txnId": txn_id
+					},
+					'url_key': 'generate_aadhaar_mobile_otp',
+					'req_type': 'Health ID'
+				}
+				url_key = 'verify_aadhaar_mobile_otp'
+			} else {
+				args =  {
+					'payload': {
+						"mobile": dialog.get_value('mobile')
+					},
+					'url_key': 'generate_mobile_otp_for_linking',
+					'req_type': 'Health ID'
+				}
+				url_key = 'verify_mobile_otp_for_linking'
+			}
+			dialog.fields_dict.mobile.$wrapper.find("span").remove();
+			show_message(dialog, 'Sending Mobile OTP...', 'black', '', 'mobile')
+			frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.abdm_request',
+				args: args,
+				freeze: true,
+				freeze_message: __('<br><br>Verifying...'),
+				callback: function (data) {
+					if (data.message['txnId']) {
+						// setup_verify_otp_btn(dialog, data.message['txnId'])
+						verify_mobile_otp_dialog(dialog, data.message['txnId'], url_key)
+						show_message(dialog, 'Successfully Sent OTP', 'green', '', 'mobile')
+					} else {
+						// recreate send otp btn if otp sending fails
+						setup_send_otp_btn(dialog, txn_id)
+						if (data.message && data.message.details[0]['message']) {
+							show_message(dialog, data.message.message, 'red',
+								data.message.details[0]['message'], 'mobile')
+						} else {
+							show_message(dialog, 'Sending OTP Failed', 'red', '', 'mobile')
+						}
+					}
+				}
+			});
+		} else {
+			show_message(dialog, 'Please Enter Mobile Number', 'red', '', 'mobile')
+		}
+	});
+}
+
+
+let verify_mobile_otp_dialog = function(dialog, txn_id, url_key) {
+	let otp_dialog = new frappe.ui.Dialog({
+		title: 'Mobile Verification',
+		fields: [
+			{
+				label: 'OTP',
+				fieldname: 'otp',
+				fieldtype: 'Data',
+				reqd: 1
+			}
+		],
+		primary_action_label: 'Verify',
+		primary_action(values) {
+			show_message(dialog, 'Verifying OTP...', 'black', '', 'mobile')
+			let args = {};
+			if (url_key == 'verify_aadhaar_mobile_otp') {
+				args =  {
+					'payload': {
+						"otp": otp_dialog.get_value('otp'),
+						"txnId": txn_id
+					},
+					'url_key': url_key,
+					'req_type': 'Health ID'
+				}
+			} else if (url_key == 'verify_mobile_otp_for_linking'){
+				args =  {
+					'payload': {
+						"to_encrypt": otp_dialog.get_value('otp'),
+						"txnId": txn_id
+					},
+					'url_key': url_key,
+					'req_type': 'Health ID',
+					'to_be_enc': 'otp'
+				}
+			}
+			frappe.call({
+				method: 'healthcare.regional.india.abdm.utils.abdm_request',
+				args: args,
+				freeze: true,
+				freeze_message: __('<br><br>Verifying...'),
+				callback: function (data) {
+					show_message(dialog, '', '', '', 'mobile')
+					if (data.message['txnId'] || data.message['token']) {
+						dialog.fields_dict.mobile.$wrapper.find("span").remove();
+						dialog.fields_dict.mobile.$wrapper.find('.control-input').append(
+							`<span class="link-btn" style="display:inline">
+								<a class="icons" title="${__("Verified")}">
+									<i class="fa fa-check" aria-hidden="true"></i>
+								</a>
+							</span>`
+						);
+					} else {
+						dialog.fields_dict.mobile.$wrapper.find("span").remove();
+						dialog.fields_dict.mobile.$wrapper.find('.control-input').append(
+							`<span class="link-btn p-x-btn" style="display:inline">
+								<a class="icons" title="${__("Verification Failed")}">
+									<i class="fa fa-times" aria-hidden="true"></i>
+								</a>
+							</span>`
+						);
+						let x_btn = dialog.$body.find('.p-x-btn');
+						x_btn.toggle(true);
+
+						x_btn.on('click', 'a', () => {
+							dialog.fields_dict.mobile.$wrapper.find("span").remove();
+							if (url_key == 'verify_aadhaar_mobile_otp') {
+								setup_send_otp_btn(dialog, txn_id)
+							} else if (url_key == 'verify_mobile_otp_for_linking'){
+								setup_send_otp_btn(dialog)
+							}
+						});
+					}
+				}
+			});
+			otp_dialog.hide();
+		}
+	});
+	otp_dialog.show();
+}
+
+let show_id_card_dialog = function(frm, token) {
+	frappe.run_serially([
+		() =>frm.save(),
+		() =>{frappe.call({
+		method: 'healthcare.regional.india.abdm.utils.abdm_request',
+		args: {
+			'payload': {
+			},
+			'url_key': 'get_card',
+			'req_type': 'Health ID',
+			'rec_headers': {
+				'X-Token': 'Bearer '+ token
+			},
+			'patient_name': frm.doc.name
+		},
+		freeze: true,
+		freeze_message: __(`<br><br><br>Getting Health ID`),
+		callback: function (data) {
+			if (data.message['file_url']) {
+				// frm.set_value('abha_card', data.message['file_url'])
+				let abha_id_dialog = new frappe.ui.Dialog({
+					title: 'ABHA Card',
+					fields: [
+						{
+							fieldname: 'abha_card_html',
+							fieldtype: 'HTML',
+						}
+					],
+				primary_action_label: 'Print',
+				primary_action(values) {
+					let result = "<img src='"+ data.message['file_url'] + "'>"
+					frappe.render_pdf(result, {orientation:"Landscape"});
+				},
+				})
+				$(abha_id_dialog.fields_dict.abha_card_html.$wrapper).html("<img src='"+ data.message['file_url'] + "'>")
+				abha_id_dialog.show();
+			}
+		}
+	})
+	}
+])
+}
--- /dev/null
+++ b/healthcare/regional/india/abdm/setup.py
@@ -0,0 +1,51 @@
+import frappe
+from frappe.custom.doctype.custom_field.custom_field import create_custom_fields
+
+
+def setup():
+	if not frappe.db.exists("Custom Field", "Patient-abha_address"):
+		make_custom_fields()
+
+
+def make_custom_fields():
+	company = frappe.get_all("Company", filters={"country": "India"})
+	if not company:
+		return
+	custom_fields = get_custom_fields()
+	create_custom_fields(custom_fields)
+
+
+def get_custom_fields():
+	custom_fields = {
+		"Patient": [
+			dict(
+				fieldname="abha_address",
+				label="PHR Address",
+				fieldtype="Data",
+				insert_after="status",
+				read_only=1,
+			),
+			dict(
+				fieldname="abha_number",
+				label="ABHA Number",
+				fieldtype="Data",
+				insert_after="abha_address",
+				read_only=1,
+			),
+			dict(
+				fieldname="abha_card",
+				label="ABHA Card",
+				fieldtype="Attach",
+				insert_after="patient_details",
+				hidden=1,
+			),
+			dict(
+				fieldname="consent_for_aadhaar_use",
+				label="Consent For Aadhaar Use",
+				fieldtype="Attach",
+				insert_after="abha_card",
+				hidden=1,
+			),
+		]
+	}
+	return custom_fields
--- /dev/null
+++ b/healthcare/regional/india/abdm/test_abdm.py
@@ -0,0 +1,42 @@
+import responses
+
+import frappe
+from frappe.tests.utils import FrappeTestCase
+
+from healthcare.regional.india.abdm.utils import abdm_request
+
+
+class TestPatient(FrappeTestCase):
+	@classmethod
+	def setUpClass(cls):
+		super().setUpClass()
+
+		doc = frappe.get_doc(
+			{
+				"doctype": "ABDM Settings",
+				"default": 1,
+				"auth_base_url": "https://dev.abdm.gov.in/gateway/",
+				"health_id_base_url": "https://healthidsbx.abdm.gov.in/api/",
+				"Company": frappe.defaults.get_user_default("Company"),
+			}
+		)
+		doc.insert()
+
+	@responses.activate
+	def test_aadhar_otp_flow(self):
+		responses.add(
+			responses.POST,
+			"https://dev.abdm.gov.in/gateway/v0.5/sessions",
+			json={"accessToken": "foo.bar"},
+			status=200,
+		)
+		responses.add(
+			responses.POST,
+			"https://healthidsbx.abdm.gov.in/api/v1/registration/aadhaar/generateOtp",
+			json={"txnId": "37ca-41de"},
+			status=200,
+		)
+
+		payload = {"aadhaar": "123400001234"}
+		response = abdm_request(payload, "generate_aadhaar_otp", "Health ID")
+		assert "txnId" in response
--- /dev/null
+++ b/healthcare/regional/india/abdm/utils.py
@@ -0,0 +1,261 @@
+import json
+
+import requests
+
+import frappe
+
+from healthcare.regional.india.abdm.abdm_config import get_url
+
+
+@frappe.whitelist()
+def get_authorization_token():
+	client_id, client_secret, auth_base_url = frappe.db.get_value(
+		"ABDM Settings",
+		{"company": frappe.defaults.get_user_default("Company"), "default": 1},
+		["client_id", "client_secret", "auth_base_url"],
+	)
+
+	config = get_url("authorization")
+	auth_base_url = auth_base_url.rstrip("/")
+	url = auth_base_url + config.get("url")
+	payload = {"clientId": client_id, "clientSecret": client_secret}
+	if not auth_base_url:
+		frappe.throw(
+			title="Not Configured",
+			msg="Base URL not configured in ABDM Settings!",
+		)
+
+	req = frappe.new_doc("ABDM Request")
+	req.request = json.dumps(payload, indent=4)
+	req.url = url
+	req.request_name = "Authorization Token"
+	try:
+		response = requests.request(
+			method=config.get("method"),
+			url=url,
+			headers={"Content-Type": "application/json; charset=UTF-8"},
+			data=json.dumps(payload),
+		)
+		response.raise_for_status()
+		response = response.json()
+		req.response = json.dumps(response, indent=4)
+		req.status = "Granted"
+		req.insert(ignore_permissions=True)
+		return response.get("accessToken"), response.get("tokenType")
+
+	except Exception as e:
+		try:
+			req.response = json.dumps(response.json(), indent=4)
+		except json.decoder.JSONDecodeError:
+			req.response = response.text
+		req.traceback = e
+		req.status = "Revoked"
+		req.insert(ignore_permissions=True)
+		traceback = f"Remote URL {url}\nPayload: {payload}\nTraceback: {e}"
+		frappe.log_error(message=traceback, title="Cant create session")
+		return auth_base_url, None, None
+
+
+@frappe.whitelist()
+def abdm_request(payload, url_key, req_type, rec_headers=None, to_be_enc=None, patient_name=None):
+	if payload and isinstance(payload, str):
+		payload = json.loads(payload)
+
+	if req_type == "Health ID":
+		url_type = "health_id_base_url"
+
+	base_url = frappe.db.get_value(
+		"ABDM Settings",
+		{"company": frappe.defaults.get_user_default("Company"), "default": 1},
+		[url_type],
+	)
+	if not base_url:
+		frappe.throw(title="Not Configured", msg="Base URL not configured in ABDM Settings!")
+
+	config = get_url(url_key)
+	base_url = base_url.rstrip("/")
+	url = base_url + config.get("url")
+	# Check the abdm_config, if the data need to be encypted, encrypts message
+	# Build payload with encrypted message
+	if config.get("encrypted"):
+		message = payload.get("to_encrypt")
+		encrypted = get_encrypted_message(message)
+		if "encrypted_msg" in encrypted and encrypted["encrypted_msg"]:
+			payload[to_be_enc] = payload.pop("to_encrypt")
+			payload[to_be_enc] = encrypted["encrypted_msg"]
+
+	access_token, token_type = get_authorization_token()
+
+	if not access_token:
+		frappe.throw(
+			title="Authorization Failed",
+			msg="Access token generation for authorization failed, Please try again.",
+		)
+
+	authorization = ("Bearer " if token_type == "bearer" else "") + access_token
+	headers = {
+		"Content-Type": "application/json",
+		"Accept": "application/json",
+		"Authorization": authorization,
+	}
+	if rec_headers:
+		if isinstance(rec_headers, str):
+			rec_headers = json.loads(rec_headers)
+		headers.update(rec_headers)
+	req = frappe.new_doc("ABDM Request")
+	req.status = "Requested"
+	# TODO: skip saving or encrypt the data saved
+	req.request = json.dumps(payload, indent=4)
+	req.url = url
+	req.request_name = url_key
+	try:
+		response = requests.request(
+			method=config.get("method"), url=url, headers=headers, data=json.dumps(payload)
+		)
+		response.raise_for_status()
+		if url_key == "get_card":
+			pdf = response.content
+			_file = frappe.get_doc(
+				{
+					"doctype": "File",
+					"file_name": "abha_card{}.png".format(patient_name),
+					"attached_to_doctype": "Patient",
+					"attached_to_name": patient_name,
+					"attached_to_field": "abha_card",
+					"is_private": 0,
+					"content": pdf,
+				}
+			)
+			_file.save()
+			frappe.db.commit()
+			return _file
+		req.response = json.dumps(response.json(), indent=4)
+		req.status = "Granted"
+		req.insert(ignore_permissions=True)
+		return response.json()
+
+	except Exception as e:
+		req.traceback = e
+		req.response = json.dumps(response.json(), indent=4)
+		req.status = "Revoked"
+		req.insert(ignore_permissions=True)
+		traceback = f"Remote URL {url}\nPayload: {payload}\nTraceback: {e}"
+		frappe.log_error(message=traceback, title="Cant complete API call")
+		return response.json()
+
+
+def get_encrypted_message(message):
+	base_url = frappe.db.get_value(
+		"ABDM Settings",
+		{"company": frappe.defaults.get_user_default("Company"), "default": 1},
+		["health_id_base_url"],
+	)
+
+	config = get_url("auth_cert")
+	url = base_url + config.get("url")
+	req = frappe.new_doc("ABDM Request")
+	req.status = "Requested"
+	req.url = url
+	req.request_name = "auth_cert"
+	try:
+		response = requests.request(
+			method=config.get("method"), url=url, headers={"Content-Type": "application/json"}
+		)
+
+		response.raise_for_status()
+		pub_key = response.text
+		pub_key = (
+			pub_key.replace("\n", "")
+			.replace("-----BEGIN PUBLIC KEY-----", "")
+			.replace("-----END PUBLIC KEY-----", "")
+		)
+		if pub_key:
+			encrypted_msg = get_rsa_encrypted_message(message, pub_key)
+			req.response = encrypted_msg
+			req.status = "Granted"
+		req.insert(ignore_permissions=True)
+		encrypted = {"public_key": pub_key, "encrypted_msg": encrypted_msg}
+		return encrypted
+
+	except Exception as e:
+		req.traceback = e
+		req.response = json.dumps(response.json(), indent=4)
+		req.status = "Revoked"
+		req.insert(ignore_permissions=True)
+		traceback = f"Remote URL {url}\nTraceback: {e}"
+		frappe.log_error(message=traceback, title="Cant complete API call")
+		return None
+
+
+def get_rsa_encrypted_message(message, pub_key):
+	# TODO:- Use cryptography
+	from base64 import b64decode, b64encode
+
+	from Crypto.Cipher import PKCS1_v1_5
+	from Crypto.PublicKey import RSA
+
+	message = bytes(message, "utf-8")
+	pubkey = b64decode(pub_key)
+	rsa_key = RSA.importKey(pubkey)
+	cipher = PKCS1_v1_5.new(rsa_key)
+	ciphertext = cipher.encrypt(message)
+	emsg = b64encode(ciphertext)
+	encrypted_msg = emsg.decode("UTF-8")
+	return encrypted_msg
+
+
+@frappe.whitelist()
+def get_health_data(otp, txnId, auth_method):
+	confirm_w_otp_payload = {"to_encrypt": otp, "txnId": txnId}
+	if auth_method == "AADHAAR_OTP":
+		url_key = "confirm_w_aadhaar_otp"
+	elif auth_method == "MOBILE_OTP":
+		url_key = "confirm_w_mobile_otp"
+	# returns X-Token
+	response = abdm_request(confirm_w_otp_payload, url_key, "Health ID", "", "otp")
+	abha_url = ""
+	if response and response.get("token"):
+		abha_url = get_abha_card(response["token"])
+		header = {"X-Token": "Bearer " + response["token"]}
+		response = abdm_request("", "get_acc_info", "Health ID", header, "")
+	return response, abha_url
+
+
+# patient after_insert
+def set_consent_attachment_details(doc, method=None):
+	if frappe.db.exists(
+		"ABDM Settings",
+		{"company": frappe.defaults.get_user_default("Company"), "default": 1},
+	):
+		if doc.consent_for_aadhaar_use:
+			file_name = frappe.db.get_value("File", {"file_url": doc.consent_for_aadhaar_use}, "name")
+			if file_name:
+				frappe.db.set_value(
+					"File",
+					file_name,
+					{
+						"attached_to_doctype": "Patient",
+						"attached_to_name": doc.name,
+						"attached_to_field": doc.consent_for_aadhaar_use,
+					},
+				)
+		if doc.abha_card:
+			abha_file_name = frappe.db.get_value(
+				"File", {"file_url": doc.abha_card, "attached_to_name": None}, "name"
+			)
+			if abha_file_name:
+				frappe.db.set_value(
+					"File",
+					abha_file_name,
+					{
+						"attached_to_doctype": "Patient",
+						"attached_to_name": doc.name,
+						"attached_to_field": doc.abha_card,
+					},
+				)
+
+
+def get_abha_card(token):
+	header = {"X-Token": "Bearer " + token}
+	response = abdm_request("", "get_card", "Health ID", header, "")
+	return response.get("file_url")
--- /dev/null
+++ b/healthcare/setup.py
@@ -0,0 +1,1584 @@
+# isort: skip_file
+import frappe
+from erpnext.setup.utils import insert_record
+from frappe import _
+
+data = {
+	"desktop_icons": [
+		"Patient",
+		"Patient Appointment",
+		"Patient Encounter",
+		"Lab Test",
+		"Healthcare",
+		"Vital Signs",
+		"Clinical Procedure",
+		"Inpatient Record",
+		"Accounts",
+		"Buying",
+		"Stock",
+		"HR",
+		"ToDo",
+	],
+	"default_portal_role": "Patient",
+	"restricted_roles": [
+		"Healthcare Administrator",
+		"LabTest Approver",
+		"Laboratory User",
+		"Nursing User",
+		"Physician",
+		"Patient",
+	],
+	"custom_fields": {
+		"Sales Invoice": [
+			{
+				"fieldname": "patient",
+				"label": "Patient",
+				"fieldtype": "Link",
+				"options": "Patient",
+				"insert_after": "naming_series",
+			},
+			{
+				"fieldname": "patient_name",
+				"label": "Patient Name",
+				"fieldtype": "Data",
+				"fetch_from": "patient.patient_name",
+				"insert_after": "patient",
+				"read_only": True,
+			},
+			{
+				"fieldname": "ref_practitioner",
+				"label": "Referring Practitioner",
+				"fieldtype": "Link",
+				"options": "Healthcare Practitioner",
+				"insert_after": "customer",
+			},
+			{
+				"fieldname": "service_unit",
+				"label": "Service Unit",
+				"fieldtype": "Link",
+				"options": "Healthcare Service Unit",
+				"insert_after": "customer_name",
+			},
+		],
+		"Sales Invoice Item": [
+			{
+				"fieldname": "reference_dt",
+				"label": "Reference DocType",
+				"fieldtype": "Link",
+				"options": "DocType",
+				"insert_after": "edit_references",
+			},
+			{
+				"fieldname": "reference_dn",
+				"label": "Reference Name",
+				"fieldtype": "Dynamic Link",
+				"options": "reference_dt",
+				"insert_after": "reference_dt",
+			},
+			{
+				"fieldname": "practitioner",
+				"label": "Practitioner",
+				"fieldtype": "Link",
+				"options": "Healthcare Practitioner",
+				"insert_after": "reference_dn",
+				"read_only": True,
+			},
+			{
+				"fieldname": "medical_department",
+				"label": "Medical Department",
+				"fieldtype": "Link",
+				"options": "Medical Department",
+				"insert_after": "delivered_qty",
+				"read_only": True,
+			},
+			{
+				"fieldname": "service_unit",
+				"label": "Service Unit",
+				"fieldtype": "Link",
+				"options": "Healthcare Service Unit",
+				"insert_after": "medical_department",
+				"read_only": True,
+			},
+		],
+		"Stock Entry": [
+			{
+				"fieldname": "inpatient_medication_entry",
+				"label": "Inpatient Medication Entry",
+				"fieldtype": "Link",
+				"options": "Inpatient Medication Entry",
+				"insert_after": "credit_note",
+				"read_only": True,
+			}
+		],
+		"Stock Entry Detail": [
+			{
+				"fieldname": "patient",
+				"label": "Patient",
+				"fieldtype": "Link",
+				"options": "Patient",
+				"insert_after": "po_detail",
+				"read_only": True,
+			},
+			{
+				"fieldname": "inpatient_medication_entry_child",
+				"label": "Inpatient Medication Entry Child",
+				"fieldtype": "Data",
+				"insert_after": "patient",
+				"read_only": True,
+			},
+		],
+	},
+	"on_setup": "healthcare.setup.setup_healthcare",
+}
+
+
+def setup_healthcare():
+	if frappe.db.exists("Medical Department", "Cardiology"):
+		# already setup
+		return
+
+	from healthcare.regional.india.abdm.setup import setup as abdm_setup
+
+	abdm_setup()
+
+	create_custom_records()
+	create_default_root_service_units()
+
+	setup_domain()
+
+	frappe.clear_cache()
+
+
+def setup_domain():
+	"""
+	Setup custom fields, properties, roles etc.
+	Add Healthcare to active domains in Domain Settings
+	"""
+	domain = frappe.get_doc("Domain", "Healthcare")
+	domain.setup_domain()
+
+	# update active domains
+	if "Healthcare" not in frappe.get_active_domains():
+		has_domain = frappe.get_doc(
+			{
+				"doctype": "Has Domain",
+				"parent": "Domain Settings",
+				"parentfield": "active_domains",
+				"parenttype": "Domain Settings",
+				"domain": "Healthcare",
+			}
+		)
+		has_domain.save()
+
+
+def before_uninstall():
+	"""
+	Remove Custom Fields, portal menu items, domain
+	"""
+	delete_custom_records()
+	remove_portal_settings_menu_items()
+
+	domain = frappe.get_doc("Domain", "Healthcare")
+	domain.remove_domain()
+
+	remove_from_active_domains()
+
+	frappe.clear_cache()
+
+
+def create_default_root_service_units():
+	from healthcare.healthcare.utils import create_healthcare_service_unit_tree_root
+
+	companies = frappe.get_all("Company")
+	for company in companies:
+		create_healthcare_service_unit_tree_root(company)
+
+
+def create_custom_records():
+	create_medical_departments()
+	create_antibiotics()
+	create_lab_test_uom()
+	create_duration()
+	create_dosage()
+	create_dosage_form()
+	create_healthcare_item_groups()
+	create_sensitivity()
+	setup_patient_history_settings()
+	setup_service_request_masters()
+	setup_order_status_codes()
+
+
+def create_medical_departments():
+	departments = [
+		"Accident And Emergency Care",
+		"Anaesthetics",
+		"Biochemistry",
+		"Cardiology",
+		"Diabetology",
+		"Dermatology",
+		"Diagnostic Imaging",
+		"ENT",
+		"Gastroenterology",
+		"General Surgery",
+		"Gynaecology",
+		"Haematology",
+		"Maternity",
+		"Microbiology",
+		"Nephrology",
+		"Neurology",
+		"Oncology",
+		"Orthopaedics",
+		"Pathology",
+		"Physiotherapy",
+		"Rheumatology",
+		"Serology",
+		"Urology",
+	]
+	for department in departments:
+		mediacal_department = frappe.new_doc("Medical Department")
+		mediacal_department.department = _(department)
+		try:
+			mediacal_department.save()
+		except frappe.DuplicateEntryError:
+			pass
+
+
+def create_antibiotics():
+	abt = [
+		"Amoxicillin",
+		"Ampicillin",
+		"Bacampicillin",
+		"Carbenicillin",
+		"Cloxacillin",
+		"Dicloxacillin",
+		"Flucloxacillin",
+		"Mezlocillin",
+		"Nafcillin",
+		"Oxacillin",
+		"Penicillin G",
+		"Penicillin V",
+		"Piperacillin",
+		"Pivampicillin",
+		"Pivmecillinam",
+		"Ticarcillin",
+		"Cefacetrile (cephacetrile)",
+		"Cefadroxil (cefadroxyl)",
+		"Cefalexin (cephalexin)",
+		"Cefaloglycin (cephaloglycin)",
+		"Cefalonium (cephalonium)",
+		"Cefaloridine (cephaloradine)",
+		"Cefalotin (cephalothin)",
+		"Cefapirin (cephapirin)",
+		"Cefatrizine",
+		"Cefazaflur",
+		"Cefazedone",
+		"Cefazolin (cephazolin)",
+		"Cefradine (cephradine)",
+		"Cefroxadine",
+		"Ceftezole",
+		"Cefaclor",
+		"Cefamandole",
+		"Cefmetazole",
+		"Cefonicid",
+		"Cefotetan",
+		"Cefoxitin",
+		"Cefprozil (cefproxil)",
+		"Cefuroxime",
+		"Cefuzonam",
+		"Cefcapene",
+		"Cefdaloxime",
+		"Cefdinir",
+		"Cefditoren",
+		"Cefetamet",
+		"Cefixime",
+		"Cefmenoxime",
+		"Cefodizime",
+		"Cefotaxime",
+		"Cefpimizole",
+		"Cefpodoxime",
+		"Cefteram",
+		"Ceftibuten",
+		"Ceftiofur",
+		"Ceftiolene",
+		"Ceftizoxime",
+		"Ceftriaxone",
+		"Cefoperazone",
+		"Ceftazidime",
+		"Cefclidine",
+		"Cefepime",
+		"Cefluprenam",
+		"Cefoselis",
+		"Cefozopran",
+		"Cefpirome",
+		"Cefquinome",
+		"Ceftobiprole",
+		"Ceftaroline",
+		"Cefaclomezine",
+		"Cefaloram",
+		"Cefaparole",
+		"Cefcanel",
+		"Cefedrolor",
+		"Cefempidone",
+		"Cefetrizole",
+		"Cefivitril",
+		"Cefmatilen",
+		"Cefmepidium",
+		"Cefovecin",
+		"Cefoxazole",
+		"Cefrotil",
+		"Cefsumide",
+		"Cefuracetime",
+		"Ceftioxide",
+		"Ceftazidime/Avibactam",
+		"Ceftolozane/Tazobactam",
+		"Aztreonam",
+		"Imipenem",
+		"Imipenem/cilastatin",
+		"Doripenem",
+		"Meropenem",
+		"Ertapenem",
+		"Azithromycin",
+		"Erythromycin",
+		"Clarithromycin",
+		"Dirithromycin",
+		"Roxithromycin",
+		"Telithromycin",
+		"Clindamycin",
+		"Lincomycin",
+		"Pristinamycin",
+		"Quinupristin/dalfopristin",
+		"Amikacin",
+		"Gentamicin",
+		"Kanamycin",
+		"Neomycin",
+		"Netilmicin",
+		"Paromomycin",
+		"Streptomycin",
+		"Tobramycin",
+		"Flumequine",
+		"Nalidixic acid",
+		"Oxolinic acid",
+		"Piromidic acid",
+		"Pipemidic acid",
+		"Rosoxacin",
+		"Ciprofloxacin",
+		"Enoxacin",
+		"Lomefloxacin",
+		"Nadifloxacin",
+		"Norfloxacin",
+		"Ofloxacin",
+		"Pefloxacin",
+		"Rufloxacin",
+		"Balofloxacin",
+		"Gatifloxacin",
+		"Grepafloxacin",
+		"Levofloxacin",
+		"Moxifloxacin",
+		"Pazufloxacin",
+		"Sparfloxacin",
+		"Temafloxacin",
+		"Tosufloxacin",
+		"Besifloxacin",
+		"Clinafloxacin",
+		"Gemifloxacin",
+		"Sitafloxacin",
+		"Trovafloxacin",
+		"Prulifloxacin",
+		"Sulfamethizole",
+		"Sulfamethoxazole",
+		"Sulfisoxazole",
+		"Trimethoprim-Sulfamethoxazole",
+		"Demeclocycline",
+		"Doxycycline",
+		"Minocycline",
+		"Oxytetracycline",
+		"Tetracycline",
+		"Tigecycline",
+		"Chloramphenicol",
+		"Metronidazole",
+		"Tinidazole",
+		"Nitrofurantoin",
+		"Vancomycin",
+		"Teicoplanin",
+		"Telavancin",
+		"Linezolid",
+		"Cycloserine 2",
+		"Rifampin",
+		"Rifabutin",
+		"Rifapentine",
+		"Rifalazil",
+		"Bacitracin",
+		"Polymyxin B",
+		"Viomycin",
+		"Capreomycin",
+	]
+
+	for a in abt:
+		antibiotic = frappe.new_doc("Antibiotic")
+		antibiotic.antibiotic_name = a
+		try:
+			antibiotic.save()
+		except frappe.DuplicateEntryError:
+			pass
+
+
+def create_lab_test_uom():
+	records = [
+		{"doctype": "Lab Test UOM", "name": "umol/L", "lab_test_uom": "umol/L", "uom_description": None},
+		{"doctype": "Lab Test UOM", "name": "mg/L", "lab_test_uom": "mg/L", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "mg / dl",
+			"lab_test_uom": "mg / dl",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "pg / ml",
+			"lab_test_uom": "pg / ml",
+			"uom_description": None,
+		},
+		{"doctype": "Lab Test UOM", "name": "U/ml", "lab_test_uom": "U/ml", "uom_description": None},
+		{"doctype": "Lab Test UOM", "name": "/HPF", "lab_test_uom": "/HPF", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "Million Cells / cumm",
+			"lab_test_uom": "Million Cells / cumm",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "Lakhs Cells / cumm",
+			"lab_test_uom": "Lakhs Cells / cumm",
+			"uom_description": None,
+		},
+		{"doctype": "Lab Test UOM", "name": "U / L", "lab_test_uom": "U / L", "uom_description": None},
+		{"doctype": "Lab Test UOM", "name": "g / L", "lab_test_uom": "g / L", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "IU / ml",
+			"lab_test_uom": "IU / ml",
+			"uom_description": None,
+		},
+		{"doctype": "Lab Test UOM", "name": "gm %", "lab_test_uom": "gm %", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "Microgram",
+			"lab_test_uom": "Microgram",
+			"uom_description": None,
+		},
+		{"doctype": "Lab Test UOM", "name": "Micron", "lab_test_uom": "Micron", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "Cells / cumm",
+			"lab_test_uom": "Cells / cumm",
+			"uom_description": None,
+		},
+		{"doctype": "Lab Test UOM", "name": "%", "lab_test_uom": "%", "uom_description": None},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "mm / dl",
+			"lab_test_uom": "mm / dl",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "mm / hr",
+			"lab_test_uom": "mm / hr",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "ulU / ml",
+			"lab_test_uom": "ulU / ml",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "ng / ml",
+			"lab_test_uom": "ng / ml",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "ng / dl",
+			"lab_test_uom": "ng / dl",
+			"uom_description": None,
+		},
+		{
+			"doctype": "Lab Test UOM",
+			"name": "ug / dl",
+			"lab_test_uom": "ug / dl",
+			"uom_description": None,
+		},
+	]
+
+	insert_record(records)
+
+
+def create_duration():
+	records = [
+		{"doctype": "Prescription Duration", "name": "3 Month", "number": "3", "period": "Month"},
+		{"doctype": "Prescription Duration", "name": "2 Month", "number": "2", "period": "Month"},
+		{"doctype": "Prescription Duration", "name": "1 Month", "number": "1", "period": "Month"},
+		{"doctype": "Prescription Duration", "name": "12 Hour", "number": "12", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "11 Hour", "number": "11", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "10 Hour", "number": "10", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "9 Hour", "number": "9", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "8 Hour", "number": "8", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "7 Hour", "number": "7", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "6 Hour", "number": "6", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "5 Hour", "number": "5", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "4 Hour", "number": "4", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "3 Hour", "number": "3", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "2 Hour", "number": "2", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "1 Hour", "number": "1", "period": "Hour"},
+		{"doctype": "Prescription Duration", "name": "5 Week", "number": "5", "period": "Week"},
+		{"doctype": "Prescription Duration", "name": "4 Week", "number": "4", "period": "Week"},
+		{"doctype": "Prescription Duration", "name": "3 Week", "number": "3", "period": "Week"},
+		{"doctype": "Prescription Duration", "name": "2 Week", "number": "2", "period": "Week"},
+		{"doctype": "Prescription Duration", "name": "1 Week", "number": "1", "period": "Week"},
+		{"doctype": "Prescription Duration", "name": "6 Day", "number": "6", "period": "Day"},
+		{"doctype": "Prescription Duration", "name": "5 Day", "number": "5", "period": "Day"},
+		{"doctype": "Prescription Duration", "name": "4 Day", "number": "4", "period": "Day"},
+		{"doctype": "Prescription Duration", "name": "3 Day", "number": "3", "period": "Day"},
+		{"doctype": "Prescription Duration", "name": "2 Day", "number": "2", "period": "Day"},
+		{"doctype": "Prescription Duration", "name": "1 Day", "number": "1", "period": "Day"},
+	]
+	insert_record(records)
+
+
+def create_dosage():
+	records = [
+		{
+			"doctype": "Prescription Dosage",
+			"name": "1-1-1-1",
+			"dosage": "1-1-1-1",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "13:00:00"},
+				{"strength": "1.0", "strength_time": "17:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "0-0-1",
+			"dosage": "0-0-1",
+			"dosage_strength": [{"strength": "1.0", "strength_time": "21:00:00"}],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "1-0-0",
+			"dosage": "1-0-0",
+			"dosage_strength": [{"strength": "1.0", "strength_time": "9:00:00"}],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "0-1-0",
+			"dosage": "0-1-0",
+			"dosage_strength": [{"strength": "1.0", "strength_time": "14:00:00"}],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "1-1-1",
+			"dosage": "1-1-1",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "14:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "1-0-1",
+			"dosage": "1-0-1",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "Once Bedtime",
+			"dosage": "Once Bedtime",
+			"dosage_strength": [{"strength": "1.0", "strength_time": "21:00:00"}],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "5 times a day",
+			"dosage": "5 times a day",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "5:00:00"},
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "13:00:00"},
+				{"strength": "1.0", "strength_time": "17:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "QID",
+			"dosage": "QID",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "13:00:00"},
+				{"strength": "1.0", "strength_time": "17:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "TID",
+			"dosage": "TID",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "14:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "BID",
+			"dosage": "BID",
+			"dosage_strength": [
+				{"strength": "1.0", "strength_time": "9:00:00"},
+				{"strength": "1.0", "strength_time": "21:00:00"},
+			],
+		},
+		{
+			"doctype": "Prescription Dosage",
+			"name": "Once Daily",
+			"dosage": "Once Daily",
+			"dosage_strength": [{"strength": "1.0", "strength_time": "9:00:00"}],
+		},
+	]
+	insert_record(records)
+
+
+def create_dosage_form():
+	records = [
+		{
+			"doctype": "Dosage Form",
+			"dosage_form": "Tablet",
+		},
+		{
+			"doctype": "Dosage Form",
+			"dosage_form": "Syrup",
+		},
+		{
+			"doctype": "Dosage Form",
+			"dosage_form": "Injection",
+		},
+		{
+			"doctype": "Dosage Form",
+			"dosage_form": "Capsule",
+		},
+		{
+			"doctype": "Dosage Form",
+			"dosage_form": "Cream",
+		},
+	]
+	insert_record(records)
+
+
+def create_healthcare_item_groups():
+	item_group = {
+		"doctype": "Item Group",
+		"item_group_name": _("All Item Groups"),
+		"is_group": 1,
+		"parent_item_group": "",
+	}
+	if not frappe.db.exists(item_group["doctype"], item_group["item_group_name"]):
+		insert_record([item_group])
+
+	records = get_item_group_records()
+	insert_record(records)
+
+
+def get_item_group_records():
+	return [
+		{
+			"doctype": "Item Group",
+			"item_group_name": _("Laboratory"),
+			"name": _("Laboratory"),
+			"is_group": 0,
+			"parent_item_group": _("All Item Groups"),
+		},
+		{
+			"doctype": "Item Group",
+			"item_group_name": _("Drug"),
+			"name": _("Drug"),
+			"is_group": 0,
+			"parent_item_group": _("All Item Groups"),
+		},
+	]
+
+
+def create_sensitivity():
+	records = [
+		{"doctype": "Sensitivity", "sensitivity": _("Low Sensitivity")},
+		{"doctype": "Sensitivity", "sensitivity": _("High Sensitivity")},
+		{"doctype": "Sensitivity", "sensitivity": _("Moderate Sensitivity")},
+		{"doctype": "Sensitivity", "sensitivity": _("Susceptible")},
+		{"doctype": "Sensitivity", "sensitivity": _("Resistant")},
+		{"doctype": "Sensitivity", "sensitivity": _("Intermediate")},
+	]
+	insert_record(records)
+
+
+def setup_patient_history_settings():
+	import json
+
+	settings = frappe.get_single("Patient History Settings")
+	configuration = get_patient_history_config()
+	for dt, config in configuration.items():
+		settings.append(
+			"standard_doctypes",
+			{"document_type": dt, "date_fieldname": config[0], "selected_fields": json.dumps(config[1])},
+		)
+	settings.save()
+
+
+def setup_service_request_masters():
+	records = [
+		{"doctype": "Patient Care Type", "patient_care_type": _("Preventive")},
+		{"doctype": "Patient Care Type", "patient_care_type": _("Intervention")},
+		{"doctype": "Patient Care Type", "patient_care_type": _("Diagnostic")},
+		{
+			"doctype": "Code System",
+			"uri": "http://hl7.org/fhir/request-intent",
+			"is_fhir_defined": 1,
+			"code_system": _("Intent"),
+			"description": _(
+				"Codes indicating the degree of authority/intentionality associated with a request."
+			),
+			"oid": "2.16.840.1.113883.4.642.4.114",
+			"experimental": 1,
+			"immutable": 1,
+			"custom": 0,
+		},
+		{
+			"doctype": "Code System",
+			"uri": "http://hl7.org/fhir/request-priority",
+			"is_fhir_defined": 1,
+			"code_system": _("Priority"),
+			"description": _("Identifies the level of importance to be assigned to actioning the request."),
+			"oid": "2.16.840.1.113883.4.642.4.116",
+			"experimental": 1,
+			"immutable": 1,
+			"custom": 0,
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Order"),
+			"definition": _(
+				"The request represents a request/demand and authorization for action by the requestor."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Proposal"),
+			"definition": _(
+				"The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Plan"),
+			"definition": _(
+				"The request represents an intention to ensure something occurs without providing an authorization for others to act."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Directive"),
+			"definition": _(
+				"The request represents a legally binding instruction authored by a Patient or RelatedPerson."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Original Order"),
+			"definition": _("The request represents an original authorization for action."),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Reflex Order"),
+			"definition": _(
+				"The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Filler Order"),
+			"definition": _(
+				"The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Instance Order"),
+			"definition": _(
+				"An order created in fulfillment of a broader order that represents the authorization for a single activity occurrence. E.g. The administration of a single dose of a drug."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Intent",
+			"code_value": _("Option"),
+			"definition": _(
+				"The request represents a component or option for a RequestOrchestration that establishes timing, conditionality and/or other constraints among a set of requests."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-intent",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Priority",
+			"code_value": _("Routine"),
+			"definition": _("The request has normal priority."),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-priority",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Priority",
+			"code_value": _("Urgent"),
+			"definition": _("The request should be actioned promptly - higher priority than routine."),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-priority",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Priority",
+			"code_value": _("ASAP"),
+			"definition": _(
+				"The request should be actioned as soon as possible - higher priority than urgent."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-priority",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": "Priority",
+			"code_value": _("STAT"),
+			"definition": _(
+				"The request should be actioned immediately - highest possible priority. E.g. an emergency."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-priority",
+		},
+	]
+	insert_record(records)
+
+
+def get_patient_history_config():
+	return {
+		"Patient Encounter": (
+			"encounter_date",
+			[
+				{"label": "Healthcare Practitioner", "fieldname": "practitioner", "fieldtype": "Link"},
+				{"label": "Symptoms", "fieldname": "symptoms", "fieldtype": "Table Multiselect"},
+				{"label": "Diagnosis", "fieldname": "diagnosis", "fieldtype": "Table Multiselect"},
+				{"label": "Drug Prescription", "fieldname": "drug_prescription", "fieldtype": "Table"},
+				{"label": "Lab Tests", "fieldname": "lab_test_prescription", "fieldtype": "Table"},
+				{"label": "Clinical Procedures", "fieldname": "procedure_prescription", "fieldtype": "Table"},
+				{"label": "Therapies", "fieldname": "therapies", "fieldtype": "Table"},
+				{"label": "Review Details", "fieldname": "encounter_comment", "fieldtype": "Small Text"},
+			],
+		),
+		"Clinical Procedure": (
+			"start_date",
+			[
+				{"label": "Procedure Template", "fieldname": "procedure_template", "fieldtype": "Link"},
+				{"label": "Healthcare Practitioner", "fieldname": "practitioner", "fieldtype": "Link"},
+				{"label": "Notes", "fieldname": "notes", "fieldtype": "Small Text"},
+				{"label": "Service Unit", "fieldname": "service_unit", "fieldtype": "Healthcare Service Unit"},
+				{"label": "Start Time", "fieldname": "start_time", "fieldtype": "Time"},
+				{"label": "Sample", "fieldname": "sample", "fieldtype": "Link"},
+			],
+		),
+		"Lab Test": (
+			"result_date",
+			[
+				{"label": "Test Template", "fieldname": "template", "fieldtype": "Link"},
+				{"label": "Healthcare Practitioner", "fieldname": "practitioner", "fieldtype": "Link"},
+				{"label": "Test Name", "fieldname": "lab_test_name", "fieldtype": "Data"},
+				{"label": "Lab Technician Name", "fieldname": "employee_name", "fieldtype": "Data"},
+				{"label": "Sample ID", "fieldname": "sample", "fieldtype": "Link"},
+				{"label": "Normal Test Result", "fieldname": "normal_test_items", "fieldtype": "Table"},
+				{
+					"label": "Descriptive Test Result",
+					"fieldname": "descriptive_test_items",
+					"fieldtype": "Table",
+				},
+				{"label": "Organism Test Result", "fieldname": "organism_test_items", "fieldtype": "Table"},
+				{
+					"label": "Sensitivity Test Result",
+					"fieldname": "sensitivity_test_items",
+					"fieldtype": "Table",
+				},
+				{"label": "Comments", "fieldname": "lab_test_comment", "fieldtype": "Table"},
+			],
+		),
+		"Therapy Session": (
+			"start_date",
+			[
+				{"label": "Therapy Type", "fieldname": "therapy_type", "fieldtype": "Link"},
+				{"label": "Healthcare Practitioner", "fieldname": "practitioner", "fieldtype": "Link"},
+				{"label": "Therapy Plan", "fieldname": "therapy_plan", "fieldtype": "Link"},
+				{"label": "Duration", "fieldname": "duration", "fieldtype": "Int"},
+				{"label": "Location", "fieldname": "location", "fieldtype": "Link"},
+				{"label": "Healthcare Service Unit", "fieldname": "service_unit", "fieldtype": "Link"},
+				{"label": "Start Time", "fieldname": "start_time", "fieldtype": "Time"},
+				{"label": "Exercises", "fieldname": "exercises", "fieldtype": "Table"},
+				{"label": "Total Counts Targeted", "fieldname": "total_counts_targeted", "fieldtype": "Int"},
+				{"label": "Total Counts Completed", "fieldname": "total_counts_completed", "fieldtype": "Int"},
+			],
+		),
+		"Vital Signs": (
+			"signs_date",
+			[
+				{"label": "Body Temperature", "fieldname": "temperature", "fieldtype": "Data"},
+				{"label": "Heart Rate / Pulse", "fieldname": "pulse", "fieldtype": "Data"},
+				{"label": "Respiratory rate", "fieldname": "respiratory_rate", "fieldtype": "Data"},
+				{"label": "Tongue", "fieldname": "tongue", "fieldtype": "Select"},
+				{"label": "Abdomen", "fieldname": "abdomen", "fieldtype": "Select"},
+				{"label": "Reflexes", "fieldname": "reflexes", "fieldtype": "Select"},
+				{"label": "Blood Pressure", "fieldname": "bp", "fieldtype": "Data"},
+				{"label": "Notes", "fieldname": "vital_signs_note", "fieldtype": "Small Text"},
+				{"label": "Height (In Meter)", "fieldname": "height", "fieldtype": "Float"},
+				{"label": "Weight (In Kilogram)", "fieldname": "weight", "fieldtype": "Float"},
+				{"label": "BMI", "fieldname": "bmi", "fieldtype": "Float"},
+			],
+		),
+		"Inpatient Medication Order": (
+			"start_date",
+			[
+				{"label": "Healthcare Practitioner", "fieldname": "practitioner", "fieldtype": "Link"},
+				{"label": "Start Date", "fieldname": "start_date", "fieldtype": "Date"},
+				{"label": "End Date", "fieldname": "end_date", "fieldtype": "Date"},
+				{"label": "Medication Orders", "fieldname": "medication_orders", "fieldtype": "Table"},
+				{"label": "Total Orders", "fieldname": "total_orders", "fieldtype": "Float"},
+			],
+		),
+	}
+
+
+def setup_code_sysem_for_version():
+	records = [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/ValueSet/version-algorithm",
+			"code_system": _("FHIRVersion"),
+			"description": _(
+				"""Indicates the mechanism used to compare versions to determine which is more current."""
+			),
+			"oid": "2.16.840.1.113883.4.642.3.3103",
+			"experimental": 1,
+			"immutable": 1,
+			"custom": 0,
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("FHIRVersion"),
+			"code_value": "5.0.0",
+			"display": _("5.0.0"),
+		},
+	]
+	insert_record(records)
+
+
+def setup_non_fhir_code_systems():
+	"""A subset of external code systems as published in the FHIR R5 documentation
+	https://www.hl7.org/fhir/terminologies-systems.html#external
+
+	For a full set of external code systems, see
+	https://terminology.hl7.org/external_terminologies.html
+	"""
+	code_systems = [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://snomed.info/sct",
+			"code_system": _("SNOMED CT"),
+			"description": _(
+				"""Using SNOMED CT with HL7 Standards. https://terminology.hl7.org/SNOMEDCT.html
+				See also the SNOMED CT Usage Summary (link below) which summarizes the use of SNOMED CT in the base FHIR Specification.
+				https://www.hl7.org/fhir/snomedct-usage.html"""
+			),
+			"oid": "2.16.840.1.113883.6.96",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://www.nlm.nih.gov/research/umls/rxnorm",
+			"code_system": _("RxNorm"),
+			"description": _("Using RxNorm with HL7 Standards. https://terminology.hl7.org/RxNorm.html"),
+			"oid": "2.16.840.1.113883.6.88",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://loinc.org",
+			"code_system": _("LOINC"),
+			"description": _("Using LOINC with HL7 Standards. https://terminology.hl7.org/LOINC.html"),
+			"oid": "2.16.840.1.113883.6.1",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://unitsofmeasure.org",
+			"code_system": _("pCLUCUMOCD"),
+			"description": _("Using UCUM with HL7 Standards. https://terminology.hl7.org/UCUM.html"),
+			"oid": "2.16.840.1.113883.6.8",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/sid/icd-9-cm",
+			"code_system": _("ICD-9-CM (clinical codes)"),
+			"description": _("Using ICD-[x] with HL7 Standards. https://terminology.hl7.org/ICD.html"),
+			"oid": "2.16.840.1.113883.6.103",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/sid/icd-9-cm",
+			"code_system": _("ICD-9-CM (procedure codes)"),
+			"description": _("Using ICD-[x] with HL7 Standards. https://terminology.hl7.org/ICD.html"),
+			"oid": "2.16.840.1.113883.6.104",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/sid/icd-10-cm",
+			"code_system": _("ICD-10-CM (United States)"),
+			"description": _("Using ICD-[x] with HL7 Standards. https://terminology.hl7.org/ICD.html"),
+			"oid": "2.16.840.1.113883.6.90",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+			"version": "5.0.0-FHIRVersion",
+		},
+	]
+	insert_record(code_systems)
+
+
+def setup_fhir_code_systems():
+	code_systems = [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 1,
+			"uri": "http://hl7.org/fhir/FHIR-version",
+			"code_system": _("FHIRVersion"),
+			"description": _("All published FHIR Versions."),
+			"oid": "2.16.840.1.113883.4.642.4.1310",
+			"experimental": 0,
+			"immutable": 0,
+			"custom": 0,
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 1,
+			"uri": "http://hl7.org/fhir/publication-status",
+			"code_system": _("PublicationStatus"),
+			"description": _("The lifecycle status of an artifact."),
+			"oid": "22.16.840.1.113883.4.642.3.3",
+			"experimental": 0,
+			"immutable": 1,
+			"custom": 0,
+		},
+	]
+	insert_record(code_systems)
+
+
+def setup_diagnostic_module_codes():
+	records = []
+
+	records.extend(get_diagnostic_module_code_systems())
+	records.extend(get_observation_category_codes())
+	records.extend(get_observation_status_codes())
+
+	# TODO: insert observation methods
+	insert_record(records)
+
+
+def get_diagnostic_module_code_systems():
+	return [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://terminology.hl7.org/CodeSystem/observation-category",
+			"code_system": _("ObservationCategory"),
+			"description": _("Observation Category codes."),
+			"oid": "2.16.840.1.113883.4.642.1.1125",
+			"experimental": 1,
+			"immutable": 0,
+			"custom": 0,
+		},
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 1,
+			"uri": "http://hl7.org/fhir/observation-status",
+			"code_system": _("ObservationStatus"),
+			"description": _("Codes providing the status of an observation."),
+			"version": "5.0.0-FHIRVersion",
+			"oid": "2.16.840.1.113883.4.642.4.401",
+			"experimental": 0,
+			"immutable": 0,
+			"complete": 1,
+			"custom": 0,
+		},
+	]
+
+
+def get_observation_category_codes():
+	return [
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "social-history",
+			"display": _("Social History"),
+			"definition": _(
+				"Social History Observations define the patient's occupational, personal (e.g., lifestyle), social, familial, and environmental history and health risk factors that may impact the patient's health."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "vital-signs",
+			"display": _("Vital Signs"),
+			"definition": _(
+				"Clinical observations measure the body's basic functions such as blood pressure, heart rate, respiratory rate, height, weight, body mass index, head circumference, pulse oximetry, temperature, and body surface area."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "imaging",
+			"display": _("Imaging"),
+			"definition": _(
+				"Observations generated by imaging. The scope includes observations regarding plain x-ray, ultrasound, CT, MRI, angiography, echocardiography, and nuclear medicine."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "laboratory",
+			"display": _("Laboratory"),
+			"definition": _(
+				"The results of observations generated by laboratories. Laboratory results are typically generated by laboratories providing analytic services in areas such as chemistry, hematology, serology, histology, cytology, anatomic pathology (including digital pathology), microbiology, and/or virology. These observations are based on analysis of specimens obtained from the patient and submitted to the laboratory."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "procedure",
+			"display": _("Procedure"),
+			"definition": _(
+				"Observations generated by other procedures. This category includes observations resulting from interventional and non-interventional procedures excluding laboratory and imaging (e.g., cardiology catheterization, endoscopy, electrodiagnostics, etc.). Procedure results are typically generated by a clinician to provide more granular information about component observations made during a procedure. An example would be when a gastroenterologist reports the size of a polyp observed during a colonoscopy."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "survey",
+			"display": _("Survey"),
+			"definition": _(
+				"Assessment tool/survey instrument observations (e.g., Apgar Scores, Montreal Cognitive Assessment (MoCA))."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "exam",
+			"display": _("Exam"),
+			"definition": _(
+				"Observations generated by physical exam findings including direct observations made by a clinician and use of simple instruments and the result of simple maneuvers performed directly on the patient's body."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "therapy",
+			"display": _("Therapy"),
+			"definition": _(
+				"Observations generated by non-interventional treatment protocols (e.g. occupational, physical, radiation, nutritional and medication therapy)"
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Category"),
+			"code_value": "activity",
+			"display": _("Activity"),
+			"definition": _(
+				"Observations that measure or record any bodily activity that enhances or maintains physical fitness and overall health and wellness. Not under direct supervision of practitioner such as a physical therapist. (e.g., laps swum, steps, sleep data)"
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-category",
+		},
+	]
+
+
+def get_observation_status_codes():
+	# TODO: Add field for canonical mapping to Resource Status
+	return [
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "registered",
+			"display": _("Registered"),
+			"definition": _(
+				"Observations that measure or record any bodily activity that enhances or maintains physical fitness and overall health and wellness. Not under direct supervision of practitioner such as a physical therapist. (e.g., laps swum, steps, sleep data.)"
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "preliminary",
+			"display": _("Preliminary"),
+			"definition": _(
+				"This is an initial or interim observation: data may be incomplete or unverified."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "final",
+			"display": _("Final"),
+			"definition": _("The observation is complete and there are no further actions needed.)"),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "amended",
+			"display": _("Amended"),
+			"definition": _(
+				"Subsequent to being Final, the observation has been modified subsequent. This includes updates/new information and corrections."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "corrected",
+			"display": _("Corrected"),
+			"definition": _(
+				"Subsequent to being Final, the observation has been modified to correct an error in the test result."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "cancelled",
+			"display": _("Cancelled"),
+			"definition": _(
+				"The observation is unavailable because the measurement was not started or not completed (also sometimes called 'aborted')."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "entered-in-error",
+			"display": _("Entered in Error"),
+			"definition": _(
+				"The observation has been withdrawn following previous final release. This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be 'cancelled' rather than 'entered-in-error'.)."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Observation Status"),
+			"code_value": "unknown",
+			"display": _("Unknown"),
+			"definition": _(
+				"The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, but the authoring/source system does not know which."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/observation-status",
+			"version": "6.0.0-cibuild",
+		},
+	]
+
+
+def setup_order_status_codes():
+	sr_code_systems = get_service_request_code_systems()
+	insert_record(sr_code_systems)
+	service_request_codes = get_service_request_codes()
+	insert_record(service_request_codes)
+
+	mr_code_systems = get_medication_request_code_systems()
+	insert_record(mr_code_systems)
+	medication_request_codes = get_medication_request_codes()
+	insert_record(medication_request_codes)
+
+
+def get_service_request_code_systems():
+	return [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/request-status",
+			"code_system": _("Request Status"),
+			"description": _("Request Status Codes."),
+			"oid": "2.16.840.1.113883.4.642.4.112",
+			"experimental": 1,
+			"immutable": 0,
+			"custom": 0,
+		},
+	]
+
+
+def get_medication_request_code_systems():
+	return [
+		{
+			"doctype": "Code System",
+			"is_fhir_defined": 0,
+			"uri": "http://hl7.org/fhir/CodeSystem/medicationrequest-status",
+			"code_system": _("Medication Request Status"),
+			"description": _("Medication Request Status Codes."),
+			"oid": "2.16.840.1.113883.4.642.4.1377",
+			"experimental": 1,
+			"immutable": 0,
+			"custom": 0,
+		},
+	]
+
+
+def get_service_request_codes():
+	return [
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "draft",
+			"display": _("Draft"),
+			"definition": _("The request has been created but is not yet complete or ready for action."),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "active",
+			"display": _("Active"),
+			"definition": _("The request is in force and ready to be acted upon."),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "on-hold",
+			"display": _("On Hold"),
+			"definition": _(
+				"The request (and any implicit authorization to act) has been temporarily withdrawn but is expected to resume in the future."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "revoked",
+			"display": _("Revoked"),
+			"definition": _(
+				"The request (and any implicit authorization to act) has been terminated prior to the known full completion of the intended actions. No further activity should occur."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "completed",
+			"display": _("Completed"),
+			"definition": _(
+				"The activity described by the request has been fully performed. No further activity will occur."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "entered-in-error",
+			"display": _("Entered in Error"),
+			"definition": _(
+				"This request should never have existed and should be considered 'void'. (It is possible that real-world decisions were based on it. If real-world activity has occurred, the status should be 'revoked' rather than 'entered-in-error'.)."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Request Status"),
+			"code_value": "unknown",
+			"display": _("Unknown"),
+			"definition": _(
+				"The authoring/source system does not know which of the status values currently applies for this request. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, but the authoring/source system does not know which."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/request-status",
+		},
+	]
+
+
+def get_medication_request_codes():
+	return [
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "active",
+			"display": _("Active"),
+			"definition": _(
+				"The request is 'actionable', but not all actions that are implied by it have occurred yet."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "on-hold",
+			"display": _("On Hold"),
+			"definition": _(
+				"Actions implied by the request are to be temporarily halted. The request might or might not be resumed. May also be called 'suspended'."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "ended",
+			"display": _("Ended"),
+			"definition": _(
+				"The request is no longer active and the subject should no longer be taking the medication."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "stopped",
+			"display": _("Stopped"),
+			"definition": _(
+				"Actions implied by the request are to be permanently halted, before all of the administrations occurred. This should not be used if the original order was entered in error"
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "completed",
+			"display": _("Completed"),
+			"definition": _("All actions that are implied by the request have occurred."),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "cancelled",
+			"display": _("Cancelled"),
+			"definition": _("The request has been withdrawn before any administrations have occurred"),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "entered-in-error",
+			"display": _("Entered in Error"),
+			"definition": _(
+				"The request was recorded against the wrong patient or for some reason should not have been recorded (e.g. wrong medication, wrong dose, etc.). Some of the actions that are implied by the medication request may have occurred. For example, the medication may have been dispensed and the patient may have taken some of the medication."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "draft",
+			"display": _("Draft"),
+			"definition": _(
+				"The request is not yet 'actionable', e.g. it is a work in progress, requires sign-off, verification or needs to be run through decision support process."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+		{
+			"doctype": "Code Value",
+			"code_system": _("Medication Request Status"),
+			"code_value": "unknown",
+			"display": _("Unknown"),
+			"definition": _(
+				"The authoring/source system does not know which of the status values currently applies for this request. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, but the authoring/source system does not know which."
+			),
+			"official_url": "http://hl7.org/fhir/ValueSet/medicationrequest-status",
+		},
+	]
+
+
+def delete_custom_records():
+	"""Delete custom records inserted by Health app"""
+	records = get_item_group_records()
+	for record in records:
+		frappe.db.delete(record.get("doctype"), record.get("name"))
+
+	frappe.db.set_single_value("Portal Settings", "default_role", "")
+
+
+def remove_from_active_domains():
+	"""Remove Healthcare from active domains in Domain Settings"""
+	frappe.db.delete("Has Domain", {"domain": "Healthcare"})
+
+
+def remove_portal_settings_menu_items():
+	"""Remove menu items added in Portal Settings"""
+	menu_items = frappe.get_hooks("standard_portal_menu_items", app_name="healthcare")
+	for item in menu_items:
+		frappe.db.delete("Portal Menu Item", item)
--- /dev/null
+++ b/healthcare/uninstall.py
@@ -0,0 +1,28 @@
+import click
+
+import frappe
+
+from healthcare.setup import before_uninstall as remove_customizations
+
+
+def before_uninstall():
+	try:
+		print("Removing customizations created by Frappe Health...")
+		remove_customizations()
+
+	except Exception as e:
+		BUG_REPORT_URL = "https://github.com/frappe/health/issues/new"
+		click.secho(
+			"Removing Customizations for Frappe Health failed due to an error."
+			" Please try again or"
+			f" report the issue on {BUG_REPORT_URL} if not resolved.",
+			fg="bright_red",
+		)
+		raise e
+
+	click.secho("Frappe Health app customizations have been removed successfully...", fg="green")
+
+
+def after_uninstall():
+	print("Reset Portal Settings...")
+	frappe.get_doc("Portal Settings", "Portal Settings").reset()
index 09c11bd..a3a0774
--- a/healthcare/workspace/healthcare/healthcare.json
+++ b/healthcare/workspace/healthcare/healthcare.json
@@ -5,7 +5,7 @@
    "label": "Patient Appointments"
   }
  ],
- "content": "[{\"id\":\"9b831922c0\",\"type\":\"onboarding\",\"data\":{\"onboarding_name\":\"Healthcare\",\"col\":12}},{\"id\":\"f1f8e3812a\", \"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients\",\"col\":3}},{\"id\":\"326087361e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients Admitted\",\"col\":3}},{\"id\":\"264b39da0e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Open Appointments\",\"col\":3}},{\"id\":\"e507c90d85\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Appointments to Bill\",\"col\":3}},{\"id\":\"IPK_0OJyFF\",\"type\":\"chart\",\"data\":{\"chart_name\":\"Patient Appointments\",\"col\":12}},{\"id\":\"fKaNGh_f3X\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"LCsKfCbHFS\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Your Shortcuts</span>\",\"col\":12}},{\"id\":\"gtytowgpr9\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient Appointment\",\"col\":4}},{\"id\":\"cgh4dqonE3\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient\",\"col\":4}},{\"id\":\"pw8ECGStt-\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Service Unit\",\"col\":4}},{\"id\":\"irCA7TCgAO\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Practitioner\",\"col\":4}},{\"id\":\"wdgJqmB4mx\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient History\",\"col\":4}},{\"id\":\"oN5Gi4f4LN\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Dashboard\",\"col\":4}},{\"id\":\"QAyRuJGfxG\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"-K7NMpJiTM\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Reports &amp; Masters</span>\",\"col\":12}},{\"id\":\"M1PT6PedBj\",\"type\":\"card\",\"data\":{\"card_name\":\"Masters\",\"col\":4}},{\"id\":\"51eVEiCjvf\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation\",\"col\":4}},{\"id\":\"Mk_jHVQUPc\",\"type\":\"card\",\"data\":{\"card_name\":\"Orders\",\"col\":4}},{\"id\":\"PwTxarr1_m\",\"type\":\"card\",\"data\":{\"card_name\":\"Inpatient\",\"col\":4}},{\"id\":\"W-3YAoPKn-\",\"type\":\"card\",\"data\":{\"card_name\":\"Rehabilitation and Physiotherapy\",\"col\":4}},{\"id\":\"6cc3885df2\",\"type\":\"card\",\"data\":{\"card_name\":\"Diagnotics\",\"col\":4}},{\"id\":\"hMMLOCZpxJ\",\"type\":\"card\",\"data\":{\"card_name\":\"Nursing\",\"col\":4}},{\"id\":\"jC32DydzyL\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory\",\"col\":4}},{\"id\":\"AYDEjJSeTB\",\"type\":\"card\",\"data\":{\"card_name\":\"Medical Codes and Standards\",\"col\":4}},{\"id\":\"GvdoebZzcE\",\"type\":\"card\",\"data\":{\"card_name\":\"Service Units \",\"col\":4}},{\"id\":\"1f1f1a7b9e\",\"type\":\"card\",\"data\":{\"card_name\":\"Terminology Mapping\",\"col\":4}},{\"id\":\"rstxE68cTQ\",\"type\":\"card\",\"data\":{\"card_name\":\"Settings\",\"col\":4}},{\"id\":\"YnekHjQCia\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation Setup\",\"col\":4}},{\"id\":\"5J3nicaW1a\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory Setup\",\"col\":4}},{\"id\":\"zcOmhgxb5f\",\"type\":\"card\",\"data\":{\"card_name\":\"Reports\",\"col\":4}}]",
+ "content": "[{\"id\":\"f1f8e3812a\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients\",\"col\":3}},{\"id\":\"326087361e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Total Patients Admitted\",\"col\":3}},{\"id\":\"264b39da0e\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Open Appointments\",\"col\":3}},{\"id\":\"e507c90d85\",\"type\":\"number_card\",\"data\":{\"number_card_name\":\"Appointments to Bill\",\"col\":3}},{\"id\":\"IPK_0OJyFF\",\"type\":\"chart\",\"data\":{\"chart_name\":\"Patient Appointments\",\"col\":12}},{\"id\":\"fKaNGh_f3X\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"LCsKfCbHFS\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Your Shortcuts</span>\",\"col\":12}},{\"id\":\"gtytowgpr9\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient Appointment\",\"col\":4}},{\"id\":\"cgh4dqonE3\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient\",\"col\":4}},{\"id\":\"pw8ECGStt-\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Service Unit\",\"col\":4}},{\"id\":\"irCA7TCgAO\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Healthcare Practitioner\",\"col\":4}},{\"id\":\"wdgJqmB4mx\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Patient History\",\"col\":4}},{\"id\":\"oN5Gi4f4LN\",\"type\":\"shortcut\",\"data\":{\"shortcut_name\":\"Dashboard\",\"col\":4}},{\"id\":\"QAyRuJGfxG\",\"type\":\"spacer\",\"data\":{\"col\":12}},{\"id\":\"-K7NMpJiTM\",\"type\":\"header\",\"data\":{\"text\":\"<span class=\\\"h4\\\">Reports &amp; Masters</span>\",\"col\":12}},{\"id\":\"M1PT6PedBj\",\"type\":\"card\",\"data\":{\"card_name\":\"Masters\",\"col\":4}},{\"id\":\"51eVEiCjvf\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation\",\"col\":4}},{\"id\":\"Mk_jHVQUPc\",\"type\":\"card\",\"data\":{\"card_name\":\"Orders\",\"col\":4}},{\"id\":\"PwTxarr1_m\",\"type\":\"card\",\"data\":{\"card_name\":\"Inpatient\",\"col\":4}},{\"id\":\"W-3YAoPKn-\",\"type\":\"card\",\"data\":{\"card_name\":\"Rehabilitation and Physiotherapy\",\"col\":4}},{\"id\":\"6cc3885df2\",\"type\":\"card\",\"data\":{\"card_name\":\"Diagnotics\",\"col\":4}},{\"id\":\"hMMLOCZpxJ\",\"type\":\"card\",\"data\":{\"card_name\":\"Nursing\",\"col\":4}},{\"id\":\"jC32DydzyL\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory\",\"col\":4}},{\"id\":\"GvdoebZzcE\",\"type\":\"card\",\"data\":{\"card_name\":\"Service Units \",\"col\":4}},{\"id\":\"1f1f1a7b9e\",\"type\":\"card\",\"data\":{\"card_name\":\"Terminology Mapping\",\"col\":4}},{\"id\":\"rstxE68cTQ\",\"type\":\"card\",\"data\":{\"card_name\":\"Settings\",\"col\":4}},{\"id\":\"YnekHjQCia\",\"type\":\"card\",\"data\":{\"card_name\":\"Consultation Setup\",\"col\":4}},{\"id\":\"5J3nicaW1a\",\"type\":\"card\",\"data\":{\"card_name\":\"Laboratory Setup\",\"col\":4}},{\"id\":\"zcOmhgxb5f\",\"type\":\"card\",\"data\":{\"card_name\":\"Reports\",\"col\":4}}]",
  "creation": "2020-03-02 17:23:17.919682",
  "custom_blocks": [],
  "docstatus": 0,
@@ -79,69 +79,6 @@
    "onboard": 0,
    "type": "Link"
   },
-  {
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Consultation",
-   "link_count": 0,
-   "onboard": 0,
-   "type": "Card Break"
-  },
-  {
-   "dependencies": "",
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Patient Appointment",
-   "link_count": 0,
-   "link_to": "Patient Appointment",
-   "link_type": "DocType",
-   "onboard": 0,
-   "type": "Link"
-  },
-  {
-   "dependencies": "",
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Vital Signs",
-   "link_count": 0,
-   "link_to": "Vital Signs",
-   "link_type": "DocType",
-   "onboard": 0,
-   "type": "Link"
-  },
-  {
-   "dependencies": "",
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Patient Encounter",
-   "link_count": 0,
-   "link_to": "Patient Encounter",
-   "link_type": "DocType",
-   "onboard": 0,
-   "type": "Link"
-  },
-  {
-   "dependencies": "",
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Clinical Procedure",
-   "link_count": 0,
-   "link_to": "Clinical Procedure",
-   "link_type": "DocType",
-   "onboard": 0,
-   "type": "Link"
-  },
-  {
-   "dependencies": "",
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Fee Validity",
-   "link_count": 0,
-   "link_to": "Fee Validity",
-   "link_type": "DocType",
-   "onboard": 0,
-   "type": "Link"
-  },
   {
    "hidden": 0,
    "is_query_report": 0,
@@ -326,14 +263,6 @@
    "onboard": 0,
    "type": "Link"
   },
-  {
-   "hidden": 0,
-   "is_query_report": 0,
-   "label": "Records and History",
-   "link_count": 0,
-   "onboard": 0,
-   "type": "Card Break"
-  },
   {
    "dependencies": "",
    "hidden": 0,
@@ -730,10 +659,74 @@
    "link_type": "DocType",
    "onboard": 0,
    "type": "Link"
+  },
+  {
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Consultation",
+   "link_count": 5,
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Card Break"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Appointment",
+   "link_count": 0,
+   "link_to": "Patient Appointment",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Vital Signs",
+   "link_count": 0,
+   "link_to": "Vital Signs",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Patient Encounter",
+   "link_count": 0,
+   "link_to": "Patient Encounter",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "\u062a\u0642\u0627\u0631\u064a\u0631 \u0627\u0644\u0627\u0634\u0639\u0629",
+   "link_count": 0,
+   "link_to": "Clinical Procedure",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
+  },
+  {
+   "dependencies": "",
+   "hidden": 0,
+   "is_query_report": 0,
+   "label": "Fee Validity",
+   "link_count": 0,
+   "link_to": "Fee Validity",
+   "link_type": "DocType",
+   "onboard": 0,
+   "type": "Link"
   }
  ],
- "modified": "2023-11-03 22:28:13.437861",
- "modified_by": "Administrator",
+ "modified": "2024-08-30 16:37:42.587962",
+ "modified_by": "alaa@his.com",
  "module": "Healthcare",
  "name": "Healthcare",
  "number_cards": [
@@ -760,7 +753,7 @@
  "quick_lists": [],
  "restrict_to_domain": "Healthcare",
  "roles": [],
- "sequence_id": 13.0,
+ "sequence_id": 23.0,
  "shortcuts": [
   {
    "color": "Orange",
--- /dev/null
+++ b/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Medication Preparation", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.json
@@ -0,0 +1,296 @@
+{
+ "actions": [],
+ "autoname": "format:Mixing_{chemo_order}_{DD}.{#####}",
+ "creation": "2024-08-20 03:15:05.575433",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "section_break_ffss",
+  "__column_1",
+  "patient",
+  "patient_name",
+  "service_unit",
+  "prep_ph",
+  "check_ph",
+  "mix_ph",
+  "prepration_info_column",
+  "draw_valume",
+  "final_volume",
+  "dps",
+  "rate_num",
+  "rate",
+  "mixing_info_section",
+  "route",
+  "infusion_over",
+  "admin_date_time",
+  "column_break_kfkg",
+  "diluent",
+  "diluent_",
+  "diluent_volume",
+  "medications_section",
+  "medications",
+  "preparation_status_section",
+  "start_time",
+  "end_time",
+  "column_break_fpwv",
+  "status",
+  "refrence_section",
+  "chemo_order",
+  "reference_name",
+  "amended_from",
+  "column_break_wofe",
+  "invoiced"
+ ],
+ "fields": [
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1,
+   "set_only_once": 1
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service Unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "prepration_info_column",
+   "fieldtype": "Column Break",
+   "label": "Prepration Info"
+  },
+  {
+   "fieldname": "route",
+   "fieldtype": "Link",
+   "label": "Route",
+   "options": "Med Route",
+   "reqd": 1
+  },
+  {
+   "fieldname": "infusion_over",
+   "fieldtype": "Duration",
+   "hide_days": 1,
+   "hide_seconds": 1,
+   "label": "Infusion Over",
+   "reqd": 1
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "preparation_status_section",
+   "fieldtype": "Section Break",
+   "label": "Preparation Status"
+  },
+  {
+   "fieldname": "start_time",
+   "fieldtype": "Datetime",
+   "label": "Start Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "end_time",
+   "fieldtype": "Datetime",
+   "label": "End Time",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_fpwv",
+   "fieldtype": "Column Break"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_section",
+   "fieldtype": "Section Break",
+   "label": "Reference"
+  },
+  {
+   "fieldname": "chemo_order",
+   "fieldtype": "Link",
+   "label": "Chemo Order",
+   "options": "Chemo Order",
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fetch_from": "patient.ar_name",
+   "fieldname": "patient_name",
+   "fieldtype": "Data",
+   "label": "Patient Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "status",
+   "fieldtype": "Select",
+   "label": "Status",
+   "options": "Recived\nPrep Pending\nPrep InProgress\nPrep Complete\nQ Check\nQ Passed\nQ Failed\nAdministration\nStart Administration\nEnd Administration\nCompleted",
+   "read_only": 1
+  },
+  {
+   "fieldname": "final_volume",
+   "fieldtype": "Float",
+   "label": "Final Volume",
+   "non_negative": 1,
+   "read_only": 1
+  },
+  {
+   "fieldname": "admin_date_time",
+   "fieldtype": "Datetime",
+   "label": "Administarion Date & Time",
+   "reqd": 1
+  },
+  {
+   "fieldname": "__column_1",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "section_break_ffss",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "rate",
+   "fieldtype": "Data",
+   "label": "Rate",
+   "read_only": 1
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Referance Name",
+   "read_only": 1
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Medication Preparation",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "draw_valume",
+   "fieldtype": "Float",
+   "label": "Total quantity to be withdrawn",
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "dps",
+   "fieldtype": "Float",
+   "label": "Drop / 10 Sec (Dps)",
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "rate_num",
+   "fieldtype": "Float",
+   "label": "Rate Volume",
+   "non_negative": 1,
+   "precision": "2",
+   "read_only": 1
+  },
+  {
+   "fieldname": "prep_ph",
+   "fieldtype": "Link",
+   "label": "Prep Ph",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "check_ph",
+   "fieldtype": "Link",
+   "label": "Chek Ph ",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "mix_ph",
+   "fieldtype": "Link",
+   "label": "Mix Ph ",
+   "options": "Healthcare Practitioner"
+  },
+  {
+   "fieldname": "medications_section",
+   "fieldtype": "Section Break",
+   "label": "MEDICATIONS"
+  },
+  {
+   "fieldname": "medications",
+   "fieldtype": "Table",
+   "label": "Mixed Item",
+   "options": "Chemo Medication Preparation Items"
+  },
+  {
+   "fieldname": "mixing_info_section",
+   "fieldtype": "Section Break",
+   "label": "Mixing Info"
+  },
+  {
+   "fieldname": "column_break_kfkg",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "diluent",
+   "fieldtype": "Link",
+   "label": "Diluent",
+   "options": "Diluent",
+   "reqd": 1
+  },
+  {
+   "fieldname": "diluent_volume",
+   "fieldtype": "Float",
+   "label": "Diluent Volume",
+   "non_negative": 1,
+   "precision": "2",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_wofe",
+   "fieldtype": "Column Break"
+  },
+  {
+   "default": "0",
+   "fieldname": "invoiced",
+   "fieldtype": "Check",
+   "label": "Invoiced",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "diluent.acronym",
+   "fieldname": "diluent_",
+   "fieldtype": "Data",
+   "hidden": 1,
+   "label": "Diluent  Acrynom",
+   "read_only": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [],
+ "modified": "2024-09-20 18:33:30.257405",
+ "modified_by": "Administrator",
+ "module": "Oncology",
+ "name": "Chemo Medication Preparation",
+ "naming_rule": "By fieldname",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "patient"
+}
\ No newline at end of file
--- /dev/null
+++ b/oncology/doctype/chemo_medication_preparation/chemo_medication_preparation.py
@@ -0,0 +1,37 @@
+import frappe
+from frappe.model.document import Document
+
+class ChemoMedicationPreparation(Document):
+    def validate(self):
+        # Validate each medication's dose and volume in the child table
+        for med in self.medications:
+            if med.med_dose <= 0 or med.med_volume_mi__total_vial_volume <= 0:
+                frappe.throw(f"Medication dose and volume for {med.medication} should be set to a positive value before continuing.")
+            
+            # Validate that required dose is greater than 0
+            if med.required_dose <= 0:
+                frappe.throw(f"Required dose for {med.medication} should be a valid positive dose.")
+
+    def before_save(self):
+        self.calculate_mixing_items()
+        # Debugging message (use with caution in production)
+        # frappe.msgprint(f"Infusion over: {self.infusion_over}")
+
+        # Debugging message (use with caution in production)
+        # frappe.msgprint(f"Final volume calculated: {self.final_volume}")
+
+    def calculate_mixing_items(self):
+        total_withdraw = 0.0
+        for med in self.medications:
+            # Calculate quantity to be withdrawn for each medication
+            med.the_quantity_to_be_withdrawn = (med.required_dose * med.med_volume_mi__total_vial_volume) / med.med_dose
+            total_withdraw += med.the_quantity_to_be_withdrawn
+        
+        self.draw_valume =   total_withdraw
+        # Calculate final volume
+        self.final_volume = total_withdraw + self.diluent_volume
+
+        # Convert the volume to ml/hr and calculate the rate
+        self.dps = round((self.final_volume / self.infusion_over) * 200, 1)  # 20 drops for each 10 seconds
+        self.rate_num = round(self.final_volume / (self.infusion_over / 3600), 1)
+        self.rate = f"{self.rate_num} ml/hr == {self.dps} Dps/10 Sec"
--- /dev/null
+++ b/oncology/doctype/chemo_medication_preparation/test_chemo_medication_preparation.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoMedicationPreparation(FrappeTestCase):
+	pass
--- /dev/null
+++ b/oncology/doctype/chemo_order/chemo_order.js
@@ -0,0 +1,8 @@
+// Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+// For license information, please see license.txt
+
+// frappe.ui.form.on("Chemo Order", {
+// 	refresh(frm) {
+
+// 	},
+// });
--- /dev/null
+++ b/oncology/doctype/chemo_order/chemo_order.json
@@ -0,0 +1,314 @@
+{
+ "actions": [],
+ "allow_rename": 1,
+ "autoname": "format:{protocol_name}-{patient}-{DD}{MM}{YY}.{#####}",
+ "creation": "2024-07-02 05:15:21.509355",
+ "doctype": "DocType",
+ "engine": "InnoDB",
+ "field_order": [
+  "order_details",
+  "patient",
+  "healthcare_practitioner",
+  "visit_date",
+  "full_name",
+  "gender",
+  "birth_date",
+  "column_break_azjb",
+  "allergy",
+  "diagnosis",
+  "stage",
+  "column_break_cxji",
+  "weight",
+  "height",
+  "bsa",
+  "ecog_score",
+  "service_unit",
+  "order_details_section",
+  "protocol_name",
+  "column_break_aepk",
+  "cycle_no",
+  "cycle_no_written",
+  "previous_cycle_aes",
+  "column_break_ebvk",
+  "date",
+  "pre_medications_section",
+  "pre_meds",
+  "anti_cancer_drugs_section",
+  "patients_anti_cancer_drugs",
+  "section_break_taax",
+  "notes",
+  "refrence_info_section",
+  "inpatient_record",
+  "reference_name",
+  "column_break_omjt",
+  "reference_doc",
+  "section_break_2ktq",
+  "amended_from"
+ ],
+ "fields": [
+  {
+   "fieldname": "order_details",
+   "fieldtype": "Section Break",
+   "label": "Patient Details"
+  },
+  {
+   "fieldname": "patient",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "label": "Patient",
+   "options": "Patient",
+   "reqd": 1,
+   "search_index": 1
+  },
+  {
+   "fieldname": "healthcare_practitioner",
+   "fieldtype": "Link",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Healthcare Practitioner",
+   "options": "Healthcare Practitioner",
+   "reqd": 1
+  },
+  {
+   "fieldname": "visit_date",
+   "fieldtype": "Datetime",
+   "label": "Visit Date"
+  },
+  {
+   "fetch_from": "patient.patient_name",
+   "fieldname": "full_name",
+   "fieldtype": "Data",
+   "label": "Name",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.sex",
+   "fieldname": "gender",
+   "fieldtype": "Data",
+   "label": "Gender",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.dob",
+   "fieldname": "birth_date",
+   "fieldtype": "Data",
+   "label": "Birth Date",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_azjb",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fetch_from": "patient.allergies",
+   "fieldname": "allergy",
+   "fieldtype": "Small Text",
+   "label": "Allergy",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.diagnosis",
+   "fieldname": "diagnosis",
+   "fieldtype": "Small Text",
+   "label": "Diagnosis",
+   "read_only": 1
+  },
+  {
+   "fetch_from": "patient.stage",
+   "fieldname": "stage",
+   "fieldtype": "Data",
+   "label": "Stage",
+   "read_only": 1
+  },
+  {
+   "fieldname": "column_break_cxji",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "weight",
+   "fieldtype": "Data",
+   "label": "Weight"
+  },
+  {
+   "fieldname": "height",
+   "fieldtype": "Data",
+   "label": "Height"
+  },
+  {
+   "fieldname": "bsa",
+   "fieldtype": "Data",
+   "label": "BSA"
+  },
+  {
+   "fieldname": "ecog_score",
+   "fieldtype": "Data",
+   "label": "ECOG Score"
+  },
+  {
+   "fieldname": "service_unit",
+   "fieldtype": "Link",
+   "label": "Service unit",
+   "options": "Healthcare Service Unit"
+  },
+  {
+   "fieldname": "order_details_section",
+   "fieldtype": "Section Break",
+   "label": "Order Details"
+  },
+  {
+   "fieldname": "protocol_name",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Protocol Name",
+   "reqd": 1
+  },
+  {
+   "fieldname": "column_break_aepk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "cycle_no",
+   "fieldtype": "Int",
+   "in_list_view": 1,
+   "in_standard_filter": 1,
+   "label": "Cycle No.",
+   "reqd": 1
+  },
+  {
+   "fieldname": "cycle_no_written",
+   "fieldtype": "Data",
+   "in_list_view": 1,
+   "label": "Cycle No Written"
+  },
+  {
+   "fieldname": "previous_cycle_aes",
+   "fieldtype": "Data",
+   "label": "Previous Cycle  AEs"
+  },
+  {
+   "fieldname": "column_break_ebvk",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "date",
+   "fieldtype": "Date",
+   "label": "Date"
+  },
+  {
+   "fieldname": "pre_medications_section",
+   "fieldtype": "Section Break",
+   "label": "Pre Medications"
+  },
+  {
+   "columns": 10,
+   "fieldname": "pre_meds",
+   "fieldtype": "Table",
+   "label": "Patients Pre Medications list",
+   "options": "Pre Medication Sheet"
+  },
+  {
+   "fieldname": "anti_cancer_drugs_section",
+   "fieldtype": "Section Break",
+   "label": "Anti Cancer Drugs"
+  },
+  {
+   "columns": 10,
+   "fieldname": "patients_anti_cancer_drugs",
+   "fieldtype": "Table",
+   "label": "Patients Anti Cancer Drugs",
+   "options": "Anti Cancer Drug  Sheet"
+  },
+  {
+   "fieldname": "section_break_taax",
+   "fieldtype": "Section Break",
+   "label": "Review Notes"
+  },
+  {
+   "fieldname": "notes",
+   "fieldtype": "Text Editor",
+   "label": "Notes"
+  },
+  {
+   "collapsible": 1,
+   "fieldname": "refrence_info_section",
+   "fieldtype": "Section Break",
+   "hidden": 1,
+   "label": "Refrence Info"
+  },
+  {
+   "fieldname": "inpatient_record",
+   "fieldtype": "Link",
+   "label": "Inpatient Record",
+   "options": "Inpatient Record"
+  },
+  {
+   "fieldname": "reference_name",
+   "fieldtype": "Data",
+   "label": "Reference Name",
+   "search_index": 1
+  },
+  {
+   "fieldname": "column_break_omjt",
+   "fieldtype": "Column Break"
+  },
+  {
+   "fieldname": "reference_doc",
+   "fieldtype": "Link",
+   "label": "Reference Doc",
+   "options": "DocType"
+  },
+  {
+   "fieldname": "section_break_2ktq",
+   "fieldtype": "Section Break"
+  },
+  {
+   "fieldname": "amended_from",
+   "fieldtype": "Link",
+   "label": "Amended From",
+   "no_copy": 1,
+   "options": "Chemo Order",
+   "print_hide": 1,
+   "read_only": 1,
+   "search_index": 1
+  }
+ ],
+ "index_web_pages_for_search": 1,
+ "is_submittable": 1,
+ "links": [
+  {
+   "link_doctype": "Vital Signs",
+   "link_fieldname": "patient",
+   "table_fieldname": "patient"
+  },
+  {
+   "link_doctype": "Chemo Medication Preparation",
+   "link_fieldname": "chemo_order"
+  }
+ ],
+ "modified": "2024-09-20 19:49:28.184495",
+ "modified_by": "Administrator",
+ "module": "Oncology",
+ "name": "Chemo Order",
+ "naming_rule": "Expression (old style)",
+ "owner": "Administrator",
+ "permissions": [
+  {
+   "create": 1,
+   "delete": 1,
+   "email": 1,
+   "export": 1,
+   "print": 1,
+   "read": 1,
+   "report": 1,
+   "role": "System Manager",
+   "share": 1,
+   "submit": 1,
+   "write": 1
+  }
+ ],
+ "sort_field": "modified",
+ "sort_order": "DESC",
+ "states": [],
+ "title_field": "full_name"
+}
\ No newline at end of file
--- /dev/null
+++ b/oncology/doctype/chemo_order/chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and contributors
+# For license information, please see license.txt
+
+# import frappe
+from frappe.model.document import Document
+
+
+class ChemoOrder(Document):
+	pass
--- /dev/null
+++ b/oncology/doctype/chemo_order/test_chemo_order.py
@@ -0,0 +1,9 @@
+# Copyright (c) 2024, earthians Health Informatics Pvt. Ltd. and Contributors
+# See license.txt
+
+# import frappe
+from frappe.tests.utils import FrappeTestCase
+
+
+class TestChemoOrder(FrappeTestCase):
+	pass
--- a/public/dist/js/healthcare.bundle.MROHHRGB.js
+++ /dev/null
@@ -1,665 +0,0 @@
-(()=>{frappe.provide("frappe.ui.form");frappe.ui.form.PatientQuickEntryForm=class extends frappe.ui.form.QuickEntryForm{constructor(e,a,i,n,r){super(e,a,i,n,r),this.skip_redirect_on_error=!0}render_dialog(){let e=this.mandatory.filter(a=>!this.get_standard_fields().map(i=>i.fieldname).includes(a.fieldname));this.mandatory=this.get_standard_fields(),this.mandatory.splice(3,0,...e),super.render_dialog()}get_standard_fields(){return[{label:__("First Name"),fieldname:"first_name",fieldtype:"Data"},{label:__("Middle Name"),fieldname:"middle_name",fieldtype:"Data"},{label:__("last Name"),fieldname:"last_name",fieldtype:"Data"},{fieldtype:"Section Break",collapsible:0},{label:__("Gender"),fieldname:"sex",fieldtype:"Link",options:"Gender"},{label:__("Blood Group"),fieldname:"blood_group",fieldtype:"Select",options:frappe.meta.get_docfield("Patient","blood_group").options},{fieldtype:"Column Break"},{label:__("Birth Date"),fieldname:"dob",fieldtype:"Date"},{label:__("Identification Number (UID)"),fieldname:"uid",fieldtype:"Data"},{fieldtype:"Section Break",label:__("Primary Contact"),collapsible:1},{label:__("Email Id"),fieldname:"email",fieldtype:"Data",options:"Email"},{label:__("Invite as User"),fieldname:"invite_user",fieldtype:"Check"},{fieldtype:"Column Break"},{label:__("Mobile Number"),fieldname:"mobile",fieldtype:"Data",options:"Phone"},{fieldtype:"Section Break",label:__("Primary Address"),collapsible:1},{label:__("Address Line 1"),fieldname:"address_line1",fieldtype:"Data"},{label:__("Address Line 2"),fieldname:"address_line2",fieldtype:"Data"},{label:__("ZIP Code"),fieldname:"pincode",fieldtype:"Data"},{fieldtype:"Column Break"},{label:__("City"),fieldname:"city",fieldtype:"Data"},{label:__("State"),fieldname:"state",fieldtype:"Data"},{label:__("Country"),fieldname:"country",fieldtype:"Link",options:"Country"}]}};frappe.provide("healthcare");healthcare.Observation=class{constructor(e){$.extend(this,e)}refresh(){var e=this;this.notes_wrapper.find(".observation-section").remove(),frappe.run_serially([()=>frappe.call({method:"healthcare.healthcare.doctype.observation.observation.get_observation_details",args:{docname:e.frm.doc.name},freeze:!0,callback:function(a){let i=a.message||[],n=frappe.render_template("observation",{observation_details:i,create_observation:e.create_observation});$(n).appendTo(e.observation_wrapper)}}),()=>{e.add_observations(),$(".observations").find(".edit-observation-btn").on("click",function(){e.edit_observation(this)}),document.getElementById("result-text").onchange=function(){e.frm.dirty()},$(".observations").find(".result-text").change(function(){e.frm.dirty()})}])}add_observations(){let e=this,a=()=>{var i=new frappe.ui.Dialog({title:__("Add Observation"),fields:[{label:"Observation Template",fieldname:"observation_template",fieldtype:"Link",options:"Observation Template",reqd:1},{label:"Permitted Data Type",fieldname:"permitted_data_type",fieldtype:"Data",read_only:1},{label:"Result Text",fieldname:"result_text",fieldtype:"Text Editor",depends_on:"eval:doc.permitted_data_type=='Text'"},{label:"Result Float",fieldname:"result_float",fieldtype:"Float",depends_on:"eval:['Quantity', 'Numeric'].includes(doc.permitted_data_type)"},{label:"Result Data",fieldname:"result_data",fieldtype:"Data",depends_on:"eval:['Range', 'Ratio'].includes(doc.permitted_data_type)"}],primary_action:function(){var n=i.get_values(),r="";["Range","Ratio"].includes(n.permitted_data_type)?r=n.result_data:["Quantity","Numeric"].includes(n.permitted_data_type)?r=n.result_float:n.permitted_data_type=="Text"&&(r=n.result_text),frappe.call({method:"healthcare.healthcare.doctype.observation.observation.add_observation",args:{patient:e.frm.doc.patient,template:n.observation_template,data_type:n.permitted_data_type||"",result:r,doc:e.frm.doc.doctype,docname:e.frm.doc.name},freeze:!0,callback:function(o){o.exc||e.refresh(),i.hide()}})},primary_action_label:__("Add Observation")});i.fields_dict.observation_template.df.onchange=()=>{i.get_value("observation_template")&&frappe.db.get_value("Observation Template",{name:i.get_value("observation_template")},["permitted_data_type","has_component"],n=>{n.permitted_data_type&&!n.has_component&&i.set_value("permitted_data_type",n.permitted_data_type)})},i.show()};$(".new-observation-btn").click(a)}edit_observation(e){var a=this;let i=$(e).closest(".observation"),n=i.attr("name"),r=i.attr("addatatype"),o=$(i).find(".result-content").html().trim();var s=new frappe.ui.Dialog({title:__("Edit Observation"),fields:[{label:"Observation",fieldname:"observation",fieldtype:"Link",options:"Observation",default:n,read_only:1},{label:"Permitted Data Type",fieldname:"permitted_data_type",fieldtype:"Data",read_only:1,default:r},{label:"Result Text",fieldname:"result_text",fieldtype:"Text Editor",depends_on:"eval:doc.permitted_data_type=='Text'",default:o},{label:"Result Float",fieldname:"result_float",fieldtype:"Float",depends_on:"eval:['Quantity', 'Numeric'].includes(doc.permitted_data_type)",default:o},{label:"Result Data",fieldname:"result_data",fieldtype:"Data",depends_on:"eval:['Range', 'Ratio'].includes(doc.permitted_data_type)",default:o}],primary_action:function(){var l=s.get_values(),d="";["Range","Ratio"].includes(l.permitted_data_type)?d=l.result_data:["Quantity","Numeric"].includes(l.permitted_data_type)?d=l.result_float:l.permitted_data_type=="Text"&&(d=l.result_text),frappe.call({method:"healthcare.healthcare.doctype.observation.observation.edit_observation",args:{observation:l.observation,data_type:l.permitted_data_type||"",result:d},freeze:!0,callback:function(c){c.exc||(a.refresh(),s.hide())}})},primary_action_label:__("Edit")});s.show()}};frappe.templates.observation=`<div class="observation-section">
-	<div class="new-btn pb-3">
-		<span>
-			<button class="btn btn-sm small new-observation-btn mr-1">
-				<svg class="icon icon-sm">
-					<use href="#icon-add"></use>
-				</svg>
-				{{ __("New Observation") }}
-			</button>
-		</span>
-	</div>
-	<div class="observation-details row" style="width: 100%; color:rgb(169, 169, 169); padding-left: 35px;">
-		<div style="width: 20%;">
-			{{ __("Observation") }}
-		</div>
-		<div style="width: 19%;">
-			{{ __("Date Time") }}
-		</div>
-		<div style="padding-left:30px; padding-right:10px; width: 20%;">
-			{{ __("Result") }}
-		</div>
-		<div style="width: 7%;">
-			{{ __("UOM") }}
-		</div>
-		<div style="width: 20%;">
-			{{ __("Method") }}
-		</div>
-		<div style="width: 10%;">
-			{{ __("Reference Range") }}
-		</div>
-	</div>
-	<div class="section-body">
-		<div class="observations pr-1">
-			{% if (observation_details && observation_details.length) { %}
-				{% for(var i=0, l=observation_details.length; i<l; i++) { %}
-					{% if (observation_details[i].observation || observation_details[i].template_reference) { %}
-						<div class="observation" style="width: 100%;" name="{{ observation_details[i].observation.name }}" addatatype="{{ observation_details[i].observation.permitted_data_type }}">
-							<div class="observation-details row">
-								<div style="width: 20%;">
-									<a href="/app/observation/{{ observation_details[i].observation.name }}" title="{{ __('Observation') }}">
-										{% if (observation_details[i].template_reference.preferred_display_name) { %}
-											{%= observation_details[i].template_reference.preferred_display_name %}
-										{% } else { %}
-											{%= observation_details[i].observation.observation_template %}
-										{% } %}
-									</a>
-								</div>
-								<div style="width: 19%;">
-									{% if (observation_details[i].observation.posting_datetime) { %}
-										{{ frappe.datetime.global_date_format(observation_details[i].observation.posting_datetime) }}
-									{% } %}
-								</div>
-								<div class="result" style="width: 20%;">
-									{% if( ['Range', 'Ratio'].includes(observation_details[i].observation.permitted_data_type)) { %}
-										<div class="text-muted  ml-1 result-content">
-											<input type="text" id="result-text" name="fname" size="6" value="">
-											{%= observation_details[i].observation.result_data %}
-									{% } else if (['Quantity', 'Numeric'].includes(observation_details[i].observation.permitted_data_type)) { %}
-										<div class="text-muted ml-1 result-content">
-											<input type="text" id="result-text" name="fname" size="6" value="">
-											{%= observation_details[i].observation.result_float %}
-
-									{% } else if (observation_details[i].observation.permitted_data_type=='Text') { %}
-										<div class="text-muted ml-1 result-content">
-											<input type="text" id="result-text" name="fname" size="6" value="">
-											{%= observation_details[i].observation.result_text %}
-									{% } %}
-									</div>
-								</div>
-								<div style="width: 7%;">
-									{% if (observation_details[i].template_reference) { %}
-										{%= observation_details[i].template_reference.permitted_unit %}
-									{% } %}
-								</div>
-								<div style="width: 20%;">
-									{% if (observation_details[i].template_reference) { %}
-										{%= observation_details[i].template_reference.method %}
-									{% } %}
-								</div>
-								<div style="width: 10%;">
-									{% if (observation_details[i].template_reference) { %}
-										{{observation_details[i].template_reference.normal_from}}-{{observation_details[i].template_reference.normal_to}}
-									{% } %}
-								</div>
-								<div style="width: 1%;">
-									<span class="edit-observation-btn btn btn-link">
-										<svg class="icon icon-sm"><use xlink:href="#icon-edit"></use></svg>
-									</span>
-								</div>
-					</div>
-				</div>
-					{% } else { %}
-					{% for (let key in observation_details[i]) { %}
-					<div class="grouped-obs">
-							<div class="flex justify-between" style="padding-bottom: 10px;">
-									<b>
-										<a href="/app/observation/{{ key.split('|')[1] }}" title="{{ __('Grouped Observations') }}">
-											{%= key.split("|")[0] %}
-										</a>
-									</b>
-							</div>
-							{% for(var j=0, k=observation_details[i][key].length; j<k; j++) { %}
-								{% if (observation_details[i][key][j].observation || observation_details[i][key][j].template_reference) { %}
-									<div class="observation" name="{{ observation_details[i][key][j].observation.name }}" addatatype="{{ observation_details[i][key][j].observation.permitted_data_type }}">
-										<div class="observation-details row" style="width: 100%;">
-											<div style="width: 20%;">
-												<a href="/app/observation/{{ observation_details[i][key][j].observation.name }}" title="{{ __('Observation') }}">
-													{% if (observation_details[i][key][j].template_reference.preferred_display_name) { %}
-														{%= observation_details[i][key][j].template_reference.preferred_display_name %}
-													{% } else { %}
-														{%= observation_details[i][key][j].observation.observation_template %}
-													{% } %}
-												</a>
-											</div>
-											<div style="width: 19%;">
-												{% if (observation_details[i][key][j].observation.posting_datetime) { %}
-													{{ frappe.datetime.global_date_format(observation_details[i][key][j].observation.posting_datetime) }}
-												{% } %}
-											</div>
-											<div class="result" style="padding-left:30px; padding-right:10px; width: 23%;">
-												{% if( ['Range', 'Ratio'].includes(observation_details[i][key][j].observation.permitted_data_type)) { %}
-													<div class="text-muted  ml-1 result-content">
-														<input class="result-text" type="text" id="result-text" name="fname" size="6" value="">
-														{%= observation_details[i][key][j].observation.result_data %}
-												{% } else if (['Quantity', 'Numeric'].includes(observation_details[i][key][j].observation.permitted_data_type)) { %}
-													<div class="text-muted ml-1 result-content">
-														<input class="result-text" type="text" id="result-text" name="fname" size="6" value="">
-														{%= observation_details[i][key][j].observation.result_float %}
-												{% } else if (observation_details[i][key][j].observation.permitted_data_type=='Text') { %}
-													<div class="text-muted ml-1 result-content">
-														<input class="result-text" type="text" id="result-text" name="fname" size="6" value="">
-														{%= observation_details[i][key][j].observation.result_text %}
-												{% } %}
-												</div>
-											</div>
-											<div style="width: 7%;">
-												{% if (observation_details[i][key][j].template_reference) { %}
-													{%= observation_details[i][key][j].template_reference.permitted_unit %}
-												{% } %}
-											</div>
-											<div style="width: 20%;">
-												{% if (observation_details[i][key][j].template_reference) { %}
-													{%= observation_details[i][key][j].template_reference.method %}
-												{% } %}
-											</div>
-											<div style="width: 10%;">
-												{% if (observation_details[i][key][j].template_reference) { %}
-													{{observation_details[i][key][j].template_reference.normal_from}}-{{observation_details[i][key][j].template_reference.normal_to}}
-												{% } %}
-											</div>
-											<div style="width: 1%;">
-												<span class="edit-observation-btn btn btn-link">
-													<svg class="icon icon-sm"><use xlink:href="#icon-edit"></use></svg>
-												</span>
-											</div>
-									</div>
-								</div>
-								{% } %}
-							{% } %}
-							</div>
-					{% } %}
-					{% } %}
-			    {% } %}
-            {% } else { %}
-			<div class="no-obs text-muted">
-                    {{ __("No Observations") }}
-                </div>
-		    {% } %}
-		</div>
-	</div>
-</div>
-	</div>
-</div>
-</div>
-</div>
-
-
-<style>
-.observation-section {
-	min-height: 50px;
-	padding-left: 0px;
-	padding-bottom: 15px !important;
-}
-
-.observation-section .new-btn {
-	text-align: right;
-}
-
-.observation {
-	min-height: 90px;
-	border: 1px solid var(--border-color);
-	padding-right: 0;
-	font-size: 11px;
-	padding-left: 15px;
-	padding-top: 35px;
-	margin-bottom: 25px;
-	border-radius: 10px;
-}
-
-.grouped-obs {
-	border: 1px solid var(--border-color);
-	padding-right: 15px;
-	font-size: 11px;
-	padding-left: 15px;
-	padding-top: 15px;
-	margin-bottom: 25px;
-	border-radius: 10px;
-}
-
-.single-activity:last-child {
-	border-bottom: 1px solid var(--border-color);
-}
-
-.checkbox {
-	min-width: 22px;
-}
-
-.observations {
-	width: 100%;
-}
-
-.observations:first-child {
-	border-right: 0;
-}
-
-.no-obs {
-    text-align: center;
-    padding: 30px;
-}
-
-.form-footer {
-	background-color: var(--bg-color);
-}
-
-.observation-details {
-	padding-left: 14px;
-	padding-right: 14px;
-}
-
-
-</style>`;frappe.provide("healthcare.Diagnostic.DiagnosticReport");healthcare.Diagnostic.DiagnosticReport=class{constructor(e){$.extend(this,e)}refresh(){var e=this;this.ObservationWidgets=[],frappe.call({method:"healthcare.healthcare.doctype.observation.observation.get_observation_details",args:{docname:e.frm.doc.name},freeze:!0,callback:function(a){e.create_widget(a);let i=[],n=document.querySelectorAll(".input-with-feedback");for(let r=0;r<n.length;r++)i.push(n[r]);document.addEventListener("keydown",function(r){let o=document.activeElement,s=0,l=0;for(let d in i)i.hasOwnProperty(d)&&i.includes(o)&&(s=i.indexOf(o));["ArrowDown","Enter"].includes(r.key)?l=s+1:r.key==="ArrowUp"&&(l=s-1),i[l]&&i[l].focus()})}}),e.save_action("load")}create_widget(e){var a=this;if(e&&e.message[0]){this.result=[];for(let i in e.message[0])a.ObservationWidgets[i]=new healthcare.ObservationWidget({wrapper:a.observation_wrapper,data:e.message[0][i],frm:a.frm,result:this.result})}}save_action(e){var a=this;e=="save"&&frappe.call({method:"healthcare.healthcare.doctype.observation.observation.record_observation_result",args:{values:this.result},freeze:!0,callback:function(i){}})}};frappe.provide("healthcare.ObservationWidget");healthcare.ObservationWidget=class{constructor(t){$.extend(this,t),this.init_widget()}init_widget(){var t=this;if(t.data.has_component||t.data.has_component=="true"){if(!t.wrapper.find(`.${t.data.observation}`).length==0)return;let n=`<div class="${t.data.observation} grouped-obs"
-					style="
-						border: 1px solid var(--border-color);
-						padding-right: 0;
-						font-size: 11px;
-						padding-left: 15px;
-						padding-top: 5px;
-						padding-bottom: 5px;
-						margin-bottom: 3px;
-						border-radius: 10px;
-						background-color:var(--bg-color);">
-						<b>
-						<a href="/app/observation/${t.data.observation}">
-							${t.data.display_name}
-						</a>
-						</b></div>`;t.wrapper.append(n);let r=t.wrapper.find(`.${t.data.observation}`);for(var e=0,a=t.data[t.data.observation].length;e<a;e++){var i=t.data[t.data.observation][e].observation;r.append(`<div class="observations-${i.name} observs"
-						style="border: 1px solid var(--border-color);
-						padding-right: 0;
-						font-size: 11px;
-						padding-left: 15px;
-						margin-right: 15px;
-						padding-bottom: 5px;
-						margin-bottom: 3px;
-						border-radius: var(--border-radius-md);
-						background-color: var(--fg-color);
-						box-shadow: var(--card-shadow);"
-						value=${i.name}>
-					</div>`),t.init_field_group(i,r.find(`.observations-${i.name}`))}}else{if(!t.wrapper.find(`.observations-${t.data.observation.name}`).length==0)return;if(t.wrapper.append(`<div class="grouped-obs"
-					style="me.data.observation
-						border: 1px solid var(--border-color);
-						padding-right: 0;
-						font-size: 11px;
-						padding-left: 15px;
-						padding-top: 5px;
-						padding-bottom: 5px;
-						margin-bottom: 3px;
-						border-radius: 10px;
-						background-color:var(--bg-color);">
-					<div class="observations-${t.data.observation.name} observs"
-						style="border: 1px solid var(--border-color);
-						padding-right: 0;
-						font-size: 11px;
-						padding-left: 15px;
-						margin-right: 15px;
-						border-radius: var(--border-radius-md);
-						background-color: var(--fg-color);
-						box-shadow: var(--card-shadow);"
-						value=${t.data.observation.name}>
-					</div>
-				</div>`),t.data.observation.name){var i=t.data.observation;t.init_field_group(i,t.wrapper.find(`.observations-${t.data.observation.name}`)),t.$widget=t.wrapper.find(".grouped-obs")}}t.$widget=t.wrapper.find(".grouped-obs")}init_field_group(t,e){var a=this,i="";["Range","Ratio","Quantity","Numeric"].includes(t.permitted_data_type)?i=t.result_data:t.permitted_data_type=="Text"&&(i=m(t.result_text));let n="Data",r="";t.permitted_data_type=="Select"&&(n="Select",r=t.options,i=t.result_select),a[t.name]=new frappe.ui.FieldGroup({fields:[{fieldtype:"Section Break"},{fieldname:"observation",fieldtype:"HTML"},{fieldname:"note_button",fieldtype:"HTML"},{fieldtype:"Column Break"},{fieldname:"specimen",fieldtype:"HTML"},{fieldtype:"Column Break"},{fieldname:"result",fieldtype:n,options:r,read_only:t.status=="Approved",change:o=>{a.frm.dirty(),a.set_result_n_name(t.name)},default:i,hidden:t.observation_category=="Imaging"},{fieldname:"result_date",fieldtype:"HTML",hidden:t.observation_category=="Imaging"},{fieldtype:"Column Break"},{fieldname:"unit",fieldtype:"HTML"},{fieldname:"method",fieldtype:"HTML"},{fieldtype:"Column Break"},{fieldname:"reference",fieldtype:"HTML"},{fieldtype:"Column Break"},{fieldname:"auth_btn",fieldtype:"HTML"},{fieldtype:"Section Break"},{fieldname:"note_text",fieldtype:"Text",read_only:1},{fieldtype:"Section Break",hidden:t.observation_category!="Imaging"},{label:__("Findings"),fieldname:"findings",fieldtype:"Button",click:()=>a.add_finding_interpretation(t,"Findings")},{fieldname:"findings_text",fieldtype:"Text",read_only:1},{fieldtype:"Column Break"},{label:__("Interpretation"),fieldname:"interpretation",fieldtype:"Button",click:()=>a.add_finding_interpretation(t,"Interpretation")},{fieldname:"result_interpretation",fieldtype:"Text",read_only:1}],body:e}),a[t.name].make(),a.set_values(this,t)}set_values(t,e){var a=this;let i=`<div class="observation-name obs-field" style="font-size:10px; padding-top:20px;" value="{{observation_details.observation.name}}">
-			<a href="/app/observation/${e.name}" title="${e.name}">`;e.preferred_display_name?i+=e.preferred_display_name:i+=e.observation_template,i+=`</a>
-		<div>`,a[e.name].get_field("observation").html(i);let n='<div class="text-muted" style="font-size:10px; padding-top:20px;">';e.specimen&&(n+='<a href="/app/specimen/{{ observation_details.observation.specimen }}" title="{{ observation_details.observation.specimen }}">',n+=e.specimen+"</a>"),n+=`</div>
-			<div class="text-muted" style="font-size: 8px;">`,e.received_time&&(n+=frappe.datetime.global_date_format(e.received_time)),n+="</div>",a[e.name].get_field("specimen").html(n);let r=`<div class="text-muted" style="font-size:8px; margin-top:-12px;">${e.time_of_result?frappe.datetime.global_date_format(e.time_of_result):""}</div>`;a[e.name].get_field("result_date").html(r);let o=`<div style="display:flex"><div style="font-size:10px; padding-top:20px; padding-right:45px; width:10%;">${e.permitted_unit?e.permitted_unit:""}</div>`;o+='<div class="text-muted" style="font-size:10px; padding-top:20px;">',e.method&&(o+=`${e.method}`),o+="</div></div>",a[e.name].get_field("unit").html(o);let s='<div style="display:flex;"><div class="text-muted" style="font-size:10px; padding-top:20px;">';e.reference&&(s+=`${e.reference}`),s+="</div>",a[e.name].get_field("reference").html(s);let l="";if(["Approved"].includes(e.status)){if(e.status=="Approved"){l+=`<div style="float:right;">
-				<button class="btn btn-xs btn-del btn-secondary small" id="unauthorise-observation-btn-${e.name}">
-				<span class="btn-observ" style="font-size:10px;">Disapprove</span>
-				</button>`,l+="</div></div>",a[e.name].get_field("auth_btn").html(l);var d=document.getElementById(`unauthorise-observation-btn-${e.name}`);d.addEventListener("click",function(){a.auth_observation(e.name,"Disapproved")})}}else{l+=`<div style="float:right;">
-				<button class="btn btn-xs btn-secondary small" id="authorise-observation-btn-${e.name}">
-				<span style="font-size:10px;">Approve</span>
-				</button>`,l+="</div></div>",a[e.name].get_field("auth_btn").html(l);var d=document.getElementById(`authorise-observation-btn-${e.name}`);d.addEventListener("click",function(){a.auth_observation(e.name,"Approved")})}let c=`<div><span class="add-note-observation-btn btn btn-link"
-			id="add-note-observation-btn-${e.name}">
-			<svg class="icon icon-sm"><use xlink:href="#icon-small-message"></use></svg>
-			</span>`;c+="</div>",a[e.name].get_field("note_button").html(c);var _=document.getElementById(`add-note-observation-btn-${e.name}`);_.addEventListener("click",function(){a.add_note(e.name,e.note)}),e.note&&a[e.name].set_value("note_text",e.note),e.observation_category=="Imaging"&&(a[e.name].set_value("findings_text",e.result_text),a[e.name].set_value("result_interpretation",e.result_interpretation))}set_result_n_name(t){var e=this;let a=e[t].get_values();a.observation=t;let i=e.result.some(r=>r.observation===t);for(var n of e.result)t==n.observation&&(n.result=a.result);i||e.result.push(a)}add_note(t,e){var a=this;let i=t,n=a[t].get_value("note_text")||e;var r=new frappe.ui.Dialog({title:__("Add Note"),static:!0,fields:[{label:__("Observation"),fieldname:"observation",fieldtype:"Link",options:"Observation",default:i,hidden:1},{label:__("Note"),fieldname:"note",fieldtype:"Text Editor",default:n}],primary_action:function(){a.frm.dirty();var o=r.get_values();a[t].set_value("note_text",o.note),a.result.length>0?a.result.forEach(function(s){s.observation==t&&(s.note=o.note)}):a.result.push({observation:t,note:o.note}),r.hide()},primary_action_label:__("Add Note")});r.show(),r.get_close_btn().show()}auth_observation(t,e){var a=this;if(e=="Approved")frappe.confirm(__("Are you sure you want to authorise Observation <b>"+t+"</b>"),function(){frappe.call({method:"healthcare.healthcare.doctype.observation.observation.set_observation_status",args:{observation:t,status:e},callback:function(n){a.frm.reload_doc()}})});else if(e=="Disapproved"){var i=new frappe.ui.Dialog({title:__("Reason For Disapproval"),fields:[{label:__("Reason"),fieldname:"unauthorisation_reason",fieldtype:"Text",reqd:1}],primary_action:function(){var n=i.get_values();frappe.call({method:"healthcare.healthcare.doctype.observation.observation.set_observation_status",args:{observation:t,status:e,reason:n.unauthorisation_reason},freeze:!0,callback:function(r){r.exc||a.frm.reload_doc(),i.hide()}})},primary_action_label:__("Disapprove")});i.show()}}add_finding_interpretation(t,e){var a=this;let i="",n="";e=="Findings"?(i=t.result_template,n=a[t.name].get_value("result_text")||t.result_text):e=="Interpretation"&&(i=t.interpretation_template,n=a[t.name].get_value("result_interpretation")||t.result_interpretation);var r=new frappe.ui.Dialog({title:__(e),static:!0,fields:[{label:"Observation",fieldname:"observation",fieldtype:"Link",options:"Observation",default:t.name,hidden:1},{label:"Template",fieldname:"template",fieldtype:"Link",options:"Terms and Conditions",default:i},{label:"Note",fieldname:"note",fieldtype:"Text Editor",default:n}],primary_action:function(){a.frm.dirty();var o=r.get_values();let s={};var l=[];s.observation=t.name,s.result="",e=="Findings"?(s.result=o.note,a[t.name].set_value("findings_text",o.note)):e=="Interpretation"&&(s.interpretation=o.note,a[t.name].set_value("result_interpretation",o.note)),r.hide(),l.push(s),a.result.push(s)},primary_action_label:__("Add")});(!n||n=="")&&r.get_values("template")&&p(r),r.fields_dict.template.df.onchange=()=>{let o=/<p>(.*?)<\/p>/,s=r.get_value("note").match(o),l=s?s[1]:null;r.get_value("template")&&(!l||l=="<br>")&&p(r)},r.show(),r.get_close_btn().show()}};var m=function(t){if(t&&t.includes("</div>")){var e=document.createElement("div");e.innerHTML=t;var a=e.querySelector("p");return a.textContent}else return t},p=function(t){t.get_value("template")&&frappe.call({method:"healthcare.healthcare.doctype.observation.observation.get_observation_result_template",args:{template_name:t.get_value("template"),observation:t.get_value("observation")},callback:function(e){t.set_value("note",e.message)}})};frappe.provide("healthcare");healthcare.ClinicalNotes=class{constructor(e){$.extend(this,e)}refresh(){var e=this;this.notes_wrapper.find(".clinical-notes-section").remove(),frappe.run_serially([()=>frappe.call({method:"get_clinical_notes",doc:e.frm.doc,args:{patient:e.frm.doc.patient},freeze:!0,callback:function(a){let i=a.message||[],n=frappe.render_template("healthcare_note",{clinical_notes:i});$(n).appendTo(e.notes_wrapper)}}),()=>{e.add_clinical_note(),$(".clinical-notes-section").find(".edit-note-btn").on("click",function(){e.edit_clinical_note(this)}),$(".clinical-notes-section").find(".delete-note-btn").on("click",function(){e.delete_clinical_note(this)})}])}add_clinical_note(){let e=this,a=()=>{var i=new frappe.ui.Dialog({title:__("Add Clinical Note"),fields:[{label:"Clinical Note Type",fieldname:"note_type",fieldtype:"Link",options:"Clinical Note Type"},{label:"Note",fieldname:"note",fieldtype:"Text Editor",reqd:1,enable_mentions:!0}],primary_action:function(){var n=i.get_values();frappe.call({method:"add_clinical_note",doc:e.frm.doc,args:{note:n.note,note_type:n.note_type},freeze:!0,callback:function(r){r.exc||e.refresh(),i.hide()}})},primary_action_label:__("Add")});i.show()};$(".new-note-btn").click(a)}edit_clinical_note(e){var a=this;let i=$(e).closest(".comment-content"),n=i.attr("name"),r=$(i).find(".note-type").html().trim(),o=$(i).find(".content").html();var s=new frappe.ui.Dialog({title:__("Edit Clinical Note"),fields:[{label:"Clinical Note Type",fieldname:"note_type",fieldtype:"Link",options:"Clinical Note Type",default:r},{label:"Note",fieldname:"note",fieldtype:"Text Editor",default:o}],primary_action:function(){var l=s.get_values();frappe.call({method:"edit_clinical_note",doc:a.frm.doc,args:{note:l.note,note_name:n},freeze:!0,callback:function(d){d.exc||(a.refresh(),s.hide())}})},primary_action_label:__("Done")});s.show()}delete_clinical_note(e){var a=this;let i=$(e).closest(".comment-content").attr("name");frappe.confirm("Are you sure you want to proceed?",()=>{frappe.call({method:"delete_clinical_note",doc:a.frm.doc,args:{note_name:i},freeze:!0,callback:function(n){n.exc||a.refresh()}})})}};healthcare.Orders=class{constructor(e){$.extend(this,e)}refresh(){var e=this;$(this.open_activities_wrapper).empty();let a=this.form_wrapper.find(".form-footer");frappe.call({method:"get_encounter_details",doc:e.frm.doc,args:{},callback:i=>{if(!i.exc){var n=frappe.render_template("healthcare_orders",{service_requests:i.message[1],medication_requests:i.message[0],create_orders:e.create_orders,show_encounter:this.show_encounter});$(n).appendTo(e.open_activities_wrapper),$(".service-request").find(".service-request-onhold").on("click",function(){e.update_status(this,"Service Request","On Hold")}),$(".service-request").find(".service-request-active").on("click",function(){e.update_status(this,"Service Request","Active")}),$(".service-request").find(".order-cancel").on("click",function(){e.update_status(this,"Service Request","Cancel")}),$(".service-request").find(".service-request-replace").on("click",function(){e.update_status(this,"Service Request","Replaced")}),$(".medication-request").find(".service-request-onhold").on("click",function(){e.update_status(this,"Medication Request","On Hold")}),$(".medication-request").find(".service-request-active").on("click",function(){e.update_status(this,"Medication Request","Active")}),$(".medication-request").find(".order-cancel").on("click",function(){e.update_status(this,"Medication Request","Cancel")}),$(".medication-request").find(".service-request-replace").on("click",function(){e.update_status(this,"Medication Request","Replaced"),e.create_medication_request()}),e.create_service_request(),e.create_medication_request()}}})}create_service_request(){let e=this,a=()=>{var i=new frappe.ui.Dialog({title:__("Create Service Request"),fields:[{label:"Order Template Type",fieldname:"order_template_type",fieldtype:"Link",options:"DocType",reqd:1,get_query:()=>({filters:{name:["in",["Therapy Type","Lab Test Template","Clinical Procedure Template","Observation Template"]]}})},{label:"Order Template",fieldname:"order_template",fieldtype:"Dynamic Link",options:"order_template_type",depends_on:"eval:doc.order_template_type;",reqd:1},{fetch_from:"order_template.medical_department",fieldname:"department",fieldtype:"Link",label:"Department",options:"Medical Department",depends_on:"eval:doc.order_template_type=='Clinical Procedure Template';"},{fieldname:"column_break_4",fieldtype:"Column Break",depends_on:"eval:doc.order_template_type=='Lab Test Template';"},{fieldname:"practitioner",fieldtype:"Link",label:"Referred to Practitioner",options:"Healthcare Practitioner",depends_on:"eval:doc.order_template_type=='Clinical Procedure Template';"},{fieldname:"date",fieldtype:"Date",label:"Date",depends_on:"eval:doc.order_template_type=='Clinical Procedure Template';"},{fieldname:"description",fieldtype:"Small Text",label:"Comments",depends_on:"eval:['Lab Test Template', 'Clinical Procedure Template'].includes(doc.order_template_type);"},{fieldname:"no_of_sessions",fieldtype:"Int",label:"No of Sessions",depends_on:"eval:doc.order_template_type=='Therapy Type';"}],primary_action:function(){var n=i.get_values();frappe.call({method:"healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_service_request_from_widget",args:{encounter:e.frm.doc.name,data:n},freeze:!0,callback:function(r){r.exc||(e.refresh(),i.hide())}})},primary_action_label:__("Create")});i.show()};$(".new-service-request-btn").click(a)}create_medication_request(){let e=this,a=()=>{var i=new frappe.ui.Dialog({title:__("Create Medication Request"),fields:[{fieldname:"medication",fieldtype:"Link",in_list_view:1,label:"Medication",options:"Medication",onchange:function(n){frappe.call({method:"healthcare.healthcare.doctype.patient_encounter.patient_encounter.get_medications",freeze:!0,args:{medication:i.get_value("medication")},callback:function(r){if(r.message){if(r.message.length==1)i.set_value("drug_code",r.message[0].item);else if(r.message.length>1){i.set_value("drug_code","");var o=r.message.map(({item:s})=>s);i.fields_dict.drug_code.get_query=function(){return{filters:{name:["in",o]}}}}}}}),frappe.db.get_value("Medication",i.get_value("medication"),["default_prescription_dosage","default_prescription_duration","dosage_form","default_interval","default_interval_uom","strength","strength_uom"]).then(r=>{let o=r.message;i.set_values({dosage:o.default_prescription_dosage,period:o.default_prescription_duration,dosage_form:o.dosage_form,interval:o.default_interval,interval_uom:o.default_interval_uom,strength:o.strength,strength_uom:o.strength_uom})})}},{fieldname:"drug_code",fieldtype:"Link",ignore_user_permissions:1,label:"Drug Code",options:"Item"},{fetch_from:"medication.default_prescription_duration",fieldname:"period",fieldtype:"Link",label:"Period",options:"Prescription Duration",reqd:1},{fetch_from:"medication.dosage_form",fieldname:"dosage_form",fieldtype:"Link",label:"Dosage Form",options:"Dosage Form",reqd:1},{depends_on:"eval:!doc.dosage_by_interval",fetch_from:"medication.default_prescription_dosage",fieldname:"dosage",fieldtype:"Link",label:"Dosage",mandatory_depends_on:"eval:!doc.dosage_by_interval",options:"Prescription Dosage"},{fieldname:"column_break_7",fieldtype:"Column Break"},{fieldname:"description",fieldtype:"Small Text",label:"Comment"},{fetch_from:"medication.strength",fieldname:"strength",fieldtype:"Float",label:"Strength",read_only_depends_on:"eval: doc.medication"},{depends_on:"strength",fetch_from:"medication.strength_uom",fieldname:"strength_uom",fieldtype:"Link",label:"Strength UOM",options:"UOM",read_only_depends_on:"eval: doc.medication"},{fieldname:"number_of_repeats_allowed",fieldtype:"Float",label:"Number Of Repeats Allowed"},{default:"0",fieldname:"dosage_by_interval",fieldtype:"Check",label:"Dosage by Time Interval"},{fieldname:"section_break_7",fieldtype:"Section Break",depends_on:"eval:doc.dosage_by_interval"},{depends_on:"eval:doc.dosage_by_interval",fetch_from:"medication.default_interval",fieldname:"interval",fieldtype:"Int",label:"Interval",mandatory_depends_on:"eval:doc.dosage_by_interval"},{depends_on:"eval:doc.dosage_by_interval",fetch_from:"medication.default_interval_uom",fieldname:"interval_uom",fieldtype:"Select",label:"Interval UOM",mandatory_depends_on:"eval:doc.dosage_by_interval",options:`
-Hour
-Day`}],primary_action:function(){var n=i.get_values();frappe.call({method:"healthcare.healthcare.doctype.patient_encounter.patient_encounter.create_service_request_from_widget",args:{encounter:e.frm.doc.name,data:n,medication_request:!0},freeze:!0,callback:function(r){r.exc||(e.refresh(),i.hide())}})},primary_action_label:__("Create")});i.show()};$(".new-medication-btn").click(a)}async update_status(e,a,i){let n=this,r="";a=="Service Request"?r=$(e).closest(".service-request"):r=$(e).closest(".medication-request");let o=r.attr("name");i=="Cancel"?frappe.confirm("Are you sure you want to proceed?",()=>{frappe.call({method:"healthcare.healthcare.doctype.patient_encounter.patient_encounter.cancel_request",freeze:!0,args:{doctype:a,request:o},callback:function(s){s&&!s.exc&&n.refresh()}})}):(await frappe.db.set_value(a,o,"status",i),n.refresh())}};frappe.templates.healthcare_note=`<div class="clinical-notes-section col-xs-12">
-	<div class="new-btn pb-3">
-		<button class="btn btn-sm small new-note-btn mr-1">
-			<svg class="icon icon-sm">
-				<use href="#icon-add"></use>
-			</svg>
-			{{ __("New Clinical Note") }}
-		</button>
-	</div>
-	<div class="all-clinical-notes">
-		{% if (clinical_notes.length) { %}
-			{% for(var i=0, l=clinical_notes.length; i<l; i++) { %}
-				<div class="comment-content p-3 row" name="{{ clinical_notes[i].name }}">
-					<div class="mb-2 head col-xs-3">
-						<div class="row">
-							<div class="col-xs-2">
-								{{ frappe.avatar(clinical_notes[i].user) }}
-							</div>
-							<div class="col-xs-10">
-								<div class="mr-2 title font-weight-bold">
-									{{ strip_html(clinical_notes[i].added_by) }}
-								</div>
-								<div class="time small text-muted">
-									{{ frappe.datetime.global_date_format(clinical_notes[i].posting_date) }}<br>
-									{{ clinical_notes[i].practitioner }}<br>
-									<div class="note-type">
-										{{ clinical_notes[i].clinical_note_type }}
-									</div>
-								</div>
-							</div>
-						</div>
-					</div>
-					<div class="content col-xs-8">
-						{{ clinical_notes[i].note }}
-					</div>
-					<div class="col-xs-1 text-right">
-						<span class="edit-note-btn btn btn-link">
-							<svg class="icon icon-sm"><use xlink:href="#icon-edit"></use></svg>
-						</span>
-						<span class="delete-note-btn  btn btn-link pl-2">
-							<svg class="icon icon-xs"><use xlink:href="#icon-delete"></use></svg>
-						</span>
-					</div>
-				</div>
-			{% } %}
-		{% } else { %}
-            <div class="no-clinical-notes text-muted pt-6">
-                {{ __("No Clinical Notes") }}
-            </div>
-		    {% } %}
-	</div>
-</div>
-
-<style>
-
-.comment-content {
-    border: 1px solid var(--border-color);
-	border-bottom: none;
-}
-
-.comment-content:last-child {
-    border-bottom: 1px solid var(--border-color);
-}
-
-.new-btn {
-	text-align: right;
-}
-
-.clinical-notes-section .no-clinical-notes {
-	min-height: 100px;
-	text-align: center;
-}
-
-.clinical-notes-section .btn {
-	padding: 0.2rem 0.2rem;
-}
-
-</style>`;frappe.templates.healthcare_orders=`<div class="orders">
-	<div class="new-btn pb-3">
-		{% if (create_orders) { %}
-		<span>
-			<button class="btn btn-sm small new-service-request-btn mr-1">
-				<svg class="icon icon-sm">
-					<use href="#icon-add"></use>
-				</svg>
-				{{ __("New Service Request") }}
-			</button>
-			<button class="btn btn-sm small new-medication-btn">
-				<svg class="icon icon-sm">
-					<use href="#icon-add"></use>
-				</svg>
-				{{ __("New Medication Request") }}
-			</button>
-		</span>
-		{% } %}
-	</div>
-	<div class="section-body">
-		<div class="service-requests pr-1">
-			<div class="open-section-head">
-				<span class="ml-2">{{ __("Service Requests") }}</span>
-			</div>
-			{% if (service_requests && service_requests.length) { %}
-				{% for(var i=0, l=service_requests.length; i<l; i++) { %}
-					<div class="service-request" name="{{ service_requests[i].name }}">
-						<div class="flex justify-between">
-							<div class="row label-area font-md ml-1">
-								<span class="mr-2">
-									<svg class="icon icon-sm">
-										<use href="#icon-menu"></use>
-									</svg>
-								</span>
-								<a href="/app/service-request/{{ service_requests[i].name }}" title="{{ __('Service Requests') }}">
-									{%= service_requests[i].name %}
-								</a> - <span style="font-size: 10px;">{{service_requests[i].order_group}}</span>
-							</div>
-							<div class="colo-sm-2" style="float:right; padding-right:10px; padding-top:10px; padding-bottom:10px;">
-								{% if(service_requests[i].billing_status=="Invoiced") { %}
-									<div class="invoiced">
-										{{ __("Invoiced") }}
-									</div>
-								{% } %}
-								<button data-toggle="dropdown" aria-haspopup="true" aria-expanded="true" class="btn btn-xs btn-secondary order-btn">
-									{%= service_requests[i].status %}
-								</button>
-								<ul class="dropdown-menu dropdown-menu-right"
-									style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(-172px, 26px, 0px);"
-									x-placement="bottom-end">
-									{% if(service_requests[i].status == "Active") { %}
-									<li><a class="dropdown-item service-request-onhold" data-action="on-hold">{{ __("On Hold") }}</a></li>
-									<li><a class="dropdown-item service-request-replace" data-action="replace">{{ __("Replace") }}</a></li>
-									{% } else if (service_requests[i].status == "On Hold") { %}
-									<li><a class="dropdown-item service-request-active" data-action="active">{{ __("Active") }}</a></li>
-									{% } %}
-									{% if(service_requests[i].docstatus == 1 && service_requests[i].status == "Active") { %}
-									<li><a class="dropdown-item order-cancel" data-action="cancel">{{ __("Cancel") }}</a></li>
-									{% } %}
-								</ul>
-								</div>
-						</div>
-						<div class="service-request-details row" style="width: 100%;">
-							<div class="mb-2 head col-xs-3">
-								<div class="row">
-									<div class="col-xs-2">
-										{{ frappe.avatar(service_requests[i].practitioner_email) }}
-									</div>
-									<div class="col-xs-10">
-										<div class="time small text-muted">
-											{{ frappe.datetime.global_date_format(service_requests[i].order_date) }} {{ service_requests[i].order_time }}<br>
-											{{ service_requests[i].practitioner_name }}
-										</div>
-									</div>
-								</div>
-							</div>
-							 <div style="padding-bottom:20px; padding-left:30px; padding-right:10px;">
-								{% if(service_requests[i].template_dt) { %}
-									<div class="text-muted  ml-1">
-										{{ __("Order Type:") }}
-										<b>{%= service_requests[i].template_dt %}</b>
-									</div>
-								{% } %}
-								{% if(service_requests[i].template_dn) { %}
-									<div class="text-muted ml-1">
-										{{ __("Order Name:") }}
-										<b>{%= service_requests[i].template_dn %}</b>
-									</div>
-								{% } %}
-							 </div>
-						</div>
-						{% if(service_requests[i].lab_details) { %}
-						<div class="text-muted lab-details">
-							{%= service_requests[i].lab_details %}
-						</div>
-					{% } %}
-				</div>
-			    {% } %}
-            {% } else { %}
-			<div class="no-orders text-muted">
-                    {{ __("No Service Requests") }}
-                </div>
-		    {% } %}
-		</div>
-		<div class="medication-requests pr-1">
-			<div class="open-section-head">
-				<span class="ml-2">{{ __("Medication Requests") }}</span>
-			</div>
-			{% if (medication_requests && medication_requests.length) { %}
-				{% for(var i=0, l=medication_requests.length; i<l; i++) { %}
-					<div class="medication-request" name="{{ medication_requests[i].name }}">
-						<div class="flex justify-between">
-							<div class="row label-area font-md ml-1">
-								<span class="mr-2">
-									<svg class="icon icon-sm">
-										<use href="#icon-menu"></use>
-									</svg>
-								</span>
-								<a href="/app/medication-request/{{ medication_requests[i].name }}" title="{{ __('Medication Requests') }}">
-									{%= medication_requests[i].name %}
-								</a> - <span style="font-size: 10px;">{{medication_requests[i].order_group}}</span>
-							</div>
-							<div class="colo-sm-2" style="float:right; padding-right:10px; padding-top:10px; padding-bottom:10px;">
-								{% if(medication_requests[i].billing_status=="Invoiced") { %}
-									<div class= "invoiced" style="float: left; padding-right: 10px;">
-										{{ __("Invoiced") }}
-									</div>
-								{% } %}
-								<button data-toggle="dropdown" aria-haspopup="true" aria-expanded="true" class="btn btn-xs btn-secondary order-btn">
-									{%= medication_requests[i].status %}
-									</button>
-									<ul class="dropdown-menu dropdown-menu-right"
-									style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(-172px, 26px, 0px);"
-									x-placement="bottom-end">
-									{% if(medication_requests[i].status == "Active") { %}
-									<li><a class="dropdown-item service-request-onhold" data-action="on-hold">{{ __("On Hold") }}</a></li>
-									<li><a class="dropdown-item service-request-replace" data-action="replace">{{ __("Replace") }}</a></li>
-									{% } else if (medication_requests[i].status == "On Hold") { %}
-									<li><a class="dropdown-item service-request-active" data-action="active">{{ __("Active") }}</a></li>
-									{% } %}
-									{% if(medication_requests[i].docstatus == 1 && medication_requests[i].status == "Active") { %}
-									<li><a class="dropdown-item order-cancel" data-action="cancel">{{ __("Cancel") }}</a></li>
-									{% } %}
-								</ul>
-								</div>
-						</div>
-						<div class="medication-request-details row" style="width: 100%;">
-							<div class="mb-2 head col-xs-3">
-								<div class="row">
-									<div class="col-xs-2">
-										{{ frappe.avatar(medication_requests[i].practitioner_email) }}
-									</div>
-									<div class="col-xs-10">
-										<div class="time small text-muted">
-											{{ frappe.datetime.global_date_format(medication_requests[i].order_date) }}-{{medication_requests[i].order_time}}<br>
-											{{ medication_requests[i].practitioner_name }}
-										</div>
-									</div>
-								</div>
-							</div>
-							<div style="padding-bottom:20px; padding-right:10px;">
-								{% if(medication_requests[i].medication) { %}
-									<div class="text-muted  ml-1">
-										{{ __("Medication:") }}
-										<b>{%= medication_requests[i].medication %}</b>
-									</div>
-								{% } %}
-								{% if(medication_requests[i].period) { %}
-								<div class="text-muted  ml-1">
-									{{ __("Period:") }}
-									<b>{%= medication_requests[i].period %}</b>
-								</div>
-								{% } %}
-							 </div>
-							 <div style="padding-bottom:20px; padding-left:30px; padding-right:10px;">
-								{% if(medication_requests[i].dosage_form) { %}
-									<div class="text-muted  ml-1">
-										{{ __("Dosage Form:") }}
-										<b>{%= medication_requests[i].dosage_form %}</b>
-									</div>
-								{% } %}
-								{% if(medication_requests[i].dosage) { %}
-									<div class="text-muted  ml-1">
-										{{ __("Dosage:") }}
-										<b>{%= medication_requests[i].dosage %}</b>
-									</div>
-								{% } %}
-							 </div>
-							 <div style="padding-bottom:20px; padding-left:30px; padding-right:10px;">
-								{% if(medication_requests[i].quantity) { %}
-									<div class="text-muted  ml-1">
-										{{ __("Quantity:") }}
-										<b>{%= medication_requests[i].quantity %}</b>
-									</div>
-								{% } %}
-							 </div>
-						</div>
-				</div>
-			    {% } %}
-            {% } else { %}
-			<div class="no-orders text-muted">
-                    {{ __("No Medication Requests") }}
-                </div>
-		    {% } %}
-		</div>
-</div>
-
-
-<style>
-.orders {
-	min-height: 50px;
-	padding-left: 0px;
-	padding-bottom: 15px !important;
-}
-
-.orders .new-btn {
-	text-align: right;
-}
-
-.service-request, .medication-request {
-	min-height: 90px;
-	border: 1px solid var(--border-color);
-	padding-right: 0;
-	font-size: 11px;
-	padding-left: 5px;
-	padding-top: 10px;
-}
-
-.single-activity:last-child {
-	border-bottom: 1px solid var(--border-color);
-}
-
-.checkbox {
-	min-width: 22px;
-}
-
-.service-requests {
-	width: 100%;
-}
-
-.service-requests:first-child {
-	border-right: 0;
-}
-
-.medication-requests {
-	width: 100%;
-}
-
-.open-section-head {
-	background-color: var(--bg-color);
-	min-height: 30px;
-	border-bottom: 1px solid var(--border-color);
-	padding: 10px;
-	font-weight: bold;
-}
-
-.no-orders {
-    text-align: center;
-    padding: 30px;
-}
-
-.form-footer {
-	background-color: var(--bg-color);
-}
-
-.lab-details {
-	font-size: 10px;
-	padding-left: 4px;
-	padding-right: 12px;
-	width: 100%;
-}
-
-.service-request-details, .medication-request-details {
-	padding-left: 14px;
-	padding-right: 14px;
-}
-
-.invoiced {
-	float: left;
-	padding-right: 10px;
-	color:rgb(163, 160, 160)
-}
-
-</style>`;})();
-//# sourceMappingURL=healthcare.bundle.MROHHRGB.js.map
index fd74dc5..e69de29
--- a/public/js/service_request.js
+++ b/public/js/service_request.js
@@ -1,154 +0,0 @@
-
-frappe.ui.form.on(cur_frm.doctype, { // nosemgrep
-    onload: function(frm) {
-        if (frm.doc.__islocal) {
-			frm.set_value('order_time', frappe.datetime.now_time())
-		}
-    },
-
-    refresh: function(frm) {
-		frm.set_query('order_group', function () {
-			return {
-				filters: {
-					'docstatus': 1,
-					'patient': frm.doc.patient,
-					'practitioner': frm.doc.ordered_by
-				}
-			};
-		});
-
-		frm.set_query('patient', function () {
-			return {
-				filters: {
-					'status': 'Active'
-				}
-			};
-		});
-
-		frm.set_query('staff_role', function () {
-			return {
-				filters: {
-					'restrict_to_domain': 'Healthcare'
-				}
-			};
-		});
-
-		frm.set_query('priority', function () {
-			return {
-				filters: {
-					code_system: 'Priority'
-				}
-			};
-		});
-
-		frm.set_query('intent', function () {
-			return {
-				filters: {
-					code_system: 'Intent'
-				}
-			};
-		});
-
-		frm.trigger('setup_status_buttons');
-	},
-
-	setup_status_buttons: function(frm) {
-		var status_types = {
-			"Service Request": "Request Status",
-			"Medication Request": "Medication Request Status"
-		};
-
-		var type = status_types[frm.doc.doctype] || "";
-		var revoke = (frm.doc.doctype == "Service Request" ? "revoked-" : "cancelled-") + type;
-		var active = "active-" + type;
-		var on_hold = "on-hold-" + type;
-		var entered_in_error = "entered-in-error-" + type;
-		var unknown = "unknown-" + type;
-
-		if (frm.doc.docstatus === 1) {
-			if (frm.doc.status === active) {
-				frm.add_custom_button(__('On Hold'), function() {
-					frm.events.set_status(frm, on_hold);
-				}, __('Status'));
-			} else if (frm.doc.status === on_hold) {
-				frm.add_custom_button(__('Active'), function() {
-					frm.events.set_status(frm, active);
-				}, __('Status'));
-			}
-		} else if (frm.doc.docstatus === 2) {
-			frm.add_custom_button(__('Revoked'), function() {
-				frm.events.set_status(frm, revoke);
-			}, __('Status'));
-
-			frm.add_custom_button(__('Entered in Error'), function() {
-				frm.events.set_status(frm, entered_in_error);
-			}, __('Status'));
-
-			frm.add_custom_button(__('Unknown'), function() {
-				frm.events.set_status(frm, unknown);
-			}, __('Status'));
-		}
-	},
-
-    set_status: function(frm, status) {
-		frappe.call({
-			method: 'healthcare.controllers.service_request_controller.set_request_status',
-			async: false,
-			freeze: true,
-			args: {
-				doctype: frm.doctype,
-				request: frm.doc.name,
-				status: status
-			},
-			callback: function(r) {
-				if (!r.exc) frm.reload_doc();
-			}
-		});
-	},
-
-    after_cancel: function(frm) {
-		frappe.prompt([
-			{
-				fieldname: 'reason_for_cancellation',
-				label: __('Reason for Cancellation'),
-				fieldtype: 'Select',
-				options: [
-					{ label: "Revoked", value: "revoked-Request Status" },
-					{ label: "Entered in Error", value: "entered-in-error-Request Status" },
-					{ label: "Unknown", value:"unknown-Request Status"},
-				],
-				reqd: 1
-			}
-		],
-		function(data) {
-			frm.events.set_status(frm, data.reason_for_cancellation);
-		}, __('Reason for Cancellation'), __('Submit'));
-	},
-
-    patient: function(frm) {
-		if (!frm.doc.patient) {
-			frm.set_values ({
-				'patient_name': '',
-				'gender': '',
-				'patient_age': '',
-				'mobile': '',
-				'email': '',
-				'inpatient_record': '',
-				'inpatient_status': '',
-			});
-		}
-	},
-
-    birth_date: function(frm) {
-		let age_str = calculate_age(frm.doc.birth_date);
-		frm.set_value('patient_age', age_str);
-	}
-});
-
-let calculate_age = function(birth) {
-	let ageMS = Date.parse(Date()) - Date.parse(birth);
-	let age = new Date();
-	age.setTime(ageMS);
-	let years =  age.getFullYear() - 1970;
-	return `${years} ${__('Years(s)')} ${age.getMonth()} ${__('Month(s)')} ${age.getDate()} ${__('Day(s)')}`;
-};
\ No newline at end of file
